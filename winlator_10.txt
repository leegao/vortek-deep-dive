# Processing files: /home/leegao/Downloads/Winlator_10.0.apk
  Staging directories: Winlator_10.0.apk_1338655795
  $ jadx -d Winlator_10.0.apk_1338655795 -e /home/leegao/Downloads/Winlator_10.0.apk
  + __path__.txt
    /home/leegao/Downloads/Winlator_10.0.apk
  + app/build.gradle
    plugins {
        id 'com.android.application'
    }
    
    android {
        compileSdkVersion 30
        buildToolsVersion "30.0.2"
    
        defaultConfig {
            applicationId 'com.winlator'
            minSdkVersion 26
            targetSdkVersion 28
            versionCode 24
            versionName "10.0 (Hotfix)"
    
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }
    
        buildTypes {
            release {
                minifyEnabled false
     ... (truncated) ...
  + app/src/main/AndroidManifest.xml
    <?xml version="1.0" encoding="utf-8"?>
    <manifest xmlns:android="http://schemas.android.com/apk/res/android"
        android:versionCode="24"
        android:versionName="10.0 (Hotfix)"
        android:compileSdkVersion="34"
        android:compileSdkVersionCodename="14"
        package="com.winlator"
        platformBuildVersionCode="34"
        platformBuildVersionName="14">
        <uses-sdk
            android:minSdkVersion="26"
            android:targetSdkVersion="28"/>
        <uses-feature
            android:glEsVersion="0x20000"
            android:required="true"/>
        <uses-permission android:name="android.permission.INTERNET"/>
        <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
        <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
        <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
        <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
        <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS"/>
     ... (truncated) ...
  + app/src/main/META-INF/androidx.activity_activity.version
  + app/src/main/META-INF/androidx.annotation_annotation-experimental.version
  + app/src/main/META-INF/androidx.appcompat_appcompat-resources.version
  + app/src/main/META-INF/androidx.appcompat_appcompat.version
  + app/src/main/META-INF/androidx.arch.core_core-runtime.version
  + app/src/main/META-INF/androidx.cardview_cardview.version
  + app/src/main/META-INF/androidx.coordinatorlayout_coordinatorlayout.version
  + app/src/main/META-INF/androidx.core_core.version
  + app/src/main/META-INF/androidx.cursoradapter_cursoradapter.version
  + app/src/main/META-INF/androidx.customview_customview.version
  + app/src/main/META-INF/androidx.documentfile_documentfile.version
  + app/src/main/META-INF/androidx.drawerlayout_drawerlayout.version
  + app/src/main/META-INF/androidx.dynamicanimation_dynamicanimation.version
  + app/src/main/META-INF/androidx.fragment_fragment.version
  + app/src/main/META-INF/androidx.interpolator_interpolator.version
  + app/src/main/META-INF/androidx.legacy_legacy-support-core-utils.version
  + app/src/main/META-INF/androidx.lifecycle_lifecycle-livedata-core.version
  + app/src/main/META-INF/androidx.lifecycle_lifecycle-livedata.version
  + app/src/main/META-INF/androidx.lifecycle_lifecycle-runtime.version
  + app/src/main/META-INF/androidx.lifecycle_lifecycle-viewmodel-savedstate.version
  + app/src/main/META-INF/androidx.lifecycle_lifecycle-viewmodel.version
  + app/src/main/META-INF/androidx.loader_loader.version
  + app/src/main/META-INF/androidx.localbroadcastmanager_localbroadcastmanager.version
  + app/src/main/META-INF/androidx.preference_preference.version
  + app/src/main/META-INF/androidx.print_print.version
  + app/src/main/META-INF/androidx.recyclerview_recyclerview.version
  + app/src/main/META-INF/androidx.savedstate_savedstate.version
  + app/src/main/META-INF/androidx.transition_transition.version
  + app/src/main/META-INF/androidx.vectordrawable_vectordrawable-animated.version
  + app/src/main/META-INF/androidx.vectordrawable_vectordrawable.version
  + app/src/main/META-INF/androidx.versionedparcelable_versionedparcelable.version
  + app/src/main/META-INF/androidx.viewpager2_viewpager2.version
  + app/src/main/META-INF/androidx.viewpager_viewpager.version
  + app/src/main/META-INF/com.google.android.material_material.version
  + app/src/main/META-INF/com/android/build/gradle/app-metadata.properties
  + app/src/main/assets/box64/box64-0.3.2.tzst
  + app/src/main/assets/box64/box64-0.3.4.tzst
  + app/src/main/assets/box64_env_vars.json
    [
        {"name" : "BOX64_DYNAREC_SAFEFLAGS", "values" : ["0", "1", "2"], "defaultValue" : "2"},
        {"name" : "BOX64_DYNAREC_FASTNAN", "values" : ["0", "1"], "toggleSwitch" : true, "defaultValue" : "1"},
        {"name" : "BOX64_DYNAREC_FASTROUND", "values" : ["0", "1", "2"], "defaultValue" : "1"},
        {"name" : "BOX64_DYNAREC_X87DOUBLE", "values" : ["0", "1"], "toggleSwitch" : true, "defaultValue" : "0"},
        {"name" : "BOX64_DYNAREC_BIGBLOCK", "values" : ["0", "1", "2", "3"], "defaultValue" : "1"},
        {"name" : "BOX64_DYNAREC_STRONGMEM", "values" : ["0", "1", "2", "3"], "defaultValue" : "0"},
        {"name" : "BOX64_DYNAREC_FORWARD", "values" : ["0", "128", "256", "512", "1024"], "defaultValue" : "128"},
        {"name" : "BOX64_DYNAREC_CALLRET", "values" : ["0", "1"], "toggleSwitch" : true, "defaultValue" : "1"},
        {"name" : "BOX64_DYNAREC_WAIT", "values" : ["0", "1"], "toggleSwitch" : true, "defaultValue" : "1"},
        {"name" : "BOX64_DYNAREC_NATIVEFLAGS", "values" : ["0", "1"], "toggleSwitch" : true, "defaultValue" : "0"},
        {"name" : "BOX64_DYNAREC_WEAKBARRIER", "values" : ["0", "1", "2"], "defaultValue" : "0"}
    ]
  + app/src/main/assets/common_dlls.json
    {"system32":["winedevice.exe","explorer.exe","iexplore.exe","notepad.exe","msxml.dll","msxml2.dll","msxml3.dll","msxml4.dll","msxml6.dll","shdocvw.dll","acledit.dll","aclui.dll","activeds.dll","activeds.tlb","actxprxy.dll","adsldp.dll","adsldpc.dll","advapi32.dll","advpack.dll","amsi.dll","amstream.dll","apisetschema.dll","apphelp.dll","appwiz.cpl","appxdeploymentclient.dll","arp.exe","atl.dll","atl100.dll","atl110.dll","atl80.dll","atl90.dll","atlthunk.dll","atmlib.dll","attrib.exe","authz.dll","avicap32.dll","avifil32.dll","avrt.dll","bcrypt.dll","bcryptprimitives.dll","bluetoothapis.dll","browseui.dll","bthprops.cpl","cabarc.exe","cabinet.dll","cacls.exe","capi2032.dll","cards.dll","cdosys.dll","certutil.exe","cfgmgr32.dll","chcp.com","clock.exe","clusapi.dll","cmd.exe","combase.dll","comcat.dll","comctl32.dll","comdlg32.dll","coml2.dll","compstui.dll","comsvcs.dll","concrt140.dll","conhost.exe","connect.dll","control.exe","credui.dll","crtdll.dll","crypt32.dll","cryptdlg.dll","cryptdll.dll","cryptext.dll","cryptnet.dll","cryptowinrt.dll","cryptsp.dll","cryptui.dll","cscript.exe","ctapi32.dll","ctl3d32.dll","d2d1.dll","d3d10.dll","d3d10core.dll","d3d10_1.dll","d3d11.dll","d3d12.dll","d3d12core.dll","d3d8.dll","d3d8thk.dll","d3d9.dll","d3dcompiler_33.dll","d3dcompiler_34.dll","d3dcompiler_35.dll","d3dcompiler_36.dll","d3dcompiler_37.dll","d3dcompiler_38.dll","d3dcompiler_39.dll","d3dcompiler_40.dll","d3dcompiler_41.dll","d3dcompiler_42.dll","d3dcompiler_43.dll","d3dcompiler_46.dll","d3dcompiler_47.dll","d3dim.dll","d3dim700.dll","d3drm.dll","d3dx10_33.dll","d3dx10_34.dll","d3dx10_35.dll","d3dx10_36.dll","d3dx10_37.dll","d3dx10_38.dll","d3dx10_39.dll","d3dx10_40.dll","d3dx10_41.dll","d3dx10_42.dll","d3dx10_43.dll","d3dx11_42.dll","d3dx11_43.dll","d3dx9_24.dll","d3dx9_25.dll","d3dx9_26.dll","d3dx9_27.dll","d3dx9_28.dll","d3dx9_29.dll","d3dx9_30.dll","d3dx9_31.dll","d3dx9_32.dll","d3dx9_33.dll","d3dx9_34.dll","d3dx9_35.dll","d3dx9_36.dll","d3dx9_37.dll","d3dx9_38.dll","d3dx9_39.dll","d3dx9_40.dll","d3dx9_41.dll","d3dx9_42.dll","d3dx9_43.dll","d3dxof.dll","davclnt.dll","dbgeng.dll","dbghelp.dll","dciman32.dll","dcomp.dll","ddraw.dll","ddrawex.dll","devenum.dll","dhcpcsvc.dll","dhcpcsvc6.dll","dhtmled.ocx","difxapi.dll","dinput.dll","dinput8.dll","directmanipulation.dll","dism.exe","dispex.dll","dllhost.exe","dmband.dll","dmcompos.dll","dmime.dll","dmloader.dll","dmscript.dll","dmstyle.dll","dmsynth.dll","dmusic.dll","dmusic32.dll","dnsapi.dll","dplay.dll","dplaysvr.exe","dplayx.dll","dpnaddr.dll","dpnet.dll","dpnhpast.dll","dpnhupnp.dll","dpnlobby.dll","dpnsvr.exe","dpvoice.dll","dpvsetup.exe","dpwsockx.dll","drmclien.dll","dsdmo.dll","dsound.dll","dsquery.dll","dssenh.dll","dsuiext.dll","dswave.dll","dwrite.dll","dxtrans.dll","dxva2.dll","eject.exe","esent.dll","explorerframe.dll","faultrep.dll","fc.exe","gdiplus.dll","geolocation.dll","hal.dll","hnetcfg.dll","hvsimanagementapi.dll","ia2comproxy.dll","icacls.exe","iccvid.dll","icinfo.exe","icmp.dll","imm32.dll","ir50_32.dll","kernel32.dll","localui.dll","mcicda.dll","mfplay.dll","mmcndmgr.dll","msasn1.dll","mscat32.dll","msctfmonitor.dll","msg711.acm","msidb.exe","msident.dll","msiexec.exe","msisip.dll","msrle32.dll","msscript.ocx","mssign32.dll","mssip32.dll","mstask.dll","msvcirt.dll","msvcp71.dll","msvcp90.dll","msvcr100.dll","msvcr120_app.dll","msvcr71.dll","msvcr90.dll","msvcrtd.dll","msvidc32.dll","ncrypt.dll","net.exe","netutils.dll","nsi.dll","ntdsapi.dll","oleaut32.dll","opcservices.dll","progman.exe","psapi.dll","qmgrprxy.dll","rasapi32.dll","regini.exe","riched32.dll","sas.dll","scardsvr.dll","sccbase.dll","schtasks.exe","sdbinst.exe","sechost.dll","sensapi.dll","shfolder.dll","shutdown.exe","spoolss.dll","systeminfo.exe","tbs.dll","tdh.dll","ucrtbase.dll","url.dll","userenv.dll","utildll.dll","uxtheme.dll","vcomp140.dll","wer.dll","wevtsvc.dll","wiaservc.dll","windows.devices.bluetooth.dll","windows.devices.enumeration.dll","windows.devices.usb.dll","windows.media.mediacontrol.dll","windows.media.speech.dll","windows.perception.stub.dll","windows.storage.applicationdata.dll","windows.system.profile.systemmanufacturers.dll","winealsa.drv","winegstreamer.dll","winepulse.drv","winnls32.dll","wintab32.dll","wlanui.dll","wldp.dll","wmasf.dll","wmp.dll","wmvcore.dll","wnaspi32.dll","wow64cpu.dll","x3daudio1_0.dll","x3daudio1_3.dll","dx8vb.dll","dxdiag.exe","dxgi.dll","evr.dll","extrac32.exe","feclient.dll","find.exe","findstr.exe","fntcache.dll","fsutil.exe","hhctrl.ocx","hostname.exe","ieframe.dll","inetcpl.cpl","ipconfig.exe","iphlpapi.dll","iprop.dll","irprops.cpl","itircl.dll","jscript.dll","kernelbase.dll","mapi32.dll","mciseq.dll","mciwave.dll","mf3216.dll","mfplat.dll","mgmtapi.dll","mp3dmod.dll","mpr.dll","msacm32.dll","msauddecmft.dll","msctfp.dll","msdelta.dll","msimsg.dll","msls31.dll","msvcr110.dll","msvcr120.dll","nddeapi.dll","netcfgx.dll","netprofm.dll","newdev.dll","ninput.dll","npptools.dll","ntprint.dll","odbccp32.dll","olepro32.dll","oleview.exe","pidgen.dll","ping.exe","pnputil.exe","propsys.dll","pstorec.dll","qedit.dll","qwave.dll","resutils.dll","rstrtmgr.dll","rtutils.dll","rtworkq.dll","scarddlg.dll","scrrun.dll","secedit.exe","serialui.dll","setupapi.dll","sfc_os.dll","sppc.dll","srclient.dll","sspicli.dll","start.exe","sti.dll","svchost.exe","svrapi.dll","t2embed.dll","taskmgr.exe","tzres.dll","uninstaller.exe","usp10.dll","vcomp100.dll","vcruntime140.dll","view.exe","vulkan-1.dll","websocket.dll","wevtapi.dll","whoami.exe","x3daudio1_5.dll","xactengine3_2.dll","xaudio2_1.dll","xaudio2_9.dll","xolehlp.dll","winepath.exe","dwmapi.dll","dxdiagn.dll","expand.exe","fltlib.dll","fontsub.dll","fwpuclnt.dll","glu32.dll","graphicscapture.dll","imaadp32.acm","inetcomm.dll","initpki.dll","kerberos.dll","klist.exe","ksproxy.ax","ktmw32.dll","loadperf.dll","lodctr.exe","lz32.dll","mf.dll","mfmediaengine.dll","mlang.dll","mmdevapi.dll","mprapi.dll","msadp32.acm","mscms.dll","msgsm32.acm","mshtml.dll","msimg32.dll","msimtf.dll","msinfo32.exe","msmpeg2vdec.dll","msnet32.dll","mspatcha.dll","msports.dll","msv1_0.dll","msvcm90.dll","msvcp100.dll","msvcp120.dll","msvcp120_app.dll","msvcp140.dll","msvcp140_1.dll","msvcp140_codecvt_ids.dll","msvcr70.dll","msvcrt20.dll","msvcrt40.dll","msvfw32.dll","ntdll.dll","odbc32.dll","odbcbcp.dll","oleacc.dll","olecli32.dll","oledlg.dll","packager.dll","pdh.dll","printui.dll","prntvpt.dll","qcap.dll","qdvd.dll","quartz.dll","query.dll","rasdlg.dll","robocopy.exe","rpcrt4.dll","rpcss.exe","rsabase.dll","schannel.dll","secur32.dll","setx.exe","shdoclc.dll","slc.dll","snmpapi.dll","srvsvc.dll","strmdll.dll","tasklist.exe","uiribbon.dll","vbscript.dll","vcomp110.dll","vga.dll","wevtutil.exe","wimgapi.dll","win32u.dll","windows.media.dll","windows.networking.dll","windows.networking.hostname.dll","winecfg.exe","winevulkan.dll","winmm.dll","wmi.dll","wmphoto.dll","wow64win.dll","wuapi.dll","dxcore.dll","gameux.dll","gamingtcui.dll","gdi32.dll","gpkcsp.dll","hid.dll","hlink.dll","hrtfapo.dll","httpapi.dll","ieproxy.dll","imagehlp.dll","inetmib1.dll","infosoft.dll","inkobj.dll","inseng.dll","itss.dll","joy.cpl","jsproxy.dll","ksuser.dll","l3codeca.acm","localspl.dll","magnification.dll","mapistub.dll","mciavi32.dll","mciqtz32.dll","mferror.dll","mfreadwrite.dll","mfsrcsnk.dll","midimap.dll","msacm32.drv","mscoree.dll","msctf.dll","msdmo.dll","msdrm.dll","msftedit.dll","mshta.exe","mshtml.tlb","msi.dll","msisys.ocx","msvcm80.dll","msvcp110.dll","msvcp140_2.dll","msvcp140_atomic_wait.dll","msvcp60.dll","msvcp70.dll","msvcp80.dll","msvcp_win.dll","msvcr80.dll","msvcrt.dll","mswsock.dll","mtxdm.dll","netapi32.dll","netsh.exe","netstat.exe","normaliz.dll","ntoskrnl.exe","objsel.dll","odbccu32.dll","ole32.dll","olesvr32.dll","olethk32.dll","opencl.dll","opengl32.dll","photometadatahandler.dll","plugplay.exe","powrprof.dll","pwrshplugin.dll","qasf.dll","qmgr.dll","reg.exe","regapi.dll","regsvr32.exe","riched20.dll","rsaenh.dll","rundll32.exe","samlib.dll","sc.exe","schedsvc.dll","scrobj.dll","security.dll","services.exe","sfc.dll","shcore.dll","shell32.dll","shlwapi.dll","slbcsp.dll","softpub.dll","spoolsv.exe","srvcli.dll","stdole2.tlb","stdole32.tlb","subst.exe","sxs.dll","tapi32.dll","taskkill.exe","taskschd.dll","termsv.exe","threadpoolwinrt.dll","traffic.dll","twain_32.dll","twinapi.appcore.dll","uianimation.dll","uiautomationcore.dll","unicows.dll","unlodctr.exe","updspapi.dll","urlmon.dll","user32.dll","vcomp.dll","vcomp120.dll","vcomp90.dll","windows.gaming.ui.gamebar.dll","winhttp.dll","wintypes.dll","wlanapi.dll","xapofx1_1.dll","x3daudio1_4.dll","windows.security.credentials.ui.userconsentverifier.dll","wineboot.exe","winedbg.exe","winemapi.dll","wing32.dll","winver.exe","wsnmp32.dll","x3daudio1_2.dll","xactengine3_0.dll","xactengine3_3.dll","xactengine3_7.dll","vcruntime140_1.dll","vdmdbg.dll","version.dll","virtdisk.dll","vssapi.dll","where.exe","windows.applicationmodel.dll","windows.ui.dll","xaudio2_8.dll","windowscodecs.dll","winebrowser.exe","winemenubuilder.exe","winspool.drv","xactengine2_0.dll","xactengine2_7.dll","xinput1_4.dll","x3daudio1_7.dll","xactengine2_4.dll","xapofx1_3.dll","xapofx1_5.dll","xaudio2_4.dll","xaudio2_6.dll","xaudio2_7.dll","xinput1_1.dll","wineconsole.exe","winemine.exe","winemsibuilder.exe","winsta.dll","winusb.dll","wscript.exe","xaudio2_5.dll","xpssvcs.dll","windows.media.devices.dll","wininet.dll","wldap32.dll","wofutil.dll","wsdapi.dll","wusa.exe","xactengine3_4.dll","xactengine3_5.dll","xactengine2_9.dll","xapofx1_2.dll","xinput1_2.dll","xpsprint.dll","windows.globalization.dll","wined3d.dll","winefile.exe","winhlp32.exe","write.exe","wsock32.dll","wuauserv.exe","x3daudio1_1.dll","xapofx1_4.dll","xaudio2_0.dll","xaudio2_3.dll","wdscore.dll","webservices.dll","windows.gaming.input.dll","wintrust.dll","ws2_32.dll","wshom.ocx","x3daudio1_6.dll","xaudio2_2.dll","xinput9_1_0.dll","xmllite.dll","xactengine3_6.dll","windowscodecsext.dll","winex11.drv","winmgmt.exe","wow64.dll","wpc.dll","wtsapi32.dll","wuaueng.dll","xactengine3_1.dll","xcopy.exe","xinput1_3.dll","xinputuap.dll"],"syswow64":["start.exe","winhlp32.exe","stdole2.tlb","iexplore.exe","msxml.dll","msxml2.dll","msxml3.dll","msxml4.dll","msxml6.dll","shdocvw.dll","acledit.dll","aclui.dll","activeds.dll","activeds.tlb","actxprxy.dll","adsldp.dll","adsldpc.dll","advapi32.dll","advpack.dll","amsi.dll","amstream.dll","apisetschema.dll","apphelp.dll","appwiz.cpl","appxdeploymentclient.dll","arp.exe","atl.dll","atl100.dll","atl110.dll","atl80.dll","atl90.dll","atlthunk.dll","atmlib.dll","attrib.exe","authz.dll","avicap32.dll","avifil32.dll","avrt.dll","bcrypt.dll","bcryptprimitives.dll","bluetoothapis.dll","browseui.dll","bthprops.cpl","cabarc.exe","cabinet.dll","cacls.exe","capi2032.dll","cards.dll","cdosys.dll","certutil.exe","cfgmgr32.dll","chcp.com","clock.exe","clusapi.dll","cmd.exe","combase.dll","comcat.dll","comctl32.dll","comdlg32.dll","coml2.dll","compstui.dll","comsvcs.dll","concrt140.dll","connect.dll","control.exe","credui.dll","crtdll.dll","crypt32.dll","cryptdlg.dll","cryptdll.dll","cryptext.dll","cryptnet.dll","cryptowinrt.dll","cryptsp.dll","cryptui.dll","cscript.exe","ctapi32.dll","ctl3d32.dll","d2d1.dll","d3d10.dll","d3d10core.dll","d3d10_1.dll","d3d11.dll","d3d12.dll","d3d12core.dll","d3d8.dll","d3d8thk.dll","d3d9.dll","d3dcompiler_33.dll","d3dcompiler_34.dll","d3dcompiler_35.dll","d3dcompiler_36.dll","d3dcompiler_37.dll","d3dcompiler_38.dll","d3dcompiler_39.dll","d3dcompiler_40.dll","d3dcompiler_41.dll","d3dcompiler_42.dll","d3dcompiler_43.dll","d3dcompiler_46.dll","d3dcompiler_47.dll","d3dim.dll","d3dim700.dll","d3drm.dll","d3dx10_33.dll","d3dx10_34.dll","d3dx10_35.dll","d3dx10_36.dll","d3dx10_37.dll","d3dx10_38.dll","d3dx10_39.dll","d3dx10_40.dll","d3dx10_41.dll","d3dx10_42.dll","d3dx10_43.dll","d3dx11_42.dll","d3dx11_43.dll","d3dx9_24.dll","d3dx9_25.dll","d3dx9_26.dll","d3dx9_27.dll","d3dx9_28.dll","d3dx9_29.dll","d3dx9_30.dll","d3dx9_31.dll","d3dx9_32.dll","d3dx9_33.dll","d3dx9_34.dll","d3dx9_35.dll","d3dx9_36.dll","d3dx9_37.dll","d3dx9_38.dll","d3dx9_39.dll","d3dx9_40.dll","d3dx9_41.dll","d3dx9_42.dll","d3dx9_43.dll","d3dxof.dll","davclnt.dll","dbgeng.dll","dbghelp.dll","dciman32.dll","dcomp.dll","ddraw.dll","ddrawex.dll","devenum.dll","dhcpcsvc.dll","dhcpcsvc6.dll","dhtmled.ocx","difxapi.dll","dinput.dll","dinput8.dll","directmanipulation.dll","dism.exe","dispex.dll","dllhost.exe","dmband.dll","dmcompos.dll","dmime.dll","dmloader.dll","dmscript.dll","dmstyle.dll","dmsynth.dll","dmusic.dll","dmusic32.dll","dnsapi.dll","dplay.dll","dplaysvr.exe","dplayx.dll","dpnaddr.dll","dpnet.dll","dpnhpast.dll","dpnhupnp.dll","dpnlobby.dll","dpnsvr.exe","dpvoice.dll","dpvsetup.exe","dpwsockx.dll","drmclien.dll","dsdmo.dll","dsound.dll","dsquery.dll","dssenh.dll","dsuiext.dll","dswave.dll","dwmapi.dll","dwrite.dll","dx8vb.dll","dxcore.dll","dxgi.dll","dxva2.dll","expand.exe","hid.dll","hlink.dll","httpapi.dll","ia2comproxy.dll","icinfo.exe","initpki.dll","inseng.dll","ipconfig.exe","ir50_32.dll","kernel32.dll","lodctr.exe","mapistub.dll","mciavi32.dll","mciqtz32.dll","mf3216.dll","mfmediaengine.dll","mfplay.dll","mgmtapi.dll","midimap.dll","mmdevapi.dll","mpr.dll","mprapi.dll","mscat32.dll","mscoree.dll","msdelta.dll","msdmo.dll","msimtf.dll","msinfo32.exe","msisip.dll","mspatcha.dll","mssip32.dll","msvcm80.dll","msvcp100.dll","msvcp140_2.dll","msvcp140_codecvt_ids.dll","msvcp60.dll","msvcp70.dll","msvcp71.dll","msvcp80.dll","msvcr120.dll","msvcr70.dll","msvcr80.dll","msvcr90.dll","msvcrt20.dll","msvcrt40.dll","msvfw32.dll","mswsock.dll","net.exe","netapi32.dll","netsh.exe","netutils.dll","ntdsapi.dll","objsel.dll","odbccu32.dll","olepro32.dll","olesvr32.dll","ping.exe","prntvpt.dll","psapi.dll","pstorec.dll","qasf.dll","quartz.dll","query.dll","qwave.dll","regapi.dll","riched32.dll","robocopy.exe","rpcss.exe","rtworkq.dll","sas.dll","sccbase.dll","schannel.dll","schedsvc.dll","schtasks.exe","sdbinst.exe","serialui.dll","sfc_os.dll","shdoclc.dll","snmpapi.dll","srvsvc.dll","subst.exe","sxs.dll","taskschd.dll","traffic.dll","uninstaller.exe","vcomp120.dll","vcruntime140.dll","version.dll","websocket.dll","wevtapi.dll","wevtutil.exe","where.exe","windows.gaming.input.dll","windows.media.dll","windowscodecs.dll","winedbg.exe","winemapi.dll","winegstreamer.dll","dxdiag.exe","dxtrans.dll","eject.exe","explorerframe.dll","findstr.exe","fsutil.exe","fwpuclnt.dll","graphicscapture.dll","hh.exe","hostname.exe","hvsimanagementapi.dll","imaadp32.acm","imagehlp.dll","inetcomm.dll","inetcpl.cpl","inetmib1.dll","infosoft.dll","inkobj.dll","iprop.dll","irprops.cpl","joy.cpl","jsproxy.dll","localui.dll","magnification.dll","mcicda.dll","mciwave.dll","msacm32.dll","msacm32.drv","msasn1.dll","msauddecmft.dll","mscms.dll","msctf.dll","msctfp.dll","mshta.exe","msidb.exe","msimg32.dll","msmpeg2vdec.dll","msscript.ocx","mssign32.dll","msv1_0.dll","msvcp140_atomic_wait.dll","msvcp90.dll","msvcr120_app.dll","msvcrt.dll","msvcrtd.dll","ncrypt.dll","nddeapi.dll","npptools.dll","ntdll.dll","ntoskrnl.exe","odbcbcp.dll","oleacc.dll","oledlg.dll","opcservices.dll","packager.dll","pdh.dll","plugplay.exe","powrprof.dll","printui.dll","progman.exe","pwrshplugin.dll","qcap.dll","qdvd.dll","rasdlg.dll","reg.exe","rpcrt4.dll","samlib.dll","scarddlg.dll","scardsvr.dll","sechost.dll","security.dll","shell32.dll","sppc.dll","srvcli.dll","sspicli.dll","strmdll.dll","svchost.exe","svrapi.dll","threadpoolwinrt.dll","twinapi.appcore.dll","unlodctr.exe","urlmon.dll","userenv.dll","utildll.dll","vbscript.dll","vcomp.dll","virtdisk.dll","vulkan-1.dll","wevtsvc.dll","wiaservc.dll","windows.globalization.dll","windows.media.devices.dll","windows.media.speech.dll","winealsa.drv","winepulse.drv","esent.dll","evr.dll","explorer.exe","fc.exe","feclient.dll","fltlib.dll","gameux.dll","gamingtcui.dll","geolocation.dll","glu32.dll","hnetcfg.dll","hrtfapo.dll","ieframe.dll","imm32.dll","itircl.dll","itss.dll","jscript.dll","kerberos.dll","kernelbase.dll","ksuser.dll","ktmw32.dll","l3codeca.acm","loadperf.dll","localspl.dll","mciseq.dll","mferror.dll","mfsrcsnk.dll","mlang.dll","mmcndmgr.dll","msadp32.acm","msgsm32.acm","mshtml.dll","msi.dll","msiexec.exe","msls31.dll","msvcm90.dll","msvcp110.dll","msvcp120.dll","msvcp140.dll","msvcr71.dll","newdev.dll","ninput.dll","normaliz.dll","nsi.dll","odbccp32.dll","ole32.dll","olecli32.dll","olethk32.dll","oleview.exe","opengl32.dll","photometadatahandler.dll","pidgen.dll","propsys.dll","qmgr.dll","rasapi32.dll","regedit.exe","regini.exe","regsvr32.exe","riched20.dll","rsaenh.dll","rtutils.dll","sc.exe","scrrun.dll","secedit.exe","secur32.dll","sensapi.dll","setupapi.dll","shfolder.dll","shlwapi.dll","slbcsp.dll","softpub.dll","systeminfo.exe","tapi32.dll","tasklist.exe","taskmgr.exe","tbs.dll","tdh.dll","tzres.dll","ucrtbase.dll","uianimation.dll","user32.dll","usp10.dll","uxtheme.dll","vcomp90.dll","vga.dll","vssapi.dll","wdscore.dll","wer.dll","whoami.exe","wimgapi.dll","windows.devices.usb.dll","windows.networking.dll","windows.networking.hostname.dll","windows.ui.dll","wineboot.exe","winecfg.exe","wineconsole.exe","wined3d.dll","winefile.exe","winemsibuilder.exe","dxdiagn.dll","extrac32.exe","faultrep.dll","find.exe","fntcache.dll","fontsub.dll","gdi32.dll","gdiplus.dll","gpkcsp.dll","hal.dll","hhctrl.ocx","icacls.exe","iccvid.dll","icmp.dll","ieproxy.dll","iphlpapi.dll","klist.exe","ksproxy.ax","lz32.dll","mapi32.dll","mf.dll","mfplat.dll","mfreadwrite.dll","mp3dmod.dll","msctfmonitor.dll","msdrm.dll","msftedit.dll","msg711.acm","mshtml.tlb","msident.dll","msimsg.dll","msisys.ocx","msnet32.dll","msports.dll","msrle32.dll","mstask.dll","msvcirt.dll","msvcp120_app.dll","msvcp140_1.dll","msvcp_win.dll","msvcr100.dll","msvcr110.dll","msvidc32.dll","mtxdm.dll","netcfgx.dll","netprofm.dll","netstat.exe","notepad.exe","ntprint.dll","odbc32.dll","oleaut32.dll","opencl.dll","pnputil.exe","qedit.dll","qmgrprxy.dll","resutils.dll","rsabase.dll","rstrtmgr.dll","rundll32.exe","scrobj.dll","setx.exe","sfc.dll","shcore.dll","shutdown.exe","slc.dll","spoolss.dll","srclient.dll","stdole32.tlb","sti.dll","t2embed.dll","taskkill.exe","termsv.exe","uiautomationcore.dll","uiribbon.dll","unicows.dll","updspapi.dll","url.dll","vcomp100.dll","vcomp110.dll","vcomp140.dll","vdmdbg.dll","view.exe","webservices.dll","win32u.dll","windows.applicationmodel.dll","windows.devices.bluetooth.dll","windows.devices.enumeration.dll","windows.gaming.ui.gamebar.dll","windows.media.mediacontrol.dll","windows.perception.stub.dll","windows.security.credentials.ui.userconsentverifier.dll","windows.storage.applicationdata.dll","windowscodecsext.dll","winebrowser.exe","wintrust.dll","wlanui.dll","winmm.dll","x3daudio1_6.dll","xactengine2_7.dll","xactengine2_9.dll","xapofx1_4.dll","xaudio2_1.dll","xaudio2_3.dll","wldp.dll","winnls32.dll","winusb.dll","wuaueng.dll","xactengine3_2.dll","xapofx1_2.dll","xaudio2_8.dll","xinput1_4.dll","xpsprint.dll","winedevice.exe","wininet.dll","write.exe","wsnmp32.dll","wtsapi32.dll","wuapi.dll","xactengine3_3.dll","wshom.ocx","x3daudio1_1.dll","x3daudio1_7.dll","xapofx1_3.dll","xaudio2_4.dll","xinputuap.dll","xmllite.dll","wldap32.dll","xapofx1_1.dll","xapofx1_5.dll","winex11.drv","wpc.dll","xactengine3_6.dll","xaudio2_5.dll","winemine.exe","winhttp.dll","winmgmt.exe","wmi.dll","wscript.exe","wsock32.dll","xactengine2_0.dll","windows.system.profile.systemmanufacturers.dll","winsta.dll","wintypes.dll","wmasf.dll","x3daudio1_2.dll","xactengine3_5.dll","xaudio2_7.dll","xaudio2_9.dll","xolehlp.dll","xpssvcs.dll","winevulkan.dll","winver.exe","wlanapi.dll","wusa.exe","xactengine2_4.dll","xactengine3_7.dll","xinput1_3.dll","xinput9_1_0.dll","xactengine3_0.dll","xinput1_1.dll","wmphoto.dll","wnaspi32.dll","ws2_32.dll","wsdapi.dll","x3daudio1_0.dll","x3daudio1_4.dll","xactengine3_4.dll","xinput1_2.dll","wmvcore.dll","wofutil.dll","x3daudio1_5.dll","xcopy.exe","winepath.exe","wintab32.dll","wmp.dll","wuauserv.exe","xactengine3_1.dll","xaudio2_0.dll","wing32.dll","winspool.drv","x3daudio1_3.dll","xaudio2_2.dll","xaudio2_6.dll"]}
  + app/src/main/assets/container_pattern.tzst
  + app/src/main/assets/dxwrapper/cnc-ddraw-6.6/Shaders/interpolation/bilinear.glsl
  + app/src/main/assets/dxwrapper/cnc-ddraw-6.6/Shaders/interpolation/catmull-rom-bilinear.glsl
  + app/src/main/assets/dxwrapper/cnc-ddraw-6.6/Shaders/interpolation/fsr.glsl
  + app/src/main/assets/dxwrapper/cnc-ddraw-6.6/Shaders/interpolation/fsr.glsl.pass1
  + app/src/main/assets/dxwrapper/cnc-ddraw-6.6/Shaders/interpolation/jinc2-dedither.glsl
  + app/src/main/assets/dxwrapper/cnc-ddraw-6.6/Shaders/interpolation/lanczos2-sharp.glsl
  + app/src/main/assets/dxwrapper/cnc-ddraw-6.6/Shaders/nearest-neighbor.glsl
  + app/src/main/assets/dxwrapper/cnc-ddraw-6.6/ddraw.ini
    ; cnc-ddraw - https://github.com/FunkyFr3sh/cnc-ddraw
    
    [ddraw]
    ; ### Optional settings ###
    ; Use the following settings to adjust the look and feel to your liking
    
    
    ; Stretch to custom resolution, 0 = defaults to the size game requests
    width=0
    height=0
    
    ; Override the width/height settings shown above and always stretch to fullscreen
    ; Note: Can be combined with 'windowed=true' to get windowed-fullscreen aka borderless mode
    fullscreen=false
    
    ; Run in windowed mode rather than going fullscreen
    windowed=false
    
    ; Maintain aspect ratio
    maintas=false
    
     ... (truncated) ...
  + app/src/main/assets/dxwrapper/cnc-ddraw-6.6/ddraw.tzst
  + app/src/main/assets/dxwrapper/d8vk-1.0.tzst
  + app/src/main/assets/dxwrapper/dxvk-0.96.tzst
  + app/src/main/assets/dxwrapper/dxvk-1.10.3.tzst
  + app/src/main/assets/dxwrapper/dxvk-1.7.2.tzst
  + app/src/main/assets/dxwrapper/dxvk-2.4.1.tzst
  + app/src/main/assets/dxwrapper/vkd3d-2.13.tzst
  + app/src/main/assets/gpu_cards.json
    [{"name":"NVIDIA RIVA 128","deviceID":24,"vendorID":4318},{"name":"NVIDIA RIVA TNT","deviceID":32,"vendorID":4318},{"name":"NVIDIA RIVA TNT2\/TNT2 Pro","deviceID":40,"vendorID":4318},{"name":"NVIDIA GeForce 256","deviceID":256,"vendorID":4318},{"name":"NVIDIA GeForce2 GTS\/GeForce2 Pro","deviceID":336,"vendorID":4318},{"name":"NVIDIA GeForce2 MX\/MX 400","deviceID":272,"vendorID":4318},{"name":"NVIDIA GeForce3","deviceID":512,"vendorID":4318},{"name":"NVIDIA GeForce4 MX 460","deviceID":368,"vendorID":4318},{"name":"NVIDIA GeForce4 Ti 4200","deviceID":595,"vendorID":4318},{"name":"NVIDIA GeForce FX 5200","deviceID":800,"vendorID":4318},{"name":"NVIDIA GeForce FX 5600","deviceID":786,"vendorID":4318},{"name":"NVIDIA GeForce FX 5800","deviceID":770,"vendorID":4318},{"name":"NVIDIA GeForce 6200","deviceID":335,"vendorID":4318},{"name":"NVIDIA GeForce 6600 GT","deviceID":320,"vendorID":4318},{"name":"NVIDIA GeForce 6800","deviceID":65,"vendorID":4318},{"name":"NVIDIA GeForce Go 7300","deviceID":2026952880896,"vendorID":4318},{"name":"NVIDIA GeForce Go 7400","deviceID":472,"vendorID":4318},{"name":"NVIDIA GeForce 7600 GT","deviceID":913,"vendorID":4318},{"name":"NVIDIA GeForce 7800 GT","deviceID":146,"vendorID":4318},{"name":"NVIDIA GeForce 8200","deviceID":9113598691403,"vendorID":4318},{"name":"NVIDIA GeForce 8300 GS","deviceID":1059,"vendorID":4318},{"name":"NVIDIA GeForce 8400 GS","deviceID":1028,"vendorID":4318},{"name":"NVIDIA GeForce 8500 GT","deviceID":1057,"vendorID":4318},{"name":"NVIDIA GeForce 8600 GT","deviceID":1026,"vendorID":4318},{"name":"NVIDIA GeForce 8600M GT","deviceID":1031,"vendorID":4318},{"name":"NVIDIA GeForce 8800 GTS","deviceID":403,"vendorID":4318},{"name":"NVIDIA GeForce 8800 GTX","deviceID":401,"vendorID":4318},{"name":"NVIDIA GeForce 9200","deviceID":2157,"vendorID":4318},{"name":"NVIDIA GeForce 9300","deviceID":2156,"vendorID":4318},{"name":"NVIDIA GeForce 9400M","deviceID":2147,"vendorID":4318},{"name":"NVIDIA GeForce 9400 GT","deviceID":1068,"vendorID":4318},{"name":"NVIDIA GeForce 9500 GT","deviceID":1600,"vendorID":4318},{"name":"NVIDIA GeForce 9600 GT","deviceID":1570,"vendorID":4318},{"name":"NVIDIA GeForce 9700M GT","deviceID":1610,"vendorID":4318},{"name":"NVIDIA GeForce 9800 GT","deviceID":1556,"vendorID":4318},{"name":"NVIDIA GeForce 210","deviceID":2595,"vendorID":4318},{"name":"NVIDIA GeForce GT 220","deviceID":2592,"vendorID":4318},{"name":"NVIDIA GeForce GT 240","deviceID":3235,"vendorID":4318},{"name":"NVIDIA GeForce GTS 250","deviceID":1557,"vendorID":4318},{"name":"NVIDIA GeForce GTX 260","deviceID":1506,"vendorID":4318},{"name":"NVIDIA GeForce GTX 275","deviceID":1510,"vendorID":4318},{"name":"NVIDIA GeForce GTX 280","deviceID":1505,"vendorID":4318},{"name":"NVIDIA GeForce 315M","deviceID":2682,"vendorID":4318},{"name":"NVIDIA GeForce 320M","deviceID":2211,"vendorID":4318},{"name":"NVIDIA GeForce GT 320M","deviceID":2605,"vendorID":4318},{"name":"NVIDIA GeForce GT 325M","deviceID":2613,"vendorID":4318},{"name":"NVIDIA GeForce GT 330","deviceID":3232,"vendorID":4318},{"name":"NVIDIA GeForce GTS 350M","deviceID":3248,"vendorID":4318},{"name":"NVIDIA GeForce 410M","deviceID":4181,"vendorID":4318},{"name":"NVIDIA GeForce GT 420","deviceID":3554,"vendorID":4318},{"name":"NVIDIA GeForce GT 425M","deviceID":3568,"vendorID":4318},{"name":"NVIDIA GeForce GT 430","deviceID":3553,"vendorID":4318},{"name":"NVIDIA GeForce GT 440","deviceID":3552,"vendorID":4318},{"name":"NVIDIA GeForce GTS 450","deviceID":3524,"vendorID":4318},{"name":"NVIDIA GeForce GTX 460","deviceID":3618,"vendorID":4318},{"name":"NVIDIA GeForce GTX 460M","deviceID":3537,"vendorID":4318},{"name":"NVIDIA GeForce GTX 465","deviceID":1732,"vendorID":4318},{"name":"NVIDIA GeForce GTX 470","deviceID":1741,"vendorID":4318},{"name":"NVIDIA GeForce GTX 480","deviceID":1728,"vendorID":4318},{"name":"NVIDIA GeForce GT 520","deviceID":4160,"vendorID":4318},{"name":"NVIDIA GeForce GT 525M","deviceID":3564,"vendorID":4318},{"name":"NVIDIA GeForce GT 540M","deviceID":3572,"vendorID":4318},{"name":"NVIDIA GeForce GTX 550 Ti","deviceID":4676,"vendorID":4318},{"name":"NVIDIA GeForce GT 555M","deviceID":1208,"vendorID":4318},{"name":"NVIDIA GeForce GTX 560 Ti","deviceID":4608,"vendorID":4318},{"name":"NVIDIA GeForce GTX 560M","deviceID":4689,"vendorID":4318},{"name":"NVIDIA GeForce GTX 560","deviceID":4609,"vendorID":4318},{"name":"NVIDIA GeForce GTX 570","deviceID":4225,"vendorID":4318},{"name":"NVIDIA GeForce GTX 580","deviceID":4224,"vendorID":4318},{"name":"NVIDIA GeForce GT 610","deviceID":4170,"vendorID":4318},{"name":"NVIDIA GeForce GT 630","deviceID":3840,"vendorID":4318},{"name":"NVIDIA GeForce GT 630M","deviceID":3561,"vendorID":4318},{"name":"NVIDIA GeForce GT 640","deviceID":4033,"vendorID":4318},{"name":"NVIDIA GeForce GT 640M","deviceID":4050,"vendorID":4318},{"name":"NVIDIA GeForce GT 650M","deviceID":4049,"vendorID":4318},{"name":"NVIDIA GeForce GTX 650","deviceID":4038,"vendorID":4318},{"name":"NVIDIA GeForce GTX 650 Ti","deviceID":4550,"vendorID":4318},{"name":"NVIDIA GeForce GTX 660","deviceID":4544,"vendorID":4318},{"name":"NVIDIA GeForce GTX 660M","deviceID":4052,"vendorID":4318},{"name":"NVIDIA GeForce GTX 660 Ti","deviceID":4483,"vendorID":4318},{"name":"NVIDIA GeForce GTX 670","deviceID":4489,"vendorID":4318},{"name":"NVIDIA GeForce GTX 670MX","deviceID":4513,"vendorID":4318},{"name":"NVIDIA GeForce GTX 675MX","deviceID":4519,"vendorID":4318},{"name":"NVIDIA GeForce GTX 675MX","deviceID":4514,"vendorID":4318},{"name":"NVIDIA GeForce GTX 680","deviceID":4480,"vendorID":4318},{"name":"NVIDIA GeForce GTX 690","deviceID":4488,"vendorID":4318},{"name":"NVIDIA GeForce GT 720","deviceID":4747,"vendorID":4318},{"name":"NVIDIA GeForce GT 730","deviceID":4743,"vendorID":4318},{"name":"NVIDIA GeForce GT 730M","deviceID":4065,"vendorID":4318},{"name":"NVIDIA GeForce GT 740M","deviceID":4754,"vendorID":4318},{"name":"NVIDIA GeForce GT 750M","deviceID":4073,"vendorID":4318},{"name":"NVIDIA GeForce GT 755M","deviceID":4045,"vendorID":4318},{"name":"NVIDIA GeForce GTX 750","deviceID":4993,"vendorID":4318},{"name":"NVIDIA GeForce GTX 750 Ti","deviceID":4992,"vendorID":4318},{"name":"NVIDIA GeForce GTX 760","deviceID":4487,"vendorID":4318},{"name":"NVIDIA GeForce GTX 760 Ti","deviceID":4499,"vendorID":4318},{"name":"NVIDIA GeForce GTX 765M","deviceID":4578,"vendorID":4318},{"name":"NVIDIA GeForce GTX 770M","deviceID":4576,"vendorID":4318},{"name":"NVIDIA GeForce GTX 770","deviceID":4484,"vendorID":4318},{"name":"NVIDIA GeForce GTX 775M","deviceID":4509,"vendorID":4318},{"name":"NVIDIA GeForce GTX 780","deviceID":4100,"vendorID":4318},{"name":"NVIDIA GeForce GTX 780M","deviceID":4510,"vendorID":4318},{"name":"NVIDIA GeForce GTX 780 Ti","deviceID":4106,"vendorID":4318},{"name":"NVIDIA GeForce GTX TITAN","deviceID":4101,"vendorID":4318},{"name":"NVIDIA GeForce GTX TITAN Black","deviceID":4108,"vendorID":4318},{"name":"NVIDIA GeForce GTX TITAN X","deviceID":6082,"vendorID":4318},{"name":"NVIDIA GeForce GTX TITAN Z","deviceID":4097,"vendorID":4318},{"name":"NVIDIA GeForce 820M","deviceID":4077,"vendorID":4318},{"name":"NVIDIA GeForce 830M","deviceID":4928,"vendorID":4318},{"name":"NVIDIA GeForce 840M","deviceID":4929,"vendorID":4318},{"name":"NVIDIA GeForce 845M","deviceID":4932,"vendorID":4318},{"name":"NVIDIA GeForce GTX 850M","deviceID":5009,"vendorID":4318},{"name":"NVIDIA GeForce GTX 860M","deviceID":21521759211930,"vendorID":4318},{"name":"NVIDIA GeForce GTX 870M","deviceID":4505,"vendorID":4318},{"name":"NVIDIA GeForce GTX 880M","deviceID":4504,"vendorID":4318},{"name":"NVIDIA GeForce 940M","deviceID":4935,"vendorID":4318},{"name":"NVIDIA GeForce GTX 950","deviceID":5122,"vendorID":4318},{"name":"NVIDIA GeForce GTX 950M","deviceID":5018,"vendorID":4318},{"name":"NVIDIA GeForce GTX 960","deviceID":5121,"vendorID":4318},{"name":"NVIDIA GeForce GTX 960M","deviceID":5019,"vendorID":4318},{"name":"NVIDIA GeForce GTX 970","deviceID":5058,"vendorID":4318},{"name":"NVIDIA GeForce GTX 970M","deviceID":5080,"vendorID":4318},{"name":"NVIDIA GeForce GTX 980","deviceID":5056,"vendorID":4318},{"name":"NVIDIA GeForce GTX 980 Ti","deviceID":6088,"vendorID":4318},{"name":"NVIDIA GeForce GT 1030","deviceID":7425,"vendorID":4318},{"name":"NVIDIA GeForce GTX 1050","deviceID":7297,"vendorID":4318},{"name":"NVIDIA GeForce GTX 1050 Ti","deviceID":7298,"vendorID":4318},{"name":"NVIDIA GeForce GTX 1060 3GB","deviceID":7170,"vendorID":4318},{"name":"NVIDIA GeForce GTX 1060","deviceID":7171,"vendorID":4318},{"name":"NVIDIA GeForce GTX 1060M","deviceID":7200,"vendorID":4318},{"name":"NVIDIA GeForce GTX 1070","deviceID":7041,"vendorID":4318},{"name":"NVIDIA GeForce GTX 1080","deviceID":7040,"vendorID":4318},{"name":"NVIDIA GeForce GTX 1080M","deviceID":7136,"vendorID":4318},{"name":"NVIDIA GeForce GTX 1080 Ti","deviceID":6918,"vendorID":4318},{"name":"NVIDIA TITAN X (Pascal)","deviceID":6912,"vendorID":4318},{"name":"NVIDIA TITAN V","deviceID":7553,"vendorID":4318},{"name":"NVIDIA GeForce GTX 1650 SUPER","deviceID":8583,"vendorID":4318},{"name":"NVIDIA GeForce GTX 1660 SUPER","deviceID":8644,"vendorID":4318},{"name":"NVIDIA GeForce GTX 1660 Ti","deviceID":8578,"vendorID":4318},{"name":"NVIDIA GeForce RTX 2060","deviceID":7944,"vendorID":4318},{"name":"NVIDIA GeForce RTX 2070","deviceID":7943,"vendorID":4318},{"name":"NVIDIA GeForce RTX 2080","deviceID":7815,"vendorID":4318},{"name":"NVIDIA GeForce RTX 2080 Ti","deviceID":7687,"vendorID":4318},{"name":"NVIDIA GeForce RTX 3070","deviceID":9373,"vendorID":4318},{"name":"NVIDIA Tesla T4","deviceID":7864,"vendorID":4318},{"name":"NVIDIA Ampere A10","deviceID":8758,"vendorID":4318},{"name":"ATI Rage Fury","deviceID":21062,"vendorID":4098},{"name":"ATI RADEON 7200 SERIES","deviceID":20804,"vendorID":4098},{"name":"ATI RADEON 8500 SERIES","deviceID":20812,"vendorID":4098},{"name":"ATI Radeon 9500","deviceID":16708,"vendorID":4098},{"name":"ATI RADEON XPRESS 200M Series","deviceID":22869,"vendorID":4098},{"name":"ATI Radeon X700 SE","deviceID":24140,"vendorID":4098},{"name":"ATI Radeon X1600 Series","deviceID":29122,"vendorID":4098},{"name":"ATI Mobility Radeon HD 2350","deviceID":38087,"vendorID":4098},{"name":"ATI Mobility Radeon HD 2600","deviceID":38273,"vendorID":4098},{"name":"ATI Radeon HD 2900 XT","deviceID":37888,"vendorID":4098},{"name":"ATI Radeon HD 3200 Graphics","deviceID":38432,"vendorID":4098},{"name":"ATI Radeon HD 3850 AGP","deviceID":38165,"vendorID":4098},{"name":"ATI Mobility Radeon HD 4200","deviceID":38674,"vendorID":4098},{"name":"ATI Radeon HD 4350","deviceID":38223,"vendorID":4098},{"name":"ATI Radeon HD 4600 Series","deviceID":38037,"vendorID":4098},{"name":"ATI Radeon HD 4700 Series","deviceID":37966,"vendorID":4098},{"name":"ATI Radeon HD 4800 Series","deviceID":37964,"vendorID":4098},{"name":"ATI Radeon HD 5400 Series","deviceID":26873,"vendorID":4098},{"name":"ATI Radeon HD 5600 Series","deviceID":26840,"vendorID":4098},{"name":"ATI Radeon HD 5700 Series","deviceID":26814,"vendorID":4098},{"name":"ATI Radeon HD 5800 Series","deviceID":26776,"vendorID":4098},{"name":"ATI Radeon HD 5900 Series","deviceID":26780,"vendorID":4098},{"name":"AMD Radeon HD 6300 series Graphics","deviceID":38915,"vendorID":4098},{"name":"AMD Radeon HD 6400 Series","deviceID":26480,"vendorID":4098},{"name":"AMD Radeon HD 6410D","deviceID":38468,"vendorID":4098},{"name":"AMD Radeon HD 6480G","deviceID":38472,"vendorID":4098},{"name":"AMD Radeon HD 6490M","deviceID":26464,"vendorID":4098},{"name":"AMD Radeon HD 6550D","deviceID":38464,"vendorID":4098},{"name":"AMD Radeon HD 6600 Series","deviceID":26456,"vendorID":4098},{"name":"AMD Radeon HD 6600M Series","deviceID":26433,"vendorID":4098},{"name":"AMD Radeon HD 6700 Series","deviceID":26810,"vendorID":4098},{"name":"AMD Radeon HD 6800 Series","deviceID":26425,"vendorID":4098},{"name":"AMD Radeon HD 6900 Series","deviceID":26393,"vendorID":4098},{"name":"AMD Radeon HD 7660D","deviceID":39169,"vendorID":4098},{"name":"AMD Radeon HD 7700 Series","deviceID":26685,"vendorID":4098},{"name":"AMD Radeon HD 7800 Series","deviceID":26649,"vendorID":4098},{"name":"AMD Radeon HD 7870 Series","deviceID":26648,"vendorID":4098},{"name":"AMD Radeon HD 7900 Series","deviceID":26522,"vendorID":4098},{"name":"AMD Radeon HD 8600M Series","deviceID":26208,"vendorID":4098},{"name":"AMD Radeon HD 8670","deviceID":26128,"vendorID":4098},{"name":"AMD Radeon HD 8770","deviceID":26204,"vendorID":4098},{"name":"AMD Radeon HD 8400 \/ R3 Series","deviceID":38960,"vendorID":4098},{"name":"AMD Radeon(TM) R7 Graphics","deviceID":4879,"vendorID":4098},{"name":"AMD Radeon R9 285","deviceID":26937,"vendorID":4098},{"name":"AMD Radeon R9 290","deviceID":26545,"vendorID":4098},{"name":"AMD Radeon R9 290X","deviceID":26544,"vendorID":4098},{"name":"AMD Radeon (TM) R9 Fury Series","deviceID":29440,"vendorID":4098},{"name":"AMD Radeon R9 M370X","deviceID":26657,"vendorID":4098},{"name":"AMD Radeon R9 M380","deviceID":26183,"vendorID":4098},{"name":"AMD Radeon R9 M395X","deviceID":26912,"vendorID":4098},{"name":"Radeon(TM) RX 460 Graphics","deviceID":26607,"vendorID":4098},{"name":"Radeon (TM) RX 480 Graphics","deviceID":26591,"vendorID":4098},{"name":"Radeon RX Vega","deviceID":26751,"vendorID":4098},{"name":"Radeon Pro Vega 20","deviceID":27055,"vendorID":4098},{"name":"AMD Radeon(TM) Vega 10 Mobile Graphics","deviceID":5597,"vendorID":4098},{"name":"Radeon RX Vega 20","deviceID":26287,"vendorID":4098},{"name":"Radeon RX 5700 \/ 5700 XT","deviceID":29471,"vendorID":4098},{"name":"Radeon RX 5500M","deviceID":29504,"vendorID":4098},{"name":"Radeon RX 6800\/6800 XT \/ 6900 XT","deviceID":29631,"vendorID":4098},{"name":"Radeon Pro V620","deviceID":29601,"vendorID":4098},{"name":"Radeon Pro V620 VF","deviceID":29614,"vendorID":4098},{"name":"AMD VANGOGH","deviceID":5695,"vendorID":4098},{"name":"AMD Radeon(TM) Graphics","deviceID":5710,"vendorID":4098},{"name":"Intel(R) 82830M Graphics Controller","deviceID":13687,"vendorID":32902},{"name":"Intel(R) 82852\/82855 GM\/GME Graphics Controller","deviceID":13698,"vendorID":32902},{"name":"Intel(R) 845G","deviceID":9570,"vendorID":32902},{"name":"Intel(R) 82865G Graphics Controller","deviceID":9586,"vendorID":32902},{"name":"Intel(R) 82915G\/GV\/910GL Express Chipset Family","deviceID":9602,"vendorID":32902},{"name":"Intel(R) E7221G","deviceID":9610,"vendorID":32902},{"name":"Mobile Intel(R) 915GM\/GMS","deviceID":9618,"vendorID":32902},{"name":"Intel(R) 945G","deviceID":10098,"vendorID":32902},{"name":"Mobile Intel(R) 945GM Express Chipset Family","deviceID":10146,"vendorID":32902},{"name":"Intel(R) 945GME","deviceID":10158,"vendorID":32902},{"name":"Intel(R) Q35","deviceID":10674,"vendorID":32902},{"name":"Intel(R) G33","deviceID":10690,"vendorID":32902},{"name":"Intel(R) Q33","deviceID":10706,"vendorID":32902},{"name":"Intel(R) IGD","deviceID":40961,"vendorID":32902},{"name":"Intel(R) IGD","deviceID":40977,"vendorID":32902},{"name":"Intel(R) 965Q","deviceID":10642,"vendorID":32902},{"name":"Intel(R) 965G","deviceID":10626,"vendorID":32902},{"name":"Intel(R) 946GZ","deviceID":10610,"vendorID":32902},{"name":"Mobile Intel(R) 965 Express Chipset Family","deviceID":10754,"vendorID":32902},{"name":"Intel(R) 965GME","deviceID":10770,"vendorID":32902},{"name":"Mobile Intel(R) GM45 Express Chipset Family","deviceID":10818,"vendorID":32902},{"name":"Intel(R) Integrated Graphics Device","deviceID":11778,"vendorID":32902},{"name":"Intel(R) G45\/G43","deviceID":11810,"vendorID":32902},{"name":"Intel(R) Q45\/Q43","deviceID":11794,"vendorID":32902},{"name":"Intel(R) G41","deviceID":11826,"vendorID":32902},{"name":"Intel(R) B43","deviceID":11922,"vendorID":32902},{"name":"Intel(R) HD Graphics","deviceID":66,"vendorID":32902},{"name":"Intel(R) HD Graphics","deviceID":70,"vendorID":32902},{"name":"Intel(R) HD Graphics 3000","deviceID":290,"vendorID":32902},{"name":"Intel(R) HD Graphics 3000","deviceID":294,"vendorID":32902},{"name":"Intel(R) HD Graphics Family","deviceID":266,"vendorID":32902},{"name":"Intel(R) HD Graphics 4000","deviceID":354,"vendorID":32902},{"name":"Intel(R) HD Graphics 4000","deviceID":358,"vendorID":32902},{"name":"Intel(R) HD Graphics Family","deviceID":346,"vendorID":32902},{"name":"Intel(R) HD Graphics 4600","deviceID":1042,"vendorID":32902},{"name":"Intel(R) HD Graphics 4600","deviceID":1046,"vendorID":32902},{"name":"Intel(R) HD Graphics 5000","deviceID":2598,"vendorID":32902},{"name":"Intel(R) HD Graphics 5000","deviceID":1058,"vendorID":32902},{"name":"Intel(R) Iris(TM) Graphics 5100","deviceID":2594,"vendorID":32902},{"name":"Intel(R) Iris(TM) Graphics 5100","deviceID":2602,"vendorID":32902},{"name":"Intel(R) Iris(TM) Graphics 5100","deviceID":2603,"vendorID":32902},{"name":"Intel(R) Iris(TM) Graphics 5100","deviceID":2606,"vendorID":32902},{"name":"Intel(R) Iris(TM) Pro Graphics 5200","deviceID":3362,"vendorID":32902},{"name":"Intel(R) Iris(TM) Pro Graphics 5200","deviceID":3366,"vendorID":32902},{"name":"Intel(R) Iris(TM) Pro Graphics 5200","deviceID":3370,"vendorID":32902},{"name":"Intel(R) Iris(TM) Pro Graphics 5200","deviceID":3371,"vendorID":32902},{"name":"Intel(R) Iris(TM) Pro Graphics 5200","deviceID":3374,"vendorID":32902},{"name":"Intel(R) Iris(TM) Pro Graphics 5200","deviceID":3106,"vendorID":32902},{"name":"Intel(R) HD Graphics 5300","deviceID":5662,"vendorID":32902},{"name":"Intel(R) HD Graphics 5500","deviceID":5654,"vendorID":32902},{"name":"Intel(R) HD Graphics 5600","deviceID":5650,"vendorID":32902},{"name":"Intel(R) HD Graphics 6000","deviceID":5670,"vendorID":32902},{"name":"Intel(R) Iris(TM) Graphics 6100","deviceID":5675,"vendorID":32902},{"name":"Intel(R) Iris(TM) Pro Graphics 6200","deviceID":5666,"vendorID":32902},{"name":"Intel(R) Iris(TM) Pro Graphics P6300","deviceID":5674,"vendorID":32902},{"name":"Intel(R) HD Graphics 510","deviceID":6402,"vendorID":32902},{"name":"Intel(R) HD Graphics 510","deviceID":6406,"vendorID":32902},{"name":"Intel(R) HD Graphics 510","deviceID":6411,"vendorID":32902},{"name":"Intel(R) HD Graphics 515","deviceID":6430,"vendorID":32902},{"name":"Intel(R) HD Graphics 520","deviceID":6422,"vendorID":32902},{"name":"Intel(R) HD Graphics 520","deviceID":6433,"vendorID":32902},{"name":"Intel(R) HD Graphics 530","deviceID":6418,"vendorID":32902},{"name":"Intel(R) HD Graphics 530","deviceID":6427,"vendorID":32902},{"name":"Intel(R) HD Graphics P530","deviceID":6429,"vendorID":32902},{"name":"Intel(R) Iris(TM) Graphics 540","deviceID":6438,"vendorID":32902},{"name":"Intel(R) Iris(TM) Graphics 550","deviceID":6439,"vendorID":32902},{"name":"Intel(R) Iris(TM) Graphics 555","deviceID":6443,"vendorID":32902},{"name":"Intel(R) Iris(TM) Graphics P555","deviceID":6445,"vendorID":32902},{"name":"Intel(R) Iris(TM) Pro Graphics 580","deviceID":6450,"vendorID":32902},{"name":"Intel(R) Iris(TM) Pro Graphics 580","deviceID":6459,"vendorID":32902},{"name":"Intel(R) Iris(TM) Pro Graphics P580","deviceID":6458,"vendorID":32902},{"name":"Intel(R) Iris(TM) Pro Graphics P580","deviceID":6461,"vendorID":32902},{"name":"Intel(R) UHD Graphics 617","deviceID":34752,"vendorID":32902},{"name":"Intel(R) UHD Graphics 620","deviceID":16032,"vendorID":32902},{"name":"Intel(R) HD Graphics 615","deviceID":22814,"vendorID":32902},{"name":"Intel(R) HD Graphics 620","deviceID":22806,"vendorID":32902},{"name":"Intel(R) HD Graphics 630","deviceID":22802,"vendorID":32902},{"name":"Intel(R) HD Graphics 630","deviceID":22811,"vendorID":32902},{"name":"Intel(R) UHD Graphics 630","deviceID":16027,"vendorID":32902},{"name":"Intel(R) UHD Graphics 630","deviceID":16017,"vendorID":32902}]
  + app/src/main/assets/graphics_driver/turnip-24.1.0.tzst
  + app/src/main/assets/graphics_driver/turnip-25.0.0.tzst
  + app/src/main/assets/graphics_driver/virgl-23.1.9.tzst
  + app/src/main/assets/graphics_driver/vortek-1.0.tzst
  + app/src/main/assets/graphics_driver/zink-22.2.5.tzst
  + app/src/main/assets/inputcontrols/icons/0.png
  + app/src/main/assets/inputcontrols/icons/1.png
  + app/src/main/assets/inputcontrols/icons/10.png
  + app/src/main/assets/inputcontrols/icons/11.png
  + app/src/main/assets/inputcontrols/icons/12.png
  + app/src/main/assets/inputcontrols/icons/13.png
  + app/src/main/assets/inputcontrols/icons/14.png
  + app/src/main/assets/inputcontrols/icons/15.png
  + app/src/main/assets/inputcontrols/icons/16.png
  + app/src/main/assets/inputcontrols/icons/2.png
  + app/src/main/assets/inputcontrols/icons/3.png
  + app/src/main/assets/inputcontrols/icons/4.png
  + app/src/main/assets/inputcontrols/icons/5.png
  + app/src/main/assets/inputcontrols/icons/6.png
  + app/src/main/assets/inputcontrols/icons/7.png
  + app/src/main/assets/inputcontrols/icons/8.png
  + app/src/main/assets/inputcontrols/icons/9.png
  + app/src/main/assets/inputcontrols/profiles/controls-1.icp
    {"id":1,"name":"RTS","cursorSpeed":1,"elements":[{"type":"BUTTON","shape":"SQUARE","bindings":["KEY_DEL","NONE","NONE","NONE"],"scale":1,"x":0.12745098769664764,"y":0.35555556416511536,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"SQUARE","bindings":["KEY_DOWN","NONE","NONE","NONE"],"scale":1,"x":0.12745098769664764,"y":0.7555555701255798,"toggleSwitch":false,"text":"","iconId":5},{"type":"BUTTON","shape":"SQUARE","bindings":["KEY_RIGHT","NONE","NONE","NONE"],"scale":1,"x":0.12745098769664764,"y":0.6222222447395325,"toggleSwitch":false,"text":"","iconId":4},{"type":"BUTTON","shape":"SQUARE","bindings":["KEY_LEFT","NONE","NONE","NONE"],"scale":1,"x":0.06862745434045792,"y":0.6222222447395325,"toggleSwitch":false,"text":"","iconId":2},{"type":"BUTTON","shape":"SQUARE","bindings":["KEY_UP","NONE","NONE","NONE"],"scale":1,"x":0.12745098769664764,"y":0.4888888895511627,"toggleSwitch":false,"text":"","iconId":3},{"type":"BUTTON","shape":"SQUARE","bindings":["KEY_ESC","NONE","NONE","NONE"],"scale":1,"x":0.06862745434045792,"y":0.35555556416511536,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"SQUARE","bindings":["MOUSE_RIGHT_BUTTON","NONE","NONE","NONE"],"scale":1,"x":0.8721405267715454,"y":0.7555555701255798,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"SQUARE","bindings":["KEY_TAB","NONE","NONE","NONE"],"scale":1,"x":0.06862745434045792,"y":0.4888888895511627,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"SQUARE","bindings":["KEY_SHIFT_L","NONE","NONE","NONE"],"scale":1,"x":0.06862745434045792,"y":0.7555555701255798,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"SQUARE","bindings":["KEY_CTRL_L","NONE","NONE","NONE"],"scale":1,"x":0.06862745434045792,"y":0.8888888955116272,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"SQUARE","bindings":["KEY_ALT_L","NONE","NONE","NONE"],"scale":1,"x":0.12745098769664764,"y":0.8888888955116272,"toggleSwitch":false,"text":"","iconId":0},{"type":"RANGE_BUTTON","shape":"CIRCLE","bindings":["NONE","NONE","NONE","NONE","NONE","NONE"],"scale":1,"x":0.1568627506494522,"y":0.08888889104127884,"toggleSwitch":false,"text":"","iconId":0,"range":"FROM_0_TO_9"},{"type":"BUTTON","shape":"SQUARE","bindings":["KEY_SPACE","NONE","NONE","NONE"],"scale":1,"x":0.8721405267715454,"y":0.8888888955116272,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"SQUARE","bindings":["KEY_BKSP","NONE","NONE","NONE"],"scale":1,"x":0.9309640526771545,"y":0.7555555701255798,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"SQUARE","bindings":["KEY_ENTER","NONE","NONE","NONE"],"scale":1,"x":0.9309640526771545,"y":0.8888888955116272,"toggleSwitch":false,"text":"","iconId":0},{"type":"RANGE_BUTTON","shape":"CIRCLE","bindings":["NONE","NONE","NONE","NONE","NONE","NONE"],"scale":1,"x":0.843137264251709,"y":0.08888889104127884,"toggleSwitch":false,"text":"","iconId":0}]}
  + app/src/main/assets/inputcontrols/profiles/controls-2.icp
    {"id":2,"name":"Template (12 buttons)","cursorSpeed":1,"elements":[{"type":"D_PAD","shape":"CIRCLE","bindings":["KEY_W","KEY_D","KEY_S","KEY_A"],"scale":1,"x":0.10784313827753067,"y":0.7333333492279053,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"CIRCLE","bindings":["NONE","NONE","NONE","NONE"],"scale":1,"x":0.8133170008659363,"y":0.7333333492279053,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"CIRCLE","bindings":["NONE","NONE","NONE","NONE"],"scale":1,"x":0.8721405267715454,"y":0.6000000238418579,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"CIRCLE","bindings":["NONE","NONE","NONE","NONE"],"scale":1,"x":0.8721405267715454,"y":0.8666666746139526,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"CIRCLE","bindings":["NONE","NONE","NONE","NONE"],"scale":1,"x":0.9309640526771545,"y":0.7333333492279053,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"RECT","bindings":["NONE","NONE","NONE","NONE"],"scale":1,"x":0.8235294222831726,"y":0.08888889104127884,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"RECT","bindings":["NONE","NONE","NONE","NONE"],"scale":1,"x":0.9215686321258545,"y":0.08888889104127884,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"CIRCLE","bindings":["NONE","NONE","NONE","NONE"],"scale":0.85,"x":0.06862745434045792,"y":0.4444444477558136,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"RECT","bindings":["NONE","NONE","NONE","NONE"],"scale":1,"x":0.0784313753247261,"y":0.08888889104127884,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"RECT","bindings":["NONE","NONE","NONE","NONE"],"scale":1,"x":0.1764705926179886,"y":0.08888889104127884,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"CIRCLE","bindings":["NONE","NONE","NONE","NONE"],"scale":0.85,"x":0.9309640526771545,"y":0.4444444477558136,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"ROUND_RECT","bindings":["NONE","NONE","NONE","NONE"],"scale":0.85,"x":0.538807213306427,"y":0.9111111164093018,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"ROUND_RECT","bindings":["NONE","NONE","NONE","NONE"],"scale":0.85,"x":0.46078431606292725,"y":0.9111111164093018,"toggleSwitch":false,"text":"","iconId":0}]}
  + app/src/main/assets/inputcontrols/profiles/controls-3.icp
    {"id":3,"name":"Virtual Gamepad","cursorSpeed":1,"elements":[{"type":"D_PAD","shape":"CIRCLE","bindings":["GAMEPAD_DPAD_UP","GAMEPAD_DPAD_RIGHT","GAMEPAD_DPAD_DOWN","GAMEPAD_DPAD_LEFT"],"scale":0.85,"x":0.21568627655506134,"y":0.35555556416511536,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"CIRCLE","bindings":["GAMEPAD_BUTTON_X","NONE","NONE","NONE"],"scale":1,"x":0.8133170008659363,"y":0.7333333492279053,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"CIRCLE","bindings":["GAMEPAD_BUTTON_Y","NONE","NONE","NONE"],"scale":1,"x":0.8721405267715454,"y":0.6000000238418579,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"CIRCLE","bindings":["GAMEPAD_BUTTON_A","NONE","NONE","NONE"],"scale":1,"x":0.8721405267715454,"y":0.8666666746139526,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"CIRCLE","bindings":["GAMEPAD_BUTTON_B","NONE","NONE","NONE"],"scale":1,"x":0.9309640526771545,"y":0.7333333492279053,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"RECT","bindings":["GAMEPAD_BUTTON_R2","NONE","NONE","NONE"],"scale":1,"x":0.9215686321258545,"y":0.2888889014720917,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"RECT","bindings":["GAMEPAD_BUTTON_R1","NONE","NONE","NONE"],"scale":1,"x":0.9215686321258545,"y":0.42222222685813904,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"RECT","bindings":["GAMEPAD_BUTTON_L1","NONE","NONE","NONE"],"scale":1,"x":0.0784313753247261,"y":0.42222222685813904,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"RECT","bindings":["GAMEPAD_BUTTON_L2","NONE","NONE","NONE"],"scale":1,"x":0.0784313753247261,"y":0.2888889014720917,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"ROUND_RECT","bindings":["GAMEPAD_BUTTON_START","NONE","NONE","NONE"],"scale":0.85,"x":0.538807213306427,"y":0.9111111164093018,"toggleSwitch":false,"text":"","iconId":15},{"type":"BUTTON","shape":"ROUND_RECT","bindings":["GAMEPAD_BUTTON_SELECT","NONE","NONE","NONE"],"scale":0.85,"x":0.46078431606292725,"y":0.9111111164093018,"toggleSwitch":false,"text":"","iconId":16},{"type":"STICK","shape":"CIRCLE","bindings":["GAMEPAD_LEFT_THUMB_UP","GAMEPAD_LEFT_THUMB_RIGHT","GAMEPAD_LEFT_THUMB_DOWN","GAMEPAD_LEFT_THUMB_LEFT"],"scale":1,"x":0.10784313827753067,"y":0.7333333492279053,"toggleSwitch":false,"text":"","iconId":0},{"type":"TRACKPAD","shape":"CIRCLE","bindings":["GAMEPAD_RIGHT_THUMB_UP","GAMEPAD_RIGHT_THUMB_RIGHT","GAMEPAD_RIGHT_THUMB_DOWN","GAMEPAD_RIGHT_THUMB_LEFT"],"scale":1,"x":0.7843137383460999,"y":0.35555556416511536,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"CIRCLE","bindings":["GAMEPAD_BUTTON_L3","NONE","NONE","NONE"],"scale":0.85,"x":0.21568627655506134,"y":0.9111111164093018,"toggleSwitch":false,"text":"","iconId":0},{"type":"BUTTON","shape":"CIRCLE","bindings":["GAMEPAD_BUTTON_R3","NONE","NONE","NONE"],"scale":0.85,"x":0.7843137383460999,"y":0.9111111164093018,"toggleSwitch":false,"text":"","iconId":0}]}
  + app/src/main/assets/pulseaudio.tzst
  + app/src/main/assets/rootfs.txz
  + app/src/main/assets/rootfs_patches.tzst
  + app/src/main/assets/wincomponents/direct3d.tzst
  + app/src/main/assets/wincomponents/directmusic.tzst
  + app/src/main/assets/wincomponents/directplay.tzst
  + app/src/main/assets/wincomponents/directshow.tzst
  + app/src/main/assets/wincomponents/directsound.tzst
  + app/src/main/assets/wincomponents/vcrun2005.tzst
  + app/src/main/assets/wincomponents/vcrun2010.tzst
  + app/src/main/assets/wincomponents/wincomponents.json
    {
        "direct3d" : {
            "dlnames": ["d3dcompiler_33", "d3dcompiler_34", "d3dcompiler_35", "d3dcompiler_36", "d3dcompiler_37", "d3dcompiler_38", "d3dcompiler_39", "d3dcompiler_40", "d3dcompiler_41", "d3dcompiler_42", "d3dcompiler_43", "d3dcompiler_46", "d3dcompiler_47", "d3dcsx_42", "d3dcsx_43", "d3dx10", "d3dx10_33", "d3dx10_34", "d3dx10_35", "d3dx10_36", "d3dx10_37", "d3dx10_38", "d3dx10_39", "d3dx10_40", "d3dx10_41", "d3dx10_42", "d3dx10_43", "d3dx11_42", "d3dx11_43", "d3dx9_24", "d3dx9_25", "d3dx9_26", "d3dx9_27", "d3dx9_28", "d3dx9_29", "d3dx9_30", "d3dx9_31", "d3dx9_32", "d3dx9_33", "d3dx9_34", "d3dx9_35", "d3dx9_36", "d3dx9_37", "d3dx9_38", "d3dx9_39", "d3dx9_40", "d3dx9_41", "d3dx9_42", "d3dx9_43"],
            "restoreBuiltinDlls": true
        },
        "directsound" : {
            "dlnames": ["dsound"],
            "restoreBuiltinDlls": true
        },
        "directmusic" : {
            "dlnames": ["dmband", "dmcompos", "dmime", "dmloader", "dmscript", "dmstyle", "dmsynth", "dmusic", "dmusic32", "dswave"],
            "restoreBuiltinDlls": true
        },
        "directshow" : {
            "dlnames": ["amstream", "qasf", "qcap", "qdvd", "qedit", "quartz"],
            "restoreBuiltinDlls": true
        },
        "directplay" : {
            "dlnames": ["dplaysvr.exe", "dplayx", "dpmodemx", "dpnet", "dpnhpast", "dpnhupnp", "dpnsvr.exe", "dpwsockx"],
            "restoreBuiltinDlls": true
        },
     ... (truncated) ...
  + app/src/main/assets/wincomponents/wmdecoder.tzst
  + app/src/main/assets/wincomponents/xaudio.tzst
  + app/src/main/assets/wine_debug_channels.json
    ["acledit","aclui","actctx","activeds","actxprxy","adpcm","adsldp","advapi","advpack","alsa","amsi","animate","appbar","apphelp","appwizcpl","appx","asmshader","aspi","atl","atlthunk","atmlib","atom","authz","avicap","avifile","avrt","bcrypt","bidi","bitblt","bitmap","bluetooth","bluetoothapis","browseui","button","bytecodewriter","cabinet","capi","capture","cards","cdosys","class","clipboard","clipping","clusapi","combase","combo","comboex","comm","commctrl","commdlg","compstui","comsvcs","concrt","connect","console","context","coreaudio","cred","credentials","credui","crypt","cryptasn","cryptdlg","cryptext","cryptnet","crypto","cryptui","ctapi32","cursor","d2d","d3d","d3d10","d3d10core","d3d11","d3d12","d3d8","d3d9","d3d_decl","d3d_shader","d3dcompiler","d3drm","d3dx","d3dxof","d3dxof_parsing","data","datetime","davclnt","dbgeng","dbghelp","dbghelp_coff","dbghelp_dwarf","dbghelp_macho","dbghelp_msc","dbghelp_stabs","dc","dciman","dcomp","ddeml","ddraw","ddrawex","debug_buffer","debugstr","devenum","dhcpcsvc","dhtmled","dialog","diasymreader","difxapi","dinput","display","dll","dmband","dmcompos","dmfile","dmime","dmloader","dmobj","dmscript","dmstyle","dmsynth","dmusic","dmusic32","dnsapi","dosmem","dpa","dplay","dpnet","dpnhpast","dpnhupnp","dpvoice","dragdrop","driver","dsa","dsdmo","dsound","dsound3d","dsquery","dssenh","dsuiext","dswave","dwmapi","dwrite","dx8vb","dxcore","dxdiag","dxgi","dxtrans","dxva2","edit","enhmetafile","enumeration","environ","err","event","eventlog","evr","exception","exec","explorerframe","faultrep","file","fixme","fixup","fltlib","fltmgr","font","fontcache","fontsub","fusion","fwpuclnt","g711","gamebar","gameux","gamingtcui","gdi","gdiplus","geolocator","gl_compat","global","globalmem","glu","graphics","gsm","handle","header","heap","hid","hlink","hnetcfg","hook","hostname","hotkey","htmlhelp","http","hvsi","iccvid","icm","icon","ieframe","image","imagehlp","imagelist","imm","inetcomm","inetcpl","inetmib1","infosoft","inkobj","input","inseng","int","int21","int31","ipaddress","iphlpapi","ir50_32","itss","joycpl","jscript","jsproxy","kerberos","kernelbase","keyboard","ksecdd","lanman","listbox","listview","loaddll","loadperf","local","locale","localspl","localui","macdrv","manipulation","mapi","mci","mciavi","mcicda","mcimidi","mciqtz","mciwave","mdi","media","mediacontrol","menu","message","metafile","mfplat","mgmtapi","midi","mlang","mmaux","mmc","mmdevapi","mmio","mmsys","mmtime","model","module","monthcal","mountmgr","mp3dmod","mpeg3","mpr","mprapi","msacm","msado15","msasn1","msauddecmft","mscms","msctf","msctfmonitor","msdasql","msdmo","msdrm","msftedit","msg","mshtml","msi","msidb","msident","msimg32","msimtf","msisip","msisys","msmpeg2vdec","msnet","msopc","mspatcha","msrle32","msscript","mssign","mstask","msttsengine","msvcirt","msvcm","msvcp","msvcrt","msvidc32","msvideo","mswsock","msxml","nativefont","ncrypt","nddeapi","ndis","netapi32","netbios","netcfgx","netio","netprofm","ninput","nls","nonclient","nsi","nstc","ntdll","ntdsapi","ntlm","ntoskrnl","ntprint","objsel","odbc","ole","oleacc","oledb","oledlg","olemalloc","olepicture","opencl","opengl","oss","packager","pager","palette","path","pdh","perception","pidgen","pidl","plugplay","powermgnt","powrprof","print","printui","prntvpt","process","profile","progress","propsheet","propsys","psdrv","pstores","pulse","qmgr","quartz","query","qwave","ras","rasdlg","rawinput","rebar","recyclebin","reg","region","relay","resource","richedit","richedit_lists","rpc","rstrtmgr","rtutils","sapi","schannel","schedsvc","scrobj","scroll","scrrun","scsiport","secur32","security","seh","selector","sensapi","service","setupapi","sfc","shcore","shdocvw","shell","shlctrl","slc","smbios","snmpapi","snoop","sound","speech","spoolss","sspicli","static","statusbar","sti","storage","stress","string","sxs","sync","syslevel","syslink","system","systray","t2embed","tab","tape","tapi","task","taskdialog","taskschd","tbs","tdh","tdi","text","theme_scroll","thread","threadpool","thunk","toolbar","toolhelp","tooltips","trackbar","traffic","treeview","twain","twinapi","ui","uianimation","uiautomation","uiribbon","unloaddll","unwind","updown","updspapi","url","urlmon","usb","usbd","user","uxtheme","variant","vbscript","vcomp","vcruntime","vdmdbg","ver","virtdisk","volume","vulkan","vxd","warn","wavemap","waylanddrv","wbemdisp","wbemprox","webservices","wer","wevtapi","wgl","wia","wimgapi","win","wincodecs","winemapi","wineusb","wing","winhttp","wininet","winmm","winprint","winscard","winsock","winspool","winsta","winstation","winstring","wintab","wintab32","wintrust","wintypes","winusb","wlanapi","wldap32","wldp","wmadec","wmi","wmiutils","wmp","wmvcore","wnet","wofutil","wow","wpc","wpcap","wsdapi","wshom","wsnmp32","wtsapi","wuapi","x11drv","xaudio2","xdnd","xim","xinput","xmllite","xolehlp","xrandr","xrender","xvidmode"]
  + app/src/main/assets/wine_startmenu.json
    [
        {
            "name" : "Programs",
            "children" : [
                {
                    "name" : "7-Zip",
                    "path" : "Z:/opt/apps/7-Zip/7zFM.exe"
                },
                {
                    "name" : "Internet Explorer",
                    "path" : "C:/windows/system32/iexplore.exe"
                },
                {
                    "name" : "Notepad",
                    "path" : "C:/windows/notepad.exe"
                },
                {
                    "name" : "Wordpad",
                    "path" : "C:/windows/system32/write.exe",
                    "iconLocation" : "Z:/opt/wine/lib/wine/i386-windows/wordpad.exe"
                },
     ... (truncated) ...
  + app/src/main/classes.dex
  + app/src/main/java/android/support/v4/app/RemoteActionCompatParcelizer.java
    package android.support.v4.app;
    
    import androidx.core.app.RemoteActionCompat;
    import androidx.versionedparcelable.VersionedParcel;
    
    /* loaded from: classes.dex */
    public final class RemoteActionCompatParcelizer extends androidx.core.app.RemoteActionCompatParcelizer {
        public static RemoteActionCompat read(VersionedParcel parcel) {
            return androidx.core.app.RemoteActionCompatParcelizer.read(parcel);
        }
    
        public static void write(RemoteActionCompat obj, VersionedParcel parcel) {
            androidx.core.app.RemoteActionCompatParcelizer.write(obj, parcel);
        }
    }
  + app/src/main/java/android/support/v4/graphics/drawable/IconCompatParcelizer.java
    package android.support.v4.graphics.drawable;
    
    import androidx.core.graphics.drawable.IconCompat;
    import androidx.versionedparcelable.VersionedParcel;
    
    /* loaded from: classes.dex */
    public final class IconCompatParcelizer extends androidx.core.graphics.drawable.IconCompatParcelizer {
        public static IconCompat read(VersionedParcel parcel) {
            return androidx.core.graphics.drawable.IconCompatParcelizer.read(parcel);
        }
    
        public static void write(IconCompat obj, VersionedParcel parcel) {
            androidx.core.graphics.drawable.IconCompatParcelizer.write(obj, parcel);
        }
    }
  + app/src/main/java/androidx/activity/Cancellable.java
  + app/src/main/java/androidx/activity/ComponentActivity.java
  + app/src/main/java/androidx/activity/ImmLeaksCleaner.java
  + app/src/main/java/androidx/activity/OnBackPressedCallback.java
  + app/src/main/java/androidx/activity/OnBackPressedDispatcher.java
  + app/src/main/java/androidx/activity/OnBackPressedDispatcherOwner.java
  + app/src/main/java/androidx/annotation/Keep.java
  + app/src/main/java/androidx/appcompat/R$attr.java
  + app/src/main/java/androidx/appcompat/R$bool.java
  + app/src/main/java/androidx/appcompat/R$color.java
  + app/src/main/java/androidx/appcompat/R$dimen.java
  + app/src/main/java/androidx/appcompat/R$drawable.java
  + app/src/main/java/androidx/appcompat/R$id.java
  + app/src/main/java/androidx/appcompat/R$layout.java
  + app/src/main/java/androidx/appcompat/R$string.java
  + app/src/main/java/androidx/appcompat/R$style.java
  + app/src/main/java/androidx/appcompat/R$styleable.java
  + app/src/main/java/androidx/appcompat/app/ActionBar.java
  + app/src/main/java/androidx/appcompat/app/AlertController.java
  + app/src/main/java/androidx/appcompat/app/AlertDialog.java
  + app/src/main/java/androidx/appcompat/app/AppCompatActivity.java
  + app/src/main/java/androidx/appcompat/app/AppCompatCallback.java
  + app/src/main/java/androidx/appcompat/app/AppCompatDelegate.java
  + app/src/main/java/androidx/appcompat/app/AppCompatDelegateImpl.java
  + app/src/main/java/androidx/appcompat/app/AppCompatDialog.java
  + app/src/main/java/androidx/appcompat/app/AppCompatViewInflater.java
  + app/src/main/java/androidx/appcompat/app/ToolbarActionBar.java
  + app/src/main/java/androidx/appcompat/app/TwilightCalculator.java
  + app/src/main/java/androidx/appcompat/app/TwilightManager.java
  + app/src/main/java/androidx/appcompat/app/WindowDecorActionBar.java
  + app/src/main/java/androidx/appcompat/content/res/AppCompatResources.java
  + app/src/main/java/androidx/appcompat/graphics/drawable/DrawableWrapper.java
  + app/src/main/java/androidx/appcompat/resources/R$drawable.java
  + app/src/main/java/androidx/appcompat/text/AllCapsTransformationMethod.java
  + app/src/main/java/androidx/appcompat/view/ActionBarPolicy.java
  + app/src/main/java/androidx/appcompat/view/ActionMode.java
  + app/src/main/java/androidx/appcompat/view/CollapsibleActionView.java
  + app/src/main/java/androidx/appcompat/view/ContextThemeWrapper.java
  + app/src/main/java/androidx/appcompat/view/StandaloneActionMode.java
  + app/src/main/java/androidx/appcompat/view/SupportActionModeWrapper.java
  + app/src/main/java/androidx/appcompat/view/SupportMenuInflater.java
  + app/src/main/java/androidx/appcompat/view/ViewPropertyAnimatorCompatSet.java
  + app/src/main/java/androidx/appcompat/view/WindowCallbackWrapper.java
  + app/src/main/java/androidx/appcompat/view/menu/ActionMenuItem.java
  + app/src/main/java/androidx/appcompat/view/menu/ActionMenuItemView.java
  + app/src/main/java/androidx/appcompat/view/menu/BaseMenuPresenter.java
  + app/src/main/java/androidx/appcompat/view/menu/BaseMenuWrapper.java
  + app/src/main/java/androidx/appcompat/view/menu/CascadingMenuPopup.java
  + app/src/main/java/androidx/appcompat/view/menu/ExpandedMenuView.java
  + app/src/main/java/androidx/appcompat/view/menu/ListMenuItemView.java
  + app/src/main/java/androidx/appcompat/view/menu/ListMenuPresenter.java
  + app/src/main/java/androidx/appcompat/view/menu/MenuAdapter.java
  + app/src/main/java/androidx/appcompat/view/menu/MenuBuilder.java
  + app/src/main/java/androidx/appcompat/view/menu/MenuDialogHelper.java
  + app/src/main/java/androidx/appcompat/view/menu/MenuItemImpl.java
  + app/src/main/java/androidx/appcompat/view/menu/MenuItemWrapperICS.java
  + app/src/main/java/androidx/appcompat/view/menu/MenuPopup.java
  + app/src/main/java/androidx/appcompat/view/menu/MenuPopupHelper.java
  + app/src/main/java/androidx/appcompat/view/menu/MenuPresenter.java
  + app/src/main/java/androidx/appcompat/view/menu/MenuView.java
  + app/src/main/java/androidx/appcompat/view/menu/MenuWrapperICS.java
  + app/src/main/java/androidx/appcompat/view/menu/ShowableListMenu.java
  + app/src/main/java/androidx/appcompat/view/menu/StandardMenuPopup.java
  + app/src/main/java/androidx/appcompat/view/menu/SubMenuBuilder.java
  + app/src/main/java/androidx/appcompat/view/menu/SubMenuWrapperICS.java
  + app/src/main/java/androidx/appcompat/widget/AbsActionBarView.java
  + app/src/main/java/androidx/appcompat/widget/ActionBarBackgroundDrawable.java
  + app/src/main/java/androidx/appcompat/widget/ActionBarContainer.java
  + app/src/main/java/androidx/appcompat/widget/ActionBarContextView.java
  + app/src/main/java/androidx/appcompat/widget/ActionBarOverlayLayout.java
  + app/src/main/java/androidx/appcompat/widget/ActionMenuPresenter.java
  + app/src/main/java/androidx/appcompat/widget/ActionMenuView.java
  + app/src/main/java/androidx/appcompat/widget/ActivityChooserView$InnerLayout.java
  + app/src/main/java/androidx/appcompat/widget/AlertDialogLayout.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatAutoCompleteTextView.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatBackgroundHelper.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatButton.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatCheckBox.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatCheckedTextView.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatCompoundButtonHelper.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatDrawableManager.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatEditText.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatHintHelper.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatImageButton.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatImageHelper.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatImageView.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatMultiAutoCompleteTextView.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatPopupWindow.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatProgressBarHelper.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatRadioButton.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatRatingBar.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatSeekBar.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatSeekBarHelper.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatSpinner.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatTextClassifierHelper.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatTextHelper.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatTextView.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatTextViewAutoSizeHelper.java
  + app/src/main/java/androidx/appcompat/widget/AppCompatToggleButton.java
  + app/src/main/java/androidx/appcompat/widget/ButtonBarLayout.java
  + app/src/main/java/androidx/appcompat/widget/ContentFrameLayout.java
  + app/src/main/java/androidx/appcompat/widget/DecorContentParent.java
  + app/src/main/java/androidx/appcompat/widget/DecorToolbar.java
  + app/src/main/java/androidx/appcompat/widget/DialogTitle.java
  + app/src/main/java/androidx/appcompat/widget/DrawableUtils.java
  + app/src/main/java/androidx/appcompat/widget/DropDownListView.java
  + app/src/main/java/androidx/appcompat/widget/FitWindowsFrameLayout.java
  + app/src/main/java/androidx/appcompat/widget/FitWindowsLinearLayout.java
  + app/src/main/java/androidx/appcompat/widget/FitWindowsViewGroup$OnFitSystemWindowsListener.java
  + app/src/main/java/androidx/appcompat/widget/ForwardingListener.java
  + app/src/main/java/androidx/appcompat/widget/LinearLayoutCompat.java
  + app/src/main/java/androidx/appcompat/widget/ListPopupWindow.java
  + app/src/main/java/androidx/appcompat/widget/MenuItemHoverListener.java
  + app/src/main/java/androidx/appcompat/widget/MenuPopupWindow.java
  + app/src/main/java/androidx/appcompat/widget/ResourceManagerInternal.java
  + app/src/main/java/androidx/appcompat/widget/ResourcesWrapper.java
  + app/src/main/java/androidx/appcompat/widget/RtlSpacingHelper.java
  + app/src/main/java/androidx/appcompat/widget/ScrollingTabContainerView.java
  + app/src/main/java/androidx/appcompat/widget/SearchView.java
  + app/src/main/java/androidx/appcompat/widget/SuggestionsAdapter.java
  + app/src/main/java/androidx/appcompat/widget/SwitchCompat.java
  + app/src/main/java/androidx/appcompat/widget/ThemeUtils.java
  + app/src/main/java/androidx/appcompat/widget/ThemedSpinnerAdapter.java
  + app/src/main/java/androidx/appcompat/widget/TintContextWrapper.java
  + app/src/main/java/androidx/appcompat/widget/TintInfo.java
  + app/src/main/java/androidx/appcompat/widget/TintResources.java
  + app/src/main/java/androidx/appcompat/widget/TintTypedArray.java
  + app/src/main/java/androidx/appcompat/widget/Toolbar.java
  + app/src/main/java/androidx/appcompat/widget/ToolbarWidgetWrapper.java
  + app/src/main/java/androidx/appcompat/widget/TooltipCompat.java
  + app/src/main/java/androidx/appcompat/widget/VectorEnabledTintResources.java
  + app/src/main/java/androidx/appcompat/widget/ViewStubCompat.java
  + app/src/main/java/androidx/appcompat/widget/ViewUtils.java
  + app/src/main/java/androidx/appcompat/widget/WithHint.java
  + app/src/main/java/androidx/arch/core/executor/ArchTaskExecutor.java
  + app/src/main/java/androidx/arch/core/executor/DefaultTaskExecutor.java
  + app/src/main/java/androidx/arch/core/executor/TaskExecutor.java
  + app/src/main/java/androidx/arch/core/internal/FastSafeIterableMap.java
  + app/src/main/java/androidx/arch/core/internal/SafeIterableMap.java
  + app/src/main/java/androidx/cardview/widget/CardView.java
  + app/src/main/java/androidx/cardview/widget/CardViewApi21Impl.java
  + app/src/main/java/androidx/cardview/widget/CardViewDelegate.java
  + app/src/main/java/androidx/cardview/widget/CardViewImpl.java
  + app/src/main/java/androidx/cardview/widget/RoundRectDrawable.java
  + app/src/main/java/androidx/cardview/widget/RoundRectDrawableWithShadow.java
  + app/src/main/java/androidx/collection/ArrayMap.java
  + app/src/main/java/androidx/collection/ArraySet.java
  + app/src/main/java/androidx/collection/ContainerHelpers.java
  + app/src/main/java/androidx/collection/LongSparseArray.java
  + app/src/main/java/androidx/collection/LruCache.java
  + app/src/main/java/androidx/collection/MapCollections.java
  + app/src/main/java/androidx/collection/SimpleArrayMap.java
  + app/src/main/java/androidx/collection/SparseArrayCompat.java
  + app/src/main/java/androidx/constraintlayout/motion/utils/Easing.java
  + app/src/main/java/androidx/constraintlayout/motion/widget/Debug.java
  + app/src/main/java/androidx/constraintlayout/solver/ArrayLinkedVariables.java
  + app/src/main/java/androidx/constraintlayout/solver/ArrayRow.java
  + app/src/main/java/androidx/constraintlayout/solver/Cache.java
  + app/src/main/java/androidx/constraintlayout/solver/LinearSystem.java
  + app/src/main/java/androidx/constraintlayout/solver/Metrics.java
  + app/src/main/java/androidx/constraintlayout/solver/Pools$Pool.java
  + app/src/main/java/androidx/constraintlayout/solver/PriorityGoalRow.java
  + app/src/main/java/androidx/constraintlayout/solver/SolverVariable.java
  + app/src/main/java/androidx/constraintlayout/solver/SolverVariableValues.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/Barrier.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/Chain.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/ChainHead.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/ConstraintAnchor.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/ConstraintWidget.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/ConstraintWidgetContainer.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/Guideline.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/Helper.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/HelperWidget.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/Optimizer.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/VirtualLayout.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/WidgetContainer.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/analyzer/BaselineDimensionDependency.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/analyzer/BasicMeasure.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/analyzer/ChainRun.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/analyzer/Dependency.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/analyzer/DependencyGraph.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/analyzer/DependencyNode.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/analyzer/DimensionDependency.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/analyzer/GuidelineReference.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/analyzer/HelperReferences.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/analyzer/HorizontalWidgetRun.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/analyzer/RunGroup.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/analyzer/VerticalWidgetRun.java
  + app/src/main/java/androidx/constraintlayout/solver/widgets/analyzer/WidgetRun.java
  + app/src/main/java/androidx/constraintlayout/widget/Barrier.java
  + app/src/main/java/androidx/constraintlayout/widget/ConstraintAttribute.java
  + app/src/main/java/androidx/constraintlayout/widget/ConstraintHelper.java
  + app/src/main/java/androidx/constraintlayout/widget/ConstraintLayout.java
  + app/src/main/java/androidx/constraintlayout/widget/ConstraintLayoutStates.java
  + app/src/main/java/androidx/constraintlayout/widget/ConstraintSet.java
  + app/src/main/java/androidx/constraintlayout/widget/Constraints.java
  + app/src/main/java/androidx/constraintlayout/widget/ConstraintsChangedListener.java
  + app/src/main/java/androidx/constraintlayout/widget/Guideline.java
  + app/src/main/java/androidx/constraintlayout/widget/Placeholder.java
  + app/src/main/java/androidx/constraintlayout/widget/R$id.java
  + app/src/main/java/androidx/constraintlayout/widget/R$styleable.java
  + app/src/main/java/androidx/constraintlayout/widget/VirtualLayout.java
  + app/src/main/java/androidx/coordinatorlayout/R$attr.java
  + app/src/main/java/androidx/coordinatorlayout/R$style.java
  + app/src/main/java/androidx/coordinatorlayout/R$styleable.java
  + app/src/main/java/androidx/coordinatorlayout/widget/CoordinatorLayout.java
  + app/src/main/java/androidx/coordinatorlayout/widget/DirectedAcyclicGraph.java
  + app/src/main/java/androidx/coordinatorlayout/widget/ViewGroupUtils.java
  + app/src/main/java/androidx/core/R$id.java
  + app/src/main/java/androidx/core/R$styleable.java
  + app/src/main/java/androidx/core/app/ActivityCompat.java
  + app/src/main/java/androidx/core/app/ActivityRecreator.java
  + app/src/main/java/androidx/core/app/AppOpsManagerCompat.java
  + app/src/main/java/androidx/core/app/ComponentActivity.java
  + app/src/main/java/androidx/core/app/CoreComponentFactory.java
  + app/src/main/java/androidx/core/app/NavUtils.java
  + app/src/main/java/androidx/core/app/RemoteActionCompat.java
  + app/src/main/java/androidx/core/app/RemoteActionCompatParcelizer.java
  + app/src/main/java/androidx/core/app/SharedElementCallback.java
  + app/src/main/java/androidx/core/app/TaskStackBuilder.java
  + app/src/main/java/androidx/core/content/ContextCompat.java
  + app/src/main/java/androidx/core/content/PermissionChecker.java
  + app/src/main/java/androidx/core/content/res/FontResourcesParserCompat.java
  + app/src/main/java/androidx/core/content/res/ResourcesCompat.java
  + app/src/main/java/androidx/core/content/res/TypedArrayUtils.java
  + app/src/main/java/androidx/core/graphics/ColorUtils.java
  + app/src/main/java/androidx/core/graphics/Insets.java
  + app/src/main/java/androidx/core/graphics/TypefaceCompat.java
  + app/src/main/java/androidx/core/graphics/TypefaceCompatApi21Impl.java
  + app/src/main/java/androidx/core/graphics/TypefaceCompatApi26Impl.java
  + app/src/main/java/androidx/core/graphics/TypefaceCompatApi28Impl.java
  + app/src/main/java/androidx/core/graphics/TypefaceCompatApi29Impl.java
  + app/src/main/java/androidx/core/graphics/TypefaceCompatBaseImpl.java
  + app/src/main/java/androidx/core/graphics/TypefaceCompatUtil.java
  + app/src/main/java/androidx/core/graphics/drawable/DrawableCompat.java
  + app/src/main/java/androidx/core/graphics/drawable/IconCompat.java
  + app/src/main/java/androidx/core/graphics/drawable/IconCompatParcelizer.java
  + app/src/main/java/androidx/core/graphics/drawable/WrappedDrawable.java
  + app/src/main/java/androidx/core/internal/view/SupportMenu.java
  + app/src/main/java/androidx/core/internal/view/SupportMenuItem.java
  + app/src/main/java/androidx/core/internal/view/SupportSubMenu.java
  + app/src/main/java/androidx/core/math/MathUtils.java
  + app/src/main/java/androidx/core/os/BuildCompat.java
  + app/src/main/java/androidx/core/os/CancellationSignal.java
  + app/src/main/java/androidx/core/os/TraceCompat.java
  + app/src/main/java/androidx/core/provider/CallbackWithHandler.java
  + app/src/main/java/androidx/core/provider/CalleeHandler.java
  + app/src/main/java/androidx/core/provider/FontProvider.java
  + app/src/main/java/androidx/core/provider/FontRequest.java
  + app/src/main/java/androidx/core/provider/FontRequestWorker.java
  + app/src/main/java/androidx/core/provider/FontsContractCompat.java
  + app/src/main/java/androidx/core/provider/RequestExecutor.java
  + app/src/main/java/androidx/core/text/BidiFormatter.java
  + app/src/main/java/androidx/core/text/PrecomputedTextCompat.java
  + app/src/main/java/androidx/core/text/TextDirectionHeuristicCompat.java
  + app/src/main/java/androidx/core/text/TextDirectionHeuristicsCompat.java
  + app/src/main/java/androidx/core/text/TextUtilsCompat.java
  + app/src/main/java/androidx/core/util/Consumer.java
  + app/src/main/java/androidx/core/util/DebugUtils.java
  + app/src/main/java/androidx/core/util/LogWriter.java
  + app/src/main/java/androidx/core/util/ObjectsCompat.java
  + app/src/main/java/androidx/core/util/Pair.java
  + app/src/main/java/androidx/core/util/Pools$Pool.java
  + app/src/main/java/androidx/core/util/Pools$SimplePool.java
  + app/src/main/java/androidx/core/util/Pools$SynchronizedPool.java
  + app/src/main/java/androidx/core/util/Preconditions.java
  + app/src/main/java/androidx/core/view/AccessibilityDelegateCompat.java
  + app/src/main/java/androidx/core/view/ActionProvider.java
  + app/src/main/java/androidx/core/view/DisplayCutoutCompat.java
  + app/src/main/java/androidx/core/view/GravityCompat.java
  + app/src/main/java/androidx/core/view/KeyEventDispatcher.java
  + app/src/main/java/androidx/core/view/LayoutInflaterCompat.java
  + app/src/main/java/androidx/core/view/MarginLayoutParamsCompat.java
  + app/src/main/java/androidx/core/view/MenuItemCompat.java
  + app/src/main/java/androidx/core/view/MotionEventCompat.java
  + app/src/main/java/androidx/core/view/NestedScrollingChild.java
  + app/src/main/java/androidx/core/view/NestedScrollingChildHelper.java
  + app/src/main/java/androidx/core/view/NestedScrollingParent2.java
  + app/src/main/java/androidx/core/view/NestedScrollingParent3.java
  + app/src/main/java/androidx/core/view/NestedScrollingParentHelper.java
  + app/src/main/java/androidx/core/view/OnApplyWindowInsetsListener.java
  + app/src/main/java/androidx/core/view/OnReceiveContentViewBehavior.java
  + app/src/main/java/androidx/core/view/OneShotPreDrawListener.java
  + app/src/main/java/androidx/core/view/PointerIconCompat.java
  + app/src/main/java/androidx/core/view/ViewCompat.java
  + app/src/main/java/androidx/core/view/ViewConfigurationCompat.java
  + app/src/main/java/androidx/core/view/ViewGroupCompat.java
  + app/src/main/java/androidx/core/view/ViewParentCompat.java
  + app/src/main/java/androidx/core/view/ViewPropertyAnimatorCompat.java
  + app/src/main/java/androidx/core/view/ViewPropertyAnimatorListener.java
  + app/src/main/java/androidx/core/view/ViewPropertyAnimatorListenerAdapter.java
  + app/src/main/java/androidx/core/view/ViewPropertyAnimatorUpdateListener.java
  + app/src/main/java/androidx/core/view/WindowInsetsCompat.java
  + app/src/main/java/androidx/core/view/accessibility/AccessibilityClickableSpanCompat.java
  + app/src/main/java/androidx/core/view/accessibility/AccessibilityEventCompat.java
  + app/src/main/java/androidx/core/view/accessibility/AccessibilityNodeInfoCompat.java
  + app/src/main/java/androidx/core/view/accessibility/AccessibilityNodeProviderCompat.java
  + app/src/main/java/androidx/core/view/accessibility/AccessibilityRecordCompat.java
  + app/src/main/java/androidx/core/view/accessibility/AccessibilityViewCommand.java
  + app/src/main/java/androidx/core/widget/AutoScrollHelper.java
  + app/src/main/java/androidx/core/widget/AutoSizeableTextView.java
  + app/src/main/java/androidx/core/widget/CompoundButtonCompat.java
  + app/src/main/java/androidx/core/widget/EdgeEffectCompat.java
  + app/src/main/java/androidx/core/widget/ImageViewCompat.java
  + app/src/main/java/androidx/core/widget/ListViewAutoScrollHelper.java
  + app/src/main/java/androidx/core/widget/ListViewCompat.java
  + app/src/main/java/androidx/core/widget/NestedScrollView.java
  + app/src/main/java/androidx/core/widget/PopupWindowCompat.java
  + app/src/main/java/androidx/core/widget/TextViewCompat.java
  + app/src/main/java/androidx/cursoradapter/widget/CursorAdapter.java
  + app/src/main/java/androidx/cursoradapter/widget/CursorFilter.java
  + app/src/main/java/androidx/cursoradapter/widget/ResourceCursorAdapter.java
  + app/src/main/java/androidx/customview/view/AbsSavedState.java
  + app/src/main/java/androidx/customview/widget/ExploreByTouchHelper.java
  + app/src/main/java/androidx/customview/widget/FocusStrategy.java
  + app/src/main/java/androidx/customview/widget/ViewDragHelper.java
  + app/src/main/java/androidx/drawerlayout/widget/DrawerLayout.java
  + app/src/main/java/androidx/dynamicanimation/animation/AnimationHandler.java
  + app/src/main/java/androidx/dynamicanimation/animation/DynamicAnimation.java
  + app/src/main/java/androidx/dynamicanimation/animation/FloatPropertyCompat.java
  + app/src/main/java/androidx/dynamicanimation/animation/SpringAnimation.java
  + app/src/main/java/androidx/dynamicanimation/animation/SpringForce.java
  + app/src/main/java/androidx/fragment/R$anim.java
  + app/src/main/java/androidx/fragment/R$id.java
  + app/src/main/java/androidx/fragment/R$styleable.java
  + app/src/main/java/androidx/fragment/app/BackStackRecord.java
  + app/src/main/java/androidx/fragment/app/BackStackState.java
  + app/src/main/java/androidx/fragment/app/DialogFragment.java
  + app/src/main/java/androidx/fragment/app/Fragment.java
  + app/src/main/java/androidx/fragment/app/FragmentActivity.java
  + app/src/main/java/androidx/fragment/app/FragmentAnim.java
  + app/src/main/java/androidx/fragment/app/FragmentContainer.java
  + app/src/main/java/androidx/fragment/app/FragmentContainerView.java
  + app/src/main/java/androidx/fragment/app/FragmentController.java
  + app/src/main/java/androidx/fragment/app/FragmentFactory.java
  + app/src/main/java/androidx/fragment/app/FragmentHostCallback.java
  + app/src/main/java/androidx/fragment/app/FragmentLayoutInflaterFactory.java
  + app/src/main/java/androidx/fragment/app/FragmentLifecycleCallbacksDispatcher.java
  + app/src/main/java/androidx/fragment/app/FragmentManager.java
  + app/src/main/java/androidx/fragment/app/FragmentManagerImpl.java
  + app/src/main/java/androidx/fragment/app/FragmentManagerState.java
  + app/src/main/java/androidx/fragment/app/FragmentManagerViewModel.java
  + app/src/main/java/androidx/fragment/app/FragmentState.java
  + app/src/main/java/androidx/fragment/app/FragmentStateManager.java
  + app/src/main/java/androidx/fragment/app/FragmentStore.java
  + app/src/main/java/androidx/fragment/app/FragmentTransaction.java
  + app/src/main/java/androidx/fragment/app/FragmentTransition.java
  + app/src/main/java/androidx/fragment/app/FragmentTransitionCompat21.java
  + app/src/main/java/androidx/fragment/app/FragmentTransitionImpl.java
  + app/src/main/java/androidx/fragment/app/FragmentViewLifecycleOwner.java
  + app/src/main/java/androidx/fragment/app/SuperNotCalledException.java
  + app/src/main/java/androidx/interpolator/view/animation/FastOutLinearInInterpolator.java
  + app/src/main/java/androidx/interpolator/view/animation/FastOutSlowInInterpolator.java
  + app/src/main/java/androidx/interpolator/view/animation/LinearOutSlowInInterpolator.java
  + app/src/main/java/androidx/interpolator/view/animation/LookupTableInterpolator.java
  + app/src/main/java/androidx/lifecycle/ClassesInfoCache.java
  + app/src/main/java/androidx/lifecycle/CompositeGeneratedAdaptersObserver.java
  + app/src/main/java/androidx/lifecycle/FullLifecycleObserver.java
  + app/src/main/java/androidx/lifecycle/FullLifecycleObserverAdapter.java
  + app/src/main/java/androidx/lifecycle/GeneratedAdapter.java
  + app/src/main/java/androidx/lifecycle/Lifecycle.java
  + app/src/main/java/androidx/lifecycle/LifecycleEventObserver.java
  + app/src/main/java/androidx/lifecycle/LifecycleObserver.java
  + app/src/main/java/androidx/lifecycle/LifecycleOwner.java
  + app/src/main/java/androidx/lifecycle/LifecycleRegistry.java
  + app/src/main/java/androidx/lifecycle/LifecycleRegistryOwner.java
  + app/src/main/java/androidx/lifecycle/Lifecycling.java
  + app/src/main/java/androidx/lifecycle/LiveData.java
  + app/src/main/java/androidx/lifecycle/MethodCallsLogger.java
  + app/src/main/java/androidx/lifecycle/MutableLiveData.java
  + app/src/main/java/androidx/lifecycle/Observer.java
  + app/src/main/java/androidx/lifecycle/OnLifecycleEvent.java
  + app/src/main/java/androidx/lifecycle/ReflectiveGenericLifecycleObserver.java
  + app/src/main/java/androidx/lifecycle/ReportFragment.java
  + app/src/main/java/androidx/lifecycle/SavedStateHandle.java
  + app/src/main/java/androidx/lifecycle/SavedStateHandleController.java
  + app/src/main/java/androidx/lifecycle/SingleGeneratedAdapterObserver.java
  + app/src/main/java/androidx/lifecycle/ViewModel.java
  + app/src/main/java/androidx/lifecycle/ViewModelProvider.java
  + app/src/main/java/androidx/lifecycle/ViewModelStore.java
  + app/src/main/java/androidx/lifecycle/ViewModelStoreOwner.java
  + app/src/main/java/androidx/loader/app/LoaderManager.java
  + app/src/main/java/androidx/loader/app/LoaderManagerImpl.java
  + app/src/main/java/androidx/loader/content/Loader.java
  + app/src/main/java/androidx/preference/CheckBoxPreference.java
  + app/src/main/java/androidx/preference/DialogPreference.java
  + app/src/main/java/androidx/preference/DropDownPreference.java
  + app/src/main/java/androidx/preference/EditTextPreference.java
  + app/src/main/java/androidx/preference/ListPreference.java
  + app/src/main/java/androidx/preference/MultiSelectListPreference.java
  + app/src/main/java/androidx/preference/Preference.java
  + app/src/main/java/androidx/preference/PreferenceCategory.java
  + app/src/main/java/androidx/preference/PreferenceDataStore.java
  + app/src/main/java/androidx/preference/PreferenceGroup.java
  + app/src/main/java/androidx/preference/PreferenceManager.java
  + app/src/main/java/androidx/preference/PreferenceScreen.java
  + app/src/main/java/androidx/preference/R$attr.java
  + app/src/main/java/androidx/preference/R$id.java
  + app/src/main/java/androidx/preference/R$layout.java
  + app/src/main/java/androidx/preference/R$string.java
  + app/src/main/java/androidx/preference/R$styleable.java
  + app/src/main/java/androidx/preference/SeekBarPreference.java
  + app/src/main/java/androidx/preference/SwitchPreference.java
  + app/src/main/java/androidx/preference/SwitchPreferenceCompat.java
  + app/src/main/java/androidx/preference/TwoStatePreference.java
  + app/src/main/java/androidx/preference/UnPressableLinearLayout.java
  + app/src/main/java/androidx/preference/internal/PreferenceImageView.java
  + app/src/main/java/androidx/recyclerview/R$attr.java
  + app/src/main/java/androidx/recyclerview/R$dimen.java
  + app/src/main/java/androidx/recyclerview/R$styleable.java
  + app/src/main/java/androidx/recyclerview/widget/AdapterHelper.java
  + app/src/main/java/androidx/recyclerview/widget/ChildHelper.java
  + app/src/main/java/androidx/recyclerview/widget/DefaultItemAnimator.java
  + app/src/main/java/androidx/recyclerview/widget/DividerItemDecoration.java
  + app/src/main/java/androidx/recyclerview/widget/FastScroller.java
  + app/src/main/java/androidx/recyclerview/widget/GapWorker.java
  + app/src/main/java/androidx/recyclerview/widget/GridLayoutManager.java
  + app/src/main/java/androidx/recyclerview/widget/LayoutState.java
  + app/src/main/java/androidx/recyclerview/widget/LinearLayoutManager.java
  + app/src/main/java/androidx/recyclerview/widget/LinearSmoothScroller.java
  + app/src/main/java/androidx/recyclerview/widget/OpReorderer.java
  + app/src/main/java/androidx/recyclerview/widget/OrientationHelper.java
  + app/src/main/java/androidx/recyclerview/widget/PagerSnapHelper.java
  + app/src/main/java/androidx/recyclerview/widget/RecyclerView.java
  + app/src/main/java/androidx/recyclerview/widget/RecyclerViewAccessibilityDelegate.java
  + app/src/main/java/androidx/recyclerview/widget/ScrollbarHelper.java
  + app/src/main/java/androidx/recyclerview/widget/SimpleItemAnimator.java
  + app/src/main/java/androidx/recyclerview/widget/SnapHelper.java
  + app/src/main/java/androidx/recyclerview/widget/StaggeredGridLayoutManager.java
  + app/src/main/java/androidx/recyclerview/widget/ViewBoundsCheck.java
  + app/src/main/java/androidx/recyclerview/widget/ViewInfoStore.java
  + app/src/main/java/androidx/savedstate/Recreator.java
  + app/src/main/java/androidx/savedstate/SavedStateRegistry.java
  + app/src/main/java/androidx/savedstate/SavedStateRegistryController.java
  + app/src/main/java/androidx/savedstate/SavedStateRegistryOwner.java
  + app/src/main/java/androidx/transition/AnimatorUtils.java
  + app/src/main/java/androidx/transition/AutoTransition.java
  + app/src/main/java/androidx/transition/ChangeBounds.java
  + app/src/main/java/androidx/transition/Fade.java
  + app/src/main/java/androidx/transition/FragmentTransitionSupport.java
  + app/src/main/java/androidx/transition/ObjectAnimatorUtils.java
  + app/src/main/java/androidx/transition/PathMotion.java
  + app/src/main/java/androidx/transition/PropertyValuesHolderUtils.java
  + app/src/main/java/androidx/transition/R$id.java
  + app/src/main/java/androidx/transition/RectEvaluator.java
  + app/src/main/java/androidx/transition/Scene.java
  + app/src/main/java/androidx/transition/Transition.java
  + app/src/main/java/androidx/transition/TransitionListenerAdapter.java
  + app/src/main/java/androidx/transition/TransitionManager.java
  + app/src/main/java/androidx/transition/TransitionPropagation.java
  + app/src/main/java/androidx/transition/TransitionSet.java
  + app/src/main/java/androidx/transition/TransitionUtils.java
  + app/src/main/java/androidx/transition/TransitionValues.java
  + app/src/main/java/androidx/transition/TransitionValuesMaps.java
  + app/src/main/java/androidx/transition/ViewGroupOverlayApi18.java
  + app/src/main/java/androidx/transition/ViewGroupOverlayImpl.java
  + app/src/main/java/androidx/transition/ViewGroupUtils.java
  + app/src/main/java/androidx/transition/ViewOverlayApi18.java
  + app/src/main/java/androidx/transition/ViewOverlayImpl.java
  + app/src/main/java/androidx/transition/ViewUtils.java
  + app/src/main/java/androidx/transition/ViewUtilsApi19.java
  + app/src/main/java/androidx/transition/ViewUtilsApi21.java
  + app/src/main/java/androidx/transition/ViewUtilsApi22.java
  + app/src/main/java/androidx/transition/ViewUtilsApi23.java
  + app/src/main/java/androidx/transition/ViewUtilsApi29.java
  + app/src/main/java/androidx/transition/ViewUtilsBase.java
  + app/src/main/java/androidx/transition/Visibility.java
  + app/src/main/java/androidx/transition/WindowIdApi18.java
  + app/src/main/java/androidx/transition/WindowIdImpl.java
  + app/src/main/java/androidx/vectordrawable/graphics/drawable/Animatable2Compat$AnimationCallback.java
  + app/src/main/java/androidx/vectordrawable/graphics/drawable/VectorDrawableCommon.java
  + app/src/main/java/androidx/vectordrawable/graphics/drawable/VectorDrawableCompat.java
  + app/src/main/java/androidx/versionedparcelable/CustomVersionedParcelable.java
  + app/src/main/java/androidx/versionedparcelable/ParcelImpl.java
  + app/src/main/java/androidx/versionedparcelable/VersionedParcel.java
  + app/src/main/java/androidx/versionedparcelable/VersionedParcelParcel.java
  + app/src/main/java/androidx/versionedparcelable/VersionedParcelable.java
  + app/src/main/java/androidx/viewpager/widget/PagerAdapter.java
  + app/src/main/java/androidx/viewpager/widget/ViewPager.java
  + app/src/main/java/androidx/viewpager2/adapter/FragmentStateAdapter.java
  + app/src/main/java/com/github/luben/zstd/BufferPool.java
    package com.github.luben.zstd;
    
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public interface BufferPool {
        ByteBuffer get(int i);
    
        void release(ByteBuffer byteBuffer);
    }
  + app/src/main/java/com/github/luben/zstd/NoPool.java
    package com.github.luben.zstd;
    
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public class NoPool implements BufferPool {
        public static final BufferPool INSTANCE = new NoPool();
    
        private NoPool() {
        }
    
        @Override // com.github.luben.zstd.BufferPool
        public ByteBuffer get(int capacity) {
            return ByteBuffer.allocate(capacity);
        }
    
        @Override // com.github.luben.zstd.BufferPool
        public void release(ByteBuffer buffer) {
        }
    }
  + app/src/main/java/com/github/luben/zstd/Zstd.java
    package com.github.luben.zstd;
    
    import com.github.luben.zstd.util.Native;
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public class Zstd {
        public static native String getErrorName(long j);
    
        public static native boolean isError(long j);
    
        public static native int setCompressionLevel(long j, int i);
    
        static {
            Native.load();
        }
    
        static final byte[] extractArray(ByteBuffer buffer) {
            if (!buffer.hasArray() || buffer.arrayOffset() != 0) {
                throw new IllegalArgumentException("provided ByteBuffer lacks array or has non-zero arrayOffset");
            }
            return buffer.array();
        }
    }
  + app/src/main/java/com/github/luben/zstd/ZstdInputStream.java
    package com.github.luben.zstd;
    
    import java.io.FilterInputStream;
    import java.io.IOException;
    import java.io.InputStream;
    
    /* loaded from: classes.dex */
    public class ZstdInputStream extends FilterInputStream {
        private ZstdInputStreamNoFinalizer inner;
    
        public ZstdInputStream(InputStream inStream) throws IOException {
            super(inStream);
            this.inner = new ZstdInputStreamNoFinalizer(inStream);
        }
    
        protected void finalize() throws Throwable {
            close();
        }
    
        @Override // java.io.FilterInputStream, java.io.InputStream
        public int read(byte[] dst, int offset, int len) throws IOException {
            return this.inner.read(dst, offset, len);
        }
    
        @Override // java.io.FilterInputStream, java.io.InputStream
        public int read() throws IOException {
            return this.inner.read();
        }
    
        @Override // java.io.FilterInputStream, java.io.InputStream
        public int available() throws IOException {
            return this.inner.available();
        }
    
        @Override // java.io.FilterInputStream, java.io.InputStream
        public long skip(long numBytes) throws IOException {
            return this.inner.skip(numBytes);
        }
    
        @Override // java.io.FilterInputStream, java.io.InputStream
        public boolean markSupported() {
            return this.inner.markSupported();
        }
    
        @Override // java.io.FilterInputStream, java.io.InputStream, java.io.Closeable, java.lang.AutoCloseable
        public void close() throws IOException {
            this.inner.close();
        }
    }
  + app/src/main/java/com/github/luben/zstd/ZstdInputStreamNoFinalizer.java
    package com.github.luben.zstd;
    
    import com.github.luben.zstd.util.Native;
    import java.io.FilterInputStream;
    import java.io.IOException;
    import java.io.InputStream;
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public class ZstdInputStreamNoFinalizer extends FilterInputStream {
        private static final int srcBuffSize;
        private final BufferPool bufferPool;
        private long dstPos;
        private boolean frameFinished;
        private boolean isClosed;
        private boolean isContinuous;
        private boolean needRead;
        private final byte[] src;
        private final ByteBuffer srcByteBuffer;
        private long srcPos;
        private long srcSize;
        private final long stream;
    
        private static native long createDStream();
    
        private native int decompressStream(long j, byte[] bArr, int i, byte[] bArr2, int i2);
    
        private static native int freeDStream(long j);
    
        private native int initDStream(long j);
    
        public static native long recommendedDInSize();
    
        public static native long recommendedDOutSize();
    
        static {
            Native.load();
            srcBuffSize = (int) recommendedDInSize();
        }
    
        public ZstdInputStreamNoFinalizer(InputStream inStream) throws IOException {
            this(inStream, NoPool.INSTANCE);
        }
    
        public ZstdInputStreamNoFinalizer(InputStream inStream, BufferPool bufferPool) throws IOException {
            super(inStream);
            this.dstPos = 0L;
            this.srcPos = 0L;
            this.srcSize = 0L;
            this.needRead = true;
            this.isContinuous = false;
            this.frameFinished = true;
            this.isClosed = false;
            this.bufferPool = bufferPool;
            int i = srcBuffSize;
            ByteBuffer byteBuffer = bufferPool.get(i);
            this.srcByteBuffer = byteBuffer;
            if (byteBuffer == null) {
                throw new IOException("Cannot get ByteBuffer of size " + i + " from the BufferPool");
            }
            this.src = Zstd.extractArray(byteBuffer);
            synchronized (this) {
                long createDStream = createDStream();
                this.stream = createDStream;
                initDStream(createDStream);
            }
        }
    
        @Override // java.io.FilterInputStream, java.io.InputStream
        public synchronized int read(byte[] dst, int offset, int len) throws IOException {
            if (offset >= 0) {
                if (len <= dst.length - offset) {
                    if (len == 0) {
                        return 0;
                    }
                    int result = 0;
                    while (result == 0) {
                        result = readInternal(dst, offset, len);
                    }
                    return result;
                }
            }
            throw new IndexOutOfBoundsException("Requested length " + len + " from offset " + offset + " in buffer of size " + dst.length);
        }
    
        /* JADX WARN: Code restructure failed: missing block: B:55:0x00c3, code lost:
    
            return (int) (r3 - r13);
         */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        int readInternal(byte[] r12, int r13, int r14) throws java.io.IOException {
            /*
                Method dump skipped, instructions count: 244
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: com.github.luben.zstd.ZstdInputStreamNoFinalizer.readInternal(byte[], int, int):int");
        }
    
        @Override // java.io.FilterInputStream, java.io.InputStream
        public synchronized int read() throws IOException {
            byte[] oneByte = new byte[1];
            int result = 0;
            while (result == 0) {
                result = readInternal(oneByte, 0, 1);
            }
            if (result == 1) {
                return oneByte[0] & 255;
            }
            return -1;
        }
    
        @Override // java.io.FilterInputStream, java.io.InputStream
        public synchronized int available() throws IOException {
            if (this.isClosed) {
                throw new IOException("Stream closed");
            }
            if (!this.needRead) {
                return 1;
            }
            return ((FilterInputStream) this).in.available();
        }
    
        @Override // java.io.FilterInputStream, java.io.InputStream
        public boolean markSupported() {
            return false;
        }
    
        @Override // java.io.FilterInputStream, java.io.InputStream
        public synchronized long skip(long numBytes) throws IOException {
            if (this.isClosed) {
                throw new IOException("Stream closed");
            }
            if (numBytes <= 0) {
                return 0L;
            }
            int bufferLen = (int) recommendedDOutSize();
            if (bufferLen > numBytes) {
                bufferLen = (int) numBytes;
            }
            ByteBuffer buf = this.bufferPool.get(bufferLen);
            long toSkip = numBytes;
            try {
                byte[] data = Zstd.extractArray(buf);
                while (toSkip > 0) {
                    try {
                        int read = read(data, 0, (int) Math.min(bufferLen, toSkip));
                        if (read < 0) {
                            break;
                        }
                        toSkip -= read;
                    } catch (Throwable th) {
                        th = th;
                        this.bufferPool.release(buf);
                        throw th;
                    }
                }
                this.bufferPool.release(buf);
                return numBytes - toSkip;
            } catch (Throwable th2) {
                th = th2;
            }
        }
    
        @Override // java.io.FilterInputStream, java.io.InputStream, java.io.Closeable, java.lang.AutoCloseable
        public synchronized void close() throws IOException {
            if (this.isClosed) {
                return;
            }
            this.isClosed = true;
            this.bufferPool.release(this.srcByteBuffer);
            freeDStream(this.stream);
            ((FilterInputStream) this).in.close();
        }
    }
  + app/src/main/java/com/github/luben/zstd/ZstdOutputStream.java
    package com.github.luben.zstd;
    
    import java.io.FilterOutputStream;
    import java.io.IOException;
    import java.io.OutputStream;
    
    /* loaded from: classes.dex */
    public class ZstdOutputStream extends FilterOutputStream {
        private ZstdOutputStreamNoFinalizer inner;
    
        public ZstdOutputStream(OutputStream outStream, int level) throws IOException {
            this(outStream, NoPool.INSTANCE);
            this.inner.setLevel(level);
        }
    
        public ZstdOutputStream(OutputStream outStream, BufferPool bufferPool) throws IOException {
            super(outStream);
            this.inner = new ZstdOutputStreamNoFinalizer(outStream, bufferPool);
        }
    
        protected void finalize() throws Throwable {
            close();
        }
    
        @Override // java.io.FilterOutputStream, java.io.OutputStream
        public void write(byte[] src, int offset, int len) throws IOException {
            this.inner.write(src, offset, len);
        }
    
        @Override // java.io.FilterOutputStream, java.io.OutputStream
        public void write(int i) throws IOException {
            this.inner.write(i);
        }
    
        @Override // java.io.FilterOutputStream, java.io.OutputStream, java.io.Flushable
        public void flush() throws IOException {
            this.inner.flush();
        }
    
        @Override // java.io.FilterOutputStream, java.io.OutputStream, java.io.Closeable, java.lang.AutoCloseable
        public void close() throws IOException {
            this.inner.close();
        }
    }
  + app/src/main/java/com/github/luben/zstd/ZstdOutputStreamNoFinalizer.java
    package com.github.luben.zstd;
    
    import com.github.luben.zstd.util.Native;
    import java.io.FilterOutputStream;
    import java.io.IOException;
    import java.io.OutputStream;
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public class ZstdOutputStreamNoFinalizer extends FilterOutputStream {
        private static final int dstSize;
        private final BufferPool bufferPool;
        private boolean closeFrameOnFlush;
        private final byte[] dst;
        private final ByteBuffer dstByteBuffer;
        private long dstPos;
        private boolean frameClosed;
        private boolean isClosed;
        private long srcPos;
        private final long stream;
    
        private native int compressStream(long j, byte[] bArr, int i, byte[] bArr2, int i2);
    
        private static native long createCStream();
    
        private native int endStream(long j, byte[] bArr, int i);
    
        private native int flushStream(long j, byte[] bArr, int i);
    
        private static native int freeCStream(long j);
    
        public static native long recommendedCOutSize();
    
        private native int resetCStream(long j);
    
        static {
            Native.load();
            dstSize = (int) recommendedCOutSize();
        }
    
        public ZstdOutputStreamNoFinalizer(OutputStream outStream, BufferPool bufferPool) throws IOException {
            super(outStream);
            this.srcPos = 0L;
            this.dstPos = 0L;
            this.isClosed = false;
            this.closeFrameOnFlush = false;
            this.frameClosed = true;
            this.stream = createCStream();
            this.bufferPool = bufferPool;
            int i = dstSize;
            ByteBuffer byteBuffer = bufferPool.get(i);
            this.dstByteBuffer = byteBuffer;
            if (byteBuffer == null) {
                throw new IOException("Cannot get ByteBuffer of size " + i + " from the BufferPool");
            }
            this.dst = Zstd.extractArray(byteBuffer);
        }
    
        public synchronized ZstdOutputStreamNoFinalizer setLevel(int level) throws IOException {
            if (!this.frameClosed) {
                throw new IOException("Change of parameter on initialized stream");
            }
            int size = Zstd.setCompressionLevel(this.stream, level);
            if (Zstd.isError(size)) {
                throw new IOException("Compression param: " + Zstd.getErrorName(size));
            }
            return this;
        }
    
        @Override // java.io.FilterOutputStream, java.io.OutputStream
        public synchronized void write(byte[] src, int offset, int len) throws IOException {
            if (this.isClosed) {
                throw new IOException("Stream closed");
            }
            if (this.frameClosed) {
                int size = resetCStream(this.stream);
                if (Zstd.isError(size)) {
                    throw new IOException("Compression error: cannot create header: " + Zstd.getErrorName(size));
                }
                this.frameClosed = false;
            }
            int size2 = offset + len;
            this.srcPos = offset;
            while (this.srcPos < size2) {
                int size3 = compressStream(this.stream, this.dst, dstSize, src, size2);
                if (Zstd.isError(size3)) {
                    throw new IOException("Compression error: " + Zstd.getErrorName(size3));
                }
                long j = this.dstPos;
                if (j > 0) {
                    ((FilterOutputStream) this).out.write(this.dst, 0, (int) j);
                }
            }
        }
    
        @Override // java.io.FilterOutputStream, java.io.OutputStream
        public void write(int i) throws IOException {
            byte[] oneByte = {(byte) i};
            write(oneByte, 0, 1);
        }
    
        @Override // java.io.FilterOutputStream, java.io.OutputStream, java.io.Flushable
        public synchronized void flush() throws IOException {
            int size;
            int size2;
            if (this.isClosed) {
                throw new IOException("Stream closed");
            }
            if (!this.frameClosed) {
                if (this.closeFrameOnFlush) {
                    do {
                        size2 = endStream(this.stream, this.dst, dstSize);
                        if (Zstd.isError(size2)) {
                            throw new IOException("Compression error: " + Zstd.getErrorName(size2));
                        }
                        ((FilterOutputStream) this).out.write(this.dst, 0, (int) this.dstPos);
                    } while (size2 > 0);
                    this.frameClosed = true;
                } else {
                    do {
                        size = flushStream(this.stream, this.dst, dstSize);
                        if (Zstd.isError(size)) {
                            throw new IOException("Compression error: " + Zstd.getErrorName(size));
                        }
                        ((FilterOutputStream) this).out.write(this.dst, 0, (int) this.dstPos);
                    } while (size > 0);
                }
                ((FilterOutputStream) this).out.flush();
            }
        }
    
        @Override // java.io.FilterOutputStream, java.io.OutputStream, java.io.Closeable, java.lang.AutoCloseable
        public synchronized void close() throws IOException {
            close(true);
        }
    
        private void close(boolean closeParentStream) throws IOException {
            int size;
            if (this.isClosed) {
                return;
            }
            try {
                if (!this.frameClosed) {
                    do {
                        size = endStream(this.stream, this.dst, dstSize);
                        if (Zstd.isError(size)) {
                            throw new IOException("Compression error: " + Zstd.getErrorName(size));
                        }
                        ((FilterOutputStream) this).out.write(this.dst, 0, (int) this.dstPos);
                    } while (size > 0);
                }
                if (closeParentStream) {
                    ((FilterOutputStream) this).out.close();
                }
            } finally {
                this.isClosed = true;
                this.bufferPool.release(this.dstByteBuffer);
                freeCStream(this.stream);
            }
        }
    }
  + app/src/main/java/com/github/luben/zstd/util/Native.java
    package com.github.luben.zstd.util;
    
    import java.io.File;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.io.InputStream;
    
    /* loaded from: classes.dex */
    public enum Native {
        ;
    
        private static final String errorMsg = "Unsupported OS/arch, cannot find " + resourceName() + " or load zstd-jni-1.5.2-3 from system libraries. Please try building from source the jar or providing libzstd-jni-1.5.2-3 in your system.";
        private static boolean loaded = false;
    
        private static String osName() {
            String os = System.getProperty("os.name").toLowerCase().replace(' ', '_');
            if (os.startsWith("win")) {
                return "win";
            }
            if (os.startsWith("mac")) {
                return "darwin";
            }
            return os;
        }
    
        private static String osArch() {
            return System.getProperty("os.arch");
        }
    
        private static String libExtension() {
            if (osName().contains("os_x") || osName().contains("darwin")) {
                return "dylib";
            }
            if (osName().contains("win")) {
                return "dll";
            }
            return "so";
        }
    
        private static String resourceName() {
            return "/" + osName() + "/" + osArch() + "/libzstd-jni-1.5.2-3." + libExtension();
        }
    
        public static synchronized void load() {
            synchronized (Native.class) {
                load(null);
            }
        }
    
        public static synchronized void load(File tempFolder) {
            synchronized (Native.class) {
                if (loaded) {
                    return;
                }
                String resourceName = resourceName();
                String overridePath = System.getProperty("ZstdNativePath");
                if (overridePath != null) {
                    System.load(overridePath);
                    loaded = true;
                    return;
                }
                try {
                    Class.forName("org.osgi.framework.BundleEvent");
                    System.loadLibrary("libzstd-jni-1.5.2-3");
                    loaded = true;
                } catch (Throwable th) {
                    InputStream is = Native.class.getResourceAsStream(resourceName);
                    if (is == null) {
                        try {
                            System.loadLibrary("zstd-jni-1.5.2-3");
                            loaded = true;
                            return;
                        } catch (UnsatisfiedLinkError e) {
                            UnsatisfiedLinkError err = new UnsatisfiedLinkError(e.getMessage() + "\n" + errorMsg);
                            err.setStackTrace(e.getStackTrace());
                            throw err;
                        }
                    }
                    File tempLib = null;
                    FileOutputStream out = null;
                    try {
                        try {
                            File tempLib2 = File.createTempFile("libzstd-jni-1.5.2-3", "." + libExtension(), tempFolder);
                            tempLib2.deleteOnExit();
                            FileOutputStream out2 = new FileOutputStream(tempLib2);
                            byte[] buf = new byte[4096];
                            while (true) {
                                int read = is.read(buf);
                                if (read == -1) {
                                    try {
                                        break;
                                    } catch (IOException e2) {
                                    }
                                } else {
                                    out2.write(buf, 0, read);
                                }
                            }
                            out2.flush();
                            out2.close();
                            out2 = null;
                            try {
                                System.load(tempLib2.getAbsolutePath());
                            } catch (UnsatisfiedLinkError e3) {
                                try {
                                    System.loadLibrary("zstd-jni-1.5.2-3");
                                } catch (UnsatisfiedLinkError e1) {
                                    UnsatisfiedLinkError err2 = new UnsatisfiedLinkError(e3.getMessage() + "\n" + e1.getMessage() + "\n" + errorMsg);
                                    err2.setStackTrace(e1.getStackTrace());
                                    throw err2;
                                }
                            }
                            loaded = true;
                            try {
                                is.close();
                                if (out2 != null) {
                                    out2.close();
                                }
                                if (tempLib2.exists()) {
                                    tempLib2.delete();
                                }
                            } catch (IOException e4) {
                            }
                        } catch (Throwable th2) {
                            try {
                                is.close();
                                if (0 != 0) {
                                    out.close();
                                }
                                if (0 != 0 && tempLib.exists()) {
                                    tempLib.delete();
                                }
                            } catch (IOException e5) {
                            }
                            throw th2;
                        }
                    } catch (IOException e6) {
                        ExceptionInInitializerError err3 = new ExceptionInInitializerError("Cannot unpack libzstd-jni-1.5.2-3: " + e6.getMessage());
                        err3.setStackTrace(e6.getStackTrace());
                        throw err3;
                    }
                }
            }
        }
    }
  + app/src/main/java/com/google/android/material/R$animator.java
  + app/src/main/java/com/google/android/material/R$attr.java
  + app/src/main/java/com/google/android/material/R$color.java
  + app/src/main/java/com/google/android/material/R$dimen.java
  + app/src/main/java/com/google/android/material/R$drawable.java
  + app/src/main/java/com/google/android/material/R$id.java
  + app/src/main/java/com/google/android/material/R$integer.java
  + app/src/main/java/com/google/android/material/R$layout.java
  + app/src/main/java/com/google/android/material/R$plurals.java
  + app/src/main/java/com/google/android/material/R$string.java
  + app/src/main/java/com/google/android/material/R$style.java
  + app/src/main/java/com/google/android/material/R$styleable.java
  + app/src/main/java/com/google/android/material/animation/AnimationUtils.java
  + app/src/main/java/com/google/android/material/animation/AnimatorSetCompat.java
  + app/src/main/java/com/google/android/material/animation/ArgbEvaluatorCompat.java
  + app/src/main/java/com/google/android/material/animation/ChildrenAlphaProperty.java
  + app/src/main/java/com/google/android/material/animation/DrawableAlphaProperty.java
  + app/src/main/java/com/google/android/material/animation/ImageMatrixProperty.java
  + app/src/main/java/com/google/android/material/animation/MatrixEvaluator.java
  + app/src/main/java/com/google/android/material/animation/MotionSpec.java
  + app/src/main/java/com/google/android/material/animation/MotionTiming.java
  + app/src/main/java/com/google/android/material/animation/Positioning.java
  + app/src/main/java/com/google/android/material/animation/TransformationCallback.java
  + app/src/main/java/com/google/android/material/appbar/AppBarLayout.java
  + app/src/main/java/com/google/android/material/appbar/HeaderBehavior.java
  + app/src/main/java/com/google/android/material/appbar/HeaderScrollingViewBehavior.java
  + app/src/main/java/com/google/android/material/appbar/MaterialToolbar.java
  + app/src/main/java/com/google/android/material/appbar/ViewOffsetBehavior.java
  + app/src/main/java/com/google/android/material/appbar/ViewOffsetHelper.java
  + app/src/main/java/com/google/android/material/appbar/ViewUtilsLollipop.java
  + app/src/main/java/com/google/android/material/badge/BadgeDrawable.java
  + app/src/main/java/com/google/android/material/badge/BadgeUtils.java
  + app/src/main/java/com/google/android/material/behavior/HideBottomViewOnScrollBehavior.java
  + app/src/main/java/com/google/android/material/behavior/SwipeDismissBehavior.java
  + app/src/main/java/com/google/android/material/bottomappbar/BottomAppBar.java
  + app/src/main/java/com/google/android/material/bottomappbar/BottomAppBarTopEdgeTreatment.java
  + app/src/main/java/com/google/android/material/bottomsheet/BottomSheetBehavior.java
  + app/src/main/java/com/google/android/material/button/MaterialButton.java
  + app/src/main/java/com/google/android/material/button/MaterialButtonHelper.java
  + app/src/main/java/com/google/android/material/button/MaterialButtonToggleGroup.java
  + app/src/main/java/com/google/android/material/canvas/CanvasCompat.java
  + app/src/main/java/com/google/android/material/card/MaterialCardView.java
  + app/src/main/java/com/google/android/material/card/MaterialCardViewHelper.java
  + app/src/main/java/com/google/android/material/checkbox/MaterialCheckBox.java
  + app/src/main/java/com/google/android/material/chip/Chip.java
  + app/src/main/java/com/google/android/material/chip/ChipDrawable.java
  + app/src/main/java/com/google/android/material/chip/ChipGroup.java
  + app/src/main/java/com/google/android/material/circularreveal/CircularRevealCompat.java
  + app/src/main/java/com/google/android/material/circularreveal/CircularRevealFrameLayout.java
  + app/src/main/java/com/google/android/material/circularreveal/CircularRevealHelper.java
  + app/src/main/java/com/google/android/material/circularreveal/CircularRevealWidget.java
  + app/src/main/java/com/google/android/material/circularreveal/cardview/CircularRevealCardView.java
  + app/src/main/java/com/google/android/material/color/MaterialColors.java
  + app/src/main/java/com/google/android/material/datepicker/CalendarConstraints.java
  + app/src/main/java/com/google/android/material/datepicker/CalendarItemStyle.java
  + app/src/main/java/com/google/android/material/datepicker/CalendarStyle.java
  + app/src/main/java/com/google/android/material/datepicker/DateSelector.java
  + app/src/main/java/com/google/android/material/datepicker/DateStrings.java
  + app/src/main/java/com/google/android/material/datepicker/DateValidatorPointForward.java
  + app/src/main/java/com/google/android/material/datepicker/DaysOfWeekAdapter.java
  + app/src/main/java/com/google/android/material/datepicker/MaterialCalendar.java
  + app/src/main/java/com/google/android/material/datepicker/MaterialCalendarGridView.java
  + app/src/main/java/com/google/android/material/datepicker/MaterialDatePicker.java
  + app/src/main/java/com/google/android/material/datepicker/MaterialPickerOnPositiveButtonClickListener.java
  + app/src/main/java/com/google/android/material/datepicker/MaterialTextInputPicker.java
  + app/src/main/java/com/google/android/material/datepicker/Month.java
  + app/src/main/java/com/google/android/material/datepicker/MonthAdapter.java
  + app/src/main/java/com/google/android/material/datepicker/MonthsPagerAdapter.java
  + app/src/main/java/com/google/android/material/datepicker/OnSelectionChangedListener.java
  + app/src/main/java/com/google/android/material/datepicker/PickerFragment.java
  + app/src/main/java/com/google/android/material/datepicker/SmoothCalendarLayoutManager.java
  + app/src/main/java/com/google/android/material/datepicker/TimeSource.java
  + app/src/main/java/com/google/android/material/datepicker/UtcDates.java
  + app/src/main/java/com/google/android/material/datepicker/YearGridAdapter.java
  + app/src/main/java/com/google/android/material/dialog/InsetDialogOnTouchListener.java
  + app/src/main/java/com/google/android/material/drawable/DrawableUtils.java
  + app/src/main/java/com/google/android/material/elevation/ElevationOverlayProvider.java
  + app/src/main/java/com/google/android/material/expandable/ExpandableWidget.java
  + app/src/main/java/com/google/android/material/expandable/ExpandableWidgetHelper.java
  + app/src/main/java/com/google/android/material/floatingactionbutton/BorderDrawable.java
  + app/src/main/java/com/google/android/material/floatingactionbutton/ExtendedFloatingActionButton.java
  + app/src/main/java/com/google/android/material/floatingactionbutton/FloatingActionButton.java
  + app/src/main/java/com/google/android/material/floatingactionbutton/FloatingActionButtonImpl.java
  + app/src/main/java/com/google/android/material/floatingactionbutton/FloatingActionButtonImplLollipop.java
  + app/src/main/java/com/google/android/material/floatingactionbutton/MotionStrategy.java
  + app/src/main/java/com/google/android/material/internal/BaselineLayout.java
  + app/src/main/java/com/google/android/material/internal/CheckableImageButton.java
  + app/src/main/java/com/google/android/material/internal/CollapsingTextHelper.java
  + app/src/main/java/com/google/android/material/internal/ContextUtils.java
  + app/src/main/java/com/google/android/material/internal/DescendantOffsetUtils.java
  + app/src/main/java/com/google/android/material/internal/FlowLayout.java
  + app/src/main/java/com/google/android/material/internal/ForegroundLinearLayout.java
  + app/src/main/java/com/google/android/material/internal/ManufacturerUtils.java
  + app/src/main/java/com/google/android/material/internal/NavigationMenu.java
  + app/src/main/java/com/google/android/material/internal/NavigationMenuItemView.java
  + app/src/main/java/com/google/android/material/internal/NavigationMenuPresenter.java
  + app/src/main/java/com/google/android/material/internal/NavigationMenuView.java
  + app/src/main/java/com/google/android/material/internal/NavigationSubMenu.java
  + app/src/main/java/com/google/android/material/internal/ParcelableSparseArray.java
  + app/src/main/java/com/google/android/material/internal/ScrimInsetsFrameLayout.java
  + app/src/main/java/com/google/android/material/internal/StateListAnimator.java
  + app/src/main/java/com/google/android/material/internal/StaticLayoutBuilderCompat.java
  + app/src/main/java/com/google/android/material/internal/TextDrawableHelper.java
  + app/src/main/java/com/google/android/material/internal/TextWatcherAdapter.java
  + app/src/main/java/com/google/android/material/internal/ThemeEnforcement.java
  + app/src/main/java/com/google/android/material/internal/ToolbarUtils.java
  + app/src/main/java/com/google/android/material/internal/ViewUtils.java
  + app/src/main/java/com/google/android/material/internal/VisibilityAwareImageButton.java
  + app/src/main/java/com/google/android/material/math/MathUtils.java
  + app/src/main/java/com/google/android/material/navigation/NavigationView.java
  + app/src/main/java/com/google/android/material/progressindicator/AnimatorDurationScaleProvider.java
  + app/src/main/java/com/google/android/material/progressindicator/BaseProgressIndicator.java
  + app/src/main/java/com/google/android/material/progressindicator/BaseProgressIndicatorSpec.java
  + app/src/main/java/com/google/android/material/progressindicator/CircularDrawingDelegate.java
  + app/src/main/java/com/google/android/material/progressindicator/CircularIndeterminateAnimatorDelegate.java
  + app/src/main/java/com/google/android/material/progressindicator/CircularProgressIndicator.java
  + app/src/main/java/com/google/android/material/progressindicator/CircularProgressIndicatorSpec.java
  + app/src/main/java/com/google/android/material/progressindicator/DeterminateDrawable.java
  + app/src/main/java/com/google/android/material/progressindicator/DrawableWithAnimatedVisibilityChange.java
  + app/src/main/java/com/google/android/material/progressindicator/DrawingDelegate.java
  + app/src/main/java/com/google/android/material/progressindicator/IndeterminateAnimatorDelegate.java
  + app/src/main/java/com/google/android/material/progressindicator/IndeterminateDrawable.java
  + app/src/main/java/com/google/android/material/radiobutton/MaterialRadioButton.java
  + app/src/main/java/com/google/android/material/resources/CancelableFontCallback.java
  + app/src/main/java/com/google/android/material/resources/MaterialAttributes.java
  + app/src/main/java/com/google/android/material/resources/MaterialResources.java
  + app/src/main/java/com/google/android/material/resources/TextAppearance.java
  + app/src/main/java/com/google/android/material/resources/TextAppearanceConfig.java
  + app/src/main/java/com/google/android/material/resources/TextAppearanceFontCallback.java
  + app/src/main/java/com/google/android/material/ripple/RippleDrawableCompat.java
  + app/src/main/java/com/google/android/material/ripple/RippleUtils.java
  + app/src/main/java/com/google/android/material/shadow/ShadowRenderer.java
  + app/src/main/java/com/google/android/material/shadow/ShadowViewDelegate.java
  + app/src/main/java/com/google/android/material/shape/AbsoluteCornerSize.java
  + app/src/main/java/com/google/android/material/shape/AdjustedCornerSize.java
  + app/src/main/java/com/google/android/material/shape/CornerSize.java
  + app/src/main/java/com/google/android/material/shape/CornerTreatment.java
  + app/src/main/java/com/google/android/material/shape/CutCornerTreatment.java
  + app/src/main/java/com/google/android/material/shape/EdgeTreatment.java
  + app/src/main/java/com/google/android/material/shape/MaterialShapeDrawable.java
  + app/src/main/java/com/google/android/material/shape/MaterialShapeUtils.java
  + app/src/main/java/com/google/android/material/shape/RelativeCornerSize.java
  + app/src/main/java/com/google/android/material/shape/RoundedCornerTreatment.java
  + app/src/main/java/com/google/android/material/shape/ShapeAppearanceModel.java
  + app/src/main/java/com/google/android/material/shape/ShapeAppearancePathProvider.java
  + app/src/main/java/com/google/android/material/shape/ShapePath.java
  + app/src/main/java/com/google/android/material/shape/Shapeable.java
  + app/src/main/java/com/google/android/material/snackbar/BaseTransientBottomBar$Behavior.java
  + app/src/main/java/com/google/android/material/snackbar/BaseTransientBottomBar$BehaviorDelegate.java
  + app/src/main/java/com/google/android/material/snackbar/BaseTransientBottomBar$OnAttachStateChangeListener.java
  + app/src/main/java/com/google/android/material/snackbar/BaseTransientBottomBar$OnLayoutChangeListener.java
  + app/src/main/java/com/google/android/material/snackbar/BaseTransientBottomBar$SnackbarBaseLayout.java
  + app/src/main/java/com/google/android/material/snackbar/Snackbar$SnackbarLayout.java
  + app/src/main/java/com/google/android/material/snackbar/SnackbarContentLayout.java
  + app/src/main/java/com/google/android/material/snackbar/SnackbarManager.java
  + app/src/main/java/com/google/android/material/stateful/ExtendableSavedState.java
  + app/src/main/java/com/google/android/material/tabs/ElasticTabIndicatorInterpolator.java
  + app/src/main/java/com/google/android/material/tabs/TabIndicatorInterpolator.java
  + app/src/main/java/com/google/android/material/tabs/TabItem.java
  + app/src/main/java/com/google/android/material/tabs/TabLayout.java
  + app/src/main/java/com/google/android/material/textfield/ClearTextEndIconDelegate.java
  + app/src/main/java/com/google/android/material/textfield/CustomEndIconDelegate.java
  + app/src/main/java/com/google/android/material/textfield/CutoutDrawable.java
  + app/src/main/java/com/google/android/material/textfield/DropdownMenuEndIconDelegate.java
  + app/src/main/java/com/google/android/material/textfield/EndIconDelegate.java
  + app/src/main/java/com/google/android/material/textfield/IndicatorViewController.java
  + app/src/main/java/com/google/android/material/textfield/MaterialAutoCompleteTextView.java
  + app/src/main/java/com/google/android/material/textfield/NoEndIconDelegate.java
  + app/src/main/java/com/google/android/material/textfield/PasswordToggleEndIconDelegate.java
  + app/src/main/java/com/google/android/material/textfield/TextInputEditText.java
  + app/src/main/java/com/google/android/material/textfield/TextInputLayout.java
  + app/src/main/java/com/google/android/material/textview/MaterialTextView.java
  + app/src/main/java/com/google/android/material/theme/MaterialComponentsViewInflater.java
  + app/src/main/java/com/google/android/material/theme/overlay/MaterialThemeOverlay.java
  + app/src/main/java/com/google/android/material/timepicker/ChipTextInputComboView.java
  + app/src/main/java/com/google/android/material/timepicker/ClockFaceView.java
  + app/src/main/java/com/google/android/material/timepicker/ClockHandView.java
  + app/src/main/java/com/google/android/material/timepicker/MaxInputValidator.java
  + app/src/main/java/com/google/android/material/timepicker/RadialViewGroup.java
  + app/src/main/java/com/google/android/material/timepicker/TimeModel.java
  + app/src/main/java/com/google/android/material/timepicker/TimePickerView.java
  + app/src/main/java/com/google/android/material/transformation/ExpandableBehavior.java
  + app/src/main/java/com/google/android/material/transformation/ExpandableTransformationBehavior.java
  + app/src/main/java/com/google/android/material/transformation/FabTransformationBehavior.java
  + app/src/main/java/com/google/android/material/transformation/FabTransformationScrimBehavior.java
  + app/src/main/java/com/google/android/material/transformation/FabTransformationSheetBehavior.java
  + app/src/main/java/com/google/android/material/transformation/TransformationChildCard.java
  + app/src/main/java/com/google/android/material/transformation/TransformationChildLayout.java
  + app/src/main/java/com/winlator/BaseFileManagerFragment.java
    package com.winlator;
    
    import android.app.Activity;
    import android.content.Context;
    import android.content.SharedPreferences;
    import android.os.Bundle;
    import android.view.LayoutInflater;
    import android.view.MenuItem;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.TextView;
    import androidx.appcompat.app.ActionBar;
    import androidx.appcompat.app.AppCompatActivity;
    import androidx.fragment.app.Fragment;
    import androidx.fragment.app.FragmentActivity;
    import androidx.preference.PreferenceManager;
    import androidx.recyclerview.widget.DividerItemDecoration;
    import androidx.recyclerview.widget.GridLayoutManager;
    import androidx.recyclerview.widget.LinearLayoutManager;
    import androidx.recyclerview.widget.RecyclerView;
    import com.google.android.material.floatingactionbutton.FloatingActionButton;
    import com.winlator.container.ContainerManager;
    import com.winlator.core.AppUtils;
    import com.winlator.core.FileUtils;
    import com.winlator.core.PreloaderDialog;
    import com.winlator.core.UnitUtils;
    import java.io.File;
    import java.util.Stack;
    import java.util.concurrent.Executors;
    
    /* loaded from: classes.dex */
    public abstract class BaseFileManagerFragment<T> extends Fragment {
        protected Clipboard clipboard;
        protected TextView emptyTextView;
        protected DividerItemDecoration itemDecoration;
        protected ContainerManager manager;
        protected FloatingActionButton pasteButton;
        protected SharedPreferences preferences;
        protected PreloaderDialog preloaderDialog;
        protected RecyclerView recyclerView;
        protected ViewStyle viewStyle = ViewStyle.GRID;
        protected boolean viewStyleNeedsUpdate = true;
        protected final Stack<T> folderStack = new Stack<>();
    
        protected enum ViewStyle {
            LIST,
            GRID
        }
    
        protected abstract String getHomeTitle();
    
        static class Clipboard {
            final boolean cutMode;
            final File[] files;
            File targetDir;
    
            Clipboard(File[] files, boolean cutMode) {
                this.files = files;
                this.cutMode = cutMode;
            }
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setHasOptionsMenu(true);
            Activity activity = getActivity();
            this.preloaderDialog = new PreloaderDialog(activity);
            this.preferences = PreferenceManager.getDefaultSharedPreferences(activity);
            this.manager = new ContainerManager(activity);
        }
    
        @Override // androidx.fragment.app.Fragment
        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.base_file_manager_fragment, container, false);
            this.recyclerView = (RecyclerView) rootView.findViewById(R.id.RecyclerView);
            this.emptyTextView = (TextView) rootView.findViewById(R.id.TVEmptyText);
            FloatingActionButton floatingActionButton = (FloatingActionButton) rootView.findViewById(R.id.BTPaste);
            this.pasteButton = floatingActionButton;
            floatingActionButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.BaseFileManagerFragment$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    BaseFileManagerFragment.this.lambda$onCreateView$0(view);
                }
            });
            if (this.itemDecoration == null) {
                this.itemDecoration = new DividerItemDecoration(getContext(), 1);
            }
            return rootView;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$0(View v) {
            pasteFiles();
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onViewCreated(View view, Bundle savedInstanceState) {
            super.onViewCreated(view, savedInstanceState);
            ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(getHomeTitle());
            refreshContent();
        }
    
        public void setViewStyle(ViewStyle viewStyle) {
            this.viewStyle = viewStyle;
            this.viewStyleNeedsUpdate = true;
            refreshContent();
        }
    
        public boolean onBackPressed() {
            clearClipboard();
            return onOptionsMenuClicked();
        }
    
        public boolean onOptionsMenuClicked() {
            if (!this.folderStack.isEmpty()) {
                this.folderStack.pop();
                refreshContent();
                if (this.folderStack.isEmpty()) {
                    ActionBar actionBar = ((AppCompatActivity) getActivity()).getSupportActionBar();
                    actionBar.setHomeAsUpIndicator(R.drawable.icon_action_bar_menu);
                    actionBar.setTitle(getHomeTitle());
                    return true;
                }
                return true;
            }
            return false;
        }
    
        public void onOrientationChanged() {
            this.viewStyleNeedsUpdate = true;
            refreshContent();
        }
    
        public void refreshViewStyleMenuItem(MenuItem menuItem) {
            ViewStyle viewStyle = this.viewStyle;
            if (viewStyle == ViewStyle.LIST) {
                menuItem.setIcon(R.drawable.icon_action_bar_grid);
            } else if (viewStyle == ViewStyle.GRID) {
                menuItem.setIcon(R.drawable.icon_action_bar_list);
            }
        }
    
        public void refreshContent() {
            if (this.viewStyleNeedsUpdate) {
                Context context = getContext();
                this.recyclerView.removeItemDecoration(this.itemDecoration);
                ViewStyle viewStyle = this.viewStyle;
                if (viewStyle == ViewStyle.LIST) {
                    this.recyclerView.setLayoutManager(new LinearLayoutManager(context));
                    this.recyclerView.addItemDecoration(this.itemDecoration);
                } else if (viewStyle == ViewStyle.GRID) {
                    int spanCount = Math.max(2, (int) (AppUtils.getScreenWidth() / UnitUtils.dpToPx(200.0f)));
                    this.recyclerView.setLayoutManager(new GridLayoutManager(context, spanCount));
                }
                this.viewStyleNeedsUpdate = false;
            }
        }
    
        protected void pasteFiles() {
            if (this.clipboard == null) {
                return;
            }
            final FragmentActivity activity = getActivity();
            for (File file : this.clipboard.files) {
                File targetFile = new File(this.clipboard.targetDir, file.getName());
                if (targetFile.exists()) {
                    AppUtils.showToast(activity, R.string.there_already_file_with_that_name);
                    return;
                }
            }
            this.preloaderDialog.lambda$showOnUiThread$0(R.string.copying_files);
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.BaseFileManagerFragment$$ExternalSyntheticLambda3
                @Override // java.lang.Runnable
                public final void run() {
                    BaseFileManagerFragment.this.lambda$pasteFiles$2(activity);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$pasteFiles$2(FragmentActivity activity) {
            for (File originFile : this.clipboard.files) {
                if (originFile.exists()) {
                    File targetFile = new File(this.clipboard.targetDir, originFile.getName());
                    if (FileUtils.copy(originFile, targetFile) && this.clipboard.cutMode) {
                        FileUtils.delete(originFile);
                    }
                }
            }
            activity.runOnUiThread(new Runnable() { // from class: com.winlator.BaseFileManagerFragment$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    BaseFileManagerFragment.this.lambda$pasteFiles$1();
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$pasteFiles$1() {
            clearClipboard();
            refreshContent();
            this.preloaderDialog.close();
        }
    
        protected void removeFile(final File file) {
            this.preloaderDialog.lambda$showOnUiThread$0(R.string.removing_files);
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.BaseFileManagerFragment$$ExternalSyntheticLambda4
                @Override // java.lang.Runnable
                public final void run() {
                    BaseFileManagerFragment.this.lambda$removeFile$4(file);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$removeFile$4(File file) {
            FileUtils.delete(file);
            getActivity().runOnUiThread(new Runnable() { // from class: com.winlator.BaseFileManagerFragment$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    BaseFileManagerFragment.this.lambda$removeFile$3();
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$removeFile$3() {
            clearClipboard();
            refreshContent();
            this.preloaderDialog.close();
        }
    
        public void clearClipboard() {
            if (this.clipboard != null) {
                this.clipboard = null;
                this.pasteButton.setVisibility(8);
            }
        }
    }
  + app/src/main/java/com/winlator/ContainerDetailFragment.java
    package com.winlator;
    
    import android.R;
    import android.content.Context;
    import android.content.Intent;
    import android.net.Uri;
    import android.os.Build;
    import android.os.Bundle;
    import android.os.Environment;
    import android.view.LayoutInflater;
    import android.view.Menu;
    import android.view.MenuItem;
    import android.view.SubMenu;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.AdapterView;
    import android.widget.ArrayAdapter;
    import android.widget.CheckBox;
    import android.widget.EditText;
    import android.widget.LinearLayout;
    import android.widget.PopupMenu;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import android.widget.TextView;
    import androidx.appcompat.app.AppCompatActivity;
    import androidx.fragment.app.Fragment;
    import androidx.fragment.app.FragmentActivity;
    import com.winlator.box64.Box64PresetManager;
    import com.winlator.container.Container;
    import com.winlator.container.ContainerManager;
    import com.winlator.container.Drive;
    import com.winlator.contentdialog.AddEnvVarDialog;
    import com.winlator.contentdialog.AudioDriverConfigDialog;
    import com.winlator.contentdialog.DXVKConfigDialog;
    import com.winlator.contentdialog.TurnipConfigDialog;
    import com.winlator.contentdialog.VKD3DConfigDialog;
    import com.winlator.contentdialog.VirGLConfigDialog;
    import com.winlator.contentdialog.VortekConfigDialog;
    import com.winlator.contentdialog.WineD3DConfigDialog;
    import com.winlator.core.AppUtils;
    import com.winlator.core.Callback;
    import com.winlator.core.EnvVars;
    import com.winlator.core.FileUtils;
    import com.winlator.core.KeyValueSet;
    import com.winlator.core.PreloaderDialog;
    import com.winlator.core.StringUtils;
    import com.winlator.core.WineInfo;
    import com.winlator.core.WineRegistryEditor;
    import com.winlator.core.WineThemeManager;
    import com.winlator.core.WineUtils;
    import com.winlator.widget.CPUListView;
    import com.winlator.widget.ColorPickerView;
    import com.winlator.widget.EnvVarsView;
    import com.winlator.widget.ImagePickerView;
    import com.winlator.widget.SeekBar;
    import com.winlator.win32.MSLogFont;
    import com.winlator.win32.WinVersions;
    import java.io.File;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.Iterator;
    import java.util.List;
    import java.util.Locale;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public class ContainerDetailFragment extends Fragment {
        private Container container;
        private final int containerId;
        private ContainerManager manager;
        private Callback<String> openDirectoryCallback;
        private PreloaderDialog preloaderDialog;
    
        /* JADX INFO: Access modifiers changed from: package-private */
        public static /* synthetic */ void access$000(String x0, View x1) {
            showGraphicsDriverConfigDialog(x0, x1);
        }
    
        /* JADX INFO: Access modifiers changed from: package-private */
        public static /* synthetic */ void access$100(String x0, String x1, View x2) {
            showDXWrapperConfigDialog(x0, x1, x2);
        }
    
        public ContainerDetailFragment() {
            this(0);
        }
    
        public ContainerDetailFragment(int containerId) {
            this.containerId = containerId;
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setHasOptionsMenu(false);
            this.preloaderDialog = new PreloaderDialog(getActivity());
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onActivityResult(int requestCode, int resultCode, Intent data) {
            String path;
            Callback<String> callback;
            if (requestCode == 4 && resultCode == -1) {
                if (data != null && (path = FileUtils.getFilePathFromUri(data.getData())) != null && (callback = this.openDirectoryCallback) != null) {
                    callback.call(path);
                }
                this.openDirectoryCallback = null;
            }
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onViewCreated(View view, Bundle savedInstanceState) {
            super.onViewCreated(view, savedInstanceState);
            ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(isEditMode() ? R.string.edit_container : R.string.new_container);
        }
    
        public boolean isEditMode() {
            return this.container != null;
        }
    
        /* JADX WARN: Removed duplicated region for block: B:38:0x017e  */
        /* JADX WARN: Removed duplicated region for block: B:41:0x018b  */
        /* JADX WARN: Removed duplicated region for block: B:44:0x01b4  */
        /* JADX WARN: Removed duplicated region for block: B:47:0x01e7  */
        /* JADX WARN: Removed duplicated region for block: B:50:0x0204  */
        /* JADX WARN: Removed duplicated region for block: B:53:0x0220  */
        /* JADX WARN: Removed duplicated region for block: B:57:0x0227  */
        /* JADX WARN: Removed duplicated region for block: B:58:0x020c  */
        /* JADX WARN: Removed duplicated region for block: B:59:0x01f3  */
        /* JADX WARN: Removed duplicated region for block: B:60:0x01bf  */
        /* JADX WARN: Removed duplicated region for block: B:61:0x018d  */
        /* JADX WARN: Removed duplicated region for block: B:62:0x0185  */
        @Override // androidx.fragment.app.Fragment
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public android.view.View onCreateView(android.view.LayoutInflater r43, android.view.ViewGroup r44, android.os.Bundle r45) {
            /*
                Method dump skipped, instructions count: 678
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: com.winlator.ContainerDetailFragment.onCreateView(android.view.LayoutInflater, android.view.ViewGroup, android.os.Bundle):android.view.View");
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$onCreateView$1(View v) {
            new AudioDriverConfigDialog(v).show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$2(Spinner sWinVersion, Integer tabResId) {
            if (tabResId.intValue() != R.id.LLTabAdvanced || ((Byte) sWinVersion.getTag()).byteValue() != -1) {
                return;
            }
            WinVersions.loadSpinner(this.container, sWinVersion);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        /* JADX WARN: Multi-variable type inference failed */
        /* JADX WARN: Type inference failed for: r19v1, types: [org.json.JSONObject] */
        /* JADX WARN: Type inference failed for: r22v0, types: [androidx.fragment.app.Fragment, com.winlator.ContainerDetailFragment] */
        /* JADX WARN: Type inference failed for: r2v0, types: [android.view.View] */
        /* JADX WARN: Type inference failed for: r2v1 */
        /* JADX WARN: Type inference failed for: r2v2 */
        /* JADX WARN: Type inference failed for: r2v24, types: [int] */
        /* JADX WARN: Type inference failed for: r2v29, types: [java.lang.Object, java.lang.String] */
        /* JADX WARN: Type inference failed for: r2v3 */
        /* JADX WARN: Type inference failed for: r2v31, types: [com.winlator.container.ContainerManager] */
        /* JADX WARN: Type inference failed for: r2v32 */
        /* JADX WARN: Type inference failed for: r2v4 */
        /* JADX WARN: Type inference failed for: r2v5, types: [java.lang.String] */
        /* JADX WARN: Type inference failed for: r2v51, types: [android.view.View] */
        /* JADX WARN: Type inference failed for: r2v6 */
        /* JADX WARN: Type inference failed for: r2v7 */
        public /* synthetic */ void lambda$onCreateView$4(EditText etName, final View view, EnvVarsView envVarsView, Spinner sGraphicsDriver, Spinner sDXWrapper, View vDXWrapperConfig, View vGraphicsDriverConfig, View vAudioDriverConfig, Spinner sAudioDriver, CheckBox cbShowFPS, CPUListView cpuListView, CPUListView cpuListViewWoW64, Spinner sStartupSelection, Spinner sBox64Preset, ArrayList wineInfos, Spinner sWineVersion, View v) {
            ?? r2 = view;
            try {
                String name = etName.getText().toString();
                String screenSize = getScreenSize(view);
                String envVars = envVarsView.getEnvVars();
                String graphicsDriver = StringUtils.parseIdentifier(sGraphicsDriver.getSelectedItem());
                String dxwrapper = StringUtils.parseIdentifier(sDXWrapper.getSelectedItem());
                String dxwrapperConfig = vDXWrapperConfig.getTag().toString();
                String graphicsDriverConfig = vGraphicsDriverConfig.getTag().toString();
                String audioDriverConfig = vAudioDriverConfig.getTag().toString();
                String audioDriver = StringUtils.parseIdentifier(sAudioDriver.getSelectedItem());
                String wincomponents = getWinComponents(view);
                String drives = getDrives(r2);
                boolean showFPS = cbShowFPS.isChecked();
                String cpuList = cpuListView.getCheckedCPUListAsString();
                String cpuListWoW64 = cpuListViewWoW64.getCheckedCPUListAsString();
                byte startupSelection = (byte) sStartupSelection.getSelectedItemPosition();
                String box64Preset = Box64PresetManager.getSpinnerSelectedId(sBox64Preset);
                String desktopTheme = getDesktopTheme(r2);
                try {
                    if (isEditMode()) {
                        this.container.setName(name);
                        this.container.setScreenSize(screenSize);
                        this.container.setEnvVars(envVars);
                        this.container.setCPUList(cpuList);
                        this.container.setCPUListWoW64(cpuListWoW64);
                        this.container.setGraphicsDriver(graphicsDriver);
                        this.container.setDXWrapper(dxwrapper);
                        this.container.setDXWrapperConfig(dxwrapperConfig);
                        this.container.setGraphicsDriverConfig(graphicsDriverConfig);
                        this.container.setAudioDriver(audioDriver);
                        this.container.setAudioDriverConfig(audioDriverConfig);
                        this.container.setWinComponents(wincomponents);
                        this.container.setDrives(drives);
                        this.container.setShowFPS(showFPS);
                        this.container.setStartupSelection(startupSelection);
                        this.container.setBox64Preset(box64Preset);
                        this.container.setDesktopTheme(desktopTheme);
                        this.container.saveData();
                        r2 = view;
                        saveWineRegistryKeys(r2);
                        getActivity().onBackPressed();
                    } else {
                        ?? jSONObject = new JSONObject();
                        r2 = "name";
                        try {
                            jSONObject.put("name", name);
                            jSONObject.put("screenSize", screenSize);
                            jSONObject.put("envVars", envVars);
                            jSONObject.put("cpuList", cpuList);
                            jSONObject.put("cpuListWoW64", cpuListWoW64);
                            jSONObject.put("graphicsDriver", graphicsDriver);
                            jSONObject.put("dxwrapper", dxwrapper);
                            jSONObject.put("dxwrapperConfig", dxwrapperConfig);
                            jSONObject.put("graphicsDriverConfig", graphicsDriverConfig);
                            jSONObject.put("audioDriver", audioDriver);
                            jSONObject.put("audioDriverConfig", audioDriverConfig);
                            jSONObject.put("wincomponents", wincomponents);
                            jSONObject.put("drives", drives);
                            jSONObject.put("showFPS", showFPS);
                            jSONObject.put("startupSelection", startupSelection);
                            jSONObject.put("box64Preset", box64Preset);
                            jSONObject.put("desktopTheme", desktopTheme);
                            r2 = wineInfos.size();
                            if (r2 > 1) {
                                try {
                                    r2 = ((WineInfo) wineInfos.get(sWineVersion.getSelectedItemPosition())).identifier();
                                    jSONObject.put("wineVersion", r2);
                                } catch (JSONException e) {
                                }
                            }
                            this.preloaderDialog.lambda$showOnUiThread$0(R.string.creating_container);
                            r2 = this.manager;
                            try {
                                r2.createContainerAsync(jSONObject, new Callback() { // from class: com.winlator.ContainerDetailFragment$$ExternalSyntheticLambda9
                                    @Override // com.winlator.core.Callback
                                    public final void call(Object obj) {
                                        ContainerDetailFragment.this.lambda$onCreateView$3(view, (Container) obj);
                                    }
                                });
                            } catch (JSONException e2) {
                            }
                        } catch (JSONException e3) {
                        }
                    }
                } catch (JSONException e4) {
                }
            } catch (JSONException e5) {
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$3(View view, Container container) {
            if (container != null) {
                this.container = container;
                saveWineRegistryKeys(view);
            }
            this.preloaderDialog.close();
            getActivity().onBackPressed();
        }
    
        private void saveWineRegistryKeys(View view) {
            int newPosition;
            File userRegFile = new File(this.container.getRootDir(), ".wine/user.reg");
            WineRegistryEditor registryEditor = new WineRegistryEditor(userRegFile);
            try {
                Spinner sSystemFont = (Spinner) view.findViewById(R.id.SSystemFont);
                WineUtils.setSystemFont(registryEditor, sSystemFont.getSelectedItem().toString());
                SeekBar sbLogPixels = (SeekBar) view.findViewById(R.id.SBLogPixels);
                registryEditor.setDwordValue("Control Panel\\Desktop", "LogPixels", (int) sbLogPixels.getValue());
                Spinner sMouseWarpOverride = (Spinner) view.findViewById(R.id.SMouseWarpOverride);
                registryEditor.setStringValue("Software\\Wine\\DirectInput", "MouseWarpOverride", sMouseWarpOverride.getSelectedItem().toString().toLowerCase(Locale.ENGLISH));
                registryEditor.setStringValue("Software\\Wine\\Direct3D", "shader_backend", "glsl");
                registryEditor.setStringValue("Software\\Wine\\Direct3D", "UseGLSL", "enabled");
                registryEditor.close();
                Spinner sWinVersion = (Spinner) view.findViewById(R.id.SWinVersion);
                int oldPosition = ((Byte) sWinVersion.getTag()).byteValue();
                if (oldPosition == -1 || oldPosition == (newPosition = sWinVersion.getSelectedItemPosition())) {
                    return;
                }
                WineUtils.setWinVersion(this.container, newPosition);
            } catch (Throwable th) {
                try {
                    registryEditor.close();
                } catch (Throwable th2) {
                    th.addSuppressed(th2);
                }
                throw th;
            }
        }
    
        private void createWineConfigurationTab(View view) {
            Context context = getContext();
            WineThemeManager.ThemeInfo desktopTheme = new WineThemeManager.ThemeInfo(isEditMode() ? this.container.getDesktopTheme() : WineThemeManager.DEFAULT_DESKTOP_THEME);
            Spinner sDesktopTheme = (Spinner) view.findViewById(R.id.SDesktopTheme);
            sDesktopTheme.setSelection(desktopTheme.theme.ordinal());
            final ImagePickerView ipvDesktopBackgroundImage = (ImagePickerView) view.findViewById(R.id.IPVDesktopBackgroundImage);
            final ColorPickerView cpvDesktopBackgroundColor = (ColorPickerView) view.findViewById(R.id.CPVDesktopBackgroundColor);
            cpvDesktopBackgroundColor.setColor(desktopTheme.backgroundColor);
            Spinner sDesktopBackgroundType = (Spinner) view.findViewById(R.id.SDesktopBackgroundType);
            sDesktopBackgroundType.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { // from class: com.winlator.ContainerDetailFragment.1
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onItemSelected(AdapterView<?> parent, View view2, int position, long id) {
                    WineThemeManager.BackgroundType type = WineThemeManager.BackgroundType.values()[position];
                    ipvDesktopBackgroundImage.setVisibility(8);
                    cpvDesktopBackgroundColor.setVisibility(8);
                    if (type == WineThemeManager.BackgroundType.IMAGE) {
                        ipvDesktopBackgroundImage.setVisibility(0);
                    } else if (type == WineThemeManager.BackgroundType.COLOR) {
                        cpvDesktopBackgroundColor.setVisibility(0);
                    }
                }
    
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onNothingSelected(AdapterView<?> parent) {
                }
            });
            sDesktopBackgroundType.setSelection(desktopTheme.backgroundType.ordinal());
            File containerDir = isEditMode() ? this.container.getRootDir() : null;
            File userRegFile = new File(containerDir, ".wine/user.reg");
            WineRegistryEditor registryEditor = new WineRegistryEditor(userRegFile);
            try {
                Spinner sSystemFont = (Spinner) view.findViewById(R.id.SSystemFont);
                MSLogFont msLogFont = new MSLogFont().fromByteArray(registryEditor.getHexValues("Control Panel\\Desktop\\WindowMetrics", "CaptionFont"));
                AppUtils.setSpinnerSelectionFromValue(sSystemFont, msLogFont.getFaceName());
                SeekBar sbLogPixels = (SeekBar) view.findViewById(R.id.SBLogPixels);
                sbLogPixels.setValue(registryEditor.getDwordValue("Control Panel\\Desktop", "LogPixels", 96).intValue());
                List<String> mouseWarpOverrideList = Arrays.asList(context.getString(R.string.disable), context.getString(R.string.enable), context.getString(R.string.force));
                Spinner sMouseWarpOverride = (Spinner) view.findViewById(R.id.SMouseWarpOverride);
                sMouseWarpOverride.setAdapter((SpinnerAdapter) new ArrayAdapter(context, R.layout.simple_spinner_dropdown_item, mouseWarpOverrideList));
                AppUtils.setSpinnerSelectionFromValue(sMouseWarpOverride, registryEditor.getStringValue("Software\\Wine\\DirectInput", "MouseWarpOverride", "disable"));
                registryEditor.close();
            } finally {
            }
        }
    
        public static String getScreenSize(View view) {
            Spinner sScreenSize = (Spinner) view.findViewById(R.id.SScreenSize);
            String value = sScreenSize.getSelectedItem().toString();
            if (value.equalsIgnoreCase("custom")) {
                value = "1280x720";
                String strWidth = ((EditText) view.findViewById(R.id.ETScreenWidth)).getText().toString().trim();
                String strHeight = ((EditText) view.findViewById(R.id.ETScreenHeight)).getText().toString().trim();
                if (strWidth.matches("[0-9]+") && strHeight.matches("[0-9]+")) {
                    int width = Integer.parseInt(strWidth);
                    int height = Integer.parseInt(strHeight);
                    if (width % 2 == 0 && height % 2 == 0) {
                        return width + "x" + height;
                    }
                }
            }
            return StringUtils.parseIdentifier(value);
        }
    
        private String getDesktopTheme(View view) {
            Spinner sDesktopBackgroundType = (Spinner) view.findViewById(R.id.SDesktopBackgroundType);
            WineThemeManager.BackgroundType type = WineThemeManager.BackgroundType.values()[sDesktopBackgroundType.getSelectedItemPosition()];
            Spinner sDesktopTheme = (Spinner) view.findViewById(R.id.SDesktopTheme);
            ColorPickerView cpvDesktopBackground = (ColorPickerView) view.findViewById(R.id.CPVDesktopBackgroundColor);
            WineThemeManager.Theme theme = WineThemeManager.Theme.values()[sDesktopTheme.getSelectedItemPosition()];
            String desktopTheme = theme + "," + type + "," + cpvDesktopBackground.getColorAsString();
            if (type == WineThemeManager.BackgroundType.IMAGE) {
                File userWallpaperFile = WineThemeManager.getUserWallpaperFile(getContext());
                StringBuilder sb = new StringBuilder();
                sb.append(desktopTheme);
                sb.append(",");
                sb.append(userWallpaperFile.isFile() ? Long.valueOf(userWallpaperFile.lastModified()) : "0");
                return sb.toString();
            }
            return desktopTheme;
        }
    
        public static void loadScreenSizeSpinner(View view, String selectedValue) {
            final Spinner sScreenSize = (Spinner) view.findViewById(R.id.SScreenSize);
            final LinearLayout llCustomScreenSize = (LinearLayout) view.findViewById(R.id.LLCustomScreenSize);
            sScreenSize.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { // from class: com.winlator.ContainerDetailFragment.2
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onItemSelected(AdapterView<?> parent, View view2, int position, long id) {
                    String value = sScreenSize.getItemAtPosition(position).toString();
                    llCustomScreenSize.setVisibility(value.equalsIgnoreCase("custom") ? 0 : 8);
                }
    
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onNothingSelected(AdapterView<?> parent) {
                }
            });
            boolean found = AppUtils.setSpinnerSelectionFromIdentifier(sScreenSize, selectedValue);
            if (!found) {
                AppUtils.setSpinnerSelectionFromValue(sScreenSize, "custom");
                String[] screenSize = selectedValue.split("x");
                ((EditText) view.findViewById(R.id.ETScreenWidth)).setText(screenSize[0]);
                ((EditText) view.findViewById(R.id.ETScreenHeight)).setText(screenSize[1]);
            }
        }
    
        public static void loadGraphicsDriverSpinner(final Spinner sGraphicsDriver, final Spinner sDXWrapper, View vGraphicsDriverConfig, String selectedGraphicsDriver, final String selectedDXWrapper) {
            final Context context = sGraphicsDriver.getContext();
            final String[] dxwrapperEntries = context.getResources().getStringArray(R.array.dxwrapper_entries);
            Runnable update = new Runnable() { // from class: com.winlator.ContainerDetailFragment$$ExternalSyntheticLambda12
                @Override // java.lang.Runnable
                public final void run() {
                    ContainerDetailFragment.lambda$loadGraphicsDriverSpinner$5(sGraphicsDriver, dxwrapperEntries, sDXWrapper, context, selectedDXWrapper);
                }
            };
            sGraphicsDriver.setOnItemSelectedListener(new AnonymousClass3(sGraphicsDriver, vGraphicsDriverConfig, update));
            AppUtils.setSpinnerSelectionFromIdentifier(sGraphicsDriver, selectedGraphicsDriver);
            update.run();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$loadGraphicsDriverSpinner$5(Spinner sGraphicsDriver, String[] dxwrapperEntries, Spinner sDXWrapper, Context context, String selectedDXWrapper) {
            String graphicsDriver = StringUtils.parseIdentifier(sGraphicsDriver.getSelectedItem());
            boolean addAll = !graphicsDriver.equals("virgl");
            ArrayList<String> items = new ArrayList<>();
            for (String value : dxwrapperEntries) {
                if (addAll || (!value.equalsIgnoreCase("dxvk") && !value.equalsIgnoreCase("vkd3d"))) {
                    items.add(value);
                }
            }
            sDXWrapper.setAdapter((SpinnerAdapter) new ArrayAdapter(context, R.layout.simple_spinner_dropdown_item, (String[]) items.toArray(new String[0])));
            AppUtils.setSpinnerSelectionFromIdentifier(sDXWrapper, selectedDXWrapper);
        }
    
        /* renamed from: com.winlator.ContainerDetailFragment$3, reason: invalid class name */
        class AnonymousClass3 implements AdapterView.OnItemSelectedListener {
            final /* synthetic */ Spinner val$sGraphicsDriver;
            final /* synthetic */ Runnable val$update;
            final /* synthetic */ View val$vGraphicsDriverConfig;
    
            AnonymousClass3(Spinner spinner, View view, Runnable runnable) {
                this.val$sGraphicsDriver = spinner;
                this.val$vGraphicsDriverConfig = view;
                this.val$update = runnable;
            }
    
            @Override // android.widget.AdapterView.OnItemSelectedListener
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                final String graphicsDriver = StringUtils.parseIdentifier(this.val$sGraphicsDriver.getSelectedItem());
                final View view2 = this.val$vGraphicsDriverConfig;
                view2.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ContainerDetailFragment$3$$ExternalSyntheticLambda0
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view3) {
                        ContainerDetailFragment.access$000(graphicsDriver, view2);
                    }
                });
                this.val$vGraphicsDriverConfig.setVisibility(0);
                this.val$update.run();
            }
    
            @Override // android.widget.AdapterView.OnItemSelectedListener
            public void onNothingSelected(AdapterView<?> parent) {
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        public static void showGraphicsDriverConfigDialog(String graphicsDriver, View vGraphicsDriverConfig) {
            char c;
            switch (graphicsDriver.hashCode()) {
                case -862428572:
                    if (graphicsDriver.equals("turnip")) {
                        c = 0;
                        break;
                    }
                    c = 65535;
                    break;
                case -810705759:
                    if (graphicsDriver.equals("vortek")) {
                        c = 1;
                        break;
                    }
                    c = 65535;
                    break;
                case 112216388:
                    if (graphicsDriver.equals("virgl")) {
                        c = 2;
                        break;
                    }
                    c = 65535;
                    break;
                default:
                    c = 65535;
                    break;
            }
            switch (c) {
                case 0:
                    new TurnipConfigDialog(vGraphicsDriverConfig).show();
                    break;
                case 1:
                    new VortekConfigDialog(vGraphicsDriverConfig).show();
                    break;
                case 2:
                    new VirGLConfigDialog(vGraphicsDriverConfig).show();
                    break;
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        public static void showDXWrapperConfigDialog(String dxwrapper, String graphicsDriver, View vDXWrapperConfig) {
            char c;
            switch (dxwrapper.hashCode()) {
                case 3098185:
                    if (dxwrapper.equals("dxvk")) {
                        c = 0;
                        break;
                    }
                    c = 65535;
                    break;
                case 112260896:
                    if (dxwrapper.equals("vkd3d")) {
                        c = 1;
                        break;
                    }
                    c = 65535;
                    break;
                case 1349510476:
                    if (dxwrapper.equals("wined3d")) {
                        c = 2;
                        break;
                    }
                    c = 65535;
                    break;
                default:
                    c = 65535;
                    break;
            }
            switch (c) {
                case 0:
                    new DXVKConfigDialog(graphicsDriver, vDXWrapperConfig).show();
                    break;
                case 1:
                    new VKD3DConfigDialog(vDXWrapperConfig).show();
                    break;
                case 2:
                    new WineD3DConfigDialog(vDXWrapperConfig).show();
                    break;
            }
        }
    
        public static void setupDXWrapperSpinner(Spinner sGraphicsDriver, Spinner sDXWrapper, View vDXWrapperConfig) {
            String[] oldGraphicsDriver = {null};
            String[] oldDXWrapper = {null};
            sDXWrapper.setOnItemSelectedListener(new AnonymousClass4(sDXWrapper, sGraphicsDriver, oldGraphicsDriver, oldDXWrapper, vDXWrapperConfig));
        }
    
        /* renamed from: com.winlator.ContainerDetailFragment$4, reason: invalid class name */
        class AnonymousClass4 implements AdapterView.OnItemSelectedListener {
            final /* synthetic */ String[] val$oldDXWrapper;
            final /* synthetic */ String[] val$oldGraphicsDriver;
            final /* synthetic */ Spinner val$sDXWrapper;
            final /* synthetic */ Spinner val$sGraphicsDriver;
            final /* synthetic */ View val$vDXWrapperConfig;
    
            AnonymousClass4(Spinner spinner, Spinner spinner2, String[] strArr, String[] strArr2, View view) {
                this.val$sDXWrapper = spinner;
                this.val$sGraphicsDriver = spinner2;
                this.val$oldGraphicsDriver = strArr;
                this.val$oldDXWrapper = strArr2;
                this.val$vDXWrapperConfig = view;
            }
    
            /* JADX WARN: Code restructure failed: missing block: B:20:0x0050, code lost:
    
                if (r2[0].equals(r0) == false) goto L18;
             */
            @Override // android.widget.AdapterView.OnItemSelectedListener
            /*
                Code decompiled incorrectly, please refer to instructions dump.
                To view partially-correct add '--show-bad-code' argument
            */
            public void onItemSelected(android.widget.AdapterView<?> r6, android.view.View r7, int r8, long r9) {
                /*
                    r5 = this;
                    android.widget.Spinner r0 = r5.val$sDXWrapper
                    java.lang.Object r0 = r0.getSelectedItem()
                    java.lang.String r0 = com.winlator.core.StringUtils.parseIdentifier(r0)
                    java.lang.String r1 = "dxvk"
                    boolean r1 = r0.equals(r1)
                    if (r1 != 0) goto L2b
                    java.lang.String r1 = "vkd3d"
                    boolean r1 = r0.equals(r1)
                    if (r1 != 0) goto L2b
                    java.lang.String r1 = "wined3d"
                    boolean r1 = r0.equals(r1)
                    if (r1 == 0) goto L23
                    goto L2b
                L23:
                    android.view.View r1 = r5.val$vDXWrapperConfig
                    r2 = 8
                    r1.setVisibility(r2)
                    goto L71
                L2b:
                    android.widget.Spinner r1 = r5.val$sGraphicsDriver
                    java.lang.Object r1 = r1.getSelectedItem()
                    java.lang.String r1 = com.winlator.core.StringUtils.parseIdentifier(r1)
                    java.lang.String[] r2 = r5.val$oldGraphicsDriver
                    r3 = 0
                    r4 = r2[r3]
                    if (r4 == 0) goto L44
                    r2 = r2[r3]
                    boolean r2 = r2.equals(r1)
                    if (r2 == 0) goto L52
                L44:
                    java.lang.String[] r2 = r5.val$oldDXWrapper
                    r4 = r2[r3]
                    if (r4 == 0) goto L59
                    r2 = r2[r3]
                    boolean r2 = r2.equals(r0)
                    if (r2 != 0) goto L59
                L52:
                    android.view.View r2 = r5.val$vDXWrapperConfig
                    java.lang.String r4 = ""
                    r2.setTag(r4)
                L59:
                    java.lang.String[] r2 = r5.val$oldGraphicsDriver
                    r2[r3] = r1
                    java.lang.String[] r2 = r5.val$oldDXWrapper
                    r2[r3] = r0
                    android.view.View r2 = r5.val$vDXWrapperConfig
                    com.winlator.ContainerDetailFragment$4$$ExternalSyntheticLambda0 r4 = new com.winlator.ContainerDetailFragment$4$$ExternalSyntheticLambda0
                    r4.<init>()
                    r2.setOnClickListener(r4)
                    android.view.View r2 = r5.val$vDXWrapperConfig
                    r2.setVisibility(r3)
                L71:
                    return
                */
                throw new UnsupportedOperationException("Method not decompiled: com.winlator.ContainerDetailFragment.AnonymousClass4.onItemSelected(android.widget.AdapterView, android.view.View, int, long):void");
            }
    
            @Override // android.widget.AdapterView.OnItemSelectedListener
            public void onNothingSelected(AdapterView<?> parent) {
            }
        }
    
        public static String getWinComponents(View view) {
            ViewGroup parent = (ViewGroup) view.findViewById(R.id.LLTabWinComponents);
            ArrayList<View> views = new ArrayList<>();
            AppUtils.findViewsWithClass(parent, Spinner.class, views);
            String[] wincomponents = new String[views.size()];
            for (int i = 0; i < views.size(); i++) {
                Spinner spinner = (Spinner) views.get(i);
                wincomponents[i] = spinner.getTag() + "=" + spinner.getSelectedItemPosition();
            }
            return String.join(",", wincomponents);
        }
    
        public static void createWinComponentsTab(View view, String wincomponents) {
            Context context = view.getContext();
            LayoutInflater inflater = LayoutInflater.from(context);
            ViewGroup tabView = (ViewGroup) view.findViewById(R.id.LLTabWinComponents);
            ViewGroup directxSectionView = (ViewGroup) tabView.findViewById(R.id.LLWinComponentsDirectX);
            ViewGroup generalSectionView = (ViewGroup) tabView.findViewById(R.id.LLWinComponentsGeneral);
            Iterator<String[]> it = new KeyValueSet(wincomponents).iterator();
            while (it.hasNext()) {
                String[] wincomponent = it.next();
                String name = wincomponent[0];
                ViewGroup parent = (name.startsWith("direct") || name.startsWith("x")) ? directxSectionView : generalSectionView;
                View itemView = inflater.inflate(R.layout.wincomponent_list_item, parent, false);
                ((TextView) itemView.findViewById(R.id.TextView)).setText(StringUtils.getString(context, name));
                Spinner spinner = (Spinner) itemView.findViewById(R.id.Spinner);
                spinner.setSelection(Integer.parseInt(wincomponent[1]), false);
                spinner.setTag(name);
                parent.addView(itemView);
            }
        }
    
        private EnvVarsView createEnvVarsTab(View view) {
            final Context context = view.getContext();
            final EnvVarsView envVarsView = (EnvVarsView) view.findViewById(R.id.EnvVarsView);
            envVarsView.setEnvVars(new EnvVars(isEditMode() ? this.container.getEnvVars() : "ZINK_DESCRIPTORS=lazy ZINK_DEBUG=compact MESA_SHADER_CACHE_DISABLE=false MESA_SHADER_CACHE_MAX_SIZE=512MB mesa_glthread=true WINEESYNC=1 TU_DEBUG=sysmem,noconform"));
            view.findViewById(R.id.BTAddEnvVar).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ContainerDetailFragment$$ExternalSyntheticLambda1
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    ContainerDetailFragment.lambda$createEnvVarsTab$6(context, envVarsView, view2);
                }
            });
            return envVarsView;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$createEnvVarsTab$6(Context context, EnvVarsView envVarsView, View v) {
            new AddEnvVarDialog(context, envVarsView).show();
        }
    
        private String getDrives(View view) {
            LinearLayout parent = (LinearLayout) view.findViewById(R.id.LLDrives);
            String drives = "";
            for (int i = 0; i < parent.getChildCount(); i++) {
                View child = parent.getChildAt(i);
                Spinner spinner = (Spinner) child.findViewById(R.id.Spinner);
                EditText editText = (EditText) child.findViewById(R.id.EditText);
                String path = editText.getText().toString().replace(":", "").trim();
                if (!path.isEmpty()) {
                    drives = drives + spinner.getSelectedItem() + path;
                }
            }
            return drives;
        }
    
        private void createDrivesTab(View view) {
            final Context context = getContext();
            final LinearLayout parent = (LinearLayout) view.findViewById(R.id.LLDrives);
            final View emptyTextView = view.findViewById(R.id.TVDrivesEmptyText);
            final LayoutInflater inflater = LayoutInflater.from(context);
            String drives = isEditMode() ? this.container.getDrives() : Container.DEFAULT_DRIVES;
            final String[] driveLetters = new String[8];
            for (int i = 0; i < driveLetters.length; i++) {
                driveLetters[i] = ((char) (i + 68)) + ":";
            }
            final Callback<Drive> addItem = new Callback() { // from class: com.winlator.ContainerDetailFragment$$ExternalSyntheticLambda8
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    ContainerDetailFragment.this.lambda$createDrivesTab$9(inflater, parent, context, driveLetters, emptyTextView, (Drive) obj);
                }
            };
            for (Drive drive : Container.drivesIterator(drives)) {
                addItem.call(drive);
            }
            view.findViewById(R.id.BTAddDrive).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ContainerDetailFragment$$ExternalSyntheticLambda3
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    ContainerDetailFragment.lambda$createDrivesTab$10(parent, driveLetters, addItem, view2);
                }
            });
            if (drives.isEmpty()) {
                emptyTextView.setVisibility(0);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$createDrivesTab$9(LayoutInflater inflater, final LinearLayout parent, Context context, String[] driveLetters, final View emptyTextView, final Drive drive) {
            final View itemView = inflater.inflate(R.layout.drive_list_item, (ViewGroup) parent, false);
            Spinner spinner = (Spinner) itemView.findViewById(R.id.Spinner);
            spinner.setAdapter((SpinnerAdapter) new ArrayAdapter(context, R.layout.simple_spinner_dropdown_item, driveLetters));
            AppUtils.setSpinnerSelectionFromValue(spinner, drive.letter + ":");
            final EditText editText = (EditText) itemView.findViewById(R.id.EditText);
            editText.setText(drive.path);
            itemView.findViewById(R.id.BTSearch).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ContainerDetailFragment$$ExternalSyntheticLambda5
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ContainerDetailFragment.this.lambda$createDrivesTab$7(drive, editText, view);
                }
            });
            itemView.findViewById(R.id.BTRemove).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ContainerDetailFragment$$ExternalSyntheticLambda2
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ContainerDetailFragment.lambda$createDrivesTab$8(parent, itemView, emptyTextView, view);
                }
            });
            parent.addView(itemView);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$createDrivesTab$8(LinearLayout parent, View itemView, View emptyTextView, View v) {
            parent.removeView(itemView);
            if (parent.getChildCount() == 0) {
                emptyTextView.setVisibility(0);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$createDrivesTab$10(LinearLayout parent, String[] driveLetters, Callback addItem, View v) {
            if (parent.getChildCount() >= 8) {
                return;
            }
            String nextDriveLetter = String.valueOf(driveLetters[parent.getChildCount()].charAt(0));
            addItem.call(new Drive(nextDriveLetter, ""));
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        /* renamed from: showDriveSearchPopupMenu, reason: merged with bridge method [inline-methods] */
        public void lambda$createDrivesTab$7(View anchorView, final Drive drive, final EditText editText) {
            final FragmentActivity activity = getActivity();
            PopupMenu popupMenu = new PopupMenu(activity, anchorView);
            if (Build.VERSION.SDK_INT >= 29) {
                popupMenu.setForceShowIcon(true);
            }
            popupMenu.inflate(R.menu.drive_search_popup_menu);
            Menu menu = popupMenu.getMenu();
            SubMenu subMenu = menu.findItem(R.id.menu_item_locations).getSubMenu();
            ArrayList<Container> containers = this.manager.getContainers();
            for (int i = 0; i < containers.size(); i++) {
                Container container = containers.get(i);
                subMenu.add(0, 0, container.id, container.getName() + " (Drive C:)");
            }
            popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() { // from class: com.winlator.ContainerDetailFragment$$ExternalSyntheticLambda7
                @Override // android.widget.PopupMenu.OnMenuItemClickListener
                public final boolean onMenuItemClick(MenuItem menuItem) {
                    boolean lambda$showDriveSearchPopupMenu$12;
                    lambda$showDriveSearchPopupMenu$12 = ContainerDetailFragment.this.lambda$showDriveSearchPopupMenu$12(drive, editText, activity, this, menuItem);
                    return lambda$showDriveSearchPopupMenu$12;
                }
            });
            popupMenu.show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ boolean lambda$showDriveSearchPopupMenu$12(final Drive drive, final EditText editText, FragmentActivity activity, Fragment $this, MenuItem menuItem) {
            int itemId = menuItem.getItemId();
            switch (itemId) {
                case R.id.menu_item_downloads /* 2131296692 */:
                    String str = AppUtils.DIRECTORY_DOWNLOADS;
                    drive.path = str;
                    editText.setText(str);
                    break;
                case R.id.menu_item_internal_storage /* 2131296701 */:
                    drive.path = "/data/data/com.winlator/storage";
                    editText.setText("/data/data/com.winlator/storage");
                    break;
                case R.id.menu_item_open_directory /* 2131296707 */:
                    this.openDirectoryCallback = new Callback() { // from class: com.winlator.ContainerDetailFragment$$ExternalSyntheticLambda11
                        @Override // com.winlator.core.Callback
                        public final void call(Object obj) {
                            ContainerDetailFragment.lambda$showDriveSearchPopupMenu$11(Drive.this, editText, (String) obj);
                        }
                    };
                    Intent intent = new Intent("android.intent.action.OPEN_DOCUMENT_TREE");
                    intent.putExtra("android.provider.extra.INITIAL_URI", Uri.fromFile(Environment.getExternalStorageDirectory()));
                    activity.startActivityFromFragment($this, intent, 4);
                    break;
                default:
                    Container container = this.manager.getContainerById(menuItem.getOrder());
                    if (container != null) {
                        String path = container.getRootDir() + "/.wine/drive_c";
                        drive.path = path;
                        editText.setText(path);
                        break;
                    }
                    break;
            }
            return true;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$showDriveSearchPopupMenu$11(Drive drive, EditText editText, String path) {
            drive.path = path;
            editText.setText(path);
        }
    
        private void loadWineVersionSpinner(View view, Spinner sWineVersion, ArrayList<WineInfo> wineInfos) {
            Context context = getContext();
            sWineVersion.setEnabled(!isEditMode());
            view.findViewById(R.id.LLWineVersion).setVisibility(0);
            sWineVersion.setAdapter((SpinnerAdapter) new ArrayAdapter(context, R.layout.simple_spinner_dropdown_item, wineInfos));
            if (isEditMode()) {
                AppUtils.setSpinnerSelectionFromValue(sWineVersion, WineInfo.fromIdentifier(context, this.container.getWineVersion()).toString());
            }
        }
    }
  + app/src/main/java/com/winlator/ContainerFileManagerFragment.java
    package com.winlator;
    
    import android.app.Activity;
    import android.content.Context;
    import android.content.Intent;
    import android.graphics.Bitmap;
    import android.os.Build;
    import android.os.Bundle;
    import android.view.LayoutInflater;
    import android.view.Menu;
    import android.view.MenuInflater;
    import android.view.MenuItem;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.ImageView;
    import android.widget.PopupMenu;
    import android.widget.TextView;
    import androidx.appcompat.app.ActionBar;
    import androidx.appcompat.app.AppCompatActivity;
    import androidx.recyclerview.widget.RecyclerView;
    import com.winlator.BaseFileManagerFragment;
    import com.winlator.ContainerFileManagerFragment;
    import com.winlator.container.Container;
    import com.winlator.container.FileInfo;
    import com.winlator.contentdialog.ContentDialog;
    import com.winlator.core.AppUtils;
    import com.winlator.core.Callback;
    import com.winlator.core.FileUtils;
    import com.winlator.core.StringUtils;
    import com.winlator.core.WineUtils;
    import com.winlator.win32.MSIcon;
    import com.winlator.win32.MSLink;
    import com.winlator.win32.PEParser;
    import java.io.File;
    import java.lang.ref.WeakReference;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.concurrent.Executor;
    import java.util.concurrent.Executors;
    
    /* loaded from: classes.dex */
    public class ContainerFileManagerFragment extends BaseFileManagerFragment<FileInfo> {
        private Container container;
        private final int containerId;
        private String startPath;
    
        public ContainerFileManagerFragment(int containerId) {
            this(containerId, null);
        }
    
        public ContainerFileManagerFragment(int containerId, String startPath) {
            this.containerId = containerId;
            this.startPath = startPath;
        }
    
        @Override // com.winlator.BaseFileManagerFragment, androidx.fragment.app.Fragment
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            this.container = this.manager.getContainerById(this.containerId);
            this.viewStyle = BaseFileManagerFragment.ViewStyle.valueOf(this.preferences.getString("container_file_manager_view_style", "GRID"));
            String str = this.startPath;
            if (str != null) {
                setCurrentWorkingPath(WineUtils.unixToDOSPath(str, this.container));
                this.startPath = null;
            }
        }
    
        @Override // com.winlator.BaseFileManagerFragment
        public void refreshContent() {
            super.refreshContent();
            FileInfo parent = !this.folderStack.isEmpty() ? (FileInfo) this.folderStack.peek() : null;
            ArrayList<FileInfo> files = this.manager.loadFiles(this.container, parent);
            this.recyclerView.setAdapter(new FileInfoAdapter(files));
            this.emptyTextView.setVisibility(files.isEmpty() ? 0 : 8);
            updateActionBarTitle();
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onCreateOptionsMenu(Menu menu, MenuInflater menuInflater) {
            menuInflater.inflate(R.menu.container_file_manager_menu, menu);
            refreshViewStyleMenuItem(menu.findItem(R.id.menu_item_view_style));
        }
    
        private void createFolder() {
            clearClipboard();
            if (this.folderStack.isEmpty()) {
                return;
            }
            ContentDialog.prompt(getContext(), R.string.new_folder, null, new Callback() { // from class: com.winlator.ContainerFileManagerFragment$$ExternalSyntheticLambda0
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    ContainerFileManagerFragment.this.lambda$createFolder$0((String) obj);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$createFolder$0(String name) {
            File file = new File(((FileInfo) this.folderStack.peek()).toFile(), name);
            if (file.isDirectory()) {
                AppUtils.showToast(getContext(), R.string.there_already_file_with_that_name);
            } else {
                file.mkdir();
                refreshContent();
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void instantiateClipboard(FileInfo file, boolean cutMode) {
            clearClipboard();
            this.clipboard = new BaseFileManagerFragment.Clipboard(new File[]{new File(file.path)}, cutMode);
            this.pasteButton.setVisibility(0);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void addFavorite(FileInfo file) {
            Context context = getContext();
            File favoritesDir = new File(this.container.getUserDir(), context.getString(R.string.favorites));
            File targetFile = new File(favoritesDir, FileUtils.getBasename(file.name) + ".lnk");
            if (!targetFile.exists()) {
                MSLink.LinkInfo linkInfo = new MSLink.LinkInfo();
                linkInfo.targetPath = WineUtils.unixToDOSPath(file.path, this.container);
                linkInfo.isDirectory = file.type == FileInfo.Type.DIRECTORY;
                boolean success = MSLink.createFile(linkInfo, targetFile);
                if (success) {
                    AppUtils.showToast(context, R.string.file_added_to_favorites);
                }
            }
        }
    
        @Override // com.winlator.BaseFileManagerFragment
        protected void pasteFiles() {
            if (this.folderStack.isEmpty()) {
                clearClipboard();
                AppUtils.showToast(getContext(), R.string.you_cannot_paste_files_here);
            } else {
                this.clipboard.targetDir = ((FileInfo) this.folderStack.peek()).toFile();
                super.pasteFiles();
            }
        }
    
        @Override // androidx.fragment.app.Fragment
        public boolean onOptionsItemSelected(MenuItem menuItem) {
            int itemId = menuItem.getItemId();
            switch (itemId) {
                case R.id.menu_item_home /* 2131296698 */:
                    this.folderStack.clear();
                    refreshContent();
                    return true;
                case R.id.menu_item_new_folder /* 2131296706 */:
                    createFolder();
                    return true;
                case R.id.menu_item_view_style /* 2131296718 */:
                    BaseFileManagerFragment.ViewStyle viewStyle = this.viewStyle;
                    BaseFileManagerFragment.ViewStyle viewStyle2 = BaseFileManagerFragment.ViewStyle.GRID;
                    if (viewStyle == viewStyle2) {
                        viewStyle2 = BaseFileManagerFragment.ViewStyle.LIST;
                    }
                    setViewStyle(viewStyle2);
                    this.preferences.edit().putString("container_file_manager_view_style", this.viewStyle.name()).apply();
                    refreshViewStyleMenuItem(menuItem);
                    return true;
                default:
                    return super.onOptionsItemSelected(menuItem);
            }
        }
    
        private void setCurrentWorkingPath(String dosPath) {
            String[] names = StringUtils.removeEndSlash(dosPath).split("\\\\");
            String basePath = "";
            this.folderStack.clear();
            for (String name : names) {
                if (!name.isEmpty()) {
                    String dosPath2 = WineUtils.dosToUnixPath(basePath + name, this.container);
                    if (basePath.isEmpty() && name.matches("[A-Za-z]:")) {
                        this.folderStack.push(new FileInfo(this.container, name, dosPath2, FileInfo.Type.DRIVE));
                    } else {
                        this.folderStack.push(new FileInfo(this.container, dosPath2, FileInfo.Type.DIRECTORY));
                    }
                    basePath = basePath + name + "\\";
                }
            }
            updateActionBarTitle();
        }
    
        private String getCurrentWorkingPath() {
            if (!this.folderStack.isEmpty()) {
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < this.folderStack.size(); i++) {
                    if (i > 0) {
                        sb.append("\\");
                    }
                    sb.append(((FileInfo) this.folderStack.elementAt(i)).getDisplayName());
                }
                if (this.folderStack.size() == 1) {
                    sb.append("\\");
                }
                return sb.toString();
            }
            return "";
        }
    
        private void updateActionBarTitle() {
            AppCompatActivity activity = (AppCompatActivity) getActivity();
            ActionBar actionBar = activity.getSupportActionBar();
            if (!this.folderStack.isEmpty()) {
                actionBar.setHomeAsUpIndicator(R.drawable.icon_action_bar_back);
                actionBar.setTitle(getCurrentWorkingPath());
            } else {
                actionBar.setHomeAsUpIndicator(R.drawable.icon_action_bar_menu);
                actionBar.setTitle(getHomeTitle());
            }
        }
    
        @Override // com.winlator.BaseFileManagerFragment
        protected String getHomeTitle() {
            return this.container.getName();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        static class LoadIconTask {
            private boolean canceled;
            private final Executor executor;
            private final ContainerFileManagerFragment fragment;
            private final WeakReference<ImageView> imageViewWeakRef;
    
            private LoadIconTask(ContainerFileManagerFragment fragment, ImageView imageView) {
                this.executor = Executors.newSingleThreadExecutor();
                this.canceled = false;
                this.fragment = fragment;
                this.imageViewWeakRef = new WeakReference<>(imageView);
            }
    
            public void loadAsync(final FileInfo file) {
                this.executor.execute(new Runnable() { // from class: com.winlator.ContainerFileManagerFragment$LoadIconTask$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        ContainerFileManagerFragment.LoadIconTask.this.lambda$loadAsync$1(file);
                    }
                });
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$loadAsync$1(FileInfo file) {
                final Object icon = this.fragment.getIconForFile(file);
                final ImageView imageView = this.imageViewWeakRef.get();
                if (imageView != null && !this.canceled) {
                    imageView.post(new Runnable() { // from class: com.winlator.ContainerFileManagerFragment$LoadIconTask$$ExternalSyntheticLambda1
                        @Override // java.lang.Runnable
                        public final void run() {
                            ContainerFileManagerFragment.LoadIconTask.this.lambda$loadAsync$0(icon, imageView);
                        }
                    });
                }
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$loadAsync$0(Object icon, ImageView imageView) {
                if (this.canceled) {
                    return;
                }
                if (icon instanceof Bitmap) {
                    imageView.setImageBitmap((Bitmap) icon);
                } else {
                    imageView.setImageResource(((Integer) icon).intValue());
                }
            }
    
            public void cancel() {
                this.canceled = true;
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        class FileInfoAdapter extends RecyclerView.Adapter<ViewHolder> {
            private final List<FileInfo> data;
    
            private class ViewHolder extends RecyclerView.ViewHolder {
                private final ImageView imageView;
                private final ImageView menuButton;
                private final ImageView runButton;
                private final TextView subtitle;
                private final TextView title;
    
                private ViewHolder(View view) {
                    super(view);
                    this.imageView = (ImageView) view.findViewById(R.id.ImageView);
                    this.title = (TextView) view.findViewById(R.id.TVTitle);
                    this.subtitle = (TextView) view.findViewById(R.id.TVSubtitle);
                    this.runButton = (ImageView) view.findViewById(R.id.BTRun);
                    this.menuButton = (ImageView) view.findViewById(R.id.BTMenu);
                }
            }
    
            public FileInfoAdapter(List<FileInfo> data) {
                this.data = data;
            }
    
            @Override // androidx.recyclerview.widget.RecyclerView.Adapter
            public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
                int resource = ContainerFileManagerFragment.this.viewStyle == BaseFileManagerFragment.ViewStyle.LIST ? R.layout.file_list_item : R.layout.file_grid_item;
                return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(resource, parent, false));
            }
    
            @Override // androidx.recyclerview.widget.RecyclerView.Adapter
            public void onBindViewHolder(ViewHolder holder, int position) {
                Context context = ContainerFileManagerFragment.this.getContext();
                final FileInfo item = this.data.get(position);
                FileInfo.Type type = item.type;
                if (item.type == FileInfo.Type.DRIVE) {
                    String driveText = ContainerFileManagerFragment.this.getContext().getString(R.string.drive);
                    holder.title.setText(driveText + " (" + item.name + ")");
                } else {
                    MSLink.LinkInfo linkInfo = item.getLinkinfo();
                    if (linkInfo != null && linkInfo.isDirectory) {
                        type = FileInfo.Type.DIRECTORY;
                    }
                    holder.title.setText(item.getDisplayName());
                }
                holder.subtitle.setVisibility(8);
                holder.runButton.setImageResource(R.drawable.icon_open);
                if (type == FileInfo.Type.DIRECTORY && !ContainerFileManagerFragment.this.folderStack.isEmpty()) {
                    holder.subtitle.setText(item.getItemCount() + " " + context.getString(R.string.items));
                    holder.subtitle.setVisibility(0);
                } else if (type == FileInfo.Type.FILE) {
                    holder.runButton.setImageResource(R.drawable.icon_run);
                    holder.subtitle.setText(StringUtils.formatBytes(item.getSize()));
                    holder.subtitle.setVisibility(0);
                }
                if (type == FileInfo.Type.FILE) {
                    holder.imageView.setImageResource(R.drawable.container_file);
                    LoadIconTask loadIconTask = (LoadIconTask) holder.imageView.getTag();
                    if (loadIconTask != null) {
                        loadIconTask.cancel();
                    }
                    LoadIconTask loadIconTask2 = new LoadIconTask(holder.imageView);
                    loadIconTask2.loadAsync(item);
                    holder.imageView.setTag(loadIconTask2);
                } else {
                    holder.imageView.setImageResource(((Integer) ContainerFileManagerFragment.this.getIconForFile(item)).intValue());
                }
                holder.imageView.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ContainerFileManagerFragment$FileInfoAdapter$$ExternalSyntheticLambda2
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ContainerFileManagerFragment.FileInfoAdapter.this.lambda$onBindViewHolder$0(item, view);
                    }
                });
                holder.runButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ContainerFileManagerFragment$FileInfoAdapter$$ExternalSyntheticLambda0
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ContainerFileManagerFragment.FileInfoAdapter.this.lambda$onBindViewHolder$1(item, view);
                    }
                });
                holder.menuButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ContainerFileManagerFragment$FileInfoAdapter$$ExternalSyntheticLambda1
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ContainerFileManagerFragment.FileInfoAdapter.this.lambda$onBindViewHolder$2(item, view);
                    }
                });
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$onBindViewHolder$0(FileInfo item, View v) {
                openFile(item);
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$onBindViewHolder$1(FileInfo item, View v) {
                openFile(item);
            }
    
            @Override // androidx.recyclerview.widget.RecyclerView.Adapter
            public final int getItemCount() {
                return this.data.size();
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            /* renamed from: showListItemMenu, reason: merged with bridge method [inline-methods] */
            public void lambda$onBindViewHolder$2(View anchorView, final FileInfo file) {
                final Context context = ContainerFileManagerFragment.this.getContext();
                PopupMenu listItemMenu = new PopupMenu(context, anchorView);
                if (Build.VERSION.SDK_INT >= 29) {
                    listItemMenu.setForceShowIcon(true);
                }
                listItemMenu.inflate(R.menu.file_manager_popup_menu);
                Menu menu = listItemMenu.getMenu();
                menu.findItem(R.id.menu_item_settings).setVisible(false);
                if (ContainerFileManagerFragment.this.folderStack.isEmpty()) {
                    menu.findItem(R.id.menu_item_cut).setVisible(false);
                    menu.findItem(R.id.menu_item_remove).setVisible(false);
                    menu.findItem(R.id.menu_item_rename).setVisible(false);
                    menu.findItem(R.id.menu_item_add_favorite).setVisible(false);
                } else if (((FileInfo) ContainerFileManagerFragment.this.folderStack.peek()).name.equals("Favorites")) {
                    menu.findItem(R.id.menu_item_add_favorite).setVisible(false);
                }
                listItemMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() { // from class: com.winlator.ContainerFileManagerFragment$FileInfoAdapter$$ExternalSyntheticLambda3
                    @Override // android.widget.PopupMenu.OnMenuItemClickListener
                    public final boolean onMenuItemClick(MenuItem menuItem) {
                        boolean lambda$showListItemMenu$5;
                        lambda$showListItemMenu$5 = ContainerFileManagerFragment.FileInfoAdapter.this.lambda$showListItemMenu$5(file, context, menuItem);
                        return lambda$showListItemMenu$5;
                    }
                });
                listItemMenu.show();
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
            /* JADX WARN: Code restructure failed: missing block: B:12:0x0050, code lost:
    
                return true;
             */
            /*
                Code decompiled incorrectly, please refer to instructions dump.
                To view partially-correct add '--show-bad-code' argument
            */
            public /* synthetic */ boolean lambda$showListItemMenu$5(final com.winlator.container.FileInfo r6, android.content.Context r7, android.view.MenuItem r8) {
                /*
                    r5 = this;
                    int r0 = r8.getItemId()
                    r1 = 1
                    switch(r0) {
                        case 2131296686: goto L4a;
                        case 2131296689: goto L3c;
                        case 2131296690: goto L3c;
                        case 2131296699: goto L2d;
                        case 2131296710: goto L1c;
                        case 2131296711: goto L9;
                        default: goto L8;
                    }
                L8:
                    goto L50
                L9:
                    com.winlator.ContainerFileManagerFragment r2 = com.winlator.ContainerFileManagerFragment.this
                    r2.clearClipboard()
                    r2 = 2131755317(0x7f100135, float:1.914151E38)
                    java.lang.String r3 = r6.name
                    com.winlator.ContainerFileManagerFragment$FileInfoAdapter$$ExternalSyntheticLambda4 r4 = new com.winlator.ContainerFileManagerFragment$FileInfoAdapter$$ExternalSyntheticLambda4
                    r4.<init>()
                    com.winlator.contentdialog.ContentDialog.prompt(r7, r2, r3, r4)
                    goto L50
                L1c:
                    com.winlator.ContainerFileManagerFragment r2 = com.winlator.ContainerFileManagerFragment.this
                    r2.clearClipboard()
                    r2 = 2131755127(0x7f100077, float:1.9141124E38)
                    com.winlator.ContainerFileManagerFragment$FileInfoAdapter$$ExternalSyntheticLambda5 r3 = new com.winlator.ContainerFileManagerFragment$FileInfoAdapter$$ExternalSyntheticLambda5
                    r3.<init>()
                    com.winlator.contentdialog.ContentDialog.confirm(r7, r2, r3)
                    goto L50
                L2d:
                    com.winlator.contentdialog.FileInfoDialog r2 = new com.winlator.contentdialog.FileInfoDialog
                    com.winlator.ContainerFileManagerFragment r3 = com.winlator.ContainerFileManagerFragment.this
                    com.winlator.container.Container r3 = com.winlator.ContainerFileManagerFragment.access$700(r3)
                    r2.<init>(r7, r6, r3)
                    r2.show()
                    goto L50
                L3c:
                    com.winlator.ContainerFileManagerFragment r2 = com.winlator.ContainerFileManagerFragment.this
                    r3 = 2131296690(0x7f0901b2, float:1.8211304E38)
                    if (r0 != r3) goto L45
                    r3 = r1
                    goto L46
                L45:
                    r3 = 0
                L46:
                    com.winlator.ContainerFileManagerFragment.access$800(r2, r6, r3)
                    goto L50
                L4a:
                    com.winlator.ContainerFileManagerFragment r2 = com.winlator.ContainerFileManagerFragment.this
                    com.winlator.ContainerFileManagerFragment.access$900(r2, r6)
                L50:
                    return r1
                */
                throw new UnsupportedOperationException("Method not decompiled: com.winlator.ContainerFileManagerFragment.FileInfoAdapter.lambda$showListItemMenu$5(com.winlator.container.FileInfo, android.content.Context, android.view.MenuItem):boolean");
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$showListItemMenu$3(FileInfo file) {
                ContainerFileManagerFragment.this.removeFile(file.toFile());
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$showListItemMenu$4(FileInfo file, String newName) {
                file.renameTo(newName);
                ContainerFileManagerFragment.this.refreshContent();
            }
    
            private void openFile(FileInfo file) {
                Activity activity = ContainerFileManagerFragment.this.getActivity();
                MSLink.LinkInfo linkInfo = file.getLinkinfo();
                boolean isFile = true;
                if (linkInfo == null ? file.type != FileInfo.Type.FILE : linkInfo.isDirectory) {
                    isFile = false;
                }
                if (isFile) {
                    Intent intent = new Intent(activity, (Class<?>) XServerDisplayActivity.class);
                    intent.putExtra("container_id", ContainerFileManagerFragment.this.container.id);
                    intent.putExtra("exec_path", file.path);
                    activity.startActivity(intent);
                    return;
                }
                ContainerFileManagerFragment.this.folderStack.push(file);
                ContainerFileManagerFragment.this.refreshContent();
            }
        }
    
        public Object getIconForFile(FileInfo file) {
            Bitmap bitmap;
            FileInfo.Type type = file.type;
            FileInfo.Type type2 = FileInfo.Type.DIRECTORY;
            Integer valueOf = Integer.valueOf(R.drawable.container_folder);
            if (type == type2) {
                Context context = getContext();
                if (file.path.endsWith("xuser/" + context.getString(R.string.documents))) {
                    return Integer.valueOf(R.drawable.container_folder_documents);
                }
                if (file.path.endsWith("xuser/" + context.getString(R.string.favorites))) {
                    return Integer.valueOf(R.drawable.container_folder_favorites);
                }
                return valueOf;
            }
            if (type == FileInfo.Type.DRIVE) {
                return Integer.valueOf(R.drawable.container_drive);
            }
            String extension = FileUtils.getExtension(file.path);
            switch (extension) {
                case "exe":
                    Bitmap bitmap2 = PEParser.extractIcon(file.toFile());
                    return bitmap2 != null ? bitmap2 : Integer.valueOf(R.drawable.container_file_window);
                case "bat":
                    return Integer.valueOf(R.drawable.container_file_window);
                case "ico":
                    Bitmap bitmap3 = MSIcon.decodeFile(file.toFile());
                    if (bitmap3 != null) {
                        return bitmap3;
                    }
                    break;
                case "dll":
                    return Integer.valueOf(R.drawable.container_file_library);
                case "lnk":
                    MSLink.LinkInfo linkInfo = file.getLinkinfo();
                    if (linkInfo != null) {
                        if (linkInfo.isDirectory) {
                            return valueOf;
                        }
                        String targetPath = linkInfo.iconLocation;
                        if (targetPath == null) {
                            targetPath = linkInfo.targetPath;
                        }
                        String targetPath2 = WineUtils.dosToUnixPath(targetPath, this.container);
                        if (targetPath2.endsWith(".ico")) {
                            bitmap = MSIcon.decodeFile(new File(targetPath2));
                        } else {
                            bitmap = PEParser.extractIcon(new File(targetPath2), linkInfo.iconIndex);
                        }
                        if (bitmap != null) {
                            return bitmap;
                        }
                    }
                    return Integer.valueOf(R.drawable.container_file_link);
            }
            return Integer.valueOf(R.drawable.container_file);
        }
    }
  + app/src/main/java/com/winlator/ContainersFragment.java
    package com.winlator;
    
    import android.app.Activity;
    import android.content.Intent;
    import android.os.Build;
    import android.os.Bundle;
    import android.view.LayoutInflater;
    import android.view.Menu;
    import android.view.MenuInflater;
    import android.view.MenuItem;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.FrameLayout;
    import android.widget.ImageView;
    import android.widget.PopupMenu;
    import android.widget.TextView;
    import androidx.appcompat.app.AppCompatActivity;
    import androidx.fragment.app.Fragment;
    import androidx.fragment.app.FragmentManager;
    import androidx.recyclerview.widget.DividerItemDecoration;
    import androidx.recyclerview.widget.LinearLayoutManager;
    import androidx.recyclerview.widget.RecyclerView;
    import com.winlator.ContainersFragment;
    import com.winlator.container.Container;
    import com.winlator.container.ContainerManager;
    import com.winlator.contentdialog.ContentDialog;
    import com.winlator.contentdialog.StorageInfoDialog;
    import com.winlator.core.PreloaderDialog;
    import com.winlator.xenvironment.RootFS;
    import java.util.ArrayList;
    import java.util.List;
    
    /* loaded from: classes.dex */
    public class ContainersFragment extends Fragment {
        private TextView emptyTextView;
        private ContainerManager manager;
        private PreloaderDialog preloaderDialog;
        private RecyclerView recyclerView;
    
        @Override // androidx.fragment.app.Fragment
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setHasOptionsMenu(true);
            this.preloaderDialog = new PreloaderDialog(getActivity());
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onViewCreated(View view, Bundle savedInstanceState) {
            super.onViewCreated(view, savedInstanceState);
            this.manager = new ContainerManager(getContext());
            loadContainersList();
            ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(R.string.containers);
        }
    
        @Override // androidx.fragment.app.Fragment
        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            FrameLayout frameLayout = (FrameLayout) inflater.inflate(R.layout.containers_fragment, container, false);
            this.recyclerView = (RecyclerView) frameLayout.findViewById(R.id.RecyclerView);
            this.emptyTextView = (TextView) frameLayout.findViewById(R.id.TVEmptyText);
            RecyclerView recyclerView = this.recyclerView;
            recyclerView.setLayoutManager(new LinearLayoutManager(recyclerView.getContext()));
            this.recyclerView.addItemDecoration(new DividerItemDecoration(this.recyclerView.getContext(), 1));
            return frameLayout;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void loadContainersList() {
            ArrayList<Container> containers = this.manager.getContainers();
            this.recyclerView.setAdapter(new ContainersAdapter(containers));
            if (containers.isEmpty()) {
                this.emptyTextView.setVisibility(0);
            }
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onCreateOptionsMenu(Menu menu, MenuInflater menuInflater) {
            menuInflater.inflate(R.menu.containers_menu, menu);
        }
    
        @Override // androidx.fragment.app.Fragment
        public boolean onOptionsItemSelected(MenuItem menuItem) {
            if (menuItem.getItemId() == R.id.menu_item_add) {
                if (!RootFS.find(getContext()).isValid()) {
                    return false;
                }
                FragmentManager fragmentManager = getParentFragmentManager();
                fragmentManager.beginTransaction().addToBackStack(null).replace(R.id.FLFragmentContainer, new ContainerDetailFragment()).commit();
                return true;
            }
            return super.onOptionsItemSelected(menuItem);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        class ContainersAdapter extends RecyclerView.Adapter<ViewHolder> {
            private final List<Container> data;
    
            private class ViewHolder extends RecyclerView.ViewHolder {
                private final ImageView imageView;
                private final ImageView menuButton;
                private final ImageView runButton;
                private final TextView title;
    
                private ViewHolder(View view) {
                    super(view);
                    this.imageView = (ImageView) view.findViewById(R.id.ImageView);
                    this.title = (TextView) view.findViewById(R.id.TVTitle);
                    this.runButton = (ImageView) view.findViewById(R.id.BTRun);
                    this.menuButton = (ImageView) view.findViewById(R.id.BTMenu);
                }
            }
    
            public ContainersAdapter(List<Container> data) {
                this.data = data;
            }
    
            @Override // androidx.recyclerview.widget.RecyclerView.Adapter
            public final ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
                return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.container_list_item, parent, false));
            }
    
            @Override // androidx.recyclerview.widget.RecyclerView.Adapter
            public void onBindViewHolder(ViewHolder holder, int position) {
                final Container item = this.data.get(position);
                holder.imageView.setImageResource(R.drawable.icon_container);
                holder.title.setText(item.getName());
                holder.runButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ContainersFragment$ContainersAdapter$$ExternalSyntheticLambda1
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ContainersFragment.ContainersAdapter.this.lambda$onBindViewHolder$0(item, view);
                    }
                });
                holder.menuButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ContainersFragment$ContainersAdapter$$ExternalSyntheticLambda0
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ContainersFragment.ContainersAdapter.this.lambda$onBindViewHolder$1(item, view);
                    }
                });
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$onBindViewHolder$0(Container item, View view) {
                runContainer(item);
            }
    
            @Override // androidx.recyclerview.widget.RecyclerView.Adapter
            public final int getItemCount() {
                return this.data.size();
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            /* renamed from: showListItemMenu, reason: merged with bridge method [inline-methods] */
            public void lambda$onBindViewHolder$1(View anchorView, final Container container) {
                final MainActivity activity = (MainActivity) ContainersFragment.this.getActivity();
                PopupMenu listItemMenu = new PopupMenu(activity, anchorView);
                listItemMenu.inflate(R.menu.container_popup_menu);
                if (Build.VERSION.SDK_INT >= 29) {
                    listItemMenu.setForceShowIcon(true);
                }
                listItemMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() { // from class: com.winlator.ContainersFragment$ContainersAdapter$$ExternalSyntheticLambda2
                    @Override // android.widget.PopupMenu.OnMenuItemClickListener
                    public final boolean onMenuItemClick(MenuItem menuItem) {
                        boolean lambda$showListItemMenu$6;
                        lambda$showListItemMenu$6 = ContainersFragment.ContainersAdapter.this.lambda$showListItemMenu$6(activity, container, menuItem);
                        return lambda$showListItemMenu$6;
                    }
                });
                listItemMenu.show();
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ boolean lambda$showListItemMenu$6(MainActivity activity, final Container container, MenuItem menuItem) {
                switch (menuItem.getItemId()) {
                    case R.id.menu_item_duplicate /* 2131296693 */:
                        ContentDialog.confirm(ContainersFragment.this.getContext(), R.string.do_you_want_to_duplicate_this_container, new Runnable() { // from class: com.winlator.ContainersFragment$ContainersAdapter$$ExternalSyntheticLambda5
                            @Override // java.lang.Runnable
                            public final void run() {
                                ContainersFragment.ContainersAdapter.this.lambda$showListItemMenu$3(container);
                            }
                        });
                        break;
                    case R.id.menu_item_edit /* 2131296694 */:
                        activity.showFragment(new ContainerDetailFragment(container.id));
                        break;
                    case R.id.menu_item_file_manager /* 2131296697 */:
                        activity.showFragment(new ContainerFileManagerFragment(container.id));
                        break;
                    case R.id.menu_item_info /* 2131296699 */:
                        new StorageInfoDialog(activity, container).show();
                        break;
                    case R.id.menu_item_remove /* 2131296710 */:
                        ContentDialog.confirm(ContainersFragment.this.getContext(), R.string.do_you_want_to_remove_this_container, new Runnable() { // from class: com.winlator.ContainersFragment$ContainersAdapter$$ExternalSyntheticLambda6
                            @Override // java.lang.Runnable
                            public final void run() {
                                ContainersFragment.ContainersAdapter.this.lambda$showListItemMenu$5(container);
                            }
                        });
                        break;
                }
                return true;
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$showListItemMenu$3(Container container) {
                ContainersFragment.this.preloaderDialog.lambda$showOnUiThread$0(R.string.duplicating_container);
                ContainersFragment.this.manager.duplicateContainerAsync(container, new Runnable() { // from class: com.winlator.ContainersFragment$ContainersAdapter$$ExternalSyntheticLambda3
                    @Override // java.lang.Runnable
                    public final void run() {
                        ContainersFragment.ContainersAdapter.this.lambda$showListItemMenu$2();
                    }
                });
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$showListItemMenu$2() {
                ContainersFragment.this.preloaderDialog.close();
                ContainersFragment.this.loadContainersList();
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$showListItemMenu$5(Container container) {
                ContainersFragment.this.preloaderDialog.lambda$showOnUiThread$0(R.string.removing_container);
                ContainersFragment.this.manager.removeContainerAsync(container, new Runnable() { // from class: com.winlator.ContainersFragment$ContainersAdapter$$ExternalSyntheticLambda4
                    @Override // java.lang.Runnable
                    public final void run() {
                        ContainersFragment.ContainersAdapter.this.lambda$showListItemMenu$4();
                    }
                });
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$showListItemMenu$4() {
                ContainersFragment.this.preloaderDialog.close();
                ContainersFragment.this.loadContainersList();
            }
    
            private void runContainer(Container container) {
                Activity activity = ContainersFragment.this.getActivity();
                Intent intent = new Intent(activity, (Class<?>) XServerDisplayActivity.class);
                intent.putExtra("container_id", container.id);
                activity.startActivity(intent);
            }
        }
    }
  + app/src/main/java/com/winlator/ControlsEditorActivity.java
    package com.winlator;
    
    import android.R;
    import android.graphics.BitmapFactory;
    import android.graphics.PointF;
    import android.os.Bundle;
    import android.view.LayoutInflater;
    import android.view.MotionEvent;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.AdapterView;
    import android.widget.ArrayAdapter;
    import android.widget.CheckBox;
    import android.widget.CompoundButton;
    import android.widget.EditText;
    import android.widget.FrameLayout;
    import android.widget.ImageButton;
    import android.widget.ImageView;
    import android.widget.LinearLayout;
    import android.widget.PopupWindow;
    import android.widget.RadioGroup;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import android.widget.TextView;
    import androidx.appcompat.app.AppCompatActivity;
    import com.winlator.core.AppUtils;
    import com.winlator.core.FileUtils;
    import com.winlator.core.UnitUtils;
    import com.winlator.inputcontrols.Binding;
    import com.winlator.inputcontrols.ControlElement;
    import com.winlator.inputcontrols.ControlsProfile;
    import com.winlator.inputcontrols.InputControlsManager;
    import com.winlator.math.Mathf;
    import com.winlator.widget.InputControlsView;
    import com.winlator.widget.NumberPicker;
    import com.winlator.widget.SeekBar;
    import java.io.IOException;
    import java.io.InputStream;
    import java.util.Arrays;
    
    /* loaded from: classes.dex */
    public class ControlsEditorActivity extends AppCompatActivity implements View.OnClickListener {
        private InputControlsView inputControlsView;
        private ControlsProfile profile;
        private View toolbox;
    
        @Override // androidx.appcompat.app.AppCompatActivity, androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity
        public void onCreate(Bundle bundle) {
            super.onCreate(bundle);
            AppUtils.hideSystemUI(this);
            setContentView(R.layout.controls_editor_activity);
            InputControlsView inputControlsView = new InputControlsView(this);
            this.inputControlsView = inputControlsView;
            inputControlsView.setEditMode(true);
            this.inputControlsView.setOverlayOpacity(0.6f);
            this.profile = InputControlsManager.loadProfile(this, ControlsProfile.getProfileFile(this, getIntent().getIntExtra("profile_id", 0)));
            ((TextView) findViewById(R.id.TVProfileName)).setText(this.profile.getName());
            this.inputControlsView.setProfile(this.profile);
            FrameLayout container = (FrameLayout) findViewById(R.id.FLContainer);
            container.addView(this.inputControlsView, 0);
            container.findViewById(R.id.BTAddElement).setOnClickListener(this);
            container.findViewById(R.id.BTRemoveElement).setOnClickListener(this);
            container.findViewById(R.id.BTElementSettings).setOnClickListener(this);
            this.toolbox = container.findViewById(R.id.Toolbox);
            final PointF startPoint = new PointF();
            final boolean[] isActionDown = {false};
            container.findViewById(R.id.BTMove).setOnTouchListener(new View.OnTouchListener() { // from class: com.winlator.ControlsEditorActivity$$ExternalSyntheticLambda2
                @Override // android.view.View.OnTouchListener
                public final boolean onTouch(View view, MotionEvent motionEvent) {
                    boolean lambda$onCreate$0;
                    lambda$onCreate$0 = ControlsEditorActivity.this.lambda$onCreate$0(startPoint, isActionDown, view, motionEvent);
                    return lambda$onCreate$0;
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        /* JADX WARN: Code restructure failed: missing block: B:8:0x0040, code lost:
    
            return true;
         */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public /* synthetic */ boolean lambda$onCreate$0(android.graphics.PointF r6, boolean[] r7, android.view.View r8, android.view.MotionEvent r9) {
            /*
                r5 = this;
                int r0 = r9.getAction()
                r1 = 1
                r2 = 0
                switch(r0) {
                    case 0: goto L31;
                    case 1: goto L2e;
                    case 2: goto La;
                    default: goto L9;
                }
            L9:
                goto L40
            La:
                boolean r0 = r7[r2]
                if (r0 == 0) goto L40
                android.view.View r0 = r5.toolbox
                float r0 = r0.getX()
                float r2 = r9.getX()
                float r3 = r6.x
                float r2 = r2 - r3
                float r0 = r0 + r2
                android.view.View r2 = r5.toolbox
                float r2 = r2.getY()
                float r3 = r9.getY()
                float r4 = r6.y
                float r3 = r3 - r4
                float r2 = r2 + r3
                r5.moveToolbox(r0, r2)
                goto L40
            L2e:
                r7[r2] = r2
                goto L40
            L31:
                float r0 = r9.getX()
                r6.x = r0
                float r0 = r9.getY()
                r6.y = r0
                r7[r2] = r1
            L40:
                return r1
            */
            throw new UnsupportedOperationException("Method not decompiled: com.winlator.ControlsEditorActivity.lambda$onCreate$0(android.graphics.PointF, boolean[], android.view.View, android.view.MotionEvent):boolean");
        }
    
        private void moveToolbox(float x, float y) {
            int padding = (int) UnitUtils.dpToPx(8.0f);
            ViewGroup parent = (ViewGroup) this.toolbox.getParent();
            int width = this.toolbox.getWidth();
            int height = this.toolbox.getHeight();
            int parentWidth = parent.getWidth();
            int parentHeight = parent.getHeight();
            float x2 = Mathf.clamp(x, padding, (parentWidth - padding) - width);
            float y2 = Mathf.clamp(y, padding, (parentHeight - padding) - height);
            this.toolbox.setX(x2);
            this.toolbox.setY(y2);
        }
    
        @Override // android.view.View.OnClickListener
        public void onClick(View v) {
            switch (v.getId()) {
                case R.id.BTAddElement /* 2131296262 */:
                    if (!this.inputControlsView.addElement()) {
                        AppUtils.showToast(this, R.string.no_profile_selected);
                        break;
                    }
                    break;
                case R.id.BTElementSettings /* 2131296277 */:
                    ControlElement selectedElement = this.inputControlsView.getSelectedElement();
                    if (selectedElement != null) {
                        showControlElementSettings(v);
                        break;
                    } else {
                        AppUtils.showToast(this, R.string.no_control_element_selected);
                        break;
                    }
                case R.id.BTRemoveElement /* 2131296295 */:
                    if (!this.inputControlsView.removeElement()) {
                        AppUtils.showToast(this, R.string.no_control_element_selected);
                        break;
                    }
                    break;
            }
        }
    
        private void showControlElementSettings(View anchorView) {
            final ControlElement element = this.inputControlsView.getSelectedElement();
            final View view = LayoutInflater.from(this).inflate(R.layout.control_element_settings, (ViewGroup) null);
            Runnable updateLayout = new Runnable() { // from class: com.winlator.ControlsEditorActivity$$ExternalSyntheticLambda9
                @Override // java.lang.Runnable
                public final void run() {
                    ControlsEditorActivity.this.lambda$showControlElementSettings$1(element, view);
                }
            };
            loadTypeSpinner(element, (Spinner) view.findViewById(R.id.SType), updateLayout);
            loadShapeSpinner(element, (Spinner) view.findViewById(R.id.SShape));
            loadRangeSpinner(element, (Spinner) view.findViewById(R.id.SRange));
            RadioGroup rgOrientation = (RadioGroup) view.findViewById(R.id.RGOrientation);
            rgOrientation.check(element.getOrientation() == 1 ? R.id.RBVertical : R.id.RBHorizontal);
            rgOrientation.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() { // from class: com.winlator.ControlsEditorActivity$$ExternalSyntheticLambda5
                @Override // android.widget.RadioGroup.OnCheckedChangeListener
                public final void onCheckedChanged(RadioGroup radioGroup, int i) {
                    ControlsEditorActivity.this.lambda$showControlElementSettings$2(element, radioGroup, i);
                }
            });
            NumberPicker npColumns = (NumberPicker) view.findViewById(R.id.NPColumns);
            npColumns.setValue(element.getBindingCount());
            npColumns.setOnValueChangeListener(new NumberPicker.OnValueChangeListener() { // from class: com.winlator.ControlsEditorActivity$$ExternalSyntheticLambda6
                @Override // com.winlator.widget.NumberPicker.OnValueChangeListener
                public final void onValueChange(NumberPicker numberPicker, int i) {
                    ControlsEditorActivity.this.lambda$showControlElementSettings$3(element, numberPicker, i);
                }
            });
            SeekBar sbScale = (SeekBar) view.findViewById(R.id.SBScale);
            sbScale.setOnValueChangeListener(new SeekBar.OnValueChangeListener() { // from class: com.winlator.ControlsEditorActivity$$ExternalSyntheticLambda7
                @Override // com.winlator.widget.SeekBar.OnValueChangeListener
                public final void onValueChangeListener(SeekBar seekBar, float f) {
                    ControlsEditorActivity.this.lambda$showControlElementSettings$4(element, seekBar, f);
                }
            });
            sbScale.setValue(element.getScale() * 100.0f);
            CheckBox cbToggleSwitch = (CheckBox) view.findViewById(R.id.CBToggleSwitch);
            cbToggleSwitch.setChecked(element.isToggleSwitch());
            cbToggleSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { // from class: com.winlator.ControlsEditorActivity$$ExternalSyntheticLambda3
                @Override // android.widget.CompoundButton.OnCheckedChangeListener
                public final void onCheckedChanged(CompoundButton compoundButton, boolean z) {
                    ControlsEditorActivity.this.lambda$showControlElementSettings$5(element, compoundButton, z);
                }
            });
            final EditText etCustomText = (EditText) view.findViewById(R.id.ETCustomText);
            etCustomText.setText(element.getText());
            final LinearLayout llIconList = (LinearLayout) view.findViewById(R.id.LLIconList);
            loadIcons(llIconList, element.getIconId());
            updateLayout.run();
            PopupWindow popupWindow = AppUtils.showPopupWindow(anchorView, view, 340, 0);
            popupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() { // from class: com.winlator.ControlsEditorActivity$$ExternalSyntheticLambda4
                @Override // android.widget.PopupWindow.OnDismissListener
                public final void onDismiss() {
                    ControlsEditorActivity.this.lambda$showControlElementSettings$6(etCustomText, llIconList, element);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$showControlElementSettings$1(ControlElement element, View view) {
            ControlElement.Type type = element.getType();
            view.findViewById(R.id.LLShape).setVisibility(8);
            view.findViewById(R.id.CBToggleSwitch).setVisibility(8);
            view.findViewById(R.id.LLCustomTextIcon).setVisibility(8);
            view.findViewById(R.id.LLRangeOptions).setVisibility(8);
            if (type == ControlElement.Type.BUTTON) {
                view.findViewById(R.id.LLShape).setVisibility(0);
                view.findViewById(R.id.CBToggleSwitch).setVisibility(0);
                view.findViewById(R.id.LLCustomTextIcon).setVisibility(0);
            } else if (type == ControlElement.Type.RANGE_BUTTON) {
                view.findViewById(R.id.LLRangeOptions).setVisibility(0);
            }
            loadBindingSpinners(element, view);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$showControlElementSettings$2(ControlElement element, RadioGroup group, int checkedId) {
            element.setOrientation((byte) (checkedId == R.id.RBVertical ? 1 : 0));
            this.profile.save();
            this.inputControlsView.invalidate();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$showControlElementSettings$3(ControlElement element, NumberPicker numberPicker, int value) {
            element.setBindingCount(value);
            this.profile.save();
            this.inputControlsView.invalidate();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$showControlElementSettings$4(ControlElement element, SeekBar seekBar, float value) {
            element.setScale(value / 100.0f);
            this.profile.save();
            this.inputControlsView.invalidate();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$showControlElementSettings$5(ControlElement element, CompoundButton buttonView, boolean isChecked) {
            element.setToggleSwitch(isChecked);
            this.profile.save();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$showControlElementSettings$6(EditText etCustomText, LinearLayout llIconList, ControlElement element) {
            String text = etCustomText.getText().toString().trim();
            byte iconId = 0;
            int i = 0;
            while (true) {
                if (i >= llIconList.getChildCount()) {
                    break;
                }
                View child = llIconList.getChildAt(i);
                if (!child.isSelected()) {
                    i++;
                } else {
                    iconId = ((Byte) child.getTag()).byteValue();
                    break;
                }
            }
            element.setText(text);
            element.setIconId(iconId);
            this.profile.save();
            this.inputControlsView.invalidate();
        }
    
        private void loadTypeSpinner(final ControlElement element, Spinner spinner, final Runnable callback) {
            spinner.setAdapter((SpinnerAdapter) new ArrayAdapter(this, R.layout.simple_spinner_dropdown_item, ControlElement.Type.names()));
            spinner.setSelection(element.getType().ordinal(), false);
            spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { // from class: com.winlator.ControlsEditorActivity.1
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                    element.setType(ControlElement.Type.values()[position]);
                    ControlsEditorActivity.this.profile.save();
                    callback.run();
                    ControlsEditorActivity.this.inputControlsView.invalidate();
                }
    
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onNothingSelected(AdapterView<?> parent) {
                }
            });
        }
    
        private void loadShapeSpinner(final ControlElement element, Spinner spinner) {
            spinner.setAdapter((SpinnerAdapter) new ArrayAdapter(this, R.layout.simple_spinner_dropdown_item, ControlElement.Shape.names()));
            spinner.setSelection(element.getShape().ordinal(), false);
            spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { // from class: com.winlator.ControlsEditorActivity.2
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                    element.setShape(ControlElement.Shape.values()[position]);
                    ControlsEditorActivity.this.profile.save();
                    ControlsEditorActivity.this.inputControlsView.invalidate();
                }
    
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onNothingSelected(AdapterView<?> parent) {
                }
            });
        }
    
        private void loadBindingSpinners(ControlElement element, View view) {
            LinearLayout container = (LinearLayout) view.findViewById(R.id.LLBindings);
            container.removeAllViews();
            ControlElement.Type type = element.getType();
            if (type == ControlElement.Type.BUTTON) {
                byte first = element.getFirstBindingIndex();
                byte count = 0;
                for (byte i = 0; i < element.getBindingCount(); i = (byte) (i + 1)) {
                    if (i <= first || element.getBindingAt(i) != Binding.NONE) {
                        byte count2 = (byte) (count + 1);
                        loadBindingSpinner(element, container, i, count == 0 ? R.string.binding : 0);
                        count = count2;
                    }
                }
                return;
            }
            if (type == ControlElement.Type.D_PAD || type == ControlElement.Type.STICK || type == ControlElement.Type.TRACKPAD) {
                loadBindingSpinner(element, container, 0, R.string.binding_up);
                loadBindingSpinner(element, container, 1, R.string.binding_right);
                loadBindingSpinner(element, container, 2, R.string.binding_down);
                loadBindingSpinner(element, container, 3, R.string.binding_left);
            }
        }
    
        private void loadBindingSpinner(final ControlElement element, final LinearLayout container, final int index, int titleResId) {
            View view = LayoutInflater.from(this).inflate(R.layout.binding_field, (ViewGroup) container, false);
            LinearLayout titleBar = (LinearLayout) view.findViewById(R.id.LLTitleBar);
            if (titleResId > 0) {
                titleBar.setVisibility(0);
                ((TextView) view.findViewById(R.id.TVTitle)).setText(titleResId);
            } else {
                titleBar.setVisibility(8);
            }
            final Spinner sBindingType = (Spinner) view.findViewById(R.id.SBindingType);
            final Spinner sBinding = (Spinner) view.findViewById(R.id.SBinding);
            if (element.getType() == ControlElement.Type.BUTTON) {
                ImageButton addButton = (ImageButton) view.findViewById(R.id.BTAdd);
                addButton.setVisibility(0);
                addButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ControlsEditorActivity$$ExternalSyntheticLambda1
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view2) {
                        ControlsEditorActivity.this.lambda$loadBindingSpinner$7(container, element, view2);
                    }
                });
            }
            final Runnable update = new Runnable() { // from class: com.winlator.ControlsEditorActivity$$ExternalSyntheticLambda8
                @Override // java.lang.Runnable
                public final void run() {
                    ControlsEditorActivity.this.lambda$loadBindingSpinner$8(sBindingType, sBinding, element, index);
                }
            };
            sBindingType.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { // from class: com.winlator.ControlsEditorActivity.3
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onItemSelected(AdapterView<?> parent, View view2, int position, long id) {
                    update.run();
                }
    
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onNothingSelected(AdapterView<?> parent) {
                }
            });
            Binding selectedBinding = element.getBindingAt(index);
            if (selectedBinding.isKeyboard()) {
                sBindingType.setSelection(0, false);
            } else if (selectedBinding.isMouse()) {
                sBindingType.setSelection(1, false);
            } else if (selectedBinding.isGamepad()) {
                sBindingType.setSelection(2, false);
            }
            sBinding.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { // from class: com.winlator.ControlsEditorActivity.4
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onItemSelected(AdapterView<?> parent, View view2, int position, long id) {
                    Binding binding = Binding.NONE;
                    switch (sBindingType.getSelectedItemPosition()) {
                        case 0:
                            binding = Binding.keyboardBindingValues()[position];
                            break;
                        case 1:
                            binding = Binding.mouseBindingValues()[position];
                            break;
                        case 2:
                            binding = Binding.gamepadBindingValues()[position];
                            break;
                    }
                    if (binding != element.getBindingAt(index)) {
                        element.setBindingAt(index, binding);
                        ControlsEditorActivity.this.profile.save();
                        ControlsEditorActivity.this.inputControlsView.invalidate();
                    }
                }
    
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onNothingSelected(AdapterView<?> parent) {
                }
            });
            update.run();
            container.addView(view);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadBindingSpinner$7(LinearLayout container, ControlElement element, View v) {
            int nextIndex = container.getChildCount();
            if (nextIndex < element.getBindingCount()) {
                loadBindingSpinner(element, container, nextIndex, 0);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadBindingSpinner$8(Spinner sBindingType, Spinner sBinding, ControlElement element, int index) {
            String[] bindingEntries = null;
            switch (sBindingType.getSelectedItemPosition()) {
                case 0:
                    bindingEntries = Binding.keyboardBindingLabels();
                    break;
                case 1:
                    bindingEntries = Binding.mouseBindingLabels();
                    break;
                case 2:
                    bindingEntries = Binding.gamepadBindingLabels();
                    break;
            }
            sBinding.setAdapter((SpinnerAdapter) new ArrayAdapter(this, R.layout.simple_spinner_dropdown_item, bindingEntries));
            AppUtils.setSpinnerSelectionFromValue(sBinding, element.getBindingAt(index).toString());
        }
    
        private void loadRangeSpinner(final ControlElement element, Spinner spinner) {
            spinner.setAdapter((SpinnerAdapter) new ArrayAdapter(this, R.layout.simple_spinner_dropdown_item, ControlElement.Range.names()));
            spinner.setSelection(element.getRange().ordinal(), false);
            spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { // from class: com.winlator.ControlsEditorActivity.5
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                    element.setRange(ControlElement.Range.values()[position]);
                    ControlsEditorActivity.this.profile.save();
                    ControlsEditorActivity.this.inputControlsView.invalidate();
                }
    
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onNothingSelected(AdapterView<?> parent) {
                }
            });
        }
    
        private void loadIcons(final LinearLayout parent, byte selectedId) {
            String str;
            String str2 = "inputcontrols/icons/";
            boolean z = false;
            byte[] iconIds = new byte[0];
            try {
                String[] filenames = getAssets().list("inputcontrols/icons/");
                iconIds = new byte[filenames.length];
                for (int i = 0; i < filenames.length; i++) {
                    iconIds[i] = Byte.parseByte(FileUtils.getBasename(filenames[i]));
                }
            } catch (IOException e) {
            }
            Arrays.sort(iconIds);
            int size = (int) UnitUtils.dpToPx(40.0f);
            int margin = (int) UnitUtils.dpToPx(2.0f);
            int padding = (int) UnitUtils.dpToPx(4.0f);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(size, size);
            params.setMargins(margin, 0, margin, 0);
            int length = iconIds.length;
            int i2 = 0;
            while (i2 < length) {
                byte id = iconIds[i2];
                final ImageView imageView = new ImageView(this);
                imageView.setLayoutParams(params);
                imageView.setPadding(padding, padding, padding, padding);
                imageView.setBackgroundResource(R.drawable.icon_background);
                imageView.setTag(Byte.valueOf(id));
                imageView.setSelected(id == selectedId ? true : z);
                imageView.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ControlsEditorActivity$$ExternalSyntheticLambda0
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ControlsEditorActivity.lambda$loadIcons$9(parent, imageView, view);
                    }
                });
                try {
                    InputStream is = getAssets().open(str2 + ((int) id) + ".png");
                    try {
                        imageView.setImageBitmap(BitmapFactory.decodeStream(is));
                        if (is != null) {
                            is.close();
                        }
                        str = str2;
                    } catch (Throwable th) {
                        if (is != null) {
                            try {
                                try {
                                    is.close();
                                    str = str2;
                                } catch (Throwable th2) {
                                    str = str2;
                                    th.addSuppressed(th2);
                                }
                            } catch (IOException e2) {
                            }
                        } else {
                            str = str2;
                        }
                        throw th;
                    }
                } catch (IOException e3) {
                    str = str2;
                }
                parent.addView(imageView);
                i2++;
                str2 = str;
                z = false;
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$loadIcons$9(LinearLayout parent, ImageView imageView, View v) {
            for (int i = 0; i < parent.getChildCount(); i++) {
                parent.getChildAt(i).setSelected(false);
            }
            imageView.setSelected(true);
        }
    }
  + app/src/main/java/com/winlator/ExternalControllerBindingsActivity.java
    package com.winlator;
    
    import android.R;
    import android.animation.ValueAnimator;
    import android.content.Context;
    import android.content.Intent;
    import android.graphics.Color;
    import android.os.Bundle;
    import android.view.KeyEvent;
    import android.view.LayoutInflater;
    import android.view.MenuItem;
    import android.view.MotionEvent;
    import android.view.View;
    import android.view.ViewGroup;
    import android.view.animation.AccelerateDecelerateInterpolator;
    import android.widget.AdapterView;
    import android.widget.ArrayAdapter;
    import android.widget.ImageButton;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import android.widget.TextView;
    import androidx.appcompat.app.ActionBar;
    import androidx.appcompat.app.AppCompatActivity;
    import androidx.appcompat.widget.Toolbar;
    import androidx.core.content.ContextCompat;
    import androidx.recyclerview.widget.DividerItemDecoration;
    import androidx.recyclerview.widget.LinearLayoutManager;
    import androidx.recyclerview.widget.RecyclerView;
    import com.winlator.ExternalControllerBindingsActivity;
    import com.winlator.core.AppUtils;
    import com.winlator.inputcontrols.Binding;
    import com.winlator.inputcontrols.ControlsProfile;
    import com.winlator.inputcontrols.ExternalController;
    import com.winlator.inputcontrols.ExternalControllerBinding;
    import com.winlator.inputcontrols.GamepadState;
    import com.winlator.inputcontrols.InputControlsManager;
    import com.winlator.math.Mathf;
    
    /* loaded from: classes.dex */
    public class ExternalControllerBindingsActivity extends AppCompatActivity {
        private ControllerBindingsAdapter adapter;
        private ExternalController controller;
        private TextView emptyTextView;
        private ControlsProfile profile;
        private RecyclerView recyclerView;
    
        @Override // androidx.appcompat.app.AppCompatActivity, androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.external_controller_bindings_activity);
            Intent intent = getIntent();
            int profileId = intent.getIntExtra("profile_id", 0);
            this.profile = InputControlsManager.loadProfile(this, ControlsProfile.getProfileFile(this, profileId));
            String controllerId = intent.getStringExtra("controller_id");
            ExternalController controller = this.profile.getController(controllerId);
            this.controller = controller;
            if (controller == null) {
                this.controller = this.profile.addController(controllerId);
                this.profile.save();
            }
            Toolbar toolbar = (Toolbar) findViewById(R.id.Toolbar);
            toolbar.setTitle(this.controller.getName());
            setSupportActionBar(toolbar);
            ActionBar actionBar = getSupportActionBar();
            actionBar.setDisplayHomeAsUpEnabled(true);
            actionBar.setHomeAsUpIndicator(R.drawable.icon_action_bar_back);
            this.emptyTextView = (TextView) findViewById(R.id.TVEmptyText);
            RecyclerView recyclerView = (RecyclerView) findViewById(R.id.RecyclerView);
            this.recyclerView = recyclerView;
            recyclerView.setLayoutManager(new LinearLayoutManager(this));
            this.recyclerView.addItemDecoration(new DividerItemDecoration(this, 1));
            RecyclerView recyclerView2 = this.recyclerView;
            ControllerBindingsAdapter controllerBindingsAdapter = new ControllerBindingsAdapter();
            this.adapter = controllerBindingsAdapter;
            recyclerView2.setAdapter(controllerBindingsAdapter);
            updateEmptyTextView();
        }
    
        private void updateControllerBinding(int keyCode, Binding binding) {
            int position;
            if (keyCode == 0) {
                return;
            }
            ExternalControllerBinding controllerBinding = this.controller.getControllerBinding(keyCode);
            if (controllerBinding == null) {
                ExternalControllerBinding controllerBinding2 = new ExternalControllerBinding();
                controllerBinding2.setKeyCode(keyCode);
                controllerBinding2.setBinding(binding);
                this.controller.addControllerBinding(controllerBinding2);
                this.profile.save();
                this.adapter.notifyDataSetChanged();
                updateEmptyTextView();
                position = this.controller.getPosition(controllerBinding2);
            } else {
                position = this.controller.getPosition(controllerBinding);
                animateItemView(position);
            }
            this.recyclerView.scrollToPosition(position);
        }
    
        private void processJoystickInput() {
            int keyCode = 0;
            Binding binding = Binding.NONE;
            int[] axes = {0, 1, 11, 14, 15, 16};
            GamepadState gamepadState = this.controller.state;
            float[] values = {gamepadState.thumbLX, gamepadState.thumbLY, gamepadState.thumbRX, gamepadState.thumbRY, gamepadState.getDPadX(), this.controller.state.getDPadY()};
            int i = 0;
            while (true) {
                if (i >= axes.length) {
                    break;
                }
                byte sign = Mathf.sign(values[i]);
                if (sign == 0) {
                    i++;
                } else {
                    if (axes[i] == 0 || axes[i] == 11) {
                        binding = sign > 0 ? Binding.MOUSE_MOVE_RIGHT : Binding.MOUSE_MOVE_LEFT;
                    } else if (axes[i] == 1 || axes[i] == 14) {
                        binding = sign > 0 ? Binding.MOUSE_MOVE_DOWN : Binding.MOUSE_MOVE_UP;
                    } else if (axes[i] == 15) {
                        binding = sign > 0 ? Binding.KEY_D : Binding.KEY_A;
                    } else if (axes[i] == 16) {
                        binding = sign > 0 ? Binding.KEY_S : Binding.KEY_W;
                    }
                    keyCode = ExternalControllerBinding.getKeyCodeForAxis(axes[i], sign);
                }
            }
            updateControllerBinding(keyCode, binding);
        }
    
        @Override // android.app.Activity, android.view.Window.Callback
        public boolean dispatchGenericMotionEvent(MotionEvent event) {
            if (event.getDeviceId() == this.controller.getDeviceId() && this.controller.updateStateFromMotionEvent(event)) {
                if (this.controller.state.isPressed(10)) {
                    updateControllerBinding(androidx.constraintlayout.widget.R$styleable.Constraint_pathMotionArc, Binding.NONE);
                }
                if (this.controller.state.isPressed(11)) {
                    updateControllerBinding(105, Binding.NONE);
                }
                processJoystickInput();
                return true;
            }
            return super.dispatchGenericMotionEvent(event);
        }
    
        @Override // androidx.appcompat.app.AppCompatActivity, androidx.core.app.ComponentActivity, android.app.Activity, android.view.Window.Callback
        public boolean dispatchKeyEvent(KeyEvent event) {
            if (event.getDeviceId() == this.controller.getDeviceId() && event.getRepeatCount() == 0) {
                if (event.getAction() == 0) {
                    updateControllerBinding(event.getKeyCode(), Binding.NONE);
                    return true;
                }
                return true;
            }
            return super.dispatchKeyEvent(event);
        }
    
        @Override // android.app.Activity
        public boolean onOptionsItemSelected(MenuItem menuItem) {
            finish();
            return true;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        class ControllerBindingsAdapter extends RecyclerView.Adapter<ViewHolder> {
    
            /* JADX INFO: Access modifiers changed from: private */
            class ViewHolder extends RecyclerView.ViewHolder {
                private final Spinner binding;
                private final Spinner bindingType;
                private final ImageButton removeButton;
                private final TextView title;
    
                private ViewHolder(View view) {
                    super(view);
                    this.title = (TextView) view.findViewById(R.id.TVTitle);
                    this.bindingType = (Spinner) view.findViewById(R.id.SBindingType);
                    this.binding = (Spinner) view.findViewById(R.id.SBinding);
                    this.removeButton = (ImageButton) view.findViewById(R.id.BTRemove);
                }
            }
    
            private ControllerBindingsAdapter() {
            }
    
            @Override // androidx.recyclerview.widget.RecyclerView.Adapter
            public final ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
                return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.external_controller_binding_list_item, parent, false));
            }
    
            @Override // androidx.recyclerview.widget.RecyclerView.Adapter
            public void onBindViewHolder(ViewHolder holder, int position) {
                final ExternalControllerBinding item = ExternalControllerBindingsActivity.this.controller.getControllerBindingAt(position);
                holder.title.setText(item.toString());
                loadBindingSpinner(holder, item);
                holder.removeButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ExternalControllerBindingsActivity$ControllerBindingsAdapter$$ExternalSyntheticLambda0
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ExternalControllerBindingsActivity.ControllerBindingsAdapter.this.lambda$onBindViewHolder$0(item, view);
                    }
                });
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$onBindViewHolder$0(ExternalControllerBinding item, View view) {
                ExternalControllerBindingsActivity.this.controller.removeControllerBinding(item);
                ExternalControllerBindingsActivity.this.profile.save();
                notifyDataSetChanged();
                ExternalControllerBindingsActivity.this.updateEmptyTextView();
            }
    
            @Override // androidx.recyclerview.widget.RecyclerView.Adapter
            public final int getItemCount() {
                return ExternalControllerBindingsActivity.this.controller.getControllerBindingCount();
            }
    
            private void loadBindingSpinner(final ViewHolder holder, final ExternalControllerBinding item) {
                final Context $this = ExternalControllerBindingsActivity.this;
                final Runnable update = new Runnable() { // from class: com.winlator.ExternalControllerBindingsActivity$ControllerBindingsAdapter$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        ExternalControllerBindingsActivity.ControllerBindingsAdapter.lambda$loadBindingSpinner$1(ExternalControllerBindingsActivity.ControllerBindingsAdapter.ViewHolder.this, $this, item);
                    }
                };
                holder.bindingType.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { // from class: com.winlator.ExternalControllerBindingsActivity.ControllerBindingsAdapter.1
                    @Override // android.widget.AdapterView.OnItemSelectedListener
                    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                        update.run();
                    }
    
                    @Override // android.widget.AdapterView.OnItemSelectedListener
                    public void onNothingSelected(AdapterView<?> parent) {
                    }
                });
                Binding selectedBinding = item.getBinding();
                if (selectedBinding.isKeyboard()) {
                    holder.bindingType.setSelection(0, false);
                } else if (selectedBinding.isMouse()) {
                    holder.bindingType.setSelection(1, false);
                } else if (selectedBinding.isGamepad()) {
                    holder.bindingType.setSelection(2, false);
                }
                holder.binding.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { // from class: com.winlator.ExternalControllerBindingsActivity.ControllerBindingsAdapter.2
                    @Override // android.widget.AdapterView.OnItemSelectedListener
                    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                        Binding binding = Binding.NONE;
                        switch (holder.bindingType.getSelectedItemPosition()) {
                            case 0:
                                binding = Binding.keyboardBindingValues()[position];
                                break;
                            case 1:
                                binding = Binding.mouseBindingValues()[position];
                                break;
                            case 2:
                                binding = Binding.gamepadBindingValues()[position];
                                break;
                        }
                        if (binding != item.getBinding()) {
                            item.setBinding(binding);
                            ExternalControllerBindingsActivity.this.profile.save();
                        }
                    }
    
                    @Override // android.widget.AdapterView.OnItemSelectedListener
                    public void onNothingSelected(AdapterView<?> parent) {
                    }
                });
                update.run();
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public static /* synthetic */ void lambda$loadBindingSpinner$1(ViewHolder holder, Context $this, ExternalControllerBinding item) {
                String[] bindingEntries = null;
                switch (holder.bindingType.getSelectedItemPosition()) {
                    case 0:
                        bindingEntries = Binding.keyboardBindingLabels();
                        break;
                    case 1:
                        bindingEntries = Binding.mouseBindingLabels();
                        break;
                    case 2:
                        bindingEntries = Binding.gamepadBindingLabels();
                        break;
                }
                holder.binding.setAdapter((SpinnerAdapter) new ArrayAdapter($this, R.layout.simple_spinner_dropdown_item, bindingEntries));
                AppUtils.setSpinnerSelectionFromValue(holder.binding, item.getBinding().toString());
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void updateEmptyTextView() {
            this.emptyTextView.setVisibility(this.adapter.getItemCount() == 0 ? 0 : 8);
        }
    
        private void animateItemView(int position) {
            final ControllerBindingsAdapter.ViewHolder holder = (ControllerBindingsAdapter.ViewHolder) this.recyclerView.findViewHolderForAdapterPosition(position);
            if (holder != null) {
                final int color = ContextCompat.getColor(this, R.color.colorAccent);
                ValueAnimator animator = ValueAnimator.ofFloat(0.4f, 0.0f);
                animator.setDuration(200L);
                animator.setInterpolator(new AccelerateDecelerateInterpolator());
                animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { // from class: com.winlator.ExternalControllerBindingsActivity$$ExternalSyntheticLambda0
                    @Override // android.animation.ValueAnimator.AnimatorUpdateListener
                    public final void onAnimationUpdate(ValueAnimator valueAnimator) {
                        ExternalControllerBindingsActivity.lambda$animateItemView$0(ExternalControllerBindingsActivity.ControllerBindingsAdapter.ViewHolder.this, color, valueAnimator);
                    }
                });
                animator.start();
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$animateItemView$0(ControllerBindingsAdapter.ViewHolder holder, int color, ValueAnimator animation) {
            float alpha = ((Float) animation.getAnimatedValue()).floatValue();
            holder.itemView.setBackgroundColor(Color.argb((int) (255.0f * alpha), Color.red(color), Color.green(color), Color.blue(color)));
        }
    }
  + app/src/main/java/com/winlator/InputControlsFragment.java
    package com.winlator;
    
    import android.R;
    import android.content.Context;
    import android.content.Intent;
    import android.content.SharedPreferences;
    import android.content.res.ColorStateList;
    import android.os.Build;
    import android.os.Bundle;
    import android.os.Environment;
    import android.view.LayoutInflater;
    import android.view.MenuItem;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.AdapterView;
    import android.widget.ArrayAdapter;
    import android.widget.CheckBox;
    import android.widget.CompoundButton;
    import android.widget.ImageButton;
    import android.widget.ImageView;
    import android.widget.LinearLayout;
    import android.widget.PopupMenu;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import android.widget.TextView;
    import androidx.appcompat.app.AppCompatActivity;
    import androidx.core.content.ContextCompat;
    import androidx.core.widget.ImageViewCompat;
    import androidx.fragment.app.Fragment;
    import androidx.preference.PreferenceManager;
    import com.winlator.contentdialog.ContentDialog;
    import com.winlator.core.AppUtils;
    import com.winlator.core.Callback;
    import com.winlator.core.FileUtils;
    import com.winlator.core.HttpUtils;
    import com.winlator.inputcontrols.ControlsProfile;
    import com.winlator.inputcontrols.ExternalController;
    import com.winlator.inputcontrols.InputControlsManager;
    import com.winlator.widget.SeekBar;
    import java.io.File;
    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.concurrent.atomic.AtomicInteger;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public class InputControlsFragment extends Fragment {
        private ControlsProfile currentProfile;
        private Callback<ControlsProfile> importProfileCallback;
        private InputControlsManager manager;
        private final int selectedProfileId;
        private Runnable updateLayout;
    
        public InputControlsFragment(int selectedProfileId) {
            this.selectedProfileId = selectedProfileId;
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setHasOptionsMenu(false);
            this.manager = new InputControlsManager(getContext());
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onViewCreated(View view, Bundle savedInstanceState) {
            super.onViewCreated(view, savedInstanceState);
            ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(R.string.input_controls);
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onActivityResult(int requestCode, int resultCode, Intent data) {
            if (requestCode == 2 && resultCode == -1) {
                try {
                    ControlsProfile importedProfile = this.manager.importProfile(new JSONObject(FileUtils.readString(getContext(), data.getData())));
                    Callback<ControlsProfile> callback = this.importProfileCallback;
                    if (callback != null) {
                        callback.call(importedProfile);
                    }
                } catch (Exception e) {
                    AppUtils.showToast(getContext(), R.string.unable_to_import_profile);
                }
                this.importProfileCallback = null;
            }
        }
    
        @Override // androidx.fragment.app.Fragment
        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            final View view = inflater.inflate(R.layout.input_controls_fragment, container, false);
            final Context context = getContext();
            final SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
            int i = this.selectedProfileId;
            this.currentProfile = i > 0 ? this.manager.getProfile(i) : null;
            final Spinner sProfile = (Spinner) view.findViewById(R.id.SProfile);
            loadProfileSpinner(sProfile);
            final SeekBar sbCursorSpeed = (SeekBar) view.findViewById(R.id.SBCursorSpeed);
            sbCursorSpeed.setOnValueChangeListener(new SeekBar.OnValueChangeListener() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda18
                @Override // com.winlator.widget.SeekBar.OnValueChangeListener
                public final void onValueChangeListener(SeekBar seekBar, float f) {
                    InputControlsFragment.this.lambda$onCreateView$0(seekBar, f);
                }
            });
            final CheckBox cbDisableMouseInput = (CheckBox) view.findViewById(R.id.CBDisableMouseInput);
            cbDisableMouseInput.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda9
                @Override // android.widget.CompoundButton.OnCheckedChangeListener
                public final void onCheckedChanged(CompoundButton compoundButton, boolean z) {
                    InputControlsFragment.this.lambda$onCreateView$1(compoundButton, z);
                }
            });
            Runnable runnable = new Runnable() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda25
                @Override // java.lang.Runnable
                public final void run() {
                    InputControlsFragment.this.lambda$onCreateView$2(sbCursorSpeed, cbDisableMouseInput, view);
                }
            };
            this.updateLayout = runnable;
            runnable.run();
            SeekBar sbOverlayOpacity = (SeekBar) view.findViewById(R.id.SBOverlayOpacity);
            sbOverlayOpacity.setOnValueChangeListener(new SeekBar.OnValueChangeListener() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda17
                @Override // com.winlator.widget.SeekBar.OnValueChangeListener
                public final void onValueChangeListener(SeekBar seekBar, float f) {
                    InputControlsFragment.lambda$onCreateView$3(preferences, seekBar, f);
                }
            });
            sbOverlayOpacity.setValue(preferences.getFloat("overlay_opacity", 0.4f) * 100.0f);
            view.findViewById(R.id.BTAddProfile).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda4
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    InputControlsFragment.this.lambda$onCreateView$5(context, sProfile, view2);
                }
            });
            view.findViewById(R.id.BTEditProfile).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda6
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    InputControlsFragment.this.lambda$onCreateView$7(context, sProfile, view2);
                }
            });
            view.findViewById(R.id.BTDuplicateProfile).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda3
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    InputControlsFragment.this.lambda$onCreateView$9(context, sProfile, view2);
                }
            });
            view.findViewById(R.id.BTRemoveProfile).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda2
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    InputControlsFragment.this.lambda$onCreateView$11(context, sProfile, view2);
                }
            });
            view.findViewById(R.id.BTImportProfile).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda5
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    InputControlsFragment.this.lambda$onCreateView$13(context, sProfile, view2);
                }
            });
            view.findViewById(R.id.BTExportProfile).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    InputControlsFragment.this.lambda$onCreateView$14(context, view2);
                }
            });
            view.findViewById(R.id.BTControlsEditor).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda1
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    InputControlsFragment.this.lambda$onCreateView$15(context, view2);
                }
            });
            return view;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$0(SeekBar seekBar, float value) {
            ControlsProfile controlsProfile = this.currentProfile;
            if (controlsProfile != null) {
                controlsProfile.setCursorSpeed(value / 100.0f);
                this.currentProfile.save();
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$1(CompoundButton buttonView, boolean isChecked) {
            ControlsProfile controlsProfile = this.currentProfile;
            if (controlsProfile != null) {
                controlsProfile.setDisableMouseInput(isChecked);
                this.currentProfile.save();
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$2(SeekBar sbCursorSpeed, CheckBox cbDisableMouseInput, View view) {
            ControlsProfile controlsProfile = this.currentProfile;
            if (controlsProfile != null) {
                sbCursorSpeed.setValue(controlsProfile.getCursorSpeed() * 100.0f);
                cbDisableMouseInput.setChecked(this.currentProfile.isDisableMouseInput());
            } else {
                sbCursorSpeed.setValue(100.0f);
                cbDisableMouseInput.setChecked(false);
            }
            loadExternalControllers(view);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$onCreateView$3(SharedPreferences preferences, SeekBar seekBar, float value) {
            preferences.edit().putFloat("overlay_opacity", value / 100.0f).apply();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$5(Context context, final Spinner sProfile, View v) {
            ContentDialog.prompt(context, R.string.profile_name, null, new Callback() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda13
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    InputControlsFragment.this.lambda$onCreateView$4(sProfile, (String) obj);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$4(Spinner sProfile, String name) {
            this.currentProfile = this.manager.createProfile(name);
            loadProfileSpinner(sProfile);
            this.updateLayout.run();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$7(Context context, final Spinner sProfile, View v) {
            ControlsProfile controlsProfile = this.currentProfile;
            if (controlsProfile != null) {
                ContentDialog.prompt(context, R.string.profile_name, controlsProfile.getName(), new Callback() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda12
                    @Override // com.winlator.core.Callback
                    public final void call(Object obj) {
                        InputControlsFragment.this.lambda$onCreateView$6(sProfile, (String) obj);
                    }
                });
            } else {
                AppUtils.showToast(context, R.string.no_profile_selected);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$6(Spinner sProfile, String name) {
            this.currentProfile.setName(name);
            this.currentProfile.save();
            loadProfileSpinner(sProfile);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$9(Context context, final Spinner sProfile, View v) {
            if (this.currentProfile != null) {
                ContentDialog.confirm(context, R.string.do_you_want_to_duplicate_this_profile, new Runnable() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda19
                    @Override // java.lang.Runnable
                    public final void run() {
                        InputControlsFragment.this.lambda$onCreateView$8(sProfile);
                    }
                });
            } else {
                AppUtils.showToast(context, R.string.no_profile_selected);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$8(Spinner sProfile) {
            this.currentProfile = this.manager.duplicateProfile(this.currentProfile);
            loadProfileSpinner(sProfile);
            this.updateLayout.run();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$11(Context context, final Spinner sProfile, View v) {
            if (this.currentProfile != null) {
                ContentDialog.confirm(context, R.string.do_you_want_to_remove_this_profile, new Runnable() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda20
                    @Override // java.lang.Runnable
                    public final void run() {
                        InputControlsFragment.this.lambda$onCreateView$10(sProfile);
                    }
                });
            } else {
                AppUtils.showToast(context, R.string.no_profile_selected);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$10(Spinner sProfile) {
            this.manager.removeProfile(this.currentProfile);
            this.currentProfile = null;
            loadProfileSpinner(sProfile);
            this.updateLayout.run();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$13(Context context, final Spinner sProfile, View v) {
            PopupMenu popupMenu = new PopupMenu(context, v);
            if (Build.VERSION.SDK_INT >= 29) {
                popupMenu.setForceShowIcon(true);
            }
            popupMenu.inflate(R.menu.open_file_popup_menu);
            popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda10
                @Override // android.widget.PopupMenu.OnMenuItemClickListener
                public final boolean onMenuItemClick(MenuItem menuItem) {
                    boolean lambda$onCreateView$12;
                    lambda$onCreateView$12 = InputControlsFragment.this.lambda$onCreateView$12(sProfile, menuItem);
                    return lambda$onCreateView$12;
                }
            });
            popupMenu.show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ boolean lambda$onCreateView$12(Spinner sProfile, MenuItem menuItem) {
            int itemId = menuItem.getItemId();
            if (itemId == R.id.menu_item_open_file) {
                openProfileFile(sProfile);
                return true;
            }
            if (itemId == R.id.menu_item_download_file) {
                downloadProfileList(sProfile);
                return true;
            }
            return true;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$14(Context context, View v) {
            ControlsProfile controlsProfile = this.currentProfile;
            if (controlsProfile != null) {
                File exportedFile = this.manager.exportProfile(controlsProfile);
                if (exportedFile != null) {
                    String path = exportedFile.getPath().substring(exportedFile.getPath().indexOf(Environment.DIRECTORY_DOWNLOADS));
                    AppUtils.showToast(context, context.getString(R.string.profile_exported_to) + " " + path);
                    return;
                }
                return;
            }
            AppUtils.showToast(context, R.string.no_profile_selected);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$15(Context context, View v) {
            if (this.currentProfile != null) {
                Intent intent = new Intent(context, (Class<?>) ControlsEditorActivity.class);
                intent.putExtra("profile_id", this.currentProfile.id);
                startActivity(intent);
                return;
            }
            AppUtils.showToast(context, R.string.no_profile_selected);
        }
    
        private void openProfileFile(final Spinner sProfile) {
            this.importProfileCallback = new Callback() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda11
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    InputControlsFragment.this.lambda$openProfileFile$16(sProfile, (ControlsProfile) obj);
                }
            };
            Intent intent = new Intent("android.intent.action.OPEN_DOCUMENT");
            intent.addCategory("android.intent.category.OPENABLE");
            intent.setType("*/*");
            getActivity().startActivityFromFragment(this, intent, 2);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$openProfileFile$16(Spinner sProfile, ControlsProfile importedProfile) {
            this.currentProfile = importedProfile;
            loadProfileSpinner(sProfile);
            this.updateLayout.run();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        /* renamed from: downloadSelectedProfiles, reason: merged with bridge method [inline-methods] */
        public void lambda$downloadProfileList$19(final Spinner sProfile, String[] items, final ArrayList<Integer> positions) {
            final MainActivity activity = (MainActivity) getActivity();
            activity.preloaderDialog.lambda$showOnUiThread$0(R.string.downloading_file);
            this.currentProfile = null;
            final AtomicInteger processedItemCount = new AtomicInteger();
            Iterator<Integer> it = positions.iterator();
            while (it.hasNext()) {
                int position = it.next().intValue();
                HttpUtils.download(String.format("https://raw.githubusercontent.com/brunodev85/winlator/main/input_controls/%s", items[position]), new Callback() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda16
                    @Override // com.winlator.core.Callback
                    public final void call(Object obj) {
                        InputControlsFragment.this.lambda$downloadSelectedProfiles$18(processedItemCount, positions, activity, sProfile, (String) obj);
                    }
                });
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$downloadSelectedProfiles$18(AtomicInteger processedItemCount, ArrayList positions, final MainActivity activity, final Spinner sProfile, String content) {
            if (content != null) {
                try {
                    this.manager.importProfile(new JSONObject(content));
                } catch (JSONException e) {
                }
            }
            if (processedItemCount.incrementAndGet() == positions.size()) {
                activity.runOnUiThread(new Runnable() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda22
                    @Override // java.lang.Runnable
                    public final void run() {
                        InputControlsFragment.this.lambda$downloadSelectedProfiles$17(activity, sProfile);
                    }
                });
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$downloadSelectedProfiles$17(MainActivity activity, Spinner sProfile) {
            activity.preloaderDialog.close();
            loadProfileSpinner(sProfile);
            this.updateLayout.run();
        }
    
        private void downloadProfileList(final Spinner sProfile) {
            final MainActivity activity = (MainActivity) getActivity();
            activity.preloaderDialog.lambda$showOnUiThread$0(R.string.loading);
            HttpUtils.download(String.format("https://raw.githubusercontent.com/brunodev85/winlator/main/input_controls/%s", "index.txt"), new Callback() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda14
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    InputControlsFragment.this.lambda$downloadProfileList$22(activity, sProfile, (String) obj);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$downloadProfileList$22(final MainActivity activity, final Spinner sProfile, final String content) {
            activity.runOnUiThread(new Runnable() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda23
                @Override // java.lang.Runnable
                public final void run() {
                    InputControlsFragment.this.lambda$downloadProfileList$21(activity, content, sProfile);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$downloadProfileList$21(final MainActivity activity, String content, final Spinner sProfile) {
            activity.preloaderDialog.close();
            if (content != null) {
                final String[] items = content.split("\n");
                ContentDialog.showSelectionList((Context) activity, R.string.import_profile, items, true, (Callback<ArrayList<Integer>>) new Callback() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda15
                    @Override // com.winlator.core.Callback
                    public final void call(Object obj) {
                        InputControlsFragment.this.lambda$downloadProfileList$20(activity, sProfile, items, (ArrayList) obj);
                    }
                });
            } else {
                AppUtils.showToast(activity, R.string.a_network_error_occurred);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$downloadProfileList$20(MainActivity activity, final Spinner sProfile, final String[] items, final ArrayList positions) {
            if (!positions.isEmpty()) {
                ContentDialog.confirm(activity, R.string.do_you_want_to_download_the_selected_profiles, new Runnable() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda21
                    @Override // java.lang.Runnable
                    public final void run() {
                        InputControlsFragment.this.lambda$downloadProfileList$19(sProfile, items, positions);
                    }
                });
            }
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onStart() {
            super.onStart();
            Runnable runnable = this.updateLayout;
            if (runnable != null) {
                runnable.run();
            }
        }
    
        private void loadProfileSpinner(Spinner spinner) {
            final ArrayList<ControlsProfile> profiles = this.manager.getProfiles();
            ArrayList<String> values = new ArrayList<>();
            values.add("-- " + getString(R.string.select_profile) + " --");
            int selectedPosition = 0;
            for (int i = 0; i < profiles.size(); i++) {
                ControlsProfile profile = profiles.get(i);
                if (profile == this.currentProfile) {
                    selectedPosition = i + 1;
                }
                values.add(profile.getName());
            }
            spinner.setAdapter((SpinnerAdapter) new ArrayAdapter(getContext(), R.layout.simple_spinner_dropdown_item, values));
            spinner.setSelection(selectedPosition, false);
            spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { // from class: com.winlator.InputControlsFragment.1
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                    InputControlsFragment.this.currentProfile = position > 0 ? (ControlsProfile) profiles.get(position - 1) : null;
                    InputControlsFragment.this.updateLayout.run();
                }
    
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onNothingSelected(AdapterView<?> parent) {
                }
            });
        }
    
        /* JADX WARN: Multi-variable type inference failed */
        /* JADX WARN: Type inference failed for: r9v0 */
        /* JADX WARN: Type inference failed for: r9v1, types: [boolean, int] */
        /* JADX WARN: Type inference failed for: r9v3 */
        private void loadExternalControllers(final View view) {
            LinearLayout container = (LinearLayout) view.findViewById(R.id.LLExternalControllers);
            container.removeAllViews();
            Context context = getContext();
            LayoutInflater from = LayoutInflater.from(context);
            ArrayList<ExternalController> connectedControllers = ExternalController.getControllers();
            ControlsProfile controlsProfile = this.currentProfile;
            ArrayList<ExternalController> controllers = controlsProfile != null ? controlsProfile.loadControllers() : new ArrayList<>();
            Iterator<ExternalController> it = connectedControllers.iterator();
            while (it.hasNext()) {
                ExternalController controller = it.next();
                if (!controllers.contains(controller)) {
                    controllers.add(controller);
                }
            }
            ?? r9 = 0;
            if (!controllers.isEmpty()) {
                view.findViewById(R.id.TVEmptyText).setVisibility(8);
                String bindingsText = context.getString(R.string.bindings);
                Iterator<ExternalController> it2 = controllers.iterator();
                while (it2.hasNext()) {
                    final ExternalController controller2 = it2.next();
                    View itemView = from.inflate(R.layout.external_controller_list_item, container, (boolean) r9);
                    ((TextView) itemView.findViewById(R.id.TVTitle)).setText(controller2.getName());
                    int controllerBindingCount = controller2.getControllerBindingCount();
                    ((TextView) itemView.findViewById(R.id.TVSubtitle)).setText(controllerBindingCount + " " + bindingsText);
                    ImageView imageView = (ImageView) itemView.findViewById(R.id.ImageView);
                    int tintColor = controller2.isConnected() ? ContextCompat.getColor(context, R.color.colorAccent) : -1739917;
                    ImageViewCompat.setImageTintList(imageView, ColorStateList.valueOf(tintColor));
                    if (controllerBindingCount > 0) {
                        ImageButton imageButton = (ImageButton) itemView.findViewById(R.id.BTRemove);
                        imageButton.setVisibility(r9);
                        imageButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda8
                            @Override // android.view.View.OnClickListener
                            public final void onClick(View view2) {
                                InputControlsFragment.this.lambda$loadExternalControllers$24(controller2, view, view2);
                            }
                        });
                    }
                    itemView.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda7
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view2) {
                            InputControlsFragment.this.lambda$loadExternalControllers$25(controller2, view2);
                        }
                    });
                    container.addView(itemView);
                    r9 = 0;
                }
                return;
            }
            view.findViewById(R.id.TVEmptyText).setVisibility(0);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadExternalControllers$24(final ExternalController controller, final View view, View v) {
            ContentDialog.confirm(getContext(), R.string.do_you_want_to_remove_this_controller, new Runnable() { // from class: com.winlator.InputControlsFragment$$ExternalSyntheticLambda24
                @Override // java.lang.Runnable
                public final void run() {
                    InputControlsFragment.this.lambda$loadExternalControllers$23(controller, view);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadExternalControllers$23(ExternalController controller, View view) {
            this.currentProfile.removeController(controller);
            this.currentProfile.save();
            loadExternalControllers(view);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadExternalControllers$25(ExternalController controller, View v) {
            if (this.currentProfile != null) {
                Intent intent = new Intent(getContext(), (Class<?>) ExternalControllerBindingsActivity.class);
                intent.putExtra("profile_id", this.currentProfile.id);
                intent.putExtra("controller_id", controller.getId());
                startActivity(intent);
                return;
            }
            AppUtils.showToast(getContext(), R.string.no_profile_selected);
        }
    }
  + app/src/main/java/com/winlator/MainActivity.java
    package com.winlator;
    
    import android.content.Intent;
    import android.content.SharedPreferences;
    import android.content.pm.PackageInfo;
    import android.content.pm.PackageManager;
    import android.content.res.Configuration;
    import android.net.Uri;
    import android.os.Bundle;
    import android.text.Html;
    import android.text.method.LinkMovementMethod;
    import android.view.MenuItem;
    import android.widget.TextView;
    import androidx.appcompat.app.ActionBar;
    import androidx.appcompat.app.AppCompatActivity;
    import androidx.appcompat.widget.Toolbar;
    import androidx.core.app.ActivityCompat;
    import androidx.core.content.ContextCompat;
    import androidx.drawerlayout.widget.DrawerLayout;
    import androidx.fragment.app.Fragment;
    import androidx.fragment.app.FragmentManager;
    import androidx.preference.PreferenceManager;
    import com.google.android.material.navigation.NavigationView;
    import com.winlator.contentdialog.ContentDialog;
    import com.winlator.core.Callback;
    import com.winlator.core.PreloaderDialog;
    import com.winlator.xenvironment.RootFSInstaller;
    
    /* loaded from: classes.dex */
    public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {
        private Fragment currentFragment;
        private DrawerLayout drawerLayout;
        private Callback<Uri> openFileCallback;
        private SharedPreferences preferences;
        private int selectedProfileId;
        public final PreloaderDialog preloaderDialog = new PreloaderDialog(this);
        private boolean editInputControls = false;
    
        @Override // androidx.appcompat.app.AppCompatActivity, androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity
        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.main_activity);
            this.drawerLayout = (DrawerLayout) findViewById(R.id.DrawerLayout);
            NavigationView navigationView = (NavigationView) findViewById(R.id.NavigationView);
            navigationView.setNavigationItemSelectedListener(this);
            setSupportActionBar((Toolbar) findViewById(R.id.Toolbar));
            ActionBar actionBar = getSupportActionBar();
            actionBar.setDisplayHomeAsUpEnabled(true);
            this.preferences = PreferenceManager.getDefaultSharedPreferences(this);
            Intent intent = getIntent();
            boolean booleanExtra = intent.getBooleanExtra("edit_input_controls", false);
            this.editInputControls = booleanExtra;
            if (booleanExtra) {
                this.selectedProfileId = intent.getIntExtra("selected_profile_id", 0);
                actionBar.setHomeAsUpIndicator(R.drawable.icon_action_bar_back);
                onNavigationItemSelected(navigationView.getMenu().findItem(R.id.menu_item_input_controls));
                navigationView.setCheckedItem(R.id.menu_item_input_controls);
                return;
            }
            boolean showShortcutsFirst = this.preferences.getBoolean("show_shortcuts_first", false);
            int selectedMenuItemId = intent.getIntExtra("selected_menu_item_id", 0);
            int menuItemId = selectedMenuItemId > 0 ? selectedMenuItemId : showShortcutsFirst ? R.id.menu_item_shortcuts : R.id.menu_item_containers;
            actionBar.setHomeAsUpIndicator(R.drawable.icon_action_bar_menu);
            onNavigationItemSelected(navigationView.getMenu().findItem(menuItemId));
            navigationView.setCheckedItem(menuItemId);
            if (!requestAppPermissions()) {
                RootFSInstaller.installIfNeeded(this);
            }
            int containerId = intent.getIntExtra("container_id", 0);
            String startPath = intent.getStringExtra("start_path");
            if (containerId > 0 && startPath != null) {
                showFragment(new ContainerFileManagerFragment(containerId, startPath));
            }
        }
    
        @Override // androidx.fragment.app.FragmentActivity, android.app.Activity
        public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
            if (requestCode == 1) {
                if (grantResults.length > 0 && grantResults[0] == 0) {
                    RootFSInstaller.installIfNeeded(this);
                } else {
                    finish();
                }
            }
        }
    
        @Override // androidx.fragment.app.FragmentActivity, android.app.Activity
        public void onActivityResult(int requestCode, int resultCode, Intent data) {
            Callback<Uri> callback;
            super.onActivityResult(requestCode, resultCode, data);
            if (requestCode == 2 && resultCode == -1 && (callback = this.openFileCallback) != null) {
                callback.call(data.getData());
                this.openFileCallback = null;
            }
        }
    
        @Override // androidx.appcompat.app.AppCompatActivity, androidx.fragment.app.FragmentActivity, android.app.Activity, android.content.ComponentCallbacks
        public void onConfigurationChanged(Configuration newConfig) {
            super.onConfigurationChanged(newConfig);
            int i = newConfig.orientation;
            if (i == 2 || i == 1) {
                Fragment fragment = this.currentFragment;
                if (fragment instanceof BaseFileManagerFragment) {
                    ((BaseFileManagerFragment) fragment).onOrientationChanged();
                }
            }
        }
    
        @Override // androidx.activity.ComponentActivity, android.app.Activity
        public void onBackPressed() {
            Fragment fragment = this.currentFragment;
            if (fragment != null && fragment.isVisible()) {
                Fragment fragment2 = this.currentFragment;
                if (fragment2 instanceof BaseFileManagerFragment) {
                    BaseFileManagerFragment fileManagerFragment = (BaseFileManagerFragment) fragment2;
                    if (fileManagerFragment.onBackPressed()) {
                        return;
                    }
                } else if (fragment2 instanceof ContainersFragment) {
                    finish();
                }
            }
            showFragment(new ContainersFragment());
        }
    
        public void setOpenFileCallback(Callback<Uri> openFileCallback) {
            this.openFileCallback = openFileCallback;
        }
    
        private boolean requestAppPermissions() {
            if (ContextCompat.checkSelfPermission(this, "android.permission.WRITE_EXTERNAL_STORAGE") == 0 && ContextCompat.checkSelfPermission(this, "android.permission.READ_EXTERNAL_STORAGE") == 0) {
                return false;
            }
            String[] permissions = {"android.permission.WRITE_EXTERNAL_STORAGE", "android.permission.READ_EXTERNAL_STORAGE"};
            ActivityCompat.requestPermissions(this, permissions, 1);
            return true;
        }
    
        @Override // android.app.Activity
        public boolean onOptionsItemSelected(MenuItem menuItem) {
            int itemId = menuItem.getItemId();
            if (itemId == R.id.menu_item_add || itemId == R.id.menu_item_home || itemId == R.id.menu_item_view_style || itemId == R.id.menu_item_new_folder) {
                return super.onOptionsItemSelected(menuItem);
            }
            if (this.editInputControls) {
                setResult(-1);
                finish();
            } else {
                Fragment fragment = this.currentFragment;
                if (fragment instanceof BaseFileManagerFragment) {
                    BaseFileManagerFragment fileManagerFragment = (BaseFileManagerFragment) fragment;
                    if (fileManagerFragment.onOptionsMenuClicked()) {
                        return true;
                    }
                }
                this.drawerLayout.openDrawer(8388611);
            }
            return true;
        }
    
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        /* JADX WARN: Code restructure failed: missing block: B:11:0x005d, code lost:
    
            return true;
         */
        @Override // com.google.android.material.navigation.NavigationView.OnNavigationItemSelectedListener
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public boolean onNavigationItemSelected(android.view.MenuItem r6) {
            /*
                r5 = this;
                androidx.fragment.app.FragmentManager r0 = r5.getSupportFragmentManager()
                int r1 = r0.getBackStackEntryCount()
                r2 = 1
                if (r1 <= 0) goto Lf
                r1 = 0
                r0.popBackStack(r1, r2)
            Lf:
                int r1 = r6.getItemId()
                java.lang.String r3 = "show_shortcuts_first"
                switch(r1) {
                    case 2131296684: goto L5a;
                    case 2131296688: goto L43;
                    case 2131296700: goto L38;
                    case 2131296713: goto L2f;
                    case 2131296714: goto L19;
                    default: goto L18;
                }
            L18:
                goto L5d
            L19:
                android.content.SharedPreferences r1 = r5.preferences
                android.content.SharedPreferences$Editor r1 = r1.edit()
                android.content.SharedPreferences$Editor r1 = r1.putBoolean(r3, r2)
                r1.apply()
                com.winlator.ShortcutsFragment r1 = new com.winlator.ShortcutsFragment
                r1.<init>()
                r5.showFragment(r1)
                goto L5d
            L2f:
                com.winlator.SettingsFragment r1 = new com.winlator.SettingsFragment
                r1.<init>()
                r5.showFragment(r1)
                goto L5d
            L38:
                com.winlator.InputControlsFragment r1 = new com.winlator.InputControlsFragment
                int r3 = r5.selectedProfileId
                r1.<init>(r3)
                r5.showFragment(r1)
                goto L5d
            L43:
                android.content.SharedPreferences r1 = r5.preferences
                android.content.SharedPreferences$Editor r1 = r1.edit()
                r4 = 0
                android.content.SharedPreferences$Editor r1 = r1.putBoolean(r3, r4)
                r1.apply()
                com.winlator.ContainersFragment r1 = new com.winlator.ContainersFragment
                r1.<init>()
                r5.showFragment(r1)
                goto L5d
            L5a:
                r5.showAboutDialog()
            L5d:
                return r2
            */
            throw new UnsupportedOperationException("Method not decompiled: com.winlator.MainActivity.onNavigationItemSelected(android.view.MenuItem):boolean");
        }
    
        public void showFragment(Fragment fragment) {
            FragmentManager fragmentManager = getSupportFragmentManager();
            fragmentManager.beginTransaction().replace(R.id.FLFragmentContainer, fragment).commit();
            this.drawerLayout.closeDrawer(8388611);
            this.currentFragment = fragment;
        }
    
        private void showAboutDialog() {
            ContentDialog dialog = new ContentDialog(this, R.layout.about_dialog);
            dialog.findViewById(R.id.LLBottomBar).setVisibility(8);
            try {
                PackageInfo pInfo = getPackageManager().getPackageInfo(getPackageName(), 0);
                TextView tvWebpage = (TextView) dialog.findViewById(R.id.TVWebpage);
                tvWebpage.setText(Html.fromHtml("<a href=\"https://www.winlator.org\">winlator.org</a>", 0));
                tvWebpage.setMovementMethod(LinkMovementMethod.getInstance());
                ((TextView) dialog.findViewById(R.id.TVAppVersion)).setText(getString(R.string.version) + " " + pInfo.versionName);
                String creditsAndThirdPartyAppsHTML = String.join("<br />", "GLIBC Patches by (<a href=\"https://github.com/termux-pacman/glibc-packages\">Termux Pacman</a>)", "Wine (<a href=\"https://www.winehq.org\">winehq.org</a>)", "Box86/Box64 by <a href=\"https://github.com/ptitSeb\">ptitseb</a>", "Mesa (Turnip/Zink/VirGL) (<a href=\"https://www.mesa3d.org\">mesa3d.org</a>)", "DXVK (<a href=\"https://github.com/doitsujin/dxvk\">github.com/doitsujin/dxvk</a>)", "VKD3D (<a href=\"https://gitlab.winehq.org/wine/vkd3d\">gitlab.winehq.org/wine/vkd3d</a>)", "D8VK (<a href=\"https://github.com/AlpyneDreams/d8vk\">github.com/AlpyneDreams/d8vk</a>)", "CNC DDraw (<a href=\"https://github.com/FunkyFr3sh/cnc-ddraw\">github.com/FunkyFr3sh/cnc-ddraw</a>)");
                TextView tvCreditsAndThirdPartyApps = (TextView) dialog.findViewById(R.id.TVCreditsAndThirdPartyApps);
                tvCreditsAndThirdPartyApps.setText(Html.fromHtml(creditsAndThirdPartyAppsHTML, 0));
                tvCreditsAndThirdPartyApps.setMovementMethod(LinkMovementMethod.getInstance());
            } catch (PackageManager.NameNotFoundException e) {
            }
            dialog.show();
        }
    }
  + app/src/main/java/com/winlator/R$styleable.java
    package com.winlator;
    
    import android.R;
    
    /* loaded from: classes.dex */
    public final class R$styleable {
        public static final int[] ActionBar = {R.attr.background, R.attr.backgroundSplit, R.attr.backgroundStacked, R.attr.contentInsetEnd, R.attr.contentInsetEndWithActions, R.attr.contentInsetLeft, R.attr.contentInsetRight, R.attr.contentInsetStart, R.attr.contentInsetStartWithNavigation, R.attr.customNavigationLayout, R.attr.displayOptions, R.attr.divider, R.attr.elevation, R.attr.height, R.attr.hideOnContentScroll, R.attr.homeAsUpIndicator, R.attr.homeLayout, R.attr.icon, R.attr.indeterminateProgressStyle, R.attr.itemPadding, R.attr.logo, R.attr.navigationMode, R.attr.popupTheme, R.attr.progressBarPadding, R.attr.progressBarStyle, R.attr.subtitle, R.attr.subtitleTextStyle, R.attr.title, R.attr.titleTextStyle};
        public static final int[] ActionBarLayout = {R.attr.layout_gravity};
        public static final int[] ActionMenuItemView = {R.attr.minWidth};
        public static final int[] ActionMenuView = new int[0];
        public static final int[] ActionMode = {R.attr.background, R.attr.backgroundSplit, R.attr.closeItemLayout, R.attr.height, R.attr.subtitleTextStyle, R.attr.titleTextStyle};
        public static final int[] ActivityChooserView = {R.attr.expandActivityOverflowButtonDrawable, R.attr.initialActivityCount};
        public static final int[] AlertDialog = {R.attr.layout, R.attr.buttonIconDimen, R.attr.buttonPanelSideLayout, R.attr.listItemLayout, R.attr.listLayout, R.attr.multiChoiceItemLayout, R.attr.showTitle, R.attr.singleChoiceItemLayout};
        public static final int[] AnimatedStateListDrawableCompat = {R.attr.dither, R.attr.visible, R.attr.variablePadding, R.attr.constantSize, R.attr.enterFadeDuration, R.attr.exitFadeDuration};
        public static final int[] AnimatedStateListDrawableItem = {R.attr.id, R.attr.drawable};
        public static final int[] AnimatedStateListDrawableTransition = {R.attr.drawable, R.attr.toId, R.attr.fromId, R.attr.reversible};
        public static final int[] AppBarLayout = {R.attr.background, R.attr.touchscreenBlocksFocus, R.attr.keyboardNavigationCluster, R.attr.elevation, R.attr.expanded, R.attr.liftOnScroll, R.attr.liftOnScrollTargetViewId, R.attr.statusBarForeground};
        public static final int[] AppBarLayoutStates = {R.attr.state_collapsed, R.attr.state_collapsible, R.attr.state_liftable, R.attr.state_lifted};
        public static final int[] AppBarLayout_Layout = {R.attr.layout_scrollFlags, R.attr.layout_scrollInterpolator};
        public static final int[] AppCompatImageView = {R.attr.src, R.attr.srcCompat, R.attr.tint, R.attr.tintMode};
        public static final int[] AppCompatSeekBar = {R.attr.thumb, R.attr.tickMark, R.attr.tickMarkTint, R.attr.tickMarkTintMode};
        public static final int[] AppCompatTextHelper = {R.attr.textAppearance, R.attr.drawableTop, R.attr.drawableBottom, R.attr.drawableLeft, R.attr.drawableRight, R.attr.drawableStart, R.attr.drawableEnd};
        public static final int[] AppCompatTextView = {R.attr.textAppearance, R.attr.autoSizeMaxTextSize, R.attr.autoSizeMinTextSize, R.attr.autoSizePresetSizes, R.attr.autoSizeStepGranularity, R.attr.autoSizeTextType, R.attr.drawableBottomCompat, R.attr.drawableEndCompat, R.attr.drawableLeftCompat, R.attr.drawableRightCompat, R.attr.drawableStartCompat, R.attr.drawableTint, R.attr.drawableTintMode, R.attr.drawableTopCompat, R.attr.firstBaselineToTopHeight, R.attr.fontFamily, R.attr.fontVariationSettings, R.attr.lastBaselineToBottomHeight, R.attr.lineHeight, R.attr.textAllCaps, R.attr.textLocale};
        public static final int[] AppCompatTheme = {R.attr.windowIsFloating, R.attr.windowAnimationStyle, R.attr.actionBarDivider, R.attr.actionBarItemBackground, R.attr.actionBarPopupTheme, R.attr.actionBarSize, R.attr.actionBarSplitStyle, R.attr.actionBarStyle, R.attr.actionBarTabBarStyle, R.attr.actionBarTabStyle, R.attr.actionBarTabTextStyle, R.attr.actionBarTheme, R.attr.actionBarWidgetTheme, R.attr.actionButtonStyle, R.attr.actionDropDownStyle, R.attr.actionMenuTextAppearance, R.attr.actionMenuTextColor, R.attr.actionModeBackground, R.attr.actionModeCloseButtonStyle, R.attr.actionModeCloseDrawable, R.attr.actionModeCopyDrawable, R.attr.actionModeCutDrawable, R.attr.actionModeFindDrawable, R.attr.actionModePasteDrawable, R.attr.actionModePopupWindowStyle, R.attr.actionModeSelectAllDrawable, R.attr.actionModeShareDrawable, R.attr.actionModeSplitBackground, R.attr.actionModeStyle, R.attr.actionModeWebSearchDrawable, R.attr.actionOverflowButtonStyle, R.attr.actionOverflowMenuStyle, R.attr.activityChooserViewStyle, R.attr.alertDialogButtonGroupStyle, R.attr.alertDialogCenterButtons, R.attr.alertDialogStyle, R.attr.alertDialogTheme, R.attr.autoCompleteTextViewStyle, R.attr.borderlessButtonStyle, R.attr.buttonBarButtonStyle, R.attr.buttonBarNegativeButtonStyle, R.attr.buttonBarNeutralButtonStyle, R.attr.buttonBarPositiveButtonStyle, R.attr.buttonBarStyle, R.attr.buttonStyle, R.attr.buttonStyleSmall, R.attr.checkboxStyle, R.attr.checkedTextViewStyle, R.attr.colorAccent, R.attr.colorBackgroundFloating, R.attr.colorButtonNormal, R.attr.colorControlActivated, R.attr.colorControlHighlight, R.attr.colorControlNormal, R.attr.colorError, R.attr.colorPrimary, R.attr.colorPrimaryDark, R.attr.colorSwitchThumbNormal, R.attr.controlBackground, R.attr.dialogCornerRadius, R.attr.dialogPreferredPadding, R.attr.dialogTheme, R.attr.dividerHorizontal, R.attr.dividerVertical, R.attr.dropDownListViewStyle, R.attr.dropdownListPreferredItemHeight, R.attr.editTextBackground, R.attr.editTextColor, R.attr.editTextStyle, R.attr.homeAsUpIndicator, R.attr.imageButtonStyle, R.attr.listChoiceBackgroundIndicator, R.attr.listChoiceIndicatorMultipleAnimated, R.attr.listChoiceIndicatorSingleAnimated, R.attr.listDividerAlertDialog, R.attr.listMenuViewStyle, R.attr.listPopupWindowStyle, R.attr.listPreferredItemHeight, R.attr.listPreferredItemHeightLarge, R.attr.listPreferredItemHeightSmall, R.attr.listPreferredItemPaddingEnd, R.attr.listPreferredItemPaddingLeft, R.attr.listPreferredItemPaddingRight, R.attr.listPreferredItemPaddingStart, R.attr.panelBackground, R.attr.panelMenuListTheme, R.attr.panelMenuListWidth, R.attr.popupMenuStyle, R.attr.popupWindowStyle, R.attr.radioButtonStyle, R.attr.ratingBarStyle, R.attr.ratingBarStyleIndicator, R.attr.ratingBarStyleSmall, R.attr.searchViewStyle, R.attr.seekBarStyle, R.attr.selectableItemBackground, R.attr.selectableItemBackgroundBorderless, R.attr.spinnerDropDownItemStyle, R.attr.spinnerStyle, R.attr.switchStyle, R.attr.textAppearanceLargePopupMenu, R.attr.textAppearanceListItem, R.attr.textAppearanceListItemSecondary, R.attr.textAppearanceListItemSmall, R.attr.textAppearancePopupMenuHeader, R.attr.textAppearanceSearchResultSubtitle, R.attr.textAppearanceSearchResultTitle, R.attr.textAppearanceSmallPopupMenu, R.attr.textColorAlertDialogListItem, R.attr.textColorSearchUrl, R.attr.toolbarNavigationButtonStyle, R.attr.toolbarStyle, R.attr.tooltipForegroundColor, R.attr.tooltipFrameBackground, R.attr.viewInflaterClass, R.attr.windowActionBar, R.attr.windowActionBarOverlay, R.attr.windowActionModeOverlay, R.attr.windowFixedHeightMajor, R.attr.windowFixedHeightMinor, R.attr.windowFixedWidthMajor, R.attr.windowFixedWidthMinor, R.attr.windowMinWidthMajor, R.attr.windowMinWidthMinor, R.attr.windowNoTitle};
        public static final int[] BackgroundStyle = {R.attr.selectableItemBackground, R.attr.selectableItemBackground};
        public static final int[] Badge = {R.attr.backgroundColor, R.attr.badgeGravity, R.attr.badgeTextColor, R.attr.horizontalOffset, R.attr.maxCharacterCount, R.attr.number, R.attr.verticalOffset};
        public static final int[] BaseProgressIndicator = {R.attr.indeterminate, R.attr.hideAnimationBehavior, R.attr.indicatorColor, R.attr.minHideDelay, R.attr.showAnimationBehavior, R.attr.showDelay, R.attr.trackColor, R.attr.trackCornerRadius, R.attr.trackThickness};
        public static final int[] BottomAppBar = {R.attr.backgroundTint, R.attr.elevation, R.attr.fabAlignmentMode, R.attr.fabAnimationMode, R.attr.fabCradleMargin, R.attr.fabCradleRoundedCornerRadius, R.attr.fabCradleVerticalOffset, R.attr.hideOnScroll, R.attr.paddingBottomSystemWindowInsets, R.attr.paddingLeftSystemWindowInsets, R.attr.paddingRightSystemWindowInsets};
        public static final int[] BottomNavigationView = {R.attr.itemHorizontalTranslationEnabled};
        public static final int[] BottomSheetBehavior_Layout = {R.attr.maxWidth, R.attr.elevation, R.attr.backgroundTint, R.attr.behavior_draggable, R.attr.behavior_expandedOffset, R.attr.behavior_fitToContents, R.attr.behavior_halfExpandedRatio, R.attr.behavior_hideable, R.attr.behavior_peekHeight, R.attr.behavior_saveFlags, R.attr.behavior_skipCollapsed, R.attr.gestureInsetBottomIgnored, R.attr.paddingBottomSystemWindowInsets, R.attr.paddingLeftSystemWindowInsets, R.attr.paddingRightSystemWindowInsets, R.attr.paddingTopSystemWindowInsets, R.attr.shapeAppearance, R.attr.shapeAppearanceOverlay};
        public static final int[] ButtonBarLayout = {R.attr.allowStacking};
        public static final int[] CardView = {R.attr.minWidth, R.attr.minHeight, R.attr.cardBackgroundColor, R.attr.cardCornerRadius, R.attr.cardElevation, R.attr.cardMaxElevation, R.attr.cardPreventCornerOverlap, R.attr.cardUseCompatPadding, R.attr.contentPadding, R.attr.contentPaddingBottom, R.attr.contentPaddingLeft, R.attr.contentPaddingRight, R.attr.contentPaddingTop};
        public static final int[] CheckBoxPreference = {R.attr.summaryOn, R.attr.summaryOff, R.attr.disableDependentsState, R.attr.disableDependentsState, R.attr.summaryOff, R.attr.summaryOn};
        public static final int[] Chip = {R.attr.textAppearance, R.attr.textSize, R.attr.textColor, R.attr.ellipsize, R.attr.maxWidth, R.attr.text, R.attr.checkable, R.attr.checkedIcon, R.attr.checkedIconEnabled, R.attr.checkedIconTint, R.attr.checkedIconVisible, R.attr.chipBackgroundColor, R.attr.chipCornerRadius, R.attr.chipEndPadding, R.attr.chipIcon, R.attr.chipIconEnabled, R.attr.chipIconSize, R.attr.chipIconTint, R.attr.chipIconVisible, R.attr.chipMinHeight, R.attr.chipMinTouchTargetSize, R.attr.chipStartPadding, R.attr.chipStrokeColor, R.attr.chipStrokeWidth, R.attr.chipSurfaceColor, R.attr.closeIcon, R.attr.closeIconEnabled, R.attr.closeIconEndPadding, R.attr.closeIconSize, R.attr.closeIconStartPadding, R.attr.closeIconTint, R.attr.closeIconVisible, R.attr.ensureMinTouchTargetSize, R.attr.hideMotionSpec, R.attr.iconEndPadding, R.attr.iconStartPadding, R.attr.rippleColor, R.attr.shapeAppearance, R.attr.shapeAppearanceOverlay, R.attr.showMotionSpec, R.attr.textEndPadding, R.attr.textStartPadding};
        public static final int[] ChipGroup = {R.attr.checkedChip, R.attr.chipSpacing, R.attr.chipSpacingHorizontal, R.attr.chipSpacingVertical, R.attr.selectionRequired, R.attr.singleLine, R.attr.singleSelection};
        public static final int[] CircularProgressIndicator = {R.attr.indicatorDirectionCircular, R.attr.indicatorInset, R.attr.indicatorSize};
        public static final int[] ClockFaceView = {R.attr.clockFaceBackgroundColor, R.attr.clockNumberTextColor};
        public static final int[] ClockHandView = {R.attr.clockHandColor, R.attr.materialCircleRadius, R.attr.selectorSize};
        public static final int[] CollapsingToolbarLayout = {R.attr.collapsedTitleGravity, R.attr.collapsedTitleTextAppearance, R.attr.contentScrim, R.attr.expandedTitleGravity, R.attr.expandedTitleMargin, R.attr.expandedTitleMarginBottom, R.attr.expandedTitleMarginEnd, R.attr.expandedTitleMarginStart, R.attr.expandedTitleMarginTop, R.attr.expandedTitleTextAppearance, R.attr.extraMultilineHeightEnabled, R.attr.forceApplySystemWindowInsetTop, R.attr.maxLines, R.attr.scrimAnimationDuration, R.attr.scrimVisibleHeightTrigger, R.attr.statusBarScrim, R.attr.title, R.attr.titleCollapseMode, R.attr.titleEnabled, R.attr.toolbarId};
        public static final int[] CollapsingToolbarLayout_Layout = {R.attr.layout_collapseMode, R.attr.layout_collapseParallaxMultiplier};
        public static final int[] ColorStateListItem = {R.attr.color, R.attr.alpha, R.attr.alpha};
        public static final int[] CompoundButton = {R.attr.button, R.attr.buttonCompat, R.attr.buttonTint, R.attr.buttonTintMode};
        public static final int[] Constraint = {R.attr.orientation, R.attr.id, R.attr.visibility, R.attr.layout_width, R.attr.layout_height, R.attr.layout_marginLeft, R.attr.layout_marginTop, R.attr.layout_marginRight, R.attr.layout_marginBottom, R.attr.maxWidth, R.attr.maxHeight, R.attr.minWidth, R.attr.minHeight, R.attr.alpha, R.attr.transformPivotX, R.attr.transformPivotY, R.attr.translationX, R.attr.translationY, R.attr.scaleX, R.attr.scaleY, R.attr.rotation, R.attr.rotationX, R.attr.rotationY, R.attr.layout_marginStart, R.attr.layout_marginEnd, R.attr.translationZ, R.attr.elevation, R.attr.animate_relativeTo, R.attr.barrierAllowsGoneWidgets, R.attr.barrierDirection, R.attr.barrierMargin, R.attr.chainUseRtl, R.attr.constraint_referenced_ids, R.attr.drawPath, R.attr.flow_firstHorizontalBias, R.attr.flow_firstHorizontalStyle, R.attr.flow_firstVerticalBias, R.attr.flow_firstVerticalStyle, R.attr.flow_horizontalAlign, R.attr.flow_horizontalBias, R.attr.flow_horizontalGap, R.attr.flow_horizontalStyle, R.attr.flow_lastHorizontalBias, R.attr.flow_lastHorizontalStyle, R.attr.flow_lastVerticalBias, R.attr.flow_lastVerticalStyle, R.attr.flow_maxElementsWrap, R.attr.flow_verticalAlign, R.attr.flow_verticalBias, R.attr.flow_verticalGap, R.attr.flow_verticalStyle, R.attr.flow_wrapMode, R.attr.layout_constrainedHeight, R.attr.layout_constrainedWidth, R.attr.layout_constraintBaseline_creator, R.attr.layout_constraintBaseline_toBaselineOf, R.attr.layout_constraintBottom_creator, R.attr.layout_constraintBottom_toBottomOf, R.attr.layout_constraintBottom_toTopOf, R.attr.layout_constraintCircle, R.attr.layout_constraintCircleAngle, R.attr.layout_constraintCircleRadius, R.attr.layout_constraintDimensionRatio, R.attr.layout_constraintEnd_toEndOf, R.attr.layout_constraintEnd_toStartOf, R.attr.layout_constraintGuide_begin, R.attr.layout_constraintGuide_end, R.attr.layout_constraintGuide_percent, R.attr.layout_constraintHeight_default, R.attr.layout_constraintHeight_max, R.attr.layout_constraintHeight_min, R.attr.layout_constraintHeight_percent, R.attr.layout_constraintHorizontal_bias, R.attr.layout_constraintHorizontal_chainStyle, R.attr.layout_constraintHorizontal_weight, R.attr.layout_constraintLeft_creator, R.attr.layout_constraintLeft_toLeftOf, R.attr.layout_constraintLeft_toRightOf, R.attr.layout_constraintRight_creator, R.attr.layout_constraintRight_toLeftOf, R.attr.layout_constraintRight_toRightOf, R.attr.layout_constraintStart_toEndOf, R.attr.layout_constraintStart_toStartOf, R.attr.layout_constraintTag, R.attr.layout_constraintTop_creator, R.attr.layout_constraintTop_toBottomOf, R.attr.layout_constraintTop_toTopOf, R.attr.layout_constraintVertical_bias, R.attr.layout_constraintVertical_chainStyle, R.attr.layout_constraintVertical_weight, R.attr.layout_constraintWidth_default, R.attr.layout_constraintWidth_max, R.attr.layout_constraintWidth_min, R.attr.layout_constraintWidth_percent, R.attr.layout_editor_absoluteX, R.attr.layout_editor_absoluteY, R.attr.layout_goneMarginBottom, R.attr.layout_goneMarginEnd, R.attr.layout_goneMarginLeft, R.attr.layout_goneMarginRight, R.attr.layout_goneMarginStart, R.attr.layout_goneMarginTop, R.attr.motionProgress, R.attr.motionStagger, R.attr.pathMotionArc, R.attr.pivotAnchor, R.attr.transitionEasing, R.attr.transitionPathRotate, R.attr.visibilityMode};
        public static final int[] ConstraintLayout_Layout = {R.attr.orientation, R.attr.padding, R.attr.paddingLeft, R.attr.paddingTop, R.attr.paddingRight, R.attr.paddingBottom, R.attr.visibility, R.attr.maxWidth, R.attr.maxHeight, R.attr.minWidth, R.attr.minHeight, R.attr.paddingStart, R.attr.paddingEnd, R.attr.elevation, R.attr.barrierAllowsGoneWidgets, R.attr.barrierDirection, R.attr.barrierMargin, R.attr.chainUseRtl, R.attr.constraintSet, R.attr.constraint_referenced_ids, R.attr.flow_firstHorizontalBias, R.attr.flow_firstHorizontalStyle, R.attr.flow_firstVerticalBias, R.attr.flow_firstVerticalStyle, R.attr.flow_horizontalAlign, R.attr.flow_horizontalBias, R.attr.flow_horizontalGap, R.attr.flow_horizontalStyle, R.attr.flow_lastHorizontalBias, R.attr.flow_lastHorizontalStyle, R.attr.flow_lastVerticalBias, R.attr.flow_lastVerticalStyle, R.attr.flow_maxElementsWrap, R.attr.flow_verticalAlign, R.attr.flow_verticalBias, R.attr.flow_verticalGap, R.attr.flow_verticalStyle, R.attr.flow_wrapMode, R.attr.layoutDescription, R.attr.layout_constrainedHeight, R.attr.layout_constrainedWidth, R.attr.layout_constraintBaseline_creator, R.attr.layout_constraintBaseline_toBaselineOf, R.attr.layout_constraintBottom_creator, R.attr.layout_constraintBottom_toBottomOf, R.attr.layout_constraintBottom_toTopOf, R.attr.layout_constraintCircle, R.attr.layout_constraintCircleAngle, R.attr.layout_constraintCircleRadius, R.attr.layout_constraintDimensionRatio, R.attr.layout_constraintEnd_toEndOf, R.attr.layout_constraintEnd_toStartOf, R.attr.layout_constraintGuide_begin, R.attr.layout_constraintGuide_end, R.attr.layout_constraintGuide_percent, R.attr.layout_constraintHeight_default, R.attr.layout_constraintHeight_max, R.attr.layout_constraintHeight_min, R.attr.layout_constraintHeight_percent, R.attr.layout_constraintHorizontal_bias, R.attr.layout_constraintHorizontal_chainStyle, R.attr.layout_constraintHorizontal_weight, R.attr.layout_constraintLeft_creator, R.attr.layout_constraintLeft_toLeftOf, R.attr.layout_constraintLeft_toRightOf, R.attr.layout_constraintRight_creator, R.attr.layout_constraintRight_toLeftOf, R.attr.layout_constraintRight_toRightOf, R.attr.layout_constraintStart_toEndOf, R.attr.layout_constraintStart_toStartOf, R.attr.layout_constraintTag, R.attr.layout_constraintTop_creator, R.attr.layout_constraintTop_toBottomOf, R.attr.layout_constraintTop_toTopOf, R.attr.layout_constraintVertical_bias, R.attr.layout_constraintVertical_chainStyle, R.attr.layout_constraintVertical_weight, R.attr.layout_constraintWidth_default, R.attr.layout_constraintWidth_max, R.attr.layout_constraintWidth_min, R.attr.layout_constraintWidth_percent, R.attr.layout_editor_absoluteX, R.attr.layout_editor_absoluteY, R.attr.layout_goneMarginBottom, R.attr.layout_goneMarginEnd, R.attr.layout_goneMarginLeft, R.attr.layout_goneMarginRight, R.attr.layout_goneMarginStart, R.attr.layout_goneMarginTop, R.attr.layout_optimizationLevel};
        public static final int[] ConstraintLayout_placeholder = {R.attr.content, R.attr.placeholder_emptyVisibility};
        public static final int[] ConstraintSet = {R.attr.orientation, R.attr.id, R.attr.visibility, R.attr.layout_width, R.attr.layout_height, R.attr.layout_marginLeft, R.attr.layout_marginTop, R.attr.layout_marginRight, R.attr.layout_marginBottom, R.attr.maxWidth, R.attr.maxHeight, R.attr.minWidth, R.attr.minHeight, R.attr.pivotX, R.attr.pivotY, R.attr.alpha, R.attr.transformPivotX, R.attr.transformPivotY, R.attr.translationX, R.attr.translationY, R.attr.scaleX, R.attr.scaleY, R.attr.rotation, R.attr.rotationX, R.attr.rotationY, R.attr.layout_marginStart, R.attr.layout_marginEnd, R.attr.translationZ, R.attr.elevation, R.attr.animate_relativeTo, R.attr.barrierAllowsGoneWidgets, R.attr.barrierDirection, R.attr.barrierMargin, R.attr.chainUseRtl, R.attr.constraint_referenced_ids, R.attr.deriveConstraintsFrom, R.attr.drawPath, R.attr.flow_firstHorizontalBias, R.attr.flow_firstHorizontalStyle, R.attr.flow_firstVerticalBias, R.attr.flow_firstVerticalStyle, R.attr.flow_horizontalAlign, R.attr.flow_horizontalBias, R.attr.flow_horizontalGap, R.attr.flow_horizontalStyle, R.attr.flow_lastHorizontalBias, R.attr.flow_lastHorizontalStyle, R.attr.flow_lastVerticalBias, R.attr.flow_lastVerticalStyle, R.attr.flow_maxElementsWrap, R.attr.flow_verticalAlign, R.attr.flow_verticalBias, R.attr.flow_verticalGap, R.attr.flow_verticalStyle, R.attr.flow_wrapMode, R.attr.layout_constrainedHeight, R.attr.layout_constrainedWidth, R.attr.layout_constraintBaseline_creator, R.attr.layout_constraintBaseline_toBaselineOf, R.attr.layout_constraintBottom_creator, R.attr.layout_constraintBottom_toBottomOf, R.attr.layout_constraintBottom_toTopOf, R.attr.layout_constraintCircle, R.attr.layout_constraintCircleAngle, R.attr.layout_constraintCircleRadius, R.attr.layout_constraintDimensionRatio, R.attr.layout_constraintEnd_toEndOf, R.attr.layout_constraintEnd_toStartOf, R.attr.layout_constraintGuide_begin, R.attr.layout_constraintGuide_end, R.attr.layout_constraintGuide_percent, R.attr.layout_constraintHeight_default, R.attr.layout_constraintHeight_max, R.attr.layout_constraintHeight_min, R.attr.layout_constraintHeight_percent, R.attr.layout_constraintHorizontal_bias, R.attr.layout_constraintHorizontal_chainStyle, R.attr.layout_constraintHorizontal_weight, R.attr.layout_constraintLeft_creator, R.attr.layout_constraintLeft_toLeftOf, R.attr.layout_constraintLeft_toRightOf, R.attr.layout_constraintRight_creator, R.attr.layout_constraintRight_toLeftOf, R.attr.layout_constraintRight_toRightOf, R.attr.layout_constraintStart_toEndOf, R.attr.layout_constraintStart_toStartOf, R.attr.layout_constraintTag, R.attr.layout_constraintTop_creator, R.attr.layout_constraintTop_toBottomOf, R.attr.layout_constraintTop_toTopOf, R.attr.layout_constraintVertical_bias, R.attr.layout_constraintVertical_chainStyle, R.attr.layout_constraintVertical_weight, R.attr.layout_constraintWidth_default, R.attr.layout_constraintWidth_max, R.attr.layout_constraintWidth_min, R.attr.layout_constraintWidth_percent, R.attr.layout_editor_absoluteX, R.attr.layout_editor_absoluteY, R.attr.layout_goneMarginBottom, R.attr.layout_goneMarginEnd, R.attr.layout_goneMarginLeft, R.attr.layout_goneMarginRight, R.attr.layout_goneMarginStart, R.attr.layout_goneMarginTop, R.attr.motionProgress, R.attr.motionStagger, R.attr.pathMotionArc, R.attr.pivotAnchor, R.attr.transitionEasing, R.attr.transitionPathRotate};
        public static final int[] CoordinatorLayout = {R.attr.keylines, R.attr.statusBarBackground};
        public static final int[] CoordinatorLayout_Layout = {R.attr.layout_gravity, R.attr.layout_anchor, R.attr.layout_anchorGravity, R.attr.layout_behavior, R.attr.layout_dodgeInsetEdges, R.attr.layout_insetEdge, R.attr.layout_keyline};
        public static final int[] CustomAttribute = {R.attr.attributeName, R.attr.customBoolean, R.attr.customColorDrawableValue, R.attr.customColorValue, R.attr.customDimension, R.attr.customFloatValue, R.attr.customIntegerValue, R.attr.customPixelDimension, R.attr.customStringValue};
        public static final int[] DialogPreference = {R.attr.dialogTitle, R.attr.dialogMessage, R.attr.dialogIcon, R.attr.positiveButtonText, R.attr.negativeButtonText, R.attr.dialogLayout, R.attr.dialogIcon, R.attr.dialogLayout, R.attr.dialogMessage, R.attr.dialogTitle, R.attr.negativeButtonText, R.attr.positiveButtonText};
        public static final int[] DrawerArrowToggle = {R.attr.arrowHeadLength, R.attr.arrowShaftLength, R.attr.barLength, R.attr.color, R.attr.drawableSize, R.attr.gapBetweenBars, R.attr.spinBars, R.attr.thickness};
        public static final int[] EditTextPreference = {R.attr.useSimpleSummaryProvider};
        public static final int[] ExtendedFloatingActionButton = {R.attr.collapsedSize, R.attr.elevation, R.attr.extendMotionSpec, R.attr.hideMotionSpec, R.attr.showMotionSpec, R.attr.shrinkMotionSpec};
        public static final int[] ExtendedFloatingActionButton_Behavior_Layout = {R.attr.behavior_autoHide, R.attr.behavior_autoShrink};
        public static final int[] FloatingActionButton = {R.attr.enabled, R.attr.backgroundTint, R.attr.backgroundTintMode, R.attr.borderWidth, R.attr.elevation, R.attr.ensureMinTouchTargetSize, R.attr.fabCustomSize, R.attr.fabSize, R.attr.hideMotionSpec, R.attr.hoveredFocusedTranslationZ, R.attr.maxImageSize, R.attr.pressedTranslationZ, R.attr.rippleColor, R.attr.shapeAppearance, R.attr.shapeAppearanceOverlay, R.attr.showMotionSpec, R.attr.useCompatPadding};
        public static final int[] FloatingActionButton_Behavior_Layout = {R.attr.behavior_autoHide};
        public static final int[] FlowLayout = {R.attr.itemSpacing, R.attr.lineSpacing};
        public static final int[] FontFamily = {R.attr.fontProviderAuthority, R.attr.fontProviderCerts, R.attr.fontProviderFetchStrategy, R.attr.fontProviderFetchTimeout, R.attr.fontProviderPackage, R.attr.fontProviderQuery, R.attr.fontProviderSystemFontFamily};
        public static final int[] FontFamilyFont = {R.attr.font, R.attr.fontWeight, R.attr.fontStyle, R.attr.ttcIndex, R.attr.fontVariationSettings, R.attr.font, R.attr.fontStyle, R.attr.fontVariationSettings, R.attr.fontWeight, R.attr.ttcIndex};
        public static final int[] ForegroundLinearLayout = {R.attr.foreground, R.attr.foregroundGravity, R.attr.foregroundInsidePadding};
        public static final int[] Fragment = {R.attr.name, R.attr.id, R.attr.tag};
        public static final int[] FragmentContainerView = {R.attr.name, R.attr.tag};
        public static final int[] GradientColor = {R.attr.startColor, R.attr.endColor, R.attr.type, R.attr.centerX, R.attr.centerY, R.attr.gradientRadius, R.attr.tileMode, R.attr.centerColor, R.attr.startX, R.attr.startY, R.attr.endX, R.attr.endY};
        public static final int[] GradientColorItem = {R.attr.color, R.attr.offset};
        public static final int[] ImageFilterView = {R.attr.altSrc, R.attr.brightness, R.attr.contrast, R.attr.crossfade, R.attr.overlay, R.attr.round, R.attr.roundPercent, R.attr.saturation, R.attr.warmth};
        public static final int[] Insets = {R.attr.paddingBottomSystemWindowInsets, R.attr.paddingLeftSystemWindowInsets, R.attr.paddingRightSystemWindowInsets, R.attr.paddingTopSystemWindowInsets};
        public static final int[] KeyAttribute = {R.attr.alpha, R.attr.transformPivotX, R.attr.transformPivotY, R.attr.translationX, R.attr.translationY, R.attr.scaleX, R.attr.scaleY, R.attr.rotation, R.attr.rotationX, R.attr.rotationY, R.attr.translationZ, R.attr.elevation, R.attr.curveFit, R.attr.framePosition, R.attr.motionProgress, R.attr.motionTarget, R.attr.transitionEasing, R.attr.transitionPathRotate};
        public static final int[] KeyCycle = {R.attr.alpha, R.attr.translationX, R.attr.translationY, R.attr.scaleX, R.attr.scaleY, R.attr.rotation, R.attr.rotationX, R.attr.rotationY, R.attr.translationZ, R.attr.elevation, R.attr.curveFit, R.attr.framePosition, R.attr.motionProgress, R.attr.motionTarget, R.attr.transitionEasing, R.attr.transitionPathRotate, R.attr.waveOffset, R.attr.wavePeriod, R.attr.waveShape, R.attr.waveVariesBy};
        public static final int[] KeyFrame = new int[0];
        public static final int[] KeyFramesAcceleration = new int[0];
        public static final int[] KeyFramesVelocity = new int[0];
        public static final int[] KeyPosition = {R.attr.curveFit, R.attr.drawPath, R.attr.framePosition, R.attr.keyPositionType, R.attr.motionTarget, R.attr.pathMotionArc, R.attr.percentHeight, R.attr.percentWidth, R.attr.percentX, R.attr.percentY, R.attr.sizePercent, R.attr.transitionEasing};
        public static final int[] KeyTimeCycle = {R.attr.alpha, R.attr.translationX, R.attr.translationY, R.attr.scaleX, R.attr.scaleY, R.attr.rotation, R.attr.rotationX, R.attr.rotationY, R.attr.translationZ, R.attr.elevation, R.attr.curveFit, R.attr.framePosition, R.attr.motionProgress, R.attr.motionTarget, R.attr.transitionEasing, R.attr.transitionPathRotate, R.attr.waveDecay, R.attr.waveOffset, R.attr.wavePeriod, R.attr.waveShape};
        public static final int[] KeyTrigger = {R.attr.framePosition, R.attr.motionTarget, R.attr.motion_postLayoutCollision, R.attr.motion_triggerOnCollision, R.attr.onCross, R.attr.onNegativeCross, R.attr.onPositiveCross, R.attr.triggerId, R.attr.triggerReceiver, R.attr.triggerSlack};
        public static final int[] Layout = {R.attr.orientation, R.attr.layout_width, R.attr.layout_height, R.attr.layout_marginLeft, R.attr.layout_marginTop, R.attr.layout_marginRight, R.attr.layout_marginBottom, R.attr.layout_marginStart, R.attr.layout_marginEnd, R.attr.barrierAllowsGoneWidgets, R.attr.barrierDirection, R.attr.barrierMargin, R.attr.chainUseRtl, R.attr.constraint_referenced_ids, R.attr.layout_constrainedHeight, R.attr.layout_constrainedWidth, R.attr.layout_constraintBaseline_creator, R.attr.layout_constraintBaseline_toBaselineOf, R.attr.layout_constraintBottom_creator, R.attr.layout_constraintBottom_toBottomOf, R.attr.layout_constraintBottom_toTopOf, R.attr.layout_constraintCircle, R.attr.layout_constraintCircleAngle, R.attr.layout_constraintCircleRadius, R.attr.layout_constraintDimensionRatio, R.attr.layout_constraintEnd_toEndOf, R.attr.layout_constraintEnd_toStartOf, R.attr.layout_constraintGuide_begin, R.attr.layout_constraintGuide_end, R.attr.layout_constraintGuide_percent, R.attr.layout_constraintHeight_default, R.attr.layout_constraintHeight_max, R.attr.layout_constraintHeight_min, R.attr.layout_constraintHeight_percent, R.attr.layout_constraintHorizontal_bias, R.attr.layout_constraintHorizontal_chainStyle, R.attr.layout_constraintHorizontal_weight, R.attr.layout_constraintLeft_creator, R.attr.layout_constraintLeft_toLeftOf, R.attr.layout_constraintLeft_toRightOf, R.attr.layout_constraintRight_creator, R.attr.layout_constraintRight_toLeftOf, R.attr.layout_constraintRight_toRightOf, R.attr.layout_constraintStart_toEndOf, R.attr.layout_constraintStart_toStartOf, R.attr.layout_constraintTop_creator, R.attr.layout_constraintTop_toBottomOf, R.attr.layout_constraintTop_toTopOf, R.attr.layout_constraintVertical_bias, R.attr.layout_constraintVertical_chainStyle, R.attr.layout_constraintVertical_weight, R.attr.layout_constraintWidth_default, R.attr.layout_constraintWidth_max, R.attr.layout_constraintWidth_min, R.attr.layout_constraintWidth_percent, R.attr.layout_editor_absoluteX, R.attr.layout_editor_absoluteY, R.attr.layout_goneMarginBottom, R.attr.layout_goneMarginEnd, R.attr.layout_goneMarginLeft, R.attr.layout_goneMarginRight, R.attr.layout_goneMarginStart, R.attr.layout_goneMarginTop, R.attr.maxHeight, R.attr.maxWidth, R.attr.minHeight, R.attr.minWidth};
        public static final int[] LinearLayoutCompat = {R.attr.gravity, R.attr.orientation, R.attr.baselineAligned, R.attr.baselineAlignedChildIndex, R.attr.weightSum, R.attr.divider, R.attr.dividerPadding, R.attr.measureWithLargestChild, R.attr.showDividers};
        public static final int[] LinearLayoutCompat_Layout = {R.attr.layout_gravity, R.attr.layout_width, R.attr.layout_height, R.attr.layout_weight};
        public static final int[] LinearProgressIndicator = {R.attr.indeterminateAnimationType, R.attr.indicatorDirectionLinear};
        public static final int[] ListPopupWindow = {R.attr.dropDownHorizontalOffset, R.attr.dropDownVerticalOffset};
        public static final int[] ListPreference = {R.attr.entries, R.attr.entryValues, R.attr.entries, R.attr.entryValues, R.attr.useSimpleSummaryProvider};
        public static final int[] MaterialAlertDialog = {R.attr.backgroundInsetBottom, R.attr.backgroundInsetEnd, R.attr.backgroundInsetStart, R.attr.backgroundInsetTop};
        public static final int[] MaterialAlertDialogTheme = {R.attr.materialAlertDialogBodyTextStyle, R.attr.materialAlertDialogTheme, R.attr.materialAlertDialogTitleIconStyle, R.attr.materialAlertDialogTitlePanelStyle, R.attr.materialAlertDialogTitleTextStyle};
        public static final int[] MaterialAutoCompleteTextView = {R.attr.inputType};
        public static final int[] MaterialButton = {R.attr.background, R.attr.insetLeft, R.attr.insetRight, R.attr.insetTop, R.attr.insetBottom, R.attr.checkable, R.attr.backgroundTint, R.attr.backgroundTintMode, R.attr.cornerRadius, R.attr.elevation, R.attr.icon, R.attr.iconGravity, R.attr.iconPadding, R.attr.iconSize, R.attr.iconTint, R.attr.iconTintMode, R.attr.rippleColor, R.attr.shapeAppearance, R.attr.shapeAppearanceOverlay, R.attr.strokeColor, R.attr.strokeWidth};
        public static final int[] MaterialButtonToggleGroup = {R.attr.checkedButton, R.attr.selectionRequired, R.attr.singleSelection};
        public static final int[] MaterialCalendar = {R.attr.windowFullscreen, R.attr.dayInvalidStyle, R.attr.daySelectedStyle, R.attr.dayStyle, R.attr.dayTodayStyle, R.attr.nestedScrollable, R.attr.rangeFillColor, R.attr.yearSelectedStyle, R.attr.yearStyle, R.attr.yearTodayStyle};
        public static final int[] MaterialCalendarItem = {R.attr.insetLeft, R.attr.insetRight, R.attr.insetTop, R.attr.insetBottom, R.attr.itemFillColor, R.attr.itemShapeAppearance, R.attr.itemShapeAppearanceOverlay, R.attr.itemStrokeColor, R.attr.itemStrokeWidth, R.attr.itemTextColor};
        public static final int[] MaterialCardView = {R.attr.checkable, R.attr.cardForegroundColor, R.attr.checkedIcon, R.attr.checkedIconMargin, R.attr.checkedIconSize, R.attr.checkedIconTint, R.attr.rippleColor, R.attr.shapeAppearance, R.attr.shapeAppearanceOverlay, R.attr.state_dragged, R.attr.strokeColor, R.attr.strokeWidth};
        public static final int[] MaterialCheckBox = {R.attr.buttonTint, R.attr.useMaterialThemeColors};
        public static final int[] MaterialRadioButton = {R.attr.buttonTint, R.attr.useMaterialThemeColors};
        public static final int[] MaterialShape = {R.attr.shapeAppearance, R.attr.shapeAppearanceOverlay};
        public static final int[] MaterialTextAppearance = {R.attr.letterSpacing, R.attr.lineHeight, R.attr.lineHeight};
        public static final int[] MaterialTextView = {R.attr.textAppearance, R.attr.lineHeight, R.attr.lineHeight};
        public static final int[] MaterialTimePicker = {R.attr.clockIcon, R.attr.keyboardIcon};
        public static final int[] MaterialToolbar = {R.attr.navigationIconTint, R.attr.subtitleCentered, R.attr.titleCentered};
        public static final int[] MenuGroup = {R.attr.enabled, R.attr.id, R.attr.visible, R.attr.menuCategory, R.attr.orderInCategory, R.attr.checkableBehavior};
        public static final int[] MenuItem = {R.attr.icon, R.attr.enabled, R.attr.id, R.attr.checked, R.attr.visible, R.attr.menuCategory, R.attr.orderInCategory, R.attr.title, R.attr.titleCondensed, R.attr.alphabeticShortcut, R.attr.numericShortcut, R.attr.checkable, R.attr.onClick, R.attr.actionLayout, R.attr.actionProviderClass, R.attr.actionViewClass, R.attr.alphabeticModifiers, R.attr.contentDescription, R.attr.iconTint, R.attr.iconTintMode, R.attr.numericModifiers, R.attr.showAsAction, R.attr.tooltipText};
        public static final int[] MenuView = {R.attr.windowAnimationStyle, R.attr.itemTextAppearance, R.attr.horizontalDivider, R.attr.verticalDivider, R.attr.headerBackground, R.attr.itemBackground, R.attr.itemIconDisabledAlpha, R.attr.preserveIconSpacing, R.attr.subMenuArrow};
        public static final int[] MockView = {R.attr.mock_diagonalsColor, R.attr.mock_label, R.attr.mock_labelBackgroundColor, R.attr.mock_labelColor, R.attr.mock_showDiagonals, R.attr.mock_showLabel};
        public static final int[] Motion = {R.attr.animate_relativeTo, R.attr.drawPath, R.attr.motionPathRotate, R.attr.motionStagger, R.attr.pathMotionArc, R.attr.transitionEasing};
        public static final int[] MotionHelper = {R.attr.onHide, R.attr.onShow};
        public static final int[] MotionLayout = {R.attr.applyMotionScene, R.attr.currentState, R.attr.layoutDescription, R.attr.motionDebug, R.attr.motionProgress, R.attr.showPaths};
        public static final int[] MotionScene = {R.attr.defaultDuration, R.attr.layoutDuringTransition};
        public static final int[] MotionTelltales = {R.attr.telltales_tailColor, R.attr.telltales_tailScale, R.attr.telltales_velocityMode};
        public static final int[] MultiSelectListPreference = {R.attr.entries, R.attr.entryValues, R.attr.entries, R.attr.entryValues};
        public static final int[] NavigationBarView = {R.attr.backgroundTint, R.attr.elevation, R.attr.itemBackground, R.attr.itemIconSize, R.attr.itemIconTint, R.attr.itemRippleColor, R.attr.itemTextAppearanceActive, R.attr.itemTextAppearanceInactive, R.attr.itemTextColor, R.attr.labelVisibilityMode, R.attr.menu};
        public static final int[] NavigationRailView = {R.attr.headerLayout, R.attr.menuGravity};
        public static final int[] NavigationView = {R.attr.background, R.attr.fitsSystemWindows, R.attr.maxWidth, R.attr.elevation, R.attr.headerLayout, R.attr.itemBackground, R.attr.itemHorizontalPadding, R.attr.itemIconPadding, R.attr.itemIconSize, R.attr.itemIconTint, R.attr.itemMaxLines, R.attr.itemShapeAppearance, R.attr.itemShapeAppearanceOverlay, R.attr.itemShapeFillColor, R.attr.itemShapeInsetBottom, R.attr.itemShapeInsetEnd, R.attr.itemShapeInsetStart, R.attr.itemShapeInsetTop, R.attr.itemTextAppearance, R.attr.itemTextColor, R.attr.menu, R.attr.shapeAppearance, R.attr.shapeAppearanceOverlay};
        public static final int[] NumberPicker = {R.attr.maxValue, R.attr.minValue, R.attr.step, R.attr.textSize, R.attr.value};
        public static final int[] OnClick = {R.attr.clickAction, R.attr.targetId};
        public static final int[] OnSwipe = {R.attr.dragDirection, R.attr.dragScale, R.attr.dragThreshold, R.attr.limitBoundsTo, R.attr.maxAcceleration, R.attr.maxVelocity, R.attr.moveWhenScrollAtTop, R.attr.nestedScrollFlags, R.attr.onTouchUp, R.attr.touchAnchorId, R.attr.touchAnchorSide, R.attr.touchRegionId};
        public static final int[] PopupWindow = {R.attr.popupBackground, R.attr.popupAnimationStyle, R.attr.overlapAnchor};
        public static final int[] PopupWindowBackgroundState = {R.attr.state_above_anchor};
        public static final int[] Preference = {R.attr.icon, R.attr.persistent, R.attr.enabled, R.attr.layout, R.attr.title, R.attr.selectable, R.attr.key, R.attr.summary, R.attr.order, R.attr.widgetLayout, R.attr.dependency, R.attr.defaultValue, R.attr.shouldDisableView, R.attr.fragment, R.attr.singleLineTitle, R.attr.iconSpaceReserved, R.attr.allowDividerAbove, R.attr.allowDividerBelow, R.attr.defaultValue, R.attr.dependency, R.attr.enableCopying, R.attr.enabled, R.attr.fragment, R.attr.icon, R.attr.iconSpaceReserved, R.attr.isPreferenceVisible, R.attr.key, R.attr.layout, R.attr.order, R.attr.persistent, R.attr.selectable, R.attr.shouldDisableView, R.attr.singleLineTitle, R.attr.summary, R.attr.title, R.attr.widgetLayout};
        public static final int[] PreferenceFragment = {R.attr.layout, R.attr.divider, R.attr.dividerHeight, R.attr.allowDividerAfterLastItem};
        public static final int[] PreferenceFragmentCompat = {R.attr.layout, R.attr.divider, R.attr.dividerHeight, R.attr.allowDividerAfterLastItem};
        public static final int[] PreferenceGroup = {R.attr.orderingFromXml, R.attr.initialExpandedChildrenCount, R.attr.orderingFromXml};
        public static final int[] PreferenceImageView = {R.attr.maxWidth, R.attr.maxHeight, R.attr.maxHeight, R.attr.maxWidth};
        public static final int[] PreferenceTheme = {R.attr.checkBoxPreferenceStyle, R.attr.dialogPreferenceStyle, R.attr.dropdownPreferenceStyle, R.attr.editTextPreferenceStyle, R.attr.preferenceCategoryStyle, R.attr.preferenceCategoryTitleTextAppearance, R.attr.preferenceFragmentCompatStyle, R.attr.preferenceFragmentListStyle, R.attr.preferenceFragmentStyle, R.attr.preferenceInformationStyle, R.attr.preferenceScreenStyle, R.attr.preferenceStyle, R.attr.preferenceTheme, R.attr.seekBarPreferenceStyle, R.attr.switchPreferenceCompatStyle, R.attr.switchPreferenceStyle};
        public static final int[] PropertySet = {R.attr.visibility, R.attr.alpha, R.attr.layout_constraintTag, R.attr.motionProgress, R.attr.visibilityMode};
        public static final int[] RadialViewGroup = {R.attr.materialCircleRadius};
        public static final int[] RangeSlider = {R.attr.minSeparation, R.attr.values};
        public static final int[] RecycleListView = {R.attr.paddingBottomNoButtons, R.attr.paddingTopNoTitle};
        public static final int[] RecyclerView = {R.attr.orientation, R.attr.clipToPadding, R.attr.descendantFocusability, R.attr.fastScrollEnabled, R.attr.fastScrollHorizontalThumbDrawable, R.attr.fastScrollHorizontalTrackDrawable, R.attr.fastScrollVerticalThumbDrawable, R.attr.fastScrollVerticalTrackDrawable, R.attr.layoutManager, R.attr.reverseLayout, R.attr.spanCount, R.attr.stackFromEnd};
        public static final int[] ScrimInsetsFrameLayout = {R.attr.insetForeground};
        public static final int[] ScrollingViewBehavior_Layout = {R.attr.behavior_overlapTop};
        public static final int[] SearchView = {R.attr.focusable, R.attr.maxWidth, R.attr.inputType, R.attr.imeOptions, R.attr.closeIcon, R.attr.commitIcon, R.attr.defaultQueryHint, R.attr.goIcon, R.attr.iconifiedByDefault, R.attr.layout, R.attr.queryBackground, R.attr.queryHint, R.attr.searchHintIcon, R.attr.searchIcon, R.attr.submitBackground, R.attr.suggestionRowLayout, R.attr.voiceIcon};
        public static final int[] SeekBar = {R.attr.maxValue, R.attr.minValue, R.attr.step, R.attr.suffix, R.attr.textSize, R.attr.value};
        public static final int[] SeekBarPreference = {R.attr.layout, R.attr.max, R.attr.adjustable, R.attr.min, R.attr.seekBarIncrement, R.attr.showSeekBarValue, R.attr.updatesContinuously};
        public static final int[] ShapeAppearance = {R.attr.cornerFamily, R.attr.cornerFamilyBottomLeft, R.attr.cornerFamilyBottomRight, R.attr.cornerFamilyTopLeft, R.attr.cornerFamilyTopRight, R.attr.cornerSize, R.attr.cornerSizeBottomLeft, R.attr.cornerSizeBottomRight, R.attr.cornerSizeTopLeft, R.attr.cornerSizeTopRight};
        public static final int[] ShapeableImageView = {R.attr.contentPadding, R.attr.contentPaddingBottom, R.attr.contentPaddingEnd, R.attr.contentPaddingLeft, R.attr.contentPaddingRight, R.attr.contentPaddingStart, R.attr.contentPaddingTop, R.attr.shapeAppearance, R.attr.shapeAppearanceOverlay, R.attr.strokeColor, R.attr.strokeWidth};
        public static final int[] Slider = {R.attr.enabled, R.attr.value, R.attr.stepSize, R.attr.valueFrom, R.attr.valueTo, R.attr.haloColor, R.attr.haloRadius, R.attr.labelBehavior, R.attr.labelStyle, R.attr.thumbColor, R.attr.thumbElevation, R.attr.thumbRadius, R.attr.thumbStrokeColor, R.attr.thumbStrokeWidth, R.attr.tickColor, R.attr.tickColorActive, R.attr.tickColorInactive, R.attr.tickVisible, R.attr.trackColor, R.attr.trackColorActive, R.attr.trackColorInactive, R.attr.trackHeight};
        public static final int[] Snackbar = {R.attr.snackbarButtonStyle, R.attr.snackbarStyle, R.attr.snackbarTextViewStyle};
        public static final int[] SnackbarLayout = {R.attr.maxWidth, R.attr.actionTextColorAlpha, R.attr.animationMode, R.attr.backgroundOverlayColorAlpha, R.attr.backgroundTint, R.attr.backgroundTintMode, R.attr.elevation, R.attr.maxActionInlineWidth};
        public static final int[] Spinner = {R.attr.entries, R.attr.popupBackground, R.attr.prompt, R.attr.dropDownWidth, R.attr.popupTheme};
        public static final int[] State = {R.attr.id, R.attr.constraints};
        public static final int[] StateListDrawable = {R.attr.dither, R.attr.visible, R.attr.variablePadding, R.attr.constantSize, R.attr.enterFadeDuration, R.attr.exitFadeDuration};
        public static final int[] StateListDrawableItem = {R.attr.drawable};
        public static final int[] StateSet = {R.attr.defaultState};
        public static final int[] SwitchCompat = {R.attr.textOn, R.attr.textOff, R.attr.thumb, R.attr.showText, R.attr.splitTrack, R.attr.switchMinWidth, R.attr.switchPadding, R.attr.switchTextAppearance, R.attr.thumbTextPadding, R.attr.thumbTint, R.attr.thumbTintMode, R.attr.track, R.attr.trackTint, R.attr.trackTintMode};
        public static final int[] SwitchMaterial = {R.attr.useMaterialThemeColors};
        public static final int[] SwitchPreference = {R.attr.summaryOn, R.attr.summaryOff, R.attr.disableDependentsState, R.attr.switchTextOn, R.attr.switchTextOff, R.attr.disableDependentsState, R.attr.summaryOff, R.attr.summaryOn, R.attr.switchTextOff, R.attr.switchTextOn};
        public static final int[] SwitchPreferenceCompat = {R.attr.summaryOn, R.attr.summaryOff, R.attr.disableDependentsState, R.attr.switchTextOn, R.attr.switchTextOff, R.attr.disableDependentsState, R.attr.summaryOff, R.attr.summaryOn, R.attr.switchTextOff, R.attr.switchTextOn};
        public static final int[] TabItem = {R.attr.icon, R.attr.layout, R.attr.text};
        public static final int[] TabLayout = {R.attr.tabBackground, R.attr.tabContentStart, R.attr.tabGravity, R.attr.tabIconTint, R.attr.tabIconTintMode, R.attr.tabIndicator, R.attr.tabIndicatorAnimationDuration, R.attr.tabIndicatorAnimationMode, R.attr.tabIndicatorColor, R.attr.tabIndicatorFullWidth, R.attr.tabIndicatorGravity, R.attr.tabIndicatorHeight, R.attr.tabInlineLabel, R.attr.tabMaxWidth, R.attr.tabMinWidth, R.attr.tabMode, R.attr.tabPadding, R.attr.tabPaddingBottom, R.attr.tabPaddingEnd, R.attr.tabPaddingStart, R.attr.tabPaddingTop, R.attr.tabRippleColor, R.attr.tabSelectedTextColor, R.attr.tabTextAppearance, R.attr.tabTextColor, R.attr.tabUnboundedRipple};
        public static final int[] TextAppearance = {R.attr.textSize, R.attr.typeface, R.attr.textStyle, R.attr.textColor, R.attr.textColorHint, R.attr.textColorLink, R.attr.shadowColor, R.attr.shadowDx, R.attr.shadowDy, R.attr.shadowRadius, R.attr.fontFamily, R.attr.textFontWeight, R.attr.fontFamily, R.attr.fontVariationSettings, R.attr.textAllCaps, R.attr.textLocale};
        public static final int[] TextInputEditText = {R.attr.textInputLayoutFocusedRectEnabled};
        public static final int[] TextInputLayout = {R.attr.enabled, R.attr.textColorHint, R.attr.maxWidth, R.attr.minWidth, R.attr.hint, R.attr.boxBackgroundColor, R.attr.boxBackgroundMode, R.attr.boxCollapsedPaddingTop, R.attr.boxCornerRadiusBottomEnd, R.attr.boxCornerRadiusBottomStart, R.attr.boxCornerRadiusTopEnd, R.attr.boxCornerRadiusTopStart, R.attr.boxStrokeColor, R.attr.boxStrokeErrorColor, R.attr.boxStrokeWidth, R.attr.boxStrokeWidthFocused, R.attr.counterEnabled, R.attr.counterMaxLength, R.attr.counterOverflowTextAppearance, R.attr.counterOverflowTextColor, R.attr.counterTextAppearance, R.attr.counterTextColor, R.attr.endIconCheckable, R.attr.endIconContentDescription, R.attr.endIconDrawable, R.attr.endIconMode, R.attr.endIconTint, R.attr.endIconTintMode, R.attr.errorContentDescription, R.attr.errorEnabled, R.attr.errorIconDrawable, R.attr.errorIconTint, R.attr.errorIconTintMode, R.attr.errorTextAppearance, R.attr.errorTextColor, R.attr.expandedHintEnabled, R.attr.helperText, R.attr.helperTextEnabled, R.attr.helperTextTextAppearance, R.attr.helperTextTextColor, R.attr.hintAnimationEnabled, R.attr.hintEnabled, R.attr.hintTextAppearance, R.attr.hintTextColor, R.attr.passwordToggleContentDescription, R.attr.passwordToggleDrawable, R.attr.passwordToggleEnabled, R.attr.passwordToggleTint, R.attr.passwordToggleTintMode, R.attr.placeholderText, R.attr.placeholderTextAppearance, R.attr.placeholderTextColor, R.attr.prefixText, R.attr.prefixTextAppearance, R.attr.prefixTextColor, R.attr.shapeAppearance, R.attr.shapeAppearanceOverlay, R.attr.startIconCheckable, R.attr.startIconContentDescription, R.attr.startIconDrawable, R.attr.startIconTint, R.attr.startIconTintMode, R.attr.suffixText, R.attr.suffixTextAppearance, R.attr.suffixTextColor};
        public static final int[] ThemeEnforcement = {R.attr.textAppearance, R.attr.enforceMaterialTheme, R.attr.enforceTextAppearance};
        public static final int[] Toolbar = {R.attr.gravity, R.attr.minHeight, R.attr.buttonGravity, R.attr.collapseContentDescription, R.attr.collapseIcon, R.attr.contentInsetEnd, R.attr.contentInsetEndWithActions, R.attr.contentInsetLeft, R.attr.contentInsetRight, R.attr.contentInsetStart, R.attr.contentInsetStartWithNavigation, R.attr.logo, R.attr.logoDescription, R.attr.maxButtonHeight, R.attr.menu, R.attr.navigationContentDescription, R.attr.navigationIcon, R.attr.popupTheme, R.attr.subtitle, R.attr.subtitleTextAppearance, R.attr.subtitleTextColor, R.attr.title, R.attr.titleMargin, R.attr.titleMarginBottom, R.attr.titleMarginEnd, R.attr.titleMarginStart, R.attr.titleMarginTop, R.attr.titleMargins, R.attr.titleTextAppearance, R.attr.titleTextColor};
        public static final int[] Tooltip = {R.attr.textAppearance, R.attr.padding, R.attr.layout_margin, R.attr.minWidth, R.attr.minHeight, R.attr.text, R.attr.backgroundTint};
        public static final int[] Transform = {R.attr.transformPivotX, R.attr.transformPivotY, R.attr.translationX, R.attr.translationY, R.attr.scaleX, R.attr.scaleY, R.attr.rotation, R.attr.rotationX, R.attr.rotationY, R.attr.translationZ, R.attr.elevation};
        public static final int[] Transition = {R.attr.id, R.attr.autoTransition, R.attr.constraintSetEnd, R.attr.constraintSetStart, R.attr.duration, R.attr.layoutDuringTransition, R.attr.motionInterpolator, R.attr.pathMotionArc, R.attr.staggered, R.attr.transitionDisable, R.attr.transitionFlags};
        public static final int[] Variant = {R.attr.constraints, R.attr.region_heightLessThan, R.attr.region_heightMoreThan, R.attr.region_widthLessThan, R.attr.region_widthMoreThan};
        public static final int[] View = {R.attr.theme, R.attr.focusable, R.attr.paddingEnd, R.attr.paddingStart, R.attr.theme};
        public static final int[] ViewBackgroundHelper = {R.attr.background, R.attr.backgroundTint, R.attr.backgroundTintMode};
        public static final int[] ViewPager2 = {R.attr.orientation};
        public static final int[] ViewStubCompat = {R.attr.id, R.attr.layout, R.attr.inflatedId};
    }
  + app/src/main/java/com/winlator/R.java
  + app/src/main/java/com/winlator/SettingsFragment.java
    package com.winlator;
    
    import android.R;
    import android.app.Activity;
    import android.content.Context;
    import android.content.Intent;
    import android.content.SharedPreferences;
    import android.net.Uri;
    import android.os.Bundle;
    import android.view.LayoutInflater;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.ArrayAdapter;
    import android.widget.CheckBox;
    import android.widget.CompoundButton;
    import android.widget.EditText;
    import android.widget.LinearLayout;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import android.widget.TextView;
    import androidx.appcompat.app.AppCompatActivity;
    import androidx.fragment.app.Fragment;
    import androidx.fragment.app.FragmentManager;
    import androidx.preference.PreferenceManager;
    import com.google.android.material.navigation.NavigationView;
    import com.winlator.box64.Box64EditPresetDialog;
    import com.winlator.box64.Box64PresetManager;
    import com.winlator.container.Container;
    import com.winlator.container.ContainerManager;
    import com.winlator.contentdialog.ContentDialog;
    import com.winlator.core.AppUtils;
    import com.winlator.core.ArrayUtils;
    import com.winlator.core.Callback;
    import com.winlator.core.FileUtils;
    import com.winlator.core.InstallableComponents;
    import com.winlator.core.PreloaderDialog;
    import com.winlator.core.StringUtils;
    import com.winlator.core.WineInfo;
    import com.winlator.core.WineUtils;
    import com.winlator.widget.ColorPickerView;
    import com.winlator.widget.LogView;
    import com.winlator.widget.SeekBar;
    import com.winlator.winhandler.WinHandler;
    import com.winlator.xenvironment.RootFS;
    import com.winlator.xenvironment.RootFSInstaller;
    import java.io.File;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.Iterator;
    import java.util.concurrent.Executors;
    import java.util.concurrent.atomic.AtomicLong;
    import org.json.JSONArray;
    import org.json.JSONException;
    
    /* loaded from: classes.dex */
    public class SettingsFragment extends Fragment {
        private SharedPreferences preferences;
        private PreloaderDialog preloaderDialog;
        private Callback<Uri> selectWineFileCallback;
    
        @Override // androidx.fragment.app.Fragment
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setHasOptionsMenu(false);
            this.preloaderDialog = new PreloaderDialog(getActivity());
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onViewCreated(View view, Bundle savedInstanceState) {
            super.onViewCreated(view, savedInstanceState);
            ((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings);
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onActivityResult(int requestCode, int resultCode, Intent data) {
            if (requestCode == 2 && resultCode == -1) {
                try {
                    Callback<Uri> callback = this.selectWineFileCallback;
                    if (callback != null && data != null) {
                        callback.call(data.getData());
                    }
                } catch (Exception e) {
                    AppUtils.showToast(getContext(), R.string.unable_to_import_profile);
                }
                this.selectWineFileCallback = null;
            }
        }
    
        @Override // androidx.fragment.app.Fragment
        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
            View view = inflater.inflate(R.layout.settings_fragment, container, false);
            final Context context = getContext();
            this.preferences = PreferenceManager.getDefaultSharedPreferences(context);
            final Spinner sBox64Version = (Spinner) view.findViewById(R.id.SBox64Version);
            String box64Version = this.preferences.getString("box64_version", null);
            InstallableComponents.initViews(InstallableComponents.Type.BOX64, view.findViewById(R.id.Box64Toolbox), sBox64Version, box64Version, "0.3.4");
            final Spinner sBox64Preset = (Spinner) view.findViewById(R.id.SBox64Preset);
            loadBox64PresetSpinner(view, sBox64Preset);
            final CheckBox cbMoveCursorToTouchpoint = (CheckBox) view.findViewById(R.id.CBMoveCursorToTouchpoint);
            cbMoveCursorToTouchpoint.setChecked(this.preferences.getBoolean("move_cursor_to_touchpoint", false));
            final CheckBox cbCapturePointerOnExternalMouse = (CheckBox) view.findViewById(R.id.CBCapturePointerOnExternalMouse);
            cbCapturePointerOnExternalMouse.setChecked(this.preferences.getBoolean("capture_pointer_on_external_mouse", true));
            final CheckBox cbOpenAndroidBrowserFromWine = (CheckBox) view.findViewById(R.id.CBOpenAndroidBrowserFromWine);
            cbOpenAndroidBrowserFromWine.setChecked(this.preferences.getBoolean("open_android_browser_from_wine", true));
            final CheckBox cbUseAndroidClipboardOnWine = (CheckBox) view.findViewById(R.id.CBUseAndroidClipboardOnWine);
            cbUseAndroidClipboardOnWine.setChecked(this.preferences.getBoolean("use_android_clipboard_on_wine", false));
            final CheckBox cbEnableWineDebug = (CheckBox) view.findViewById(R.id.CBEnableWineDebug);
            cbEnableWineDebug.setChecked(this.preferences.getBoolean("enable_wine_debug", false));
            final ArrayList<String> wineDebugChannels = new ArrayList<>(Arrays.asList(this.preferences.getString("wine_debug_channels", "warn,err,fixme").split(",")));
            loadWineDebugChannels(view, wineDebugChannels);
            final Spinner sBox64Logs = (Spinner) view.findViewById(R.id.SBox64Logs);
            sBox64Logs.setSelection(this.preferences.getInt("box64_logs", 0));
            final CheckBox cbSaveLogsToFile = (CheckBox) view.findViewById(R.id.CBSaveLogsToFile);
            cbSaveLogsToFile.setChecked(this.preferences.getBoolean("save_logs_to_file", false));
            final EditText etLogFile = (EditText) view.findViewById(R.id.ETLogFile);
            final String defaultLogPath = LogView.getLogFile().getPath();
            etLogFile.setText(this.preferences.getString("log_file", defaultLogPath));
            etLogFile.setVisibility(cbSaveLogsToFile.isChecked() ? 0 : 8);
            cbSaveLogsToFile.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda11
                @Override // android.widget.CompoundButton.OnCheckedChangeListener
                public final void onCheckedChanged(CompoundButton compoundButton, boolean z) {
                    SettingsFragment.lambda$onCreateView$0(etLogFile, compoundButton, z);
                }
            });
            final SeekBar sbCursorSpeed = (SeekBar) view.findViewById(R.id.SBCursorSpeed);
            sbCursorSpeed.setValue(this.preferences.getFloat("cursor_speed", 1.0f) * 100.0f);
            final SeekBar sbCursorSize = (SeekBar) view.findViewById(R.id.SBCursorSize);
            sbCursorSize.setValue(this.preferences.getFloat("cursor_scale", 1.0f) * 100.0f);
            final ColorPickerView cpvCursorColor = (ColorPickerView) view.findViewById(R.id.CPVCursorColor);
            cpvCursorColor.setPalette(16777215, 0, 6627327, 16771584, 16748800, 16056407, 45311, 1960374);
            cpvCursorColor.setColor(this.preferences.getInt("cursor_color", 16777215));
            final Spinner sPreferredInputApi = (Spinner) view.findViewById(R.id.SPreferredInputApi);
            sPreferredInputApi.setSelection(this.preferences.getInt("preferred_input_api", WinHandler.PreferredInputApi.BOTH.ordinal()));
            Spinner sWineVersion = (Spinner) view.findViewById(R.id.SWineVersion);
            lambda$loadWineVersionSpinner$12(view, sWineVersion);
            view.findViewById(R.id.BTReinstallSystemFiles).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda5
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    SettingsFragment.this.lambda$onCreateView$2(context, view2);
                }
            });
            view.findViewById(R.id.BTConfirm).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda7
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    SettingsFragment.this.lambda$onCreateView$3(sBox64Version, sBox64Preset, cbMoveCursorToTouchpoint, cbCapturePointerOnExternalMouse, sbCursorSpeed, sbCursorSize, cpvCursorColor, cbEnableWineDebug, sBox64Logs, cbSaveLogsToFile, sPreferredInputApi, cbOpenAndroidBrowserFromWine, cbUseAndroidClipboardOnWine, etLogFile, defaultLogPath, wineDebugChannels, view2);
                }
            });
            return view;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$onCreateView$0(EditText etLogFile, CompoundButton buttonView, boolean isChecked) {
            etLogFile.setVisibility(isChecked ? 0 : 8);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$1() {
            RootFSInstaller.install((MainActivity) getActivity());
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$2(Context context, View v) {
            ContentDialog.confirm(context, R.string.do_you_want_to_reinstall_system_files, new Runnable() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda20
                @Override // java.lang.Runnable
                public final void run() {
                    SettingsFragment.this.lambda$onCreateView$1();
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreateView$3(Spinner sBox64Version, Spinner sBox64Preset, CheckBox cbMoveCursorToTouchpoint, CheckBox cbCapturePointerOnExternalMouse, SeekBar sbCursorSpeed, SeekBar sbCursorSize, ColorPickerView cpvCursorColor, CheckBox cbEnableWineDebug, Spinner sBox64Logs, CheckBox cbSaveLogsToFile, Spinner sPreferredInputApi, CheckBox cbOpenAndroidBrowserFromWine, CheckBox cbUseAndroidClipboardOnWine, EditText etLogFile, String defaultLogPath, ArrayList wineDebugChannels, View v) {
            SharedPreferences.Editor editor = this.preferences.edit();
            editor.putString("box64_version", StringUtils.parseIdentifier(sBox64Version.getSelectedItem()));
            editor.putString("box64_preset", Box64PresetManager.getSpinnerSelectedId(sBox64Preset));
            editor.putBoolean("move_cursor_to_touchpoint", cbMoveCursorToTouchpoint.isChecked());
            editor.putBoolean("capture_pointer_on_external_mouse", cbCapturePointerOnExternalMouse.isChecked());
            editor.putFloat("cursor_speed", sbCursorSpeed.getValue() / 100.0f);
            editor.putFloat("cursor_scale", sbCursorSize.getValue() / 100.0f);
            editor.putInt("cursor_color", cpvCursorColor.getColor());
            editor.putBoolean("enable_wine_debug", cbEnableWineDebug.isChecked());
            editor.putInt("box64_logs", sBox64Logs.getSelectedItemPosition());
            editor.putBoolean("save_logs_to_file", cbSaveLogsToFile.isChecked());
            editor.putInt("preferred_input_api", sPreferredInputApi.getSelectedItemPosition());
            editor.putBoolean("open_android_browser_from_wine", cbOpenAndroidBrowserFromWine.isChecked());
            editor.putBoolean("use_android_clipboard_on_wine", cbUseAndroidClipboardOnWine.isChecked());
            String logPath = etLogFile.getText().toString().trim();
            if (!logPath.equals(defaultLogPath) && !logPath.isEmpty()) {
                editor.putString("log_file", logPath);
            } else {
                editor.remove("log_file");
            }
            if (wineDebugChannels.isEmpty()) {
                if (this.preferences.contains("wine_debug_channels")) {
                    editor.remove("wine_debug_channels");
                }
            } else {
                editor.putString("wine_debug_channels", String.join(",", wineDebugChannels));
            }
            if (editor.commit()) {
                NavigationView navigationView = (NavigationView) getActivity().findViewById(R.id.NavigationView);
                navigationView.setCheckedItem(R.id.menu_item_containers);
                FragmentManager fragmentManager = getParentFragmentManager();
                fragmentManager.beginTransaction().replace(R.id.FLFragmentContainer, new ContainersFragment()).commit();
            }
        }
    
        private void loadBox64PresetSpinner(View view, final Spinner sBox64Preset) {
            final Context context = getContext();
            final Runnable updateSpinner = new Runnable() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda22
                @Override // java.lang.Runnable
                public final void run() {
                    SettingsFragment.this.lambda$loadBox64PresetSpinner$4(sBox64Preset);
                }
            };
            updateSpinner.run();
            view.findViewById(R.id.BTAddBox64Preset).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda2
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    SettingsFragment.lambda$loadBox64PresetSpinner$5(context, updateSpinner, view2);
                }
            });
            view.findViewById(R.id.BTEditBox64Preset).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda1
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    SettingsFragment.lambda$loadBox64PresetSpinner$6(context, sBox64Preset, updateSpinner, view2);
                }
            });
            view.findViewById(R.id.BTDuplicateBox64Preset).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    SettingsFragment.lambda$loadBox64PresetSpinner$7(context, sBox64Preset, updateSpinner, view2);
                }
            });
            view.findViewById(R.id.BTRemoveBox64Preset).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda3
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    SettingsFragment.lambda$loadBox64PresetSpinner$9(sBox64Preset, context, updateSpinner, view2);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadBox64PresetSpinner$4(Spinner sBox64Preset) {
            Box64PresetManager.loadSpinner(sBox64Preset, this.preferences.getString("box64_preset", "INTERMEDIATE"));
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$loadBox64PresetSpinner$5(Context context, Runnable updateSpinner, View v) {
            Box64EditPresetDialog dialog = new Box64EditPresetDialog(context, null);
            dialog.setOnConfirmCallback(updateSpinner);
            dialog.show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$loadBox64PresetSpinner$6(Context context, Spinner sBox64Preset, Runnable updateSpinner, View v) {
            Box64EditPresetDialog dialog = new Box64EditPresetDialog(context, Box64PresetManager.getSpinnerSelectedId(sBox64Preset));
            dialog.setOnConfirmCallback(updateSpinner);
            dialog.show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$loadBox64PresetSpinner$7(Context context, Spinner sBox64Preset, Runnable updateSpinner, View v) {
            Box64PresetManager.duplicatePreset(context, Box64PresetManager.getSpinnerSelectedId(sBox64Preset));
            updateSpinner.run();
            sBox64Preset.setSelection(sBox64Preset.getCount() - 1);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$loadBox64PresetSpinner$9(Spinner sBox64Preset, final Context context, final Runnable updateSpinner, View v) {
            final String presetId = Box64PresetManager.getSpinnerSelectedId(sBox64Preset);
            if (!presetId.startsWith("CUSTOM")) {
                AppUtils.showToast(context, R.string.you_cannot_remove_this_preset);
            } else {
                ContentDialog.confirm(context, R.string.do_you_want_to_remove_this_preset, new Runnable() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda17
                    @Override // java.lang.Runnable
                    public final void run() {
                        SettingsFragment.lambda$loadBox64PresetSpinner$8(context, presetId, updateSpinner);
                    }
                });
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$loadBox64PresetSpinner$8(Context context, String presetId, Runnable updateSpinner) {
            Box64PresetManager.removePreset(context, presetId);
            updateSpinner.run();
        }
    
        private void removeInstalledWine(WineInfo wineInfo, final Runnable onSuccess) {
            final Activity activity = getActivity();
            ContainerManager manager = new ContainerManager(activity);
            ArrayList<Container> containers = manager.getContainers();
            Iterator<Container> it = containers.iterator();
            while (it.hasNext()) {
                Container container = it.next();
                if (container.getWineVersion().equals(wineInfo.identifier())) {
                    AppUtils.showToast(activity, R.string.unable_to_remove_this_wine_version);
                    return;
                }
            }
            File installedWineDir = RootFS.find(activity).getInstalledWineDir();
            final File wineDir = new File(wineInfo.path);
            final File containerPatternFile = new File(installedWineDir, "container-pattern-" + wineInfo.fullVersion() + ".tzst");
            if (!wineDir.isDirectory() || !containerPatternFile.isFile()) {
                AppUtils.showToast(activity, R.string.unable_to_remove_this_wine_version);
            } else {
                this.preloaderDialog.lambda$showOnUiThread$0(R.string.removing_wine);
                Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda26
                    @Override // java.lang.Runnable
                    public final void run() {
                        SettingsFragment.this.lambda$removeInstalledWine$10(wineDir, containerPatternFile, onSuccess, activity);
                    }
                });
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$removeInstalledWine$10(File wineDir, File containerPatternFile, Runnable onSuccess, Activity activity) {
            FileUtils.delete(wineDir);
            FileUtils.delete(containerPatternFile);
            this.preloaderDialog.closeOnUiThread();
            if (onSuccess != null) {
                activity.runOnUiThread(onSuccess);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        /* renamed from: loadWineVersionSpinner, reason: merged with bridge method [inline-methods] */
        public void lambda$loadWineVersionSpinner$12(final View view, final Spinner sWineVersion) {
            final Context context = getContext();
            final ArrayList<WineInfo> wineInfos = WineUtils.getInstalledWineInfos(context);
            sWineVersion.setAdapter((SpinnerAdapter) new ArrayAdapter(context, R.layout.simple_spinner_dropdown_item, wineInfos));
            view.findViewById(R.id.BTInstallWine).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda4
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    SettingsFragment.this.lambda$loadWineVersionSpinner$11(context, view2);
                }
            });
            view.findViewById(R.id.BTRemoveWine).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda10
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    SettingsFragment.this.lambda$loadWineVersionSpinner$14(wineInfos, sWineVersion, view, view2);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadWineVersionSpinner$11(Context context, View v) {
            ContentDialog.alert(context, R.string.msg_warning_install_wine, new Runnable() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda19
                @Override // java.lang.Runnable
                public final void run() {
                    SettingsFragment.this.selectWineFileForInstall();
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadWineVersionSpinner$14(ArrayList wineInfos, final Spinner sWineVersion, final View view, View v) {
            final WineInfo wineInfo = (WineInfo) wineInfos.get(sWineVersion.getSelectedItemPosition());
            if (wineInfo != WineInfo.MAIN_WINE_INFO) {
                ContentDialog.confirm(getContext(), R.string.do_you_want_to_remove_this_wine_version, new Runnable() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda25
                    @Override // java.lang.Runnable
                    public final void run() {
                        SettingsFragment.this.lambda$loadWineVersionSpinner$13(wineInfo, view, sWineVersion);
                    }
                });
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadWineVersionSpinner$13(WineInfo wineInfo, final View view, final Spinner sWineVersion) {
            removeInstalledWine(wineInfo, new Runnable() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda21
                @Override // java.lang.Runnable
                public final void run() {
                    SettingsFragment.this.lambda$loadWineVersionSpinner$12(view, sWineVersion);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void selectWineFileForInstall() {
            final Context context = getContext();
            this.selectWineFileCallback = new Callback() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda12
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    SettingsFragment.this.lambda$selectWineFileForInstall$18(context, (Uri) obj);
                }
            };
            Intent intent = new Intent("android.intent.action.OPEN_DOCUMENT");
            intent.addCategory("android.intent.category.OPENABLE");
            intent.setType("*/*");
            getActivity().startActivityFromFragment(this, intent, 2);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$selectWineFileForInstall$18(final Context context, Uri uri) {
            this.preloaderDialog.lambda$showOnUiThread$0(R.string.preparing_installation);
            WineUtils.extractWineFileForInstallAsync(context, uri, new Callback() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda14
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    SettingsFragment.this.lambda$selectWineFileForInstall$17(context, (File) obj);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$selectWineFileForInstall$17(final Context context, File wineDir) {
            if (wineDir != null) {
                WineUtils.findWineVersionAsync(context, wineDir, new Callback() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda13
                    @Override // com.winlator.core.Callback
                    public final void call(Object obj) {
                        SettingsFragment.this.lambda$selectWineFileForInstall$16(context, (WineInfo) obj);
                    }
                });
            } else {
                AppUtils.showToast(context, R.string.unable_to_install_wine);
                this.preloaderDialog.closeOnUiThread();
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$selectWineFileForInstall$16(Context context, final WineInfo wineInfo) {
            this.preloaderDialog.closeOnUiThread();
            if (wineInfo == null) {
                AppUtils.showToast(context, R.string.unable_to_install_wine);
            } else {
                getActivity().runOnUiThread(new Runnable() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda23
                    @Override // java.lang.Runnable
                    public final void run() {
                        SettingsFragment.this.lambda$selectWineFileForInstall$15(wineInfo);
                    }
                });
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        /* renamed from: installWine, reason: merged with bridge method [inline-methods] */
        public void lambda$showWineInstallDialog$21(WineInfo wineInfo) {
            Context context = getContext();
            File installedWineDir = RootFS.find(context).getInstalledWineDir();
            File wineDir = new File(installedWineDir, wineInfo.identifier());
            if (wineDir.isDirectory()) {
                AppUtils.showToast(context, R.string.unable_to_install_wine);
                return;
            }
            Intent intent = new Intent(context, (Class<?>) XServerDisplayActivity.class);
            intent.putExtra("generate_wineprefix", true);
            intent.putExtra("wine_info", wineInfo);
            context.startActivity(intent);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        /* renamed from: showWineInstallDialog, reason: merged with bridge method [inline-methods] */
        public void lambda$selectWineFileForInstall$15(final WineInfo wineInfo) {
            String str;
            Context context = getContext();
            ContentDialog dialog = new ContentDialog(context, R.layout.wine_install_dialog);
            dialog.setCancelable(false);
            dialog.setCanceledOnTouchOutside(false);
            dialog.setTitle(R.string.install_wine);
            dialog.setIcon(R.drawable.icon_wine);
            EditText etVersion = (EditText) dialog.findViewById(R.id.ETVersion);
            StringBuilder sb = new StringBuilder();
            sb.append("Wine ");
            sb.append(wineInfo.version);
            if (wineInfo.subversion != null) {
                str = " (" + wineInfo.subversion + ")";
            } else {
                str = "";
            }
            sb.append(str);
            etVersion.setText(sb.toString());
            final EditText etSize = (EditText) dialog.findViewById(R.id.ETSize);
            final AtomicLong totalSizeRef = new AtomicLong();
            FileUtils.getSizeAsync(new File(wineInfo.path), new Callback() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda16
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    SettingsFragment.lambda$showWineInstallDialog$20(totalSizeRef, etSize, (Long) obj);
                }
            });
            dialog.setOnConfirmCallback(new Runnable() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda24
                @Override // java.lang.Runnable
                public final void run() {
                    SettingsFragment.this.lambda$showWineInstallDialog$21(wineInfo);
                }
            });
            dialog.show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$showWineInstallDialog$20(final AtomicLong totalSizeRef, final EditText etSize, Long size) {
            totalSizeRef.addAndGet(size.longValue());
            etSize.post(new Runnable() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda18
                @Override // java.lang.Runnable
                public final void run() {
                    SettingsFragment.lambda$showWineInstallDialog$19(etSize, totalSizeRef);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$showWineInstallDialog$19(EditText etSize, AtomicLong totalSizeRef) {
            etSize.setText(StringUtils.formatBytes(totalSizeRef.get()));
        }
    
        private void loadWineDebugChannels(final View view, final ArrayList<String> debugChannels) {
            final Context context = getContext();
            LinearLayout container = (LinearLayout) view.findViewById(R.id.LLWineDebugChannels);
            container.removeAllViews();
            LayoutInflater inflater = LayoutInflater.from(context);
            int i = R.layout.wine_debug_channel_list_item;
            boolean z = false;
            View itemView = inflater.inflate(R.layout.wine_debug_channel_list_item, (ViewGroup) container, false);
            itemView.findViewById(R.id.TextView).setVisibility(8);
            itemView.findViewById(R.id.BTRemove).setVisibility(8);
            View addButton = itemView.findViewById(R.id.BTAdd);
            addButton.setVisibility(0);
            addButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda6
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    SettingsFragment.this.lambda$loadWineDebugChannels$23(context, debugChannels, view, view2);
                }
            });
            View resetButton = itemView.findViewById(R.id.BTReset);
            resetButton.setVisibility(0);
            resetButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda9
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    SettingsFragment.this.lambda$loadWineDebugChannels$24(debugChannels, view, view2);
                }
            });
            container.addView(itemView);
            int i2 = 0;
            while (i2 < debugChannels.size()) {
                View itemView2 = inflater.inflate(i, container, z);
                TextView textView = (TextView) itemView2.findViewById(R.id.TextView);
                textView.setText(debugChannels.get(i2));
                final int index = i2;
                itemView2.findViewById(R.id.BTRemove).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda8
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view2) {
                        SettingsFragment.this.lambda$loadWineDebugChannels$25(debugChannels, index, view, view2);
                    }
                });
                container.addView(itemView2);
                i2++;
                i = R.layout.wine_debug_channel_list_item;
                z = false;
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadWineDebugChannels$23(Context context, final ArrayList debugChannels, final View view, View v) {
            JSONArray jsonArray = null;
            try {
                jsonArray = new JSONArray(FileUtils.readString(context, "wine_debug_channels.json"));
            } catch (JSONException e) {
            }
            final String[] items = ArrayUtils.toStringArray(jsonArray);
            ContentDialog.showSelectionList(context, R.string.wine_debug_channel, items, true, (Callback<ArrayList<Integer>>) new Callback() { // from class: com.winlator.SettingsFragment$$ExternalSyntheticLambda15
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    SettingsFragment.this.lambda$loadWineDebugChannels$22(debugChannels, items, view, (ArrayList) obj);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadWineDebugChannels$22(ArrayList debugChannels, String[] items, View view, ArrayList selectedPositions) {
            Iterator it = selectedPositions.iterator();
            while (it.hasNext()) {
                int selectedPosition = ((Integer) it.next()).intValue();
                if (!debugChannels.contains(items[selectedPosition])) {
                    debugChannels.add(items[selectedPosition]);
                }
            }
            loadWineDebugChannels(view, debugChannels);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadWineDebugChannels$24(ArrayList debugChannels, View view, View v) {
            debugChannels.clear();
            debugChannels.addAll(Arrays.asList("warn,err,fixme".split(",")));
            loadWineDebugChannels(view, debugChannels);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadWineDebugChannels$25(ArrayList debugChannels, int index, View view, View v) {
            debugChannels.remove(index);
            loadWineDebugChannels(view, debugChannels);
        }
    
        public static void resetBox64Version(AppCompatActivity activity) {
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(activity);
            SharedPreferences.Editor editor = preferences.edit();
            editor.putString("box64_version", "0.3.4");
            editor.remove("current_box64_version");
            editor.apply();
        }
    }
  + app/src/main/java/com/winlator/ShortcutsFragment.java
    package com.winlator;
    
    import android.content.Context;
    import android.content.Intent;
    import android.os.Build;
    import android.os.Bundle;
    import android.view.LayoutInflater;
    import android.view.Menu;
    import android.view.MenuInflater;
    import android.view.MenuItem;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.ImageView;
    import android.widget.PopupMenu;
    import android.widget.TextView;
    import androidx.appcompat.app.ActionBar;
    import androidx.appcompat.app.AppCompatActivity;
    import androidx.recyclerview.widget.RecyclerView;
    import com.winlator.BaseFileManagerFragment;
    import com.winlator.ShortcutsFragment;
    import com.winlator.container.Container;
    import com.winlator.container.Shortcut;
    import com.winlator.contentdialog.CreateFolderDialog;
    import com.winlator.core.AppUtils;
    import com.winlator.core.ArrayUtils;
    import java.io.File;
    import java.util.ArrayList;
    import java.util.List;
    
    /* loaded from: classes.dex */
    public class ShortcutsFragment extends BaseFileManagerFragment<Shortcut> {
        @Override // com.winlator.BaseFileManagerFragment, androidx.fragment.app.Fragment
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            this.viewStyle = BaseFileManagerFragment.ViewStyle.valueOf(this.preferences.getString("shortcuts_view_style", "GRID"));
        }
    
        @Override // com.winlator.BaseFileManagerFragment
        public void refreshContent() {
            super.refreshContent();
            Shortcut selectedFolder = !this.folderStack.isEmpty() ? (Shortcut) this.folderStack.peek() : null;
            ArrayList<Shortcut> shortcuts = this.manager.loadShortcuts(selectedFolder);
            this.recyclerView.setAdapter(new ShortcutsAdapter(shortcuts));
            this.emptyTextView.setVisibility(shortcuts.isEmpty() ? 0 : 8);
        }
    
        @Override // androidx.fragment.app.Fragment
        public void onCreateOptionsMenu(Menu menu, MenuInflater menuInflater) {
            menuInflater.inflate(R.menu.shortcuts_menu, menu);
            refreshViewStyleMenuItem(menu.findItem(R.id.menu_item_view_style));
        }
    
        private void createFolder() {
            clearClipboard();
            if (this.manager.getContainers().isEmpty()) {
                return;
            }
            final Context context = getContext();
            CreateFolderDialog createFolderDialog = new CreateFolderDialog(this.manager);
            createFolderDialog.setOnCreateFolderListener(new CreateFolderDialog.OnCreateFolderListener() { // from class: com.winlator.ShortcutsFragment$$ExternalSyntheticLambda0
                @Override // com.winlator.contentdialog.CreateFolderDialog.OnCreateFolderListener
                public final void onCreateFolder(Container container, String str) {
                    ShortcutsFragment.this.lambda$createFolder$0(context, container, str);
                }
            });
            createFolderDialog.show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$createFolder$0(Context context, Container container, String name) {
            File desktopDir = new File(container.getUserDir(), context.getString(R.string.desktop));
            File parent = !this.folderStack.isEmpty() ? ((Shortcut) this.folderStack.peek()).file : desktopDir;
            File file = new File(parent, name);
            if (file.isDirectory()) {
                AppUtils.showToast(getContext(), R.string.there_already_file_with_that_name);
            } else {
                file.mkdir();
                refreshContent();
            }
        }
    
        @Override // com.winlator.BaseFileManagerFragment
        protected void pasteFiles() {
            if (this.folderStack.isEmpty()) {
                clearClipboard();
                AppUtils.showToast(getContext(), R.string.you_cannot_paste_files_here);
            } else {
                this.clipboard.targetDir = ((Shortcut) this.folderStack.peek()).file;
                super.pasteFiles();
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void instantiateClipboard(Shortcut shortcut, boolean cutMode) {
            clearClipboard();
            File linkFile = shortcut.getLinkFile();
            File[] files = {new File(shortcut.file.getParentFile(), shortcut.file.getName())};
            if (shortcut.file.isFile()) {
                files = (File[]) ArrayUtils.concat(files, new File[]{new File(linkFile.getParentFile(), linkFile.getName())});
            }
            this.clipboard = new BaseFileManagerFragment.Clipboard(files, cutMode);
            this.pasteButton.setVisibility(0);
        }
    
        @Override // androidx.fragment.app.Fragment
        public boolean onOptionsItemSelected(MenuItem menuItem) {
            int itemId = menuItem.getItemId();
            if (itemId == R.id.menu_item_view_style) {
                BaseFileManagerFragment.ViewStyle viewStyle = this.viewStyle;
                BaseFileManagerFragment.ViewStyle viewStyle2 = BaseFileManagerFragment.ViewStyle.GRID;
                if (viewStyle == viewStyle2) {
                    viewStyle2 = BaseFileManagerFragment.ViewStyle.LIST;
                }
                setViewStyle(viewStyle2);
                this.preferences.edit().putString("shortcuts_view_style", this.viewStyle.name()).apply();
                refreshViewStyleMenuItem(menuItem);
                return true;
            }
            if (itemId == R.id.menu_item_new_folder) {
                createFolder();
                return true;
            }
            return super.onOptionsItemSelected(menuItem);
        }
    
        @Override // com.winlator.BaseFileManagerFragment
        protected String getHomeTitle() {
            return getString(R.string.shortcuts);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        class ShortcutsAdapter extends RecyclerView.Adapter<ViewHolder> {
            private final List<Shortcut> data;
    
            private class ViewHolder extends RecyclerView.ViewHolder {
                private final ImageView imageView;
                private final ImageView menuButton;
                private final ImageView runButton;
                private final TextView subtitle;
                private final TextView title;
    
                private ViewHolder(View view) {
                    super(view);
                    this.imageView = (ImageView) view.findViewById(R.id.ImageView);
                    this.title = (TextView) view.findViewById(R.id.TVTitle);
                    this.subtitle = (TextView) view.findViewById(R.id.TVSubtitle);
                    this.runButton = (ImageView) view.findViewById(R.id.BTRun);
                    this.menuButton = (ImageView) view.findViewById(R.id.BTMenu);
                }
            }
    
            public ShortcutsAdapter(List<Shortcut> data) {
                this.data = data;
            }
    
            @Override // androidx.recyclerview.widget.RecyclerView.Adapter
            public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
                int resource = ShortcutsFragment.this.viewStyle == BaseFileManagerFragment.ViewStyle.LIST ? R.layout.file_list_item : R.layout.file_grid_item;
                return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(resource, parent, false));
            }
    
            @Override // androidx.recyclerview.widget.RecyclerView.Adapter
            public void onBindViewHolder(ViewHolder holder, int position) {
                final Shortcut item = this.data.get(position);
                if (item.icon != null) {
                    holder.imageView.setImageBitmap(item.icon);
                } else {
                    int iconResId = item.file.isDirectory() ? R.drawable.container_folder : R.drawable.container_file_link;
                    holder.imageView.setImageResource(iconResId);
                }
                holder.title.setText(item.name);
                holder.subtitle.setText(item.container.getName());
                if (item.file.isDirectory()) {
                    holder.runButton.setImageResource(R.drawable.icon_open);
                } else {
                    holder.runButton.setImageResource(R.drawable.icon_run);
                }
                holder.imageView.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ShortcutsFragment$ShortcutsAdapter$$ExternalSyntheticLambda1
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ShortcutsFragment.ShortcutsAdapter.this.lambda$onBindViewHolder$0(item, view);
                    }
                });
                holder.runButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ShortcutsFragment$ShortcutsAdapter$$ExternalSyntheticLambda2
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ShortcutsFragment.ShortcutsAdapter.this.lambda$onBindViewHolder$1(item, view);
                    }
                });
                holder.menuButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.ShortcutsFragment$ShortcutsAdapter$$ExternalSyntheticLambda0
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ShortcutsFragment.ShortcutsAdapter.this.lambda$onBindViewHolder$2(item, view);
                    }
                });
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$onBindViewHolder$0(Shortcut item, View v) {
                runFromShortcut(item);
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$onBindViewHolder$1(Shortcut item, View v) {
                runFromShortcut(item);
            }
    
            @Override // androidx.recyclerview.widget.RecyclerView.Adapter
            public final int getItemCount() {
                return this.data.size();
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            /* renamed from: showListItemMenu, reason: merged with bridge method [inline-methods] */
            public void lambda$onBindViewHolder$2(View anchorView, final Shortcut shortcut) {
                final Context context = ShortcutsFragment.this.getContext();
                PopupMenu listItemMenu = new PopupMenu(context, anchorView);
                if (Build.VERSION.SDK_INT >= 29) {
                    listItemMenu.setForceShowIcon(true);
                }
                listItemMenu.inflate(R.menu.file_manager_popup_menu);
                Menu menu = listItemMenu.getMenu();
                menu.findItem(R.id.menu_item_rename).setVisible(false);
                menu.findItem(R.id.menu_item_add_favorite).setVisible(false);
                menu.findItem(R.id.menu_item_info).setVisible(false);
                listItemMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() { // from class: com.winlator.ShortcutsFragment$ShortcutsAdapter$$ExternalSyntheticLambda3
                    @Override // android.widget.PopupMenu.OnMenuItemClickListener
                    public final boolean onMenuItemClick(MenuItem menuItem) {
                        boolean lambda$showListItemMenu$4;
                        lambda$showListItemMenu$4 = ShortcutsFragment.ShortcutsAdapter.this.lambda$showListItemMenu$4(shortcut, context, menuItem);
                        return lambda$showListItemMenu$4;
                    }
                });
                listItemMenu.show();
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
            /* JADX WARN: Code restructure failed: missing block: B:10:0x0038, code lost:
    
                return true;
             */
            /*
                Code decompiled incorrectly, please refer to instructions dump.
                To view partially-correct add '--show-bad-code' argument
            */
            public /* synthetic */ boolean lambda$showListItemMenu$4(final com.winlator.container.Shortcut r5, android.content.Context r6, android.view.MenuItem r7) {
                /*
                    r4 = this;
                    int r0 = r7.getItemId()
                    r1 = 1
                    switch(r0) {
                        case 2131296689: goto L2a;
                        case 2131296690: goto L2a;
                        case 2131296710: goto L19;
                        case 2131296713: goto L9;
                        default: goto L8;
                    }
                L8:
                    goto L38
                L9:
                    com.winlator.ShortcutsFragment r2 = com.winlator.ShortcutsFragment.this
                    r2.clearClipboard()
                    com.winlator.contentdialog.ShortcutSettingsDialog r2 = new com.winlator.contentdialog.ShortcutSettingsDialog
                    com.winlator.ShortcutsFragment r3 = com.winlator.ShortcutsFragment.this
                    r2.<init>(r3, r5)
                    r2.show()
                    goto L38
                L19:
                    com.winlator.ShortcutsFragment r2 = com.winlator.ShortcutsFragment.this
                    r2.clearClipboard()
                    r2 = 2131755127(0x7f100077, float:1.9141124E38)
                    com.winlator.ShortcutsFragment$ShortcutsAdapter$$ExternalSyntheticLambda4 r3 = new com.winlator.ShortcutsFragment$ShortcutsAdapter$$ExternalSyntheticLambda4
                    r3.<init>()
                    com.winlator.contentdialog.ContentDialog.confirm(r6, r2, r3)
                    goto L38
                L2a:
                    com.winlator.ShortcutsFragment r2 = com.winlator.ShortcutsFragment.this
                    r3 = 2131296690(0x7f0901b2, float:1.8211304E38)
                    if (r0 != r3) goto L33
                    r3 = r1
                    goto L34
                L33:
                    r3 = 0
                L34:
                    com.winlator.ShortcutsFragment.access$600(r2, r5, r3)
                L38:
                    return r1
                */
                throw new UnsupportedOperationException("Method not decompiled: com.winlator.ShortcutsFragment.ShortcutsAdapter.lambda$showListItemMenu$4(com.winlator.container.Shortcut, android.content.Context, android.view.MenuItem):boolean");
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$showListItemMenu$3(Shortcut shortcut) {
                shortcut.remove();
                ShortcutsFragment.this.refreshContent();
            }
    
            private void runFromShortcut(Shortcut shortcut) {
                AppCompatActivity activity = (AppCompatActivity) ShortcutsFragment.this.getActivity();
                if (shortcut.file.isDirectory()) {
                    ShortcutsFragment.this.folderStack.push(shortcut);
                    ShortcutsFragment.this.refreshContent();
                    ActionBar actionBar = activity.getSupportActionBar();
                    actionBar.setHomeAsUpIndicator(R.drawable.icon_action_bar_back);
                    actionBar.setTitle(shortcut.name);
                    return;
                }
                Intent intent = new Intent(activity, (Class<?>) XServerDisplayActivity.class);
                intent.putExtra("container_id", shortcut.container.id);
                intent.putExtra("shortcut_path", shortcut.file.getPath());
                activity.startActivity(intent);
            }
        }
    }
  + app/src/main/java/com/winlator/XServerDisplayActivity.java
    package com.winlator;
    
    import android.R;
    import android.content.ClipData;
    import android.content.ClipboardManager;
    import android.content.Intent;
    import android.content.SharedPreferences;
    import android.os.Bundle;
    import android.view.KeyEvent;
    import android.view.Menu;
    import android.view.MenuItem;
    import android.view.MotionEvent;
    import android.view.View;
    import android.view.WindowInsets;
    import android.widget.ArrayAdapter;
    import android.widget.CheckBox;
    import android.widget.FrameLayout;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import androidx.appcompat.app.AppCompatActivity;
    import androidx.drawerlayout.widget.DrawerLayout;
    import androidx.preference.PreferenceManager;
    import com.google.android.material.navigation.NavigationView;
    import com.winlator.alsaserver.ALSAClient;
    import com.winlator.container.Container;
    import com.winlator.container.ContainerManager;
    import com.winlator.container.Shortcut;
    import com.winlator.contentdialog.ContentDialog;
    import com.winlator.contentdialog.DXVKConfigDialog;
    import com.winlator.contentdialog.DebugDialog;
    import com.winlator.contentdialog.ScreenEffectDialog;
    import com.winlator.contentdialog.TurnipConfigDialog;
    import com.winlator.contentdialog.VKD3DConfigDialog;
    import com.winlator.contentdialog.VirGLConfigDialog;
    import com.winlator.contentdialog.WineD3DConfigDialog;
    import com.winlator.core.AppUtils;
    import com.winlator.core.Callback;
    import com.winlator.core.DefaultVersion;
    import com.winlator.core.EnvVars;
    import com.winlator.core.FileUtils;
    import com.winlator.core.InstallableComponents;
    import com.winlator.core.KeyValueSet;
    import com.winlator.core.PreloaderDialog;
    import com.winlator.core.ProcessHelper;
    import com.winlator.core.StringUtils;
    import com.winlator.core.TarCompressorUtils;
    import com.winlator.core.Win32AppWorkarounds;
    import com.winlator.core.WineInfo;
    import com.winlator.core.WineRegistryEditor;
    import com.winlator.core.WineStartMenuCreator;
    import com.winlator.core.WineThemeManager;
    import com.winlator.core.WineUtils;
    import com.winlator.inputcontrols.ControlsProfile;
    import com.winlator.inputcontrols.ExternalController;
    import com.winlator.inputcontrols.InputControlsManager;
    import com.winlator.math.Mathf;
    import com.winlator.renderer.GLRenderer;
    import com.winlator.widget.FrameRating;
    import com.winlator.widget.InputControlsView;
    import com.winlator.widget.MagnifierView;
    import com.winlator.widget.TouchpadView;
    import com.winlator.widget.XServerView;
    import com.winlator.winhandler.TaskManagerDialog;
    import com.winlator.winhandler.WinHandler;
    import com.winlator.xconnector.UnixSocketConfig;
    import com.winlator.xenvironment.RootFS;
    import com.winlator.xenvironment.XEnvironment;
    import com.winlator.xenvironment.components.ALSAServerComponent;
    import com.winlator.xenvironment.components.GuestProgramLauncherComponent;
    import com.winlator.xenvironment.components.NetworkInfoUpdateComponent;
    import com.winlator.xenvironment.components.PulseAudioComponent;
    import com.winlator.xenvironment.components.SysVSharedMemoryComponent;
    import com.winlator.xenvironment.components.VirGLRendererComponent;
    import com.winlator.xenvironment.components.VortekRendererComponent;
    import com.winlator.xenvironment.components.XServerComponent;
    import com.winlator.xserver.ScreenInfo;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.WindowManager;
    import com.winlator.xserver.XServer;
    import java.io.File;
    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.Objects;
    import java.util.concurrent.Executors;
    import org.json.JSONArray;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public class XServerDisplayActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {
        private KeyValueSet audioDriverConfig;
        private ClipboardManager clipboardManager;
        private Container container;
        private DebugDialog debugDialog;
        private DrawerLayout drawerLayout;
        private KeyValueSet dxwrapperConfig;
        private Runnable editInputControlsCallback;
        private XEnvironment environment;
        private FrameRating frameRating;
        private KeyValueSet graphicsDriverConfig;
        private InputControlsManager inputControlsManager;
        private InputControlsView inputControlsView;
        private MagnifierView magnifierView;
        private EnvVars overrideEnvVars;
        private SharedPreferences preferences;
        private RootFS rootFS;
        private String screenEffectProfile;
        private Shortcut shortcut;
        private TouchpadView touchpadView;
        private Win32AppWorkarounds win32AppWorkarounds;
        private String wincomponents;
        private WineInfo wineInfo;
        private XServer xServer;
        private XServerView xServerView;
        private String graphicsDriver = "vortek";
        private String audioDriver = "alsa";
        private String dxwrapper = "dxvk";
        private ScreenInfo screenInfo = new ScreenInfo("1280x720");
        private final EnvVars envVars = new EnvVars();
        private final WinHandler winHandler = new WinHandler(this);
        private float globalCursorSpeed = 1.0f;
        private boolean capturePointerOnExternalMouse = true;
        private int frameRatingWindowId = -1;
    
        @Override // androidx.appcompat.app.AppCompatActivity, androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            AppUtils.hideSystemUI(this);
            AppUtils.keepScreenOn(this);
            setContentView(R.layout.xserver_display_activity);
            final PreloaderDialog preloaderDialog = new PreloaderDialog(this);
            SharedPreferences defaultSharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
            this.preferences = defaultSharedPreferences;
            boolean useAndroidClipboardOnWine = defaultSharedPreferences.getBoolean("use_android_clipboard_on_wine", false);
            this.clipboardManager = useAndroidClipboardOnWine ? (ClipboardManager) getSystemService("clipboard") : null;
            DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.DrawerLayout);
            this.drawerLayout = drawerLayout;
            drawerLayout.setOnApplyWindowInsetsListener(new View.OnApplyWindowInsetsListener() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda0
                @Override // android.view.View.OnApplyWindowInsetsListener
                public final WindowInsets onApplyWindowInsets(View view, WindowInsets windowInsets) {
                    WindowInsets lambda$onCreate$0;
                    lambda$onCreate$0 = XServerDisplayActivity.lambda$onCreate$0(view, windowInsets);
                    return lambda$onCreate$0;
                }
            });
            this.drawerLayout.setDrawerLockMode(1);
            NavigationView navigationView = (NavigationView) findViewById(R.id.NavigationView);
            ProcessHelper.removeAllDebugCallbacks();
            boolean enableLogs = this.preferences.getBoolean("enable_wine_debug", false) || this.preferences.getInt("box64_logs", 0) >= 1;
            if (enableLogs) {
                DebugDialog debugDialog = new DebugDialog(this);
                this.debugDialog = debugDialog;
                ProcessHelper.addDebugCallback(debugDialog);
            }
            Menu menu = navigationView.getMenu();
            menu.findItem(R.id.menu_item_logs).setVisible(enableLogs);
            navigationView.setNavigationItemSelectedListener(this);
            this.rootFS = RootFS.find(this);
            if (!isGenerateWineprefix()) {
                ContainerManager containerManager = new ContainerManager(this);
                Container containerById = containerManager.getContainerById(getIntent().getIntExtra("container_id", 0));
                this.container = containerById;
                containerManager.activateContainer(containerById);
                boolean wineprefixNeedsUpdate = this.container.getExtra("wineprefixNeedsUpdate").equals("t");
                if (!wineprefixNeedsUpdate) {
                    this.win32AppWorkarounds = new Win32AppWorkarounds(this);
                    String wineVersion = this.container.getWineVersion();
                    WineInfo fromIdentifier = WineInfo.fromIdentifier(this, wineVersion);
                    this.wineInfo = fromIdentifier;
                    if (fromIdentifier != WineInfo.MAIN_WINE_INFO) {
                        this.rootFS.setWinePath(fromIdentifier.path);
                    }
                    String shortcutPath = getIntent().getStringExtra("shortcut_path");
                    if (shortcutPath != null && !shortcutPath.isEmpty()) {
                        this.shortcut = new Shortcut(this.container, new File(shortcutPath));
                    }
                    this.graphicsDriver = this.container.getGraphicsDriver();
                    this.audioDriver = this.container.getAudioDriver();
                    this.dxwrapper = this.container.getDXWrapper();
                    this.wincomponents = this.container.getWinComponents();
                    this.dxwrapperConfig = new KeyValueSet(this.container.getDXWrapperConfig());
                    this.graphicsDriverConfig = new KeyValueSet(this.container.getGraphicsDriverConfig());
                    this.audioDriverConfig = new KeyValueSet(this.container.getAudioDriverConfig());
                    this.screenInfo = new ScreenInfo(this.container.getScreenSize());
                    int preferredInputApiIdx = this.preferences.getInt("preferred_input_api", WinHandler.PreferredInputApi.BOTH.ordinal());
                    Shortcut shortcut = this.shortcut;
                    if (shortcut != null) {
                        this.graphicsDriver = shortcut.getExtra("graphicsDriver", this.container.getGraphicsDriver());
                        this.audioDriver = this.shortcut.getExtra("audioDriver", this.container.getAudioDriver());
                        this.dxwrapper = this.shortcut.getExtra("dxwrapper", this.container.getDXWrapper());
                        this.wincomponents = this.shortcut.getExtra("wincomponents", this.container.getWinComponents());
                        this.dxwrapperConfig = new KeyValueSet(this.shortcut.getExtra("dxwrapperConfig", this.container.getDXWrapperConfig()));
                        this.graphicsDriverConfig = new KeyValueSet(this.shortcut.getExtra("graphicsDriverConfig", this.container.getGraphicsDriverConfig()));
                        this.audioDriverConfig = new KeyValueSet(this.shortcut.getExtra("audioDriverConfig", this.container.getAudioDriverConfig()));
                        this.screenInfo = new ScreenInfo(this.shortcut.getExtra("screenSize", this.container.getScreenSize()));
                        String dinputMapperType = this.shortcut.getExtra("dinputMapperType");
                        if (!dinputMapperType.isEmpty()) {
                            this.winHandler.setDInputMapperType(Byte.parseByte(dinputMapperType));
                        }
                        String preferredInputApi = this.shortcut.getExtra("preferredInputApi");
                        if (!preferredInputApi.isEmpty()) {
                            preferredInputApiIdx = Byte.parseByte(preferredInputApi);
                        }
                        this.win32AppWorkarounds.applyStartupWorkarounds(this.shortcut.wmClass);
                    } else {
                        Intent intent = getIntent();
                        if (intent.hasExtra("exec_path")) {
                            this.win32AppWorkarounds.applyStartupWorkarounds(FileUtils.getName(intent.getStringExtra("exec_path")));
                        }
                    }
                    this.winHandler.setPreferredInputApi(WinHandler.PreferredInputApi.values()[preferredInputApiIdx]);
                } else {
                    preloaderDialog.lambda$showOnUiThread$0(R.string.updating_system_files);
                    WineUtils.updateWineprefix(this, new Callback() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda2
                        @Override // com.winlator.core.Callback
                        public final void call(Object obj) {
                            XServerDisplayActivity.this.lambda$onCreate$1((Integer) obj);
                        }
                    });
                    return;
                }
            }
            preloaderDialog.lambda$showOnUiThread$0(R.string.starting_up);
            this.inputControlsManager = new InputControlsManager(this);
            XServer xServer = new XServer(this, this.screenInfo);
            this.xServer = xServer;
            xServer.setWinHandler(this.winHandler);
            final boolean[] winStarted = {false};
            this.xServer.windowManager.addOnWindowModificationListener(new WindowManager.OnWindowModificationListener() { // from class: com.winlator.XServerDisplayActivity.1
                @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
                public void onUpdateWindowContent(Window window) {
                    if (!winStarted[0] && !window.getClassName().isEmpty() && window.getHeight() > 1) {
                        XServerDisplayActivity.this.xServerView.getRenderer().setCursorVisible(true);
                        preloaderDialog.closeOnUiThread();
                        winStarted[0] = true;
                    }
                    if (window.id == XServerDisplayActivity.this.frameRatingWindowId) {
                        XServerDisplayActivity.this.frameRating.update();
                    }
                }
    
                @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
                public void onMapWindow(Window window) {
                    if (XServerDisplayActivity.this.win32AppWorkarounds != null) {
                        XServerDisplayActivity.this.win32AppWorkarounds.applyWindowWorkarounds(window);
                    }
                    XServerDisplayActivity.this.changeFrameRatingVisibility(window, true);
                }
    
                @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
                public void onUnmapWindow(Window window) {
                    XServerDisplayActivity.this.changeFrameRatingVisibility(window, false);
                }
            });
            setupUI();
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda10
                @Override // java.lang.Runnable
                public final void run() {
                    XServerDisplayActivity.this.lambda$onCreate$2();
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ WindowInsets lambda$onCreate$0(View view, WindowInsets windowInsets) {
            return windowInsets.replaceSystemWindowInsets(0, 0, 0, 0);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreate$1(Integer status) {
            if (status.intValue() == 0) {
                this.container.putExtra("wineprefixNeedsUpdate", null);
                this.container.putExtra("wincomponents", null);
                this.container.saveData();
                AppUtils.restartActivity(this);
                return;
            }
            finish();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onCreate$2() {
            if (!isGenerateWineprefix()) {
                setupWineSystemFiles();
                extractGraphicsDriverFiles();
                changeWineAudioDriver();
            }
            setupXEnvironment();
        }
    
        @Override // androidx.fragment.app.FragmentActivity, android.app.Activity
        protected void onActivityResult(int requestCode, int resultCode, Intent data) {
            Runnable runnable;
            super.onActivityResult(requestCode, resultCode, data);
            if (requestCode == 3 && resultCode == -1 && (runnable = this.editInputControlsCallback) != null) {
                runnable.run();
                this.editInputControlsCallback = null;
            }
        }
    
        @Override // android.app.Activity, android.view.Window.Callback
        public void onWindowFocusChanged(boolean hasFocus) {
            ClipboardManager clipboardManager;
            ClipData primaryClip;
            super.onWindowFocusChanged(hasFocus);
            if (hasFocus) {
                if (this.capturePointerOnExternalMouse) {
                    this.touchpadView.requestPointerCapture();
                }
                if (this.winHandler != null && (clipboardManager = this.clipboardManager) != null && clipboardManager.hasPrimaryClip() && (primaryClip = this.clipboardManager.getPrimaryClip()) != null && primaryClip.getItemCount() > 0) {
                    this.winHandler.setClipboardData(primaryClip.getItemAt(0).getText().toString());
                }
            }
        }
    
        @Override // androidx.fragment.app.FragmentActivity, android.app.Activity
        public void onResume() {
            super.onResume();
            if (this.environment != null) {
                this.xServerView.onResume();
                this.environment.onResume();
            }
        }
    
        @Override // androidx.fragment.app.FragmentActivity, android.app.Activity
        public void onPause() {
            super.onPause();
            XEnvironment xEnvironment = this.environment;
            if (xEnvironment != null) {
                xEnvironment.onPause();
                this.xServerView.onPause();
            }
        }
    
        @Override // androidx.appcompat.app.AppCompatActivity, androidx.fragment.app.FragmentActivity, android.app.Activity
        protected void onDestroy() {
            this.winHandler.stop();
            XEnvironment xEnvironment = this.environment;
            if (xEnvironment != null) {
                xEnvironment.stopEnvironmentComponents();
            }
            super.onDestroy();
        }
    
        @Override // androidx.activity.ComponentActivity, android.app.Activity
        public void onBackPressed() {
            if (this.environment != null) {
                if (!this.drawerLayout.isDrawerOpen(8388611)) {
                    this.drawerLayout.openDrawer(8388611);
                } else {
                    this.drawerLayout.closeDrawers();
                }
            }
        }
    
        @Override // com.google.android.material.navigation.NavigationView.OnNavigationItemSelectedListener
        public boolean onNavigationItemSelected(MenuItem item) {
            final GLRenderer renderer = this.xServerView.getRenderer();
            switch (item.getItemId()) {
                case R.id.menu_item_exit /* 2131296696 */:
                    exit();
                    break;
                case R.id.menu_item_input_controls /* 2131296700 */:
                    showInputControlsDialog();
                    this.drawerLayout.closeDrawers();
                    break;
                case R.id.menu_item_keyboard /* 2131296702 */:
                    AppUtils.showKeyboard(this);
                    this.drawerLayout.closeDrawers();
                    break;
                case R.id.menu_item_logs /* 2131296704 */:
                    this.debugDialog.show();
                    this.drawerLayout.closeDrawers();
                    break;
                case R.id.menu_item_magnifier /* 2131296705 */:
                    if (this.magnifierView == null) {
                        final FrameLayout container = (FrameLayout) findViewById(R.id.FLXServerDisplay);
                        MagnifierView magnifierView = new MagnifierView(this);
                        this.magnifierView = magnifierView;
                        magnifierView.setZoomButtonCallback(new Callback() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda4
                            @Override // com.winlator.core.Callback
                            public final void call(Object obj) {
                                XServerDisplayActivity.this.lambda$onNavigationItemSelected$3(renderer, (Float) obj);
                            }
                        });
                        this.magnifierView.setZoomValue(renderer.getMagnifierZoom());
                        this.magnifierView.setHideButtonCallback(new Runnable() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda12
                            @Override // java.lang.Runnable
                            public final void run() {
                                XServerDisplayActivity.this.lambda$onNavigationItemSelected$4(container);
                            }
                        });
                        container.addView(this.magnifierView);
                    }
                    this.drawerLayout.closeDrawers();
                    break;
                case R.id.menu_item_screen_effect /* 2131296712 */:
                    new ScreenEffectDialog(this).show();
                    this.drawerLayout.closeDrawers();
                    break;
                case R.id.menu_item_task_manager /* 2131296715 */:
                    new TaskManagerDialog(this).show();
                    this.drawerLayout.closeDrawers();
                    break;
                case R.id.menu_item_toggle_fullscreen /* 2131296716 */:
                    renderer.toggleFullscreen();
                    this.drawerLayout.closeDrawers();
                    break;
                case R.id.menu_item_touchpad_help /* 2131296717 */:
                    showTouchpadHelpDialog();
                    break;
            }
            return true;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onNavigationItemSelected$3(GLRenderer renderer, Float value) {
            renderer.setMagnifierZoom(Mathf.clamp(renderer.getMagnifierZoom() + value.floatValue(), 1.0f, 3.0f));
            this.magnifierView.setZoomValue(renderer.getMagnifierZoom());
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onNavigationItemSelected$4(FrameLayout container) {
            container.removeView(this.magnifierView);
            this.magnifierView = null;
        }
    
        private void exit() {
            this.winHandler.stop();
            XEnvironment xEnvironment = this.environment;
            if (xEnvironment != null) {
                xEnvironment.stopEnvironmentComponents();
            }
            Intent intent = getIntent();
            if (intent.hasExtra("exec_path")) {
                AppUtils.RestartApplicationOptions options = new AppUtils.RestartApplicationOptions();
                options.containerId = this.container.id;
                options.startPath = FileUtils.getDirname(intent.getStringExtra("exec_path"));
                AppUtils.restartApplication(this, options);
                return;
            }
            AppUtils.restartApplication(this);
        }
    
        private void setupWineSystemFiles() {
            String dxwrapper;
            String appVersion = String.valueOf(AppUtils.getVersionCode(this));
            String rfsVersion = String.valueOf(this.rootFS.getVersion());
            boolean containerDataChanged = false;
            boolean wineprefixWasUpdated = WineUtils.isWineprefixWasUpdated(this.container);
            if (!this.container.getExtra("appVersion").equals(appVersion) || !this.container.getExtra("rfsVersion").equals(rfsVersion) || wineprefixWasUpdated) {
                applyGeneralPatches(this.container);
                this.container.putExtra("appVersion", appVersion);
                this.container.putExtra("rfsVersion", rfsVersion);
                containerDataChanged = true;
            }
            if (verifyUserRegistry()) {
                containerDataChanged = true;
            }
            dxwrapper = this.dxwrapper;
            switch (dxwrapper) {
                case "dxvk":
                    dxwrapper = dxwrapper + "-" + this.dxwrapperConfig.get("version", DefaultVersion.DXVK(this.graphicsDriver));
                    break;
                case "vkd3d":
                    dxwrapper = dxwrapper + "-" + this.dxwrapperConfig.get("version", "2.13");
                    break;
                case "wined3d":
                    dxwrapper = dxwrapper + "-" + this.dxwrapperConfig.get("version", "9.2");
                    break;
            }
            if (!dxwrapper.equals(this.container.getExtra("dxwrapper"))) {
                extractDXWrapperFiles();
                this.container.putExtra("dxwrapper", dxwrapper);
                containerDataChanged = true;
            }
            if (dxwrapper.equals("cnc-ddraw")) {
                this.envVars.put("CNC_DDRAW_CONFIG_FILE", "C:\\ProgramData\\cnc-ddraw\\ddraw.ini");
            }
            if (!this.wincomponents.equals(this.container.getExtra("wincomponents"))) {
                extractWinComponentFiles();
                this.container.putExtra("wincomponents", this.wincomponents);
                containerDataChanged = true;
            }
            String desktopTheme = this.container.getDesktopTheme();
            if (!(desktopTheme + "," + this.xServer.screenInfo).equals(this.container.getExtra("desktopTheme"))) {
                WineThemeManager.apply(this, new WineThemeManager.ThemeInfo(desktopTheme), this.xServer.screenInfo);
                this.container.putExtra("desktopTheme", desktopTheme + "," + this.xServer.screenInfo);
                containerDataChanged = true;
            }
            WineStartMenuCreator.create(this, this.container);
            WineUtils.createDosdevicesSymlinks(this.container, false);
            String startupSelection = String.valueOf((int) this.container.getStartupSelection());
            if (!startupSelection.equals(this.container.getExtra("startupSelection")) || wineprefixWasUpdated) {
                Container container = this.container;
                WineUtils.changeServicesStatus(container, container.getStartupSelection() != 0);
                this.container.putExtra("startupSelection", startupSelection);
                containerDataChanged = true;
            }
            boolean openAndroidBrowserFromWine = this.preferences.getBoolean("open_android_browser_from_wine", true);
            String openAndroidBrowserFromWineStr = openAndroidBrowserFromWine ? "t" : "f";
            if (!openAndroidBrowserFromWineStr.equals(this.container.getExtra("openAndroidBrowserFromWine")) || wineprefixWasUpdated) {
                WineUtils.changeBrowsersRegistryKey(this.container, openAndroidBrowserFromWine);
                this.container.putExtra("openAndroidBrowserFromWine", openAndroidBrowserFromWineStr);
                containerDataChanged = true;
            }
            if (containerDataChanged) {
                this.container.saveData();
            }
        }
    
        private void setupXEnvironment() {
            String str;
            String rootPath = this.rootFS.getRootDir().getPath();
            this.envVars.put("MESA_DEBUG", "silent");
            this.envVars.put("MESA_NO_ERROR", "1");
            this.envVars.put("WINEPREFIX", rootPath + "/home/xuser/.wine");
            this.envVars.put("WINE_DO_NOT_UPDATE_IF_TABLE", "1");
            this.envVars.put("WINE_DO_NOT_CREATE_DXGI_DEVICE_MANAGER", "1");
            boolean enableWineDebug = this.preferences.getBoolean("enable_wine_debug", false);
            String wineDebugChannels = this.preferences.getString("wine_debug_channels", "warn,err,fixme");
            EnvVars envVars = this.envVars;
            if (!enableWineDebug || wineDebugChannels.isEmpty()) {
                str = "-all";
            } else {
                str = "+" + wineDebugChannels.replace(",", ",+");
            }
            envVars.put("WINEDEBUG", str);
            FileUtils.clear(this.rootFS.getTmpDir());
            GuestProgramLauncherComponent guestProgramLauncherComponent = new GuestProgramLauncherComponent();
            Container container = this.container;
            if (container != null) {
                if (container.getStartupSelection() == 2) {
                    this.winHandler.killProcess("services.exe");
                }
                String desktopName = (this.shortcut != null || getIntent().hasExtra("exec_path")) ? "nogui" : "shell";
                String guestExecutable = "wine explorer /desktop=" + desktopName + "," + this.xServer.screenInfo + " " + getWineStartCommand();
                guestProgramLauncherComponent.setGuestExecutable(guestExecutable);
                this.envVars.putAll(this.container.getEnvVars());
                Shortcut shortcut = this.shortcut;
                if (shortcut != null) {
                    this.envVars.putAll(shortcut.getExtra("envVars"));
                }
                if (!this.envVars.has("WINEESYNC")) {
                    this.envVars.put("WINEESYNC", "1");
                }
                Shortcut shortcut2 = this.shortcut;
                guestProgramLauncherComponent.setBox64Preset(shortcut2 != null ? shortcut2.getExtra("box64Preset", this.container.getBox64Preset()) : this.container.getBox64Preset());
            }
            XEnvironment xEnvironment = new XEnvironment(this, this.rootFS);
            this.environment = xEnvironment;
            xEnvironment.addComponent(new SysVSharedMemoryComponent(this.xServer, UnixSocketConfig.create(rootPath, "/tmp/.sysvshm/SM0")));
            this.environment.addComponent(new XServerComponent(this.xServer, UnixSocketConfig.create(rootPath, "/tmp/.X11-unix/X0")));
            this.environment.addComponent(new NetworkInfoUpdateComponent());
            if (this.audioDriver.equals("alsa")) {
                this.envVars.put("ANDROID_ALSA_SERVER", rootPath + "/tmp/.sound/AS0");
                this.envVars.put("ANDROID_ASERVER_USE_SHM", "true");
                ALSAClient.Options options = ALSAClient.Options.fromKeyValueSet(this.audioDriverConfig);
                this.environment.addComponent(new ALSAServerComponent(UnixSocketConfig.create(rootPath, "/tmp/.sound/AS0"), options));
            } else if (this.audioDriver.equals("pulseaudio")) {
                PulseAudioComponent pulseAudioComponent = new PulseAudioComponent(UnixSocketConfig.create(rootPath, "/tmp/.sound/PS0"));
                this.envVars.put("PULSE_SERVER", rootPath + "/tmp/.sound/PS0");
                if (!this.audioDriverConfig.isEmpty()) {
                    this.envVars.put("PULSE_LATENCY_MSEC", Integer.valueOf(this.audioDriverConfig.getInt("latencyMillis", 40)));
                    pulseAudioComponent.setVolume(this.audioDriverConfig.getFloat("volume", 1.0f));
                    pulseAudioComponent.setPerformanceMode(this.audioDriverConfig.getInt("performanceMode", 1));
                } else {
                    this.envVars.put("PULSE_LATENCY_MSEC", (byte) 40);
                }
                this.environment.addComponent(pulseAudioComponent);
            }
            if (this.graphicsDriver.equals("virgl")) {
                this.environment.addComponent(new VirGLRendererComponent(this.xServer, UnixSocketConfig.create(rootPath, "/tmp/.virgl/V0")));
            } else if (this.graphicsDriver.equals("vortek")) {
                VortekRendererComponent.Options options2 = VortekRendererComponent.Options.fromKeyValueSet(this.graphicsDriverConfig);
                VortekRendererComponent vortekRendererComponent = new VortekRendererComponent(this.xServer, UnixSocketConfig.create(rootPath, "/tmp/.vortek/V0"), options2);
                this.environment.addComponent(vortekRendererComponent);
            }
            guestProgramLauncherComponent.setEnvVars(this.envVars);
            guestProgramLauncherComponent.setTerminationCallback(new Callback() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda3
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    XServerDisplayActivity.this.lambda$setupXEnvironment$5((Integer) obj);
                }
            });
            this.environment.addComponent(guestProgramLauncherComponent);
            if (isGenerateWineprefix()) {
                generateWineprefix();
            }
            EnvVars envVars2 = this.overrideEnvVars;
            if (envVars2 != null) {
                this.envVars.putAll(envVars2);
                this.overrideEnvVars = null;
            }
            this.environment.startEnvironmentComponents();
            this.winHandler.start();
            this.envVars.clear();
            this.dxwrapperConfig = null;
            this.graphicsDriverConfig = null;
            this.audioDriverConfig = null;
            this.wincomponents = null;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setupXEnvironment$5(Integer status) {
            exit();
        }
    
        private void setupUI() {
            ControlsProfile profile;
            FrameLayout rootView = (FrameLayout) findViewById(R.id.FLXServerDisplay);
            XServerView xServerView = new XServerView(this, this.xServer);
            this.xServerView = xServerView;
            final GLRenderer renderer = xServerView.getRenderer();
            renderer.setCursorVisible(false);
            renderer.setCursorColor(this.preferences.getInt("cursor_color", 16777215));
            renderer.setCursorScale(this.preferences.getFloat("cursor_scale", 1.0f));
            Shortcut shortcut = this.shortcut;
            renderer.setForceWindowsFullscreen(shortcut != null && shortcut.getExtra("forceFullscreen", "0").equals("1"));
            if (this.shortcut != null || getIntent().hasExtra("exec_path")) {
                renderer.setUnviewableWMClasses("explorer.exe");
            }
            this.xServer.setRenderer(renderer);
            rootView.addView(this.xServerView);
            this.globalCursorSpeed = this.preferences.getFloat("cursor_speed", 1.0f);
            this.capturePointerOnExternalMouse = this.preferences.getBoolean("capture_pointer_on_external_mouse", true);
            TouchpadView touchpadView = new TouchpadView(this, this.xServer, this.capturePointerOnExternalMouse);
            this.touchpadView = touchpadView;
            touchpadView.setSensitivity(this.globalCursorSpeed);
            this.touchpadView.setMoveCursorToTouchpoint(this.preferences.getBoolean("move_cursor_to_touchpoint", false));
            this.touchpadView.setFourFingersTapCallback(new Runnable() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda9
                @Override // java.lang.Runnable
                public final void run() {
                    XServerDisplayActivity.this.lambda$setupUI$6();
                }
            });
            rootView.addView(this.touchpadView);
            InputControlsView inputControlsView = new InputControlsView(this);
            this.inputControlsView = inputControlsView;
            inputControlsView.setOverlayOpacity(this.preferences.getFloat("overlay_opacity", 0.4f));
            this.inputControlsView.setTouchpadView(this.touchpadView);
            this.inputControlsView.setXServer(this.xServer);
            this.inputControlsView.setVisibility(8);
            rootView.addView(this.inputControlsView);
            Container container = this.container;
            if (container != null && container.isShowFPS()) {
                FrameRating frameRating = new FrameRating(this);
                this.frameRating = frameRating;
                frameRating.setVisibility(8);
                rootView.addView(this.frameRating);
            }
            Shortcut shortcut2 = this.shortcut;
            if (shortcut2 != null) {
                String controlsProfile = shortcut2.getExtra("controlsProfile");
                if (!controlsProfile.isEmpty() && (profile = this.inputControlsManager.getProfile(Integer.parseInt(controlsProfile))) != null) {
                    showInputControls(profile);
                }
            }
            DrawerLayout drawerLayout = this.drawerLayout;
            Objects.requireNonNull(renderer);
            AppUtils.observeSoftKeyboardVisibility(drawerLayout, new Callback() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda6
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    GLRenderer.this.setScreenOffsetYRelativeToCursor(((Boolean) obj).booleanValue());
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setupUI$6() {
            if (!this.drawerLayout.isDrawerOpen(8388611)) {
                this.drawerLayout.openDrawer(8388611);
            }
        }
    
        private void showInputControlsDialog() {
            ContentDialog dialog = new ContentDialog(this, R.layout.input_controls_dialog);
            dialog.setTitle(R.string.input_controls);
            dialog.setIcon(R.drawable.icon_input_controls);
            final Spinner sProfile = (Spinner) dialog.findViewById(R.id.SProfile);
            final Runnable loadProfileSpinner = new Runnable() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda13
                @Override // java.lang.Runnable
                public final void run() {
                    XServerDisplayActivity.this.lambda$showInputControlsDialog$7(sProfile);
                }
            };
            loadProfileSpinner.run();
            final CheckBox cbRelativeMouseMovement = (CheckBox) dialog.findViewById(R.id.CBRelativeMouseMovement);
            cbRelativeMouseMovement.setChecked(this.xServer.isRelativeMouseMovement());
            final CheckBox cbShowTouchscreenControls = (CheckBox) dialog.findViewById(R.id.CBShowTouchscreenControls);
            cbShowTouchscreenControls.setChecked(this.inputControlsView.isShowTouchscreenControls());
            dialog.findViewById(R.id.BTSettings).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda1
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    XServerDisplayActivity.this.lambda$showInputControlsDialog$9(sProfile, loadProfileSpinner, view);
                }
            });
            dialog.setOnConfirmCallback(new Runnable() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda11
                @Override // java.lang.Runnable
                public final void run() {
                    XServerDisplayActivity.this.lambda$showInputControlsDialog$10(cbRelativeMouseMovement, cbShowTouchscreenControls, sProfile);
                }
            });
            dialog.show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$showInputControlsDialog$7(Spinner sProfile) {
            ArrayList<ControlsProfile> profiles = this.inputControlsManager.getProfiles(true);
            ArrayList<String> profileItems = new ArrayList<>();
            int selectedPosition = 0;
            profileItems.add("-- " + getString(R.string.disabled) + " --");
            for (int i = 0; i < profiles.size(); i++) {
                ControlsProfile profile = profiles.get(i);
                if (profile == this.inputControlsView.getProfile()) {
                    selectedPosition = i + 1;
                }
                profileItems.add(profile.getName());
            }
            sProfile.setAdapter((SpinnerAdapter) new ArrayAdapter(this, R.layout.simple_spinner_dropdown_item, profileItems));
            sProfile.setSelection(selectedPosition);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$showInputControlsDialog$9(Spinner sProfile, final Runnable loadProfileSpinner, View v) {
            int position = sProfile.getSelectedItemPosition();
            Intent intent = new Intent(this, (Class<?>) MainActivity.class);
            intent.putExtra("edit_input_controls", true);
            intent.putExtra("selected_profile_id", position > 0 ? this.inputControlsManager.getProfiles().get(position - 1).id : 0);
            this.editInputControlsCallback = new Runnable() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda15
                @Override // java.lang.Runnable
                public final void run() {
                    XServerDisplayActivity.this.lambda$showInputControlsDialog$8(loadProfileSpinner);
                }
            };
            startActivityForResult(intent, 3);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$showInputControlsDialog$8(Runnable loadProfileSpinner) {
            hideInputControls();
            this.inputControlsManager.loadProfiles(true);
            loadProfileSpinner.run();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$showInputControlsDialog$10(CheckBox cbRelativeMouseMovement, CheckBox cbShowTouchscreenControls, Spinner sProfile) {
            this.xServer.setRelativeMouseMovement(cbRelativeMouseMovement.isChecked());
            this.inputControlsView.setShowTouchscreenControls(cbShowTouchscreenControls.isChecked());
            int position = sProfile.getSelectedItemPosition();
            if (position > 0) {
                showInputControls(this.inputControlsManager.getProfiles().get(position - 1));
            } else {
                hideInputControls();
            }
        }
    
        private void showInputControls(ControlsProfile profile) {
            this.inputControlsView.setVisibility(0);
            this.inputControlsView.requestFocus();
            this.inputControlsView.setProfile(profile);
            this.touchpadView.setSensitivity(profile.getCursorSpeed() * this.globalCursorSpeed);
            this.touchpadView.setPointerButtonRightEnabled(false);
            GLRenderer renderer = this.xServerView.getRenderer();
            if (profile.isDisableMouseInput()) {
                renderer.setCursorVisible(false);
                this.touchpadView.setEnabled(false);
            } else {
                renderer.setCursorVisible(true);
                this.touchpadView.setEnabled(true);
            }
            this.inputControlsView.invalidate();
        }
    
        private void hideInputControls() {
            this.inputControlsView.setShowTouchscreenControls(true);
            this.inputControlsView.setVisibility(8);
            this.inputControlsView.setProfile(null);
            this.touchpadView.setSensitivity(this.globalCursorSpeed);
            this.touchpadView.setPointerButtonLeftEnabled(true);
            this.touchpadView.setPointerButtonRightEnabled(true);
            if (!this.touchpadView.isEnabled()) {
                this.touchpadView.setEnabled(true);
                this.xServerView.getRenderer().setCursorVisible(true);
            }
            this.inputControlsView.invalidate();
        }
    
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        private void extractGraphicsDriverFiles() {
            char c;
            char c2;
            char c3;
            this.envVars.put("vblank_mode", "0");
            String cacheId = this.graphicsDriver;
            String str = this.graphicsDriver;
            switch (str.hashCode()) {
                case -862428572:
                    if (str.equals("turnip")) {
                        c = 0;
                        break;
                    }
                    c = 65535;
                    break;
                case -810705759:
                    if (str.equals("vortek")) {
                        c = 1;
                        break;
                    }
                    c = 65535;
                    break;
                case 112216388:
                    if (str.equals("virgl")) {
                        c = 2;
                        break;
                    }
                    c = 65535;
                    break;
                default:
                    c = 65535;
                    break;
            }
            switch (c) {
                case 0:
                    cacheId = cacheId + "-" + this.graphicsDriverConfig.get("version", "25.0.0") + "-22.2.5";
                    break;
                case 1:
                    cacheId = cacheId + "-1.0-22.2.5";
                    break;
                case 2:
                    cacheId = cacheId + "-23.1.9";
                    break;
            }
            boolean changed = !cacheId.equals(this.container.getExtra("graphicsDriver"));
            File rootDir = this.rootFS.getRootDir();
            File libDir = this.rootFS.getLibDir();
            if (changed) {
                FileUtils.delete(new File(libDir, "libvulkan_freedreno.so"));
                FileUtils.delete(new File(libDir, "libvulkan_vortek.so"));
                FileUtils.delete(new File(libDir, "libGL.so.1.7.0"));
                File vulkanICDDir = new File(rootDir, "/usr/share/vulkan/icd.d");
                FileUtils.delete(vulkanICDDir);
                vulkanICDDir.mkdirs();
                this.container.putExtra("graphicsDriver", cacheId);
                this.container.saveData();
            }
            String str2 = this.graphicsDriver;
            switch (str2.hashCode()) {
                case -862428572:
                    if (str2.equals("turnip")) {
                        c2 = 0;
                        break;
                    }
                    c2 = 65535;
                    break;
                case -810705759:
                    if (str2.equals("vortek")) {
                        c2 = 1;
                        break;
                    }
                    c2 = 65535;
                    break;
                case 112216388:
                    if (str2.equals("virgl")) {
                        c2 = 2;
                        break;
                    }
                    c2 = 65535;
                    break;
                default:
                    c2 = 65535;
                    break;
            }
            switch (c2) {
                case 0:
                    this.envVars.put("GALLIUM_DRIVER", "zink");
                    this.envVars.put("ZINK_CONTEXT_THREADED", "1");
                    this.envVars.put("MESA_VK_WSI_PRESENT_MODE", "mailbox");
                    this.envVars.put("WINEVKUSEPLACEDADDR", "1");
                    TurnipConfigDialog.setEnvVars(this.graphicsDriverConfig, this.envVars);
                    if (changed) {
                        InstallableComponents.extractFile(InstallableComponents.Type.TURNIP, this, this.graphicsDriverConfig.get("version", "25.0.0"), "25.0.0");
                        TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, "graphics_driver/zink-22.2.5.tzst", rootDir);
                        break;
                    }
                    break;
                case 1:
                    this.envVars.put("GALLIUM_DRIVER", "zink");
                    this.envVars.put("ZINK_CONTEXT_THREADED", "1");
                    this.envVars.put("MESA_GL_VERSION_OVERRIDE", "3.3");
                    this.envVars.put("WINEVKUSEPLACEDADDR", "1");
                    this.envVars.put("VORTEK_SERVER_PATH", rootDir + "/tmp/.vortek/V0");
                    if (this.dxwrapper.equals("dxvk")) {
                        this.dxwrapperConfig.put("constantBufferRangeCheck", "1");
                    }
                    if (changed) {
                        TarCompressorUtils.Type type = TarCompressorUtils.Type.ZSTD;
                        TarCompressorUtils.extract(type, this, "graphics_driver/vortek-1.0.tzst", rootDir);
                        TarCompressorUtils.extract(type, this, "graphics_driver/zink-22.2.5.tzst", rootDir);
                        break;
                    }
                    break;
                case 2:
                    this.envVars.put("GALLIUM_DRIVER", "virpipe");
                    this.envVars.put("VIRGL_NO_READBACK", "true");
                    this.envVars.put("VIRGL_SERVER_PATH", rootDir + "/tmp/.virgl/V0");
                    VirGLConfigDialog.setEnvVars(this.graphicsDriverConfig, this.envVars);
                    if (changed) {
                        TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, "graphics_driver/virgl-23.1.9.tzst", rootDir);
                        break;
                    }
                    break;
            }
            String version = this.dxwrapper;
            switch (version.hashCode()) {
                case 3098185:
                    if (version.equals("dxvk")) {
                        c3 = 0;
                        break;
                    }
                    c3 = 65535;
                    break;
                case 112260896:
                    if (version.equals("vkd3d")) {
                        c3 = 2;
                        break;
                    }
                    c3 = 65535;
                    break;
                case 1349510476:
                    if (version.equals("wined3d")) {
                        c3 = 1;
                        break;
                    }
                    c3 = 65535;
                    break;
                default:
                    c3 = 65535;
                    break;
            }
            switch (c3) {
                case 0:
                    DXVKConfigDialog.setEnvVars(this, this.dxwrapperConfig, this.envVars);
                    break;
                case 1:
                    WineD3DConfigDialog.setEnvVars(this.dxwrapperConfig, this.envVars);
                    break;
                case 2:
                    VKD3DConfigDialog.setEnvVars(this.dxwrapperConfig, this.envVars);
                    break;
            }
        }
    
        private void showTouchpadHelpDialog() {
            ContentDialog dialog = new ContentDialog(this, R.layout.touchpad_help_dialog);
            dialog.setTitle(R.string.touchpad_help);
            dialog.setIcon(R.drawable.icon_help);
            dialog.findViewById(R.id.BTCancel).setVisibility(8);
            dialog.show();
        }
    
        @Override // android.app.Activity, android.view.Window.Callback
        public boolean dispatchGenericMotionEvent(MotionEvent event) {
            return (this.winHandler.onGenericMotionEvent(event) || this.touchpadView.onExternalMouseEvent(event) || !super.dispatchGenericMotionEvent(event)) ? false : true;
        }
    
        @Override // androidx.appcompat.app.AppCompatActivity, androidx.core.app.ComponentActivity, android.app.Activity, android.view.Window.Callback
        public boolean dispatchKeyEvent(KeyEvent event) {
            return !(this.inputControlsView.onKeyEvent(event) || this.winHandler.onKeyEvent(event) || !this.xServer.keyboard.onKeyEvent(event)) || (!ExternalController.isGameController(event.getDevice()) && super.dispatchKeyEvent(event));
        }
    
        public InputControlsView getInputControlsView() {
            return this.inputControlsView;
        }
    
        private void generateWineprefix() {
            Intent intent = getIntent();
            final File rootDir = this.rootFS.getRootDir();
            final File installedWineDir = this.rootFS.getInstalledWineDir();
            this.wineInfo = (WineInfo) intent.getParcelableExtra("wine_info");
            this.envVars.put("WINEARCH", "win64");
            this.rootFS.setWinePath(this.wineInfo.path);
            File containerPatternDir = new File(installedWineDir, "/preinstall/container-pattern");
            if (containerPatternDir.isDirectory()) {
                FileUtils.delete(containerPatternDir);
            }
            containerPatternDir.mkdirs();
            File linkFile = new File(rootDir, "/home/xuser");
            FileUtils.symlink(containerPatternDir.getPath(), linkFile.getPath());
            GuestProgramLauncherComponent guestProgramLauncherComponent = (GuestProgramLauncherComponent) this.environment.getComponent(GuestProgramLauncherComponent.class);
            guestProgramLauncherComponent.setBox64Preset("COMPATIBILITY");
            guestProgramLauncherComponent.setGuestExecutable("wine explorer /desktop=shell,1280x720 winecfg");
            final PreloaderDialog preloaderDialog = new PreloaderDialog(this);
            guestProgramLauncherComponent.setTerminationCallback(new Callback() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda5
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    XServerDisplayActivity.this.lambda$generateWineprefix$12(installedWineDir, preloaderDialog, rootDir, (Integer) obj);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$generateWineprefix$12(final File installedWineDir, final PreloaderDialog preloaderDialog, final File rootDir, final Integer status) {
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda14
                @Override // java.lang.Runnable
                public final void run() {
                    XServerDisplayActivity.this.lambda$generateWineprefix$11(status, installedWineDir, preloaderDialog, rootDir);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$generateWineprefix$11(Integer status, File installedWineDir, PreloaderDialog preloaderDialog, File rootDir) {
            if (status.intValue() > 0) {
                AppUtils.showToast(this, R.string.unable_to_install_wine);
                FileUtils.delete(new File(installedWineDir, "/preinstall"));
                AppUtils.restartApplication(this);
                return;
            }
            preloaderDialog.showOnUiThread(R.string.finishing_installation);
            FileUtils.writeString(new File(rootDir, "/home/xuser/.wine/.update-timestamp"), "disable\n");
            File userDir = new File(rootDir, "/home/xuser/.wine/drive_c/users/xuser");
            File[] userFiles = userDir.listFiles();
            if (userFiles != null) {
                for (File userFile : userFiles) {
                    if (FileUtils.isSymlink(userFile)) {
                        String path = userFile.getPath();
                        userFile.delete();
                        new File(path).mkdirs();
                    }
                }
            }
            File containerPatternFile = new File(installedWineDir, "/preinstall/container-pattern-" + this.wineInfo.fullVersion() + ".tzst");
            TarCompressorUtils.compress(TarCompressorUtils.Type.ZSTD, new File(rootDir, "/home/xuser/.wine"), containerPatternFile, 9);
            if (!containerPatternFile.renameTo(new File(installedWineDir, containerPatternFile.getName())) || !new File(this.wineInfo.path).renameTo(new File(installedWineDir, this.wineInfo.identifier()))) {
                containerPatternFile.delete();
            }
            FileUtils.delete(new File(installedWineDir, "/preinstall"));
            preloaderDialog.closeOnUiThread();
            AppUtils.RestartApplicationOptions options = new AppUtils.RestartApplicationOptions();
            options.selectedMenuItemId = R.id.menu_item_settings;
            AppUtils.restartApplication(this, options);
        }
    
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        private void extractDXWrapperFiles() {
            char c;
            String[] dlls = {"d3d8.dll", "d3d9.dll", "d3d10.dll", "d3d10_1.dll", "d3d10core.dll", "d3d11.dll", "d3d12.dll", "d3d12core.dll", "dxgi.dll", "ddraw.dll", "wined3d.dll"};
            File rootDir = this.rootFS.getRootDir();
            File windowsDir = new File(rootDir, "/home/xuser/.wine/drive_c/windows");
            String str = this.dxwrapper;
            switch (str.hashCode()) {
                case -1061449997:
                    if (str.equals("cnc-ddraw")) {
                        c = 1;
                        break;
                    }
                    c = 65535;
                    break;
                case 3098185:
                    if (str.equals("dxvk")) {
                        c = 3;
                        break;
                    }
                    c = 65535;
                    break;
                case 112260896:
                    if (str.equals("vkd3d")) {
                        c = 2;
                        break;
                    }
                    c = 65535;
                    break;
                case 1349510476:
                    if (str.equals("wined3d")) {
                        c = 0;
                        break;
                    }
                    c = 65535;
                    break;
                default:
                    c = 65535;
                    break;
            }
            switch (c) {
                case 0:
                    String version = this.dxwrapperConfig.get("version", "9.2");
                    if (version.equals("9.2")) {
                        restoreBuiltinDllFiles(dlls);
                        break;
                    } else {
                        InstallableComponents.extractFile(InstallableComponents.Type.WINED3D, this, version, "9.2");
                        break;
                    }
                case 1:
                    restoreBuiltinDllFiles(dlls);
                    File configFile = new File(rootDir, "/home/xuser/.wine/drive_c/ProgramData/cnc-ddraw/ddraw.ini");
                    if (!configFile.isFile()) {
                        FileUtils.copy(this, "dxwrapper/cnc-ddraw-6.6/ddraw.ini", configFile);
                    }
                    File shadersDir = new File(rootDir, "/home/xuser/.wine/drive_c/ProgramData/cnc-ddraw/Shaders");
                    FileUtils.delete(shadersDir);
                    FileUtils.copy(this, "dxwrapper/cnc-ddraw-6.6/Shaders", shadersDir);
                    TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, "dxwrapper/cnc-ddraw-6.6/ddraw.tzst", windowsDir);
                    break;
                case 2:
                    TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, "dxwrapper/dxvk-" + DefaultVersion.DXVK() + ".tzst", windowsDir);
                    InstallableComponents.extractFile(InstallableComponents.Type.VKD3D, this, this.dxwrapperConfig.get("version"), "2.13");
                    break;
                case 3:
                    restoreBuiltinDllFiles("d3d12.dll", "d3d12core.dll", "ddraw.dll");
                    TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, "dxwrapper/d8vk-1.0.tzst", windowsDir);
                    InstallableComponents.extractFile(InstallableComponents.Type.DXVK, this, this.dxwrapperConfig.get("version"), DefaultVersion.DXVK(this.graphicsDriver));
                    break;
            }
        }
    
        private void extractWinComponentFiles() {
            JSONObject wincomponentsJSONObject;
            JSONObject wincomponentsJSONObject2;
            String str;
            File rootDir = this.rootFS.getRootDir();
            File windowsDir = new File(rootDir, "/home/xuser/.wine/drive_c/windows");
            File systemRegFile = new File(rootDir, "/home/xuser/.wine/system.reg");
            try {
                JSONObject wincomponentsJSONObject3 = new JSONObject(FileUtils.readString(this, "wincomponents/wincomponents.json"));
                Iterator<String[]> oldWinComponentsIter = new KeyValueSet(this.container.getExtra("wincomponents", "direct3d=0,directsound=0,directmusic=0,directshow=0,directplay=0,xaudio=0,vcrun2005=0,vcrun2010=0,wmdecoder=0")).iterator();
                ArrayList<String> builtinDlls = new ArrayList<>();
                Iterator<String[]> it = new KeyValueSet(this.wincomponents).iterator();
                while (it.hasNext()) {
                    String[] wincomponent = it.next();
                    if (!wincomponent[1].equals(oldWinComponentsIter.next()[1])) {
                        String identifier = wincomponent[0];
                        boolean useNative = wincomponent[1].equals("1");
                        if (useNative) {
                            TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, "wincomponents/" + identifier + ".tzst", windowsDir);
                            wincomponentsJSONObject = wincomponentsJSONObject3;
                        } else {
                            JSONObject wincomponentJSONObject = wincomponentsJSONObject3.getJSONObject(identifier);
                            if (wincomponentJSONObject.getBoolean("restoreBuiltinDlls")) {
                                JSONArray dlnames = wincomponentJSONObject.getJSONArray("dlnames");
                                int i = 0;
                                while (i < dlnames.length()) {
                                    String dlname = dlnames.getString(i);
                                    if (dlname.endsWith(".exe")) {
                                        wincomponentsJSONObject2 = wincomponentsJSONObject3;
                                        str = dlname;
                                    } else {
                                        StringBuilder sb = new StringBuilder();
                                        sb.append(dlname);
                                        wincomponentsJSONObject2 = wincomponentsJSONObject3;
                                        sb.append(".dll");
                                        str = sb.toString();
                                    }
                                    builtinDlls.add(str);
                                    i++;
                                    wincomponentsJSONObject3 = wincomponentsJSONObject2;
                                }
                                wincomponentsJSONObject = wincomponentsJSONObject3;
                            } else {
                                wincomponentsJSONObject = wincomponentsJSONObject3;
                                TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this, "wincomponents/" + identifier + ".tzst", windowsDir, new TarCompressorUtils.OnExtractFileListener() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda7
                                    @Override // com.winlator.core.TarCompressorUtils.OnExtractFileListener
                                    public final File onExtractFile(File file, long j) {
                                        File lambda$extractWinComponentFiles$13;
                                        lambda$extractWinComponentFiles$13 = XServerDisplayActivity.lambda$extractWinComponentFiles$13(file, j);
                                        return lambda$extractWinComponentFiles$13;
                                    }
                                });
                            }
                        }
                        WineUtils.setWinComponentRegistryKeys(systemRegFile, identifier, useNative);
                        wincomponentsJSONObject3 = wincomponentsJSONObject;
                    }
                }
                if (!builtinDlls.isEmpty()) {
                    restoreBuiltinDllFiles((String[]) builtinDlls.toArray(new String[0]));
                }
                WineUtils.overrideWinComponentDlls(this, this.container, this.wincomponents);
            } catch (JSONException e) {
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ File lambda$extractWinComponentFiles$13(File destination, long size) {
            String name = destination.getName();
            if (name.endsWith(".dll") || name.endsWith(".manifest") || name.endsWith("_deadbeef")) {
                FileUtils.delete(destination);
                return null;
            }
            return null;
        }
    
        private void restoreBuiltinDllFiles(String... dlls) {
            File rootDir = this.rootFS.getRootDir();
            File wineDir = new File(rootDir, this.rootFS.getWinePath());
            File wineSystem32Dir = new File(wineDir, "/lib/wine/x86_64-windows");
            File wineSysWoW64Dir = new File(wineDir, "/lib/wine/i386-windows");
            File containerSystem32Dir = new File(rootDir, "/home/xuser/.wine/drive_c/windows/system32");
            File containerSysWoW64Dir = new File(rootDir, "/home/xuser/.wine/drive_c/windows/syswow64");
            for (String dll : dlls) {
                FileUtils.copy(new File(wineSysWoW64Dir, dll), new File(containerSysWoW64Dir, dll));
                FileUtils.copy(new File(wineSystem32Dir, dll), new File(containerSystem32Dir, dll));
            }
        }
    
        private boolean isGenerateWineprefix() {
            return getIntent().getBooleanExtra("generate_wineprefix", false);
        }
    
        private String getWineStartCommand() {
            int spaceIndex;
            String str;
            String cmdArgs = "";
            String execPath = null;
            String execArgs = "";
            Shortcut shortcut = this.shortcut;
            if (shortcut != null) {
                String execArgs2 = shortcut.getExtra("execArgs");
                if (execArgs2.isEmpty()) {
                    str = "";
                } else {
                    str = " " + execArgs2;
                }
                execArgs = str;
                if (this.shortcut.path.endsWith(".lnk")) {
                    cmdArgs = "\"" + this.shortcut.path + "\"" + execArgs;
                } else {
                    execPath = this.shortcut.path;
                }
            } else {
                Intent intent = getIntent();
                if (intent.hasExtra("exec_path")) {
                    execPath = WineUtils.unixToDOSPath(intent.getStringExtra("exec_path"), this.container);
                    if (execPath.endsWith(".lnk")) {
                        cmdArgs = "\"" + execPath + "\"";
                        execPath = null;
                    }
                }
            }
            if (execPath != null) {
                String execDir = FileUtils.getDirname(execPath);
                String filename = FileUtils.getName(execPath);
                int dotIndex = filename.lastIndexOf(".");
                if (dotIndex != -1 && (spaceIndex = filename.indexOf(" ", dotIndex)) != -1) {
                    execArgs = filename.substring(spaceIndex + 1) + execArgs;
                    filename = filename.substring(0, spaceIndex);
                }
                cmdArgs = "/dir " + StringUtils.escapeDOSPath(execDir) + " \"" + filename + "\"" + execArgs;
            }
            if (cmdArgs.isEmpty()) {
                cmdArgs = "\"wfm.exe\"";
            }
            EnvVars envVars = this.overrideEnvVars;
            if (envVars != null && envVars.has("EXTRA_EXEC_ARGS")) {
                cmdArgs = cmdArgs + " " + this.overrideEnvVars.get("EXTRA_EXEC_ARGS");
                this.overrideEnvVars.remove("EXTRA_EXEC_ARGS");
            }
            return "winhandler.exe " + cmdArgs;
        }
    
        public XServer getXServer() {
            return this.xServer;
        }
    
        public WinHandler getWinHandler() {
            return this.winHandler;
        }
    
        public XServerView getXServerView() {
            return this.xServerView;
        }
    
        public Container getContainer() {
            return this.container;
        }
    
        public EnvVars getOverrideEnvVars() {
            if (this.overrideEnvVars == null) {
                this.overrideEnvVars = new EnvVars();
            }
            return this.overrideEnvVars;
        }
    
        public void setGraphicsDriver(String graphicsDriver) {
            this.graphicsDriver = graphicsDriver;
        }
    
        public String getDXWrapper() {
            return this.dxwrapper;
        }
    
        public void setDXWrapper(String dxwrapper) {
            this.dxwrapper = dxwrapper;
        }
    
        public KeyValueSet getDXWrapperConfig() {
            return this.dxwrapperConfig;
        }
    
        public ScreenInfo getScreenInfo() {
            return this.screenInfo;
        }
    
        public void setScreenInfo(ScreenInfo screenInfo) {
            this.screenInfo = screenInfo;
        }
    
        public void setWinComponents(String wincomponents) {
            this.wincomponents = wincomponents;
        }
    
        public DebugDialog getDebugDialog() {
            return this.debugDialog;
        }
    
        public String getScreenEffectProfile() {
            return this.screenEffectProfile;
        }
    
        public void setScreenEffectProfile(String screenEffectProfile) {
            this.screenEffectProfile = screenEffectProfile;
        }
    
        private void changeWineAudioDriver() {
            if (!this.audioDriver.equals(this.container.getExtra("audioDriver"))) {
                File rootDir = this.rootFS.getRootDir();
                File userRegFile = new File(rootDir, "/home/xuser/.wine/user.reg");
                WineRegistryEditor registryEditor = new WineRegistryEditor(userRegFile);
                try {
                    if (this.audioDriver.equals("alsa")) {
                        registryEditor.setStringValue("Software\\Wine\\Drivers", "Audio", "alsa");
                    } else if (this.audioDriver.equals("pulseaudio")) {
                        registryEditor.setStringValue("Software\\Wine\\Drivers", "Audio", "pulse");
                    }
                    registryEditor.close();
                    this.container.putExtra("audioDriver", this.audioDriver);
                    this.container.saveData();
                } catch (Throwable th) {
                    try {
                        registryEditor.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                    throw th;
                }
            }
        }
    
        private void applyGeneralPatches(Container container) {
            File rootDir = this.rootFS.getRootDir();
            FileUtils.delete(new File(rootDir, "/opt/apps"));
            TarCompressorUtils.Type type = TarCompressorUtils.Type.ZSTD;
            TarCompressorUtils.extract(type, this, "rootfs_patches.tzst", rootDir);
            TarCompressorUtils.extract(type, this, "pulseaudio.tzst", new File(getFilesDir(), "pulseaudio"));
            WineUtils.applySystemTweaks(this, this.wineInfo);
            container.putExtra("graphicsDriver", null);
            container.putExtra("dxwrapper", null);
            container.putExtra("desktopTheme", null);
            SettingsFragment.resetBox64Version(this);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void changeFrameRatingVisibility(Window window, boolean visible) {
            if (this.frameRating == null) {
                return;
            }
            if (visible) {
                if (window.attributes.isMapped() && window.isSurface()) {
                    this.frameRatingWindowId = window.id;
                    this.frameRating.reset();
                    return;
                }
                return;
            }
            if (window.id == this.frameRatingWindowId) {
                this.frameRatingWindowId = -1;
                runOnUiThread(new Runnable() { // from class: com.winlator.XServerDisplayActivity$$ExternalSyntheticLambda8
                    @Override // java.lang.Runnable
                    public final void run() {
                        XServerDisplayActivity.this.lambda$changeFrameRatingVisibility$14();
                    }
                });
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$changeFrameRatingVisibility$14() {
            this.frameRating.setVisibility(8);
        }
    
        public boolean verifyUserRegistry() {
            File userRegFile = new File(this.rootFS.getRootDir(), "/home/xuser/.wine/user.reg");
            String lastModified = String.valueOf(userRegFile.lastModified());
            if (!lastModified.equals(this.container.getExtra("userRegLastModified"))) {
                WineRegistryEditor registryEditor = new WineRegistryEditor(userRegFile);
                try {
                    registryEditor.removeKey("Software\\Wow6432Node", true);
                    registryEditor.close();
                    this.container.putExtra("userRegLastModified", lastModified);
                    return true;
                } catch (Throwable th) {
                    try {
                        registryEditor.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                    throw th;
                }
            }
            return false;
        }
    }
  + app/src/main/java/com/winlator/alsaserver/ALSAClient.java
    package com.winlator.alsaserver;
    
    import android.content.Context;
    import android.media.AudioFormat;
    import android.media.AudioManager;
    import android.media.AudioTrack;
    import com.winlator.core.KeyValueSet;
    import com.winlator.math.Mathf;
    import com.winlator.sysvshm.SysVSharedMemory;
    import java.nio.ByteBuffer;
    import java.nio.ByteOrder;
    
    /* loaded from: classes.dex */
    public class ALSAClient {
        private static short framesPerBuffer = 256;
        private ByteBuffer auxBuffer;
        private int bufferCapacity;
        private int bufferSize;
        private byte frameBytes;
        protected final Options options;
        private int position;
        private ByteBuffer sharedBuffer;
        private DataType dataType = DataType.U8;
        private AudioTrack audioTrack = null;
        private byte channels = 2;
        private int sampleRate = 0;
        private short previousUnderrunCount = 0;
    
        public enum DataType {
            U8(1),
            S16LE(2),
            S16BE(2),
            FLOATLE(4),
            FLOATBE(4);
    
            public final byte byteCount;
    
            DataType(int byteCount) {
                this.byteCount = (byte) byteCount;
            }
        }
    
        public static class Options {
            public short latencyMillis = 40;
            public byte performanceMode = 1;
            public float volume = 1.0f;
    
            public static Options fromKeyValueSet(KeyValueSet config) {
                Options options;
                if (config == null || config.isEmpty()) {
                    return new Options();
                }
                options = new Options();
                switch (config.get("performanceMode")) {
                    case "0":
                        options.performanceMode = (byte) 0;
                        break;
                    case "1":
                        options.performanceMode = (byte) 1;
                        break;
                    case "2":
                        options.performanceMode = (byte) 2;
                        break;
                }
                options.volume = config.getFloat("volume", 1.0f);
                options.latencyMillis = (short) config.getInt("latencyMillis", 40);
                return options;
            }
        }
    
        public ALSAClient(Options options) {
            this.options = options;
        }
    
        public void release() {
            ByteBuffer byteBuffer = this.sharedBuffer;
            if (byteBuffer != null) {
                SysVSharedMemory.unmapSHMSegment(byteBuffer, byteBuffer.capacity());
                this.sharedBuffer = null;
            }
            AudioTrack audioTrack = this.audioTrack;
            if (audioTrack != null) {
                audioTrack.pause();
                this.audioTrack.flush();
                this.audioTrack.release();
                this.audioTrack = null;
            }
        }
    
        /* renamed from: com.winlator.alsaserver.ALSAClient$1, reason: invalid class name */
        static /* synthetic */ class AnonymousClass1 {
            static final /* synthetic */ int[] $SwitchMap$com$winlator$alsaserver$ALSAClient$DataType;
    
            static {
                int[] iArr = new int[DataType.values().length];
                $SwitchMap$com$winlator$alsaserver$ALSAClient$DataType = iArr;
                try {
                    iArr[DataType.U8.ordinal()] = 1;
                } catch (NoSuchFieldError e) {
                }
                try {
                    $SwitchMap$com$winlator$alsaserver$ALSAClient$DataType[DataType.S16LE.ordinal()] = 2;
                } catch (NoSuchFieldError e2) {
                }
                try {
                    $SwitchMap$com$winlator$alsaserver$ALSAClient$DataType[DataType.S16BE.ordinal()] = 3;
                } catch (NoSuchFieldError e3) {
                }
                try {
                    $SwitchMap$com$winlator$alsaserver$ALSAClient$DataType[DataType.FLOATLE.ordinal()] = 4;
                } catch (NoSuchFieldError e4) {
                }
                try {
                    $SwitchMap$com$winlator$alsaserver$ALSAClient$DataType[DataType.FLOATBE.ordinal()] = 5;
                } catch (NoSuchFieldError e5) {
                }
            }
        }
    
        public static int getPCMEncoding(DataType dataType) {
            switch (AnonymousClass1.$SwitchMap$com$winlator$alsaserver$ALSAClient$DataType[dataType.ordinal()]) {
                case 1:
                    return 3;
                case 2:
                case 3:
                    return 2;
                case 4:
                case 5:
                    return 4;
                default:
                    return 1;
            }
        }
    
        public static int getChannelConfig(int channels) {
            return channels <= 1 ? 4 : 12;
        }
    
        public void prepare() {
            this.position = 0;
            this.previousUnderrunCount = (short) 0;
            this.frameBytes = (byte) (this.channels * this.dataType.byteCount);
            release();
            if (isValidBufferSize()) {
                AudioFormat format = new AudioFormat.Builder().setEncoding(getPCMEncoding(this.dataType)).setSampleRate(this.sampleRate).setChannelMask(getChannelConfig(this.channels)).build();
                AudioTrack build = new AudioTrack.Builder().setPerformanceMode(this.options.performanceMode).setAudioFormat(format).setBufferSizeInBytes(getBufferSizeInBytes()).build();
                this.audioTrack = build;
                this.bufferCapacity = build.getBufferCapacityInFrames();
                float f = this.options.volume;
                if (f != 1.0f) {
                    this.audioTrack.setVolume(f);
                }
                this.audioTrack.play();
            }
        }
    
        public void start() {
            AudioTrack audioTrack = this.audioTrack;
            if (audioTrack != null && audioTrack.getPlayState() != 3) {
                this.audioTrack.play();
            }
        }
    
        public void stop() {
            AudioTrack audioTrack = this.audioTrack;
            if (audioTrack != null) {
                audioTrack.stop();
                this.audioTrack.flush();
            }
        }
    
        public void pause() {
            AudioTrack audioTrack = this.audioTrack;
            if (audioTrack != null) {
                audioTrack.pause();
            }
        }
    
        public void drain() {
            AudioTrack audioTrack = this.audioTrack;
            if (audioTrack != null) {
                audioTrack.flush();
            }
        }
    
        public void writeDataToTrack(ByteBuffer data) {
            DataType dataType = this.dataType;
            if (dataType == DataType.S16LE || dataType == DataType.FLOATLE) {
                data.order(ByteOrder.LITTLE_ENDIAN);
            } else if (dataType == DataType.S16BE || dataType == DataType.FLOATBE) {
                data.order(ByteOrder.BIG_ENDIAN);
            }
            if (this.audioTrack != null) {
                data.position(0);
                do {
                    try {
                        int bytesWritten = this.audioTrack.write(data, data.remaining(), 0);
                        if (bytesWritten < 0) {
                            break;
                        } else {
                            increaseBufferSizeIfUnderrunOccurs();
                        }
                    } catch (Exception e) {
                    }
                } while (data.position() != data.limit());
                this.position += data.position();
                data.rewind();
            }
        }
    
        private void increaseBufferSizeIfUnderrunOccurs() {
            int i;
            int underrunCount = this.audioTrack.getUnderrunCount();
            if (underrunCount > this.previousUnderrunCount && (i = this.bufferSize) < this.bufferCapacity) {
                this.previousUnderrunCount = (short) underrunCount;
                int i2 = i + framesPerBuffer;
                this.bufferSize = i2;
                this.audioTrack.setBufferSizeInFrames(i2);
            }
        }
    
        public int pointer() {
            if (this.audioTrack != null) {
                return this.position / this.frameBytes;
            }
            return 0;
        }
    
        public void setDataType(DataType dataType) {
            this.dataType = dataType;
        }
    
        public void setChannels(int channels) {
            this.channels = (byte) channels;
        }
    
        public void setSampleRate(int sampleRate) {
            this.sampleRate = sampleRate;
        }
    
        public void setBufferSize(int bufferSize) {
            this.bufferSize = bufferSize;
        }
    
        public ByteBuffer getSharedBuffer() {
            return this.sharedBuffer;
        }
    
        public void setSharedBuffer(ByteBuffer sharedBuffer) {
            if (sharedBuffer != null) {
                ByteBuffer allocateDirect = ByteBuffer.allocateDirect(getBufferSizeInBytes());
                ByteOrder byteOrder = ByteOrder.LITTLE_ENDIAN;
                this.auxBuffer = allocateDirect.order(byteOrder);
                this.sharedBuffer = sharedBuffer.order(byteOrder);
                return;
            }
            this.auxBuffer = null;
            this.sharedBuffer = null;
        }
    
        public ByteBuffer getAuxBuffer() {
            return this.auxBuffer;
        }
    
        public int getBufferSizeInBytes() {
            return this.bufferSize * this.frameBytes;
        }
    
        public static int latencyMillisToBufferSize(int latencyMillis, int channels, DataType dataType, int sampleRate) {
            byte frameBytes = (byte) (dataType.byteCount * channels);
            int bufferSize = (int) Mathf.roundTo((latencyMillis * sampleRate) / 1000.0f, framesPerBuffer, false);
            return bufferSize * frameBytes;
        }
    
        private boolean isValidBufferSize() {
            int i = this.bufferSize;
            return i % this.frameBytes == 0 && i > 0;
        }
    
        public static void assignFramesPerBuffer(Context context) {
            try {
                AudioManager am = (AudioManager) context.getSystemService("audio");
                String framesPerBufferStr = am.getProperty("android.media.property.OUTPUT_FRAMES_PER_BUFFER");
                short parseShort = Short.parseShort(framesPerBufferStr);
                framesPerBuffer = parseShort;
                if (parseShort == 0) {
                    framesPerBuffer = (short) 256;
                }
            } catch (Exception e) {
                framesPerBuffer = (short) 256;
            }
        }
    }
  + app/src/main/java/com/winlator/alsaserver/ALSAClientConnectionHandler.java
    package com.winlator.alsaserver;
    
    import com.winlator.alsaserver.ALSAClient;
    import com.winlator.xconnector.Client;
    import com.winlator.xconnector.ConnectionHandler;
    
    /* loaded from: classes.dex */
    public class ALSAClientConnectionHandler implements ConnectionHandler {
        private final ALSAClient.Options options;
    
        public ALSAClientConnectionHandler(ALSAClient.Options options) {
            this.options = options;
        }
    
        @Override // com.winlator.xconnector.ConnectionHandler
        public void handleNewConnection(Client client) {
            client.createIOStreams();
            client.setTag(new ALSAClient(this.options));
        }
    
        @Override // com.winlator.xconnector.ConnectionHandler
        public void handleConnectionShutdown(Client client) {
            if (client.getTag() != null) {
                ((ALSAClient) client.getTag()).release();
            }
        }
    }
  + app/src/main/java/com/winlator/alsaserver/ALSARequestHandler.java
    package com.winlator.alsaserver;
    
    import com.winlator.alsaserver.ALSAClient;
    import com.winlator.sysvshm.SysVSharedMemory;
    import com.winlator.xconnector.Client;
    import com.winlator.xconnector.RequestHandler;
    import com.winlator.xconnector.XConnectorEpoll;
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import java.io.IOException;
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public class ALSARequestHandler implements RequestHandler {
        private int maxSHMemoryId = 0;
    
        @Override // com.winlator.xconnector.RequestHandler
        public boolean handleRequest(Client client) throws IOException {
            XStreamLock lock;
            ALSAClient alsaClient = (ALSAClient) client.getTag();
            XInputStream inputStream = client.getInputStream();
            XOutputStream outputStream = client.getOutputStream();
            if (inputStream.available() < 5) {
                return false;
            }
            byte requestCode = inputStream.readByte();
            int requestLength = inputStream.readInt();
            switch (requestCode) {
                case 0:
                    alsaClient.release();
                    return true;
                case 1:
                    alsaClient.start();
                    return true;
                case 2:
                    alsaClient.stop();
                    return true;
                case 3:
                    alsaClient.pause();
                    return true;
                case 4:
                    if (inputStream.available() < requestLength) {
                        return false;
                    }
                    alsaClient.setChannels(inputStream.readByte());
                    alsaClient.setDataType(ALSAClient.DataType.values()[inputStream.readByte()]);
                    alsaClient.setSampleRate(inputStream.readInt());
                    alsaClient.setBufferSize(inputStream.readInt());
                    alsaClient.prepare();
                    createSharedMemory(alsaClient, outputStream);
                    return true;
                case 5:
                    ByteBuffer sharedBuffer = alsaClient.getSharedBuffer();
                    if (sharedBuffer != null) {
                        copySharedBuffer(alsaClient, requestLength, outputStream);
                        alsaClient.writeDataToTrack(alsaClient.getAuxBuffer());
                        sharedBuffer.putInt(0, alsaClient.pointer());
                        return true;
                    }
                    if (inputStream.available() < requestLength) {
                        return false;
                    }
                    alsaClient.writeDataToTrack(inputStream.readByteBuffer(requestLength));
                    return true;
                case 6:
                    alsaClient.drain();
                    return true;
                case 7:
                    lock = outputStream.lock();
                    try {
                        outputStream.writeInt(alsaClient.pointer());
                        if (lock != null) {
                            lock.close();
                            return true;
                        }
                        return true;
                    } finally {
                    }
                case 8:
                    byte channels = inputStream.readByte();
                    ALSAClient.DataType dataType = ALSAClient.DataType.values()[inputStream.readByte()];
                    int sampleRate = inputStream.readInt();
                    int minBufferSize = ALSAClient.latencyMillisToBufferSize(alsaClient.options.latencyMillis, channels, dataType, sampleRate);
                    lock = outputStream.lock();
                    try {
                        outputStream.writeInt(minBufferSize);
                        if (lock != null) {
                            lock.close();
                            return true;
                        }
                        return true;
                    } finally {
                    }
                default:
                    return true;
            }
        }
    
        private void copySharedBuffer(ALSAClient alsaClient, int requestLength, XOutputStream outputStream) throws IOException {
            ByteBuffer sharedBuffer = alsaClient.getSharedBuffer();
            ByteBuffer auxBuffer = alsaClient.getAuxBuffer();
            auxBuffer.position(0).limit(requestLength);
            sharedBuffer.position(4).limit(requestLength + 4);
            auxBuffer.put(sharedBuffer);
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        private void createSharedMemory(ALSAClient alsaClient, XOutputStream outputStream) throws IOException {
            ByteBuffer buffer;
            int shmSize = alsaClient.getBufferSizeInBytes() + 4;
            StringBuilder sb = new StringBuilder();
            sb.append("alsa-shm");
            int i = this.maxSHMemoryId + 1;
            this.maxSHMemoryId = i;
            sb.append(i);
            int fd = SysVSharedMemory.createMemoryFd(sb.toString(), shmSize);
            if (fd >= 0 && (buffer = SysVSharedMemory.mapSHMSegment(fd, shmSize, 0, false)) != null) {
                alsaClient.setSharedBuffer(buffer);
            }
            try {
                XStreamLock lock = outputStream.lock();
                try {
                    outputStream.writeByte((byte) 0);
                    outputStream.setAncillaryFd(fd);
                    if (lock != null) {
                        lock.close();
                    }
                } finally {
                }
            } finally {
                if (fd >= 0) {
                    XConnectorEpoll.closeFd(fd);
                }
            }
        }
    }
  + app/src/main/java/com/winlator/box64/Box64EditPresetDialog.java
    package com.winlator.box64;
    
    import android.content.Context;
    import android.view.LayoutInflater;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.ArrayAdapter;
    import android.widget.EditText;
    import android.widget.LinearLayout;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import android.widget.TextView;
    import android.widget.ToggleButton;
    import com.winlator.R;
    import com.winlator.contentdialog.ContentDialog;
    import com.winlator.core.AppUtils;
    import com.winlator.core.ArrayUtils;
    import com.winlator.core.EnvVars;
    import com.winlator.core.FileUtils;
    import com.winlator.core.StringUtils;
    import java.util.Locale;
    import org.json.JSONArray;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public class Box64EditPresetDialog extends ContentDialog {
        private final Context context;
        private Runnable onConfirmCallback;
        private final Box64Preset preset;
        private final boolean readonly;
    
        public Box64EditPresetDialog(final Context context, String presetId) {
            super(context, R.layout.box64_edit_preset_dialog);
            this.context = context;
            Box64Preset preset = presetId != null ? Box64PresetManager.getPreset(context, presetId) : null;
            this.preset = preset;
            boolean z = (preset == null || preset.isCustom()) ? false : true;
            this.readonly = z;
            setTitle(StringUtils.getString(context, "box64_preset"));
            setIcon(R.drawable.icon_env_var);
            final EditText etName = (EditText) findViewById(R.id.ETName);
            etName.getLayoutParams().width = AppUtils.getPreferredDialogWidth(context);
            etName.setEnabled(true ^ z);
            if (preset != null) {
                etName.setText(preset.name);
            } else {
                etName.setText(context.getString(R.string.preset) + "-" + Box64PresetManager.getNextPresetId(context));
            }
            loadEnvVarsList();
            super.setOnConfirmCallback(new Runnable() { // from class: com.winlator.box64.Box64EditPresetDialog$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    Box64EditPresetDialog.this.lambda$new$0(etName, context);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$0(EditText etName, Context context) {
            String name = etName.getText().toString().trim();
            if (name.isEmpty()) {
                return;
            }
            String name2 = name.replaceAll("[,\\|]+", "");
            Box64Preset box64Preset = this.preset;
            Box64PresetManager.editPreset(context, box64Preset != null ? box64Preset.id : null, name2, getEnvVars());
            Runnable runnable = this.onConfirmCallback;
            if (runnable != null) {
                runnable.run();
            }
        }
    
        @Override // com.winlator.contentdialog.ContentDialog
        public void setOnConfirmCallback(Runnable onConfirmCallback) {
            this.onConfirmCallback = onConfirmCallback;
        }
    
        private EnvVars getEnvVars() {
            EnvVars envVars = new EnvVars();
            LinearLayout parent = (LinearLayout) findViewById(R.id.LLContent);
            for (int i = 0; i < parent.getChildCount(); i++) {
                View child = parent.getChildAt(i);
                String name = ((TextView) child.findViewById(R.id.TextView)).getText().toString();
                Spinner spinner = (Spinner) child.findViewById(R.id.Spinner);
                ToggleButton toggleButton = (ToggleButton) child.findViewById(R.id.ToggleButton);
                boolean toggleSwitch = toggleButton.getVisibility() == 0;
                String value = toggleSwitch ? toggleButton.isChecked() ? "1" : "0" : spinner.getSelectedItem().toString();
                envVars.put(name, value);
            }
            return envVars;
        }
    
        private void loadEnvVarsList() {
            try {
                LinearLayout parent = (LinearLayout) findViewById(R.id.LLContent);
                LayoutInflater inflater = LayoutInflater.from(this.context);
                JSONArray data = new JSONArray(FileUtils.readString(this.context, "box64_env_vars.json"));
                Box64Preset box64Preset = this.preset;
                EnvVars envVars = box64Preset != null ? Box64PresetManager.getEnvVars(this.context, box64Preset.id) : null;
                for (int i = 0; i < data.length(); i++) {
                    JSONObject item = data.getJSONObject(i);
                    final String name = item.getString("name");
                    View child = inflater.inflate(R.layout.box64_env_var_list_item, (ViewGroup) parent, false);
                    ((TextView) child.findViewById(R.id.TextView)).setText(name);
                    child.findViewById(R.id.BTHelp).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.box64.Box64EditPresetDialog$$ExternalSyntheticLambda0
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view) {
                            Box64EditPresetDialog.this.lambda$loadEnvVarsList$1(name, view);
                        }
                    });
                    Spinner spinner = (Spinner) child.findViewById(R.id.Spinner);
                    ToggleButton toggleButton = (ToggleButton) child.findViewById(R.id.ToggleButton);
                    String[] values = ArrayUtils.toStringArray(item.getJSONArray("values"));
                    String value = (envVars == null || !envVars.has(name)) ? item.getString("defaultValue") : envVars.get(name);
                    if (item.optBoolean("toggleSwitch", false)) {
                        toggleButton.setVisibility(0);
                        toggleButton.setEnabled(this.readonly ? false : true);
                        toggleButton.setChecked(value.equals("1"));
                        if (this.readonly) {
                            toggleButton.setAlpha(0.5f);
                        }
                    } else {
                        spinner.setVisibility(0);
                        spinner.setEnabled(this.readonly ? false : true);
                        spinner.setAdapter((SpinnerAdapter) new ArrayAdapter(this.context, android.R.layout.simple_spinner_dropdown_item, values));
                        AppUtils.setSpinnerSelectionFromValue(spinner, value);
                    }
                    parent.addView(child);
                }
            } catch (JSONException e) {
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$loadEnvVarsList$1(String name, View v) {
            String suffix = name.replace("BOX64_", "").toLowerCase(Locale.ENGLISH);
            String value = StringUtils.getString(this.context, "box64_env_var_help__" + suffix);
            AppUtils.showHelpBox(this.context, v, value);
        }
    }
  + app/src/main/java/com/winlator/box64/Box64Preset.java
    package com.winlator.box64;
    
    /* loaded from: classes.dex */
    public class Box64Preset {
        public final String id;
        public final String name;
    
        public Box64Preset(String id, String name) {
            this.id = id;
            this.name = name;
        }
    
        public boolean isCustom() {
            return this.id.startsWith("CUSTOM");
        }
    
        public String toString() {
            return this.name;
        }
    }
  + app/src/main/java/com/winlator/box64/Box64PresetManager.java
    package com.winlator.box64;
    
    import android.content.Context;
    import android.content.SharedPreferences;
    import android.widget.ArrayAdapter;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import androidx.preference.PreferenceManager;
    import com.winlator.R;
    import com.winlator.core.EnvVars;
    import java.util.ArrayList;
    import java.util.Iterator;
    
    /* loaded from: classes.dex */
    public abstract class Box64PresetManager {
        public static EnvVars getEnvVars(Context context, String id) {
            EnvVars envVars = new EnvVars();
            if (!id.equals("STABILITY")) {
                if (!id.equals("COMPATIBILITY")) {
                    if (!id.equals("INTERMEDIATE")) {
                        if (!id.equals("PERFORMANCE")) {
                            if (id.startsWith("CUSTOM")) {
                                Iterator<String[]> it = customPresetsIterator(context).iterator();
                                while (true) {
                                    if (!it.hasNext()) {
                                        break;
                                    }
                                    String[] preset = it.next();
                                    if (preset[0].equals(id)) {
                                        envVars.putAll(preset[2]);
                                        break;
                                    }
                                }
                            }
                        } else {
                            envVars.put("BOX64_DYNAREC_SAFEFLAGS", "1");
                            envVars.put("BOX64_DYNAREC_FASTNAN", "1");
                            envVars.put("BOX64_DYNAREC_FASTROUND", "1");
                            envVars.put("BOX64_DYNAREC_X87DOUBLE", "0");
                            envVars.put("BOX64_DYNAREC_BIGBLOCK", "3");
                            envVars.put("BOX64_DYNAREC_STRONGMEM", "0");
                            envVars.put("BOX64_DYNAREC_FORWARD", "512");
                            envVars.put("BOX64_DYNAREC_CALLRET", "1");
                            envVars.put("BOX64_DYNAREC_WAIT", "1");
                        }
                    } else {
                        envVars.put("BOX64_DYNAREC_SAFEFLAGS", "2");
                        envVars.put("BOX64_DYNAREC_FASTNAN", "1");
                        envVars.put("BOX64_DYNAREC_FASTROUND", "0");
                        envVars.put("BOX64_DYNAREC_X87DOUBLE", "1");
                        envVars.put("BOX64_DYNAREC_BIGBLOCK", "1");
                        envVars.put("BOX64_DYNAREC_STRONGMEM", "0");
                        envVars.put("BOX64_DYNAREC_FORWARD", "128");
                        envVars.put("BOX64_DYNAREC_CALLRET", "0");
                        envVars.put("BOX64_DYNAREC_WAIT", "1");
                    }
                } else {
                    envVars.put("BOX64_DYNAREC_SAFEFLAGS", "2");
                    envVars.put("BOX64_DYNAREC_FASTNAN", "0");
                    envVars.put("BOX64_DYNAREC_FASTROUND", "0");
                    envVars.put("BOX64_DYNAREC_X87DOUBLE", "1");
                    envVars.put("BOX64_DYNAREC_BIGBLOCK", "1");
                    envVars.put("BOX64_DYNAREC_STRONGMEM", "1");
                    envVars.put("BOX64_DYNAREC_FORWARD", "128");
                    envVars.put("BOX64_DYNAREC_CALLRET", "0");
                    envVars.put("BOX64_DYNAREC_WAIT", "1");
                }
            } else {
                envVars.put("BOX64_DYNAREC_SAFEFLAGS", "2");
                envVars.put("BOX64_DYNAREC_FASTNAN", "0");
                envVars.put("BOX64_DYNAREC_FASTROUND", "0");
                envVars.put("BOX64_DYNAREC_X87DOUBLE", "1");
                envVars.put("BOX64_DYNAREC_BIGBLOCK", "0");
                envVars.put("BOX64_DYNAREC_STRONGMEM", "2");
                envVars.put("BOX64_DYNAREC_FORWARD", "128");
                envVars.put("BOX64_DYNAREC_CALLRET", "0");
                envVars.put("BOX64_DYNAREC_WAIT", "0");
            }
            return envVars;
        }
    
        public static ArrayList<Box64Preset> getPresets(Context context) {
            ArrayList<Box64Preset> presets = new ArrayList<>();
            presets.add(new Box64Preset("STABILITY", context.getString(R.string.stability)));
            presets.add(new Box64Preset("COMPATIBILITY", context.getString(R.string.compatibility)));
            presets.add(new Box64Preset("INTERMEDIATE", context.getString(R.string.intermediate)));
            presets.add(new Box64Preset("PERFORMANCE", context.getString(R.string.performance)));
            for (String[] preset : customPresetsIterator(context)) {
                presets.add(new Box64Preset(preset[0], preset[1]));
            }
            return presets;
        }
    
        public static Box64Preset getPreset(Context context, String id) {
            Iterator<Box64Preset> it = getPresets(context).iterator();
            while (it.hasNext()) {
                Box64Preset preset = it.next();
                if (preset.id.equals(id)) {
                    return preset;
                }
            }
            return null;
        }
    
        private static Iterable<String[]> customPresetsIterator(Context context) {
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
            final String customPresetsStr = preferences.getString("box64_custom_presets", "");
            final String[] customPresets = customPresetsStr.split(",");
            final int[] index = {0};
            return new Iterable() { // from class: com.winlator.box64.Box64PresetManager$$ExternalSyntheticLambda0
                @Override // java.lang.Iterable
                public final Iterator iterator() {
                    Iterator lambda$customPresetsIterator$0;
                    lambda$customPresetsIterator$0 = Box64PresetManager.lambda$customPresetsIterator$0(index, customPresets, customPresetsStr);
                    return lambda$customPresetsIterator$0;
                }
            };
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ Iterator lambda$customPresetsIterator$0(final int[] index, final String[] customPresets, final String customPresetsStr) {
            return new Iterator<String[]>() { // from class: com.winlator.box64.Box64PresetManager.1
                @Override // java.util.Iterator
                public boolean hasNext() {
                    return index[0] < customPresets.length && !customPresetsStr.isEmpty();
                }
    
                @Override // java.util.Iterator
                public String[] next() {
                    String[] strArr = customPresets;
                    int[] iArr = index;
                    int i = iArr[0];
                    iArr[0] = i + 1;
                    return strArr[i].split("\\|");
                }
            };
        }
    
        public static int getNextPresetId(Context context) {
            int maxId = 0;
            for (String[] preset : customPresetsIterator(context)) {
                maxId = Math.max(maxId, Integer.parseInt(preset[0].replace("CUSTOM-", "")));
            }
            return maxId + 1;
        }
    
        public static void editPreset(Context context, String id, String name, EnvVars envVars) {
            String customPresetsStr;
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
            String customPresetsStr2 = preferences.getString("box64_custom_presets", "");
            if (id != null) {
                String[] customPresets = customPresetsStr2.split(",");
                int i = 0;
                while (true) {
                    if (i >= customPresets.length) {
                        break;
                    }
                    String[] preset = customPresets[i].split("\\|");
                    if (!preset[0].equals(id)) {
                        i++;
                    } else {
                        customPresets[i] = id + "|" + name + "|" + envVars.toString();
                        break;
                    }
                }
                customPresetsStr = String.join(",", customPresets);
            } else {
                String preset2 = "CUSTOM-" + getNextPresetId(context) + "|" + name + "|" + envVars.toString();
                StringBuilder sb = new StringBuilder();
                sb.append(customPresetsStr2);
                sb.append(customPresetsStr2.isEmpty() ? "" : ",");
                sb.append(preset2);
                customPresetsStr = sb.toString();
            }
            preferences.edit().putString("box64_custom_presets", customPresetsStr).apply();
        }
    
        public static void duplicatePreset(Context context, String id) {
            ArrayList<Box64Preset> presets = getPresets(context);
            Box64Preset originPreset = null;
            Iterator<Box64Preset> it = presets.iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                Box64Preset preset = it.next();
                if (preset.id.equals(id)) {
                    originPreset = preset;
                    break;
                }
            }
            if (originPreset == null) {
                return;
            }
            int i = 1;
            while (true) {
                String newName = originPreset.name + " (" + i + ")";
                boolean found = false;
                Iterator<Box64Preset> it2 = presets.iterator();
                while (true) {
                    if (!it2.hasNext()) {
                        break;
                    } else if (it2.next().name.equals(newName)) {
                        found = true;
                        break;
                    }
                }
                if (found) {
                    i++;
                } else {
                    editPreset(context, null, newName, getEnvVars(context, originPreset.id));
                    return;
                }
            }
        }
    
        public static void removePreset(Context context, String id) {
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
            String oldCustomPresetsStr = preferences.getString("box64_custom_presets", "");
            String newCustomPresetsStr = "";
            String[] customPresets = oldCustomPresetsStr.split(",");
            for (int i = 0; i < customPresets.length; i++) {
                String[] preset = customPresets[i].split("\\|");
                if (!preset[0].equals(id)) {
                    StringBuilder sb = new StringBuilder();
                    sb.append(newCustomPresetsStr);
                    sb.append(!newCustomPresetsStr.isEmpty() ? "," : "");
                    sb.append(customPresets[i]);
                    newCustomPresetsStr = sb.toString();
                }
            }
            preferences.edit().putString("box64_custom_presets", newCustomPresetsStr).apply();
        }
    
        public static void loadSpinner(Spinner spinner, String selectedId) {
            Context context = spinner.getContext();
            ArrayList<Box64Preset> presets = getPresets(context);
            int selectedPosition = 0;
            int i = 0;
            while (true) {
                if (i >= presets.size()) {
                    break;
                }
                if (!presets.get(i).id.equals(selectedId)) {
                    i++;
                } else {
                    selectedPosition = i;
                    break;
                }
            }
            spinner.setAdapter((SpinnerAdapter) new ArrayAdapter(context, android.R.layout.simple_spinner_dropdown_item, presets));
            spinner.setSelection(selectedPosition);
        }
    
        public static String getSpinnerSelectedId(Spinner spinner) {
            SpinnerAdapter adapter = spinner.getAdapter();
            int selectedPosition = spinner.getSelectedItemPosition();
            if (adapter != null && adapter.getCount() > 0 && selectedPosition >= 0) {
                return ((Box64Preset) adapter.getItem(selectedPosition)).id;
            }
            return "INTERMEDIATE";
        }
    }
  + app/src/main/java/com/winlator/container/Container.java
    package com.winlator.container;
    
    import com.winlator.core.AppUtils;
    import com.winlator.core.EnvVars;
    import com.winlator.core.FileUtils;
    import com.winlator.core.KeyValueSet;
    import com.winlator.core.WineInfo;
    import com.winlator.core.WineThemeManager;
    import java.io.File;
    import java.util.Iterator;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public class Container {
        public static final String DEFAULT_DRIVES = "D:" + AppUtils.DIRECTORY_DOWNLOADS + "E:/data/data/com.winlator/storage";
        private String cpuList;
        private String cpuListWoW64;
        private JSONObject extraData;
        public final int id;
        private String name;
        private File rootDir;
        private boolean showFPS;
        private String screenSize = "1280x720";
        private String envVars = "ZINK_DESCRIPTORS=lazy ZINK_DEBUG=compact MESA_SHADER_CACHE_DISABLE=false MESA_SHADER_CACHE_MAX_SIZE=512MB mesa_glthread=true WINEESYNC=1 TU_DEBUG=sysmem,noconform";
        private String graphicsDriver = "vortek";
        private String dxwrapper = "dxvk";
        private String dxwrapperConfig = "";
        private String graphicsDriverConfig = "";
        private String audioDriverConfig = "";
        private String wincomponents = "direct3d=1,directsound=1,directmusic=1,directshow=0,directplay=0,xaudio=1,vcrun2005=0,vcrun2010=1,wmdecoder=1";
        private String audioDriver = "alsa";
        private String drives = DEFAULT_DRIVES;
        private String wineVersion = WineInfo.MAIN_WINE_INFO.identifier();
        private byte startupSelection = 1;
        private String desktopTheme = WineThemeManager.DEFAULT_DESKTOP_THEME;
        private String box64Preset = "INTERMEDIATE";
    
        public Container(int id) {
            this.id = id;
            this.name = "Container-" + id;
        }
    
        public String getName() {
            return this.name;
        }
    
        public void setName(String name) {
            this.name = name;
        }
    
        public String getScreenSize() {
            return this.screenSize;
        }
    
        public void setScreenSize(String screenSize) {
            this.screenSize = screenSize;
        }
    
        public String getEnvVars() {
            return this.envVars;
        }
    
        public void setEnvVars(String envVars) {
            this.envVars = envVars != null ? envVars : "";
        }
    
        public String getGraphicsDriver() {
            return this.graphicsDriver;
        }
    
        public void setGraphicsDriver(String graphicsDriver) {
            this.graphicsDriver = graphicsDriver;
        }
    
        public String getDXWrapper() {
            return this.dxwrapper;
        }
    
        public void setDXWrapper(String dxwrapper) {
            this.dxwrapper = dxwrapper;
        }
    
        public String getGraphicsDriverConfig() {
            return this.graphicsDriverConfig;
        }
    
        public void setGraphicsDriverConfig(String graphicsDriverConfig) {
            this.graphicsDriverConfig = graphicsDriverConfig != null ? graphicsDriverConfig : "";
        }
    
        public String getDXWrapperConfig() {
            return this.dxwrapperConfig;
        }
    
        public void setDXWrapperConfig(String dxwrapperConfig) {
            this.dxwrapperConfig = dxwrapperConfig != null ? dxwrapperConfig : "";
        }
    
        public String getAudioDriverConfig() {
            return this.audioDriverConfig;
        }
    
        public void setAudioDriverConfig(String audioDriverConfig) {
            this.audioDriverConfig = audioDriverConfig != null ? audioDriverConfig : "";
        }
    
        public String getAudioDriver() {
            return this.audioDriver;
        }
    
        public void setAudioDriver(String audioDriver) {
            this.audioDriver = audioDriver;
        }
    
        public String getWinComponents() {
            return this.wincomponents;
        }
    
        public void setWinComponents(String wincomponents) {
            this.wincomponents = wincomponents;
        }
    
        public String getDrives() {
            return this.drives;
        }
    
        public void setDrives(String drives) {
            this.drives = drives;
        }
    
        public boolean isShowFPS() {
            return this.showFPS;
        }
    
        public void setShowFPS(boolean showFPS) {
            this.showFPS = showFPS;
        }
    
        public byte getStartupSelection() {
            return this.startupSelection;
        }
    
        public void setStartupSelection(byte startupSelection) {
            this.startupSelection = startupSelection;
        }
    
        public String getCPUList() {
            return getCPUList(false);
        }
    
        public String getCPUList(boolean allowFallback) {
            String str = this.cpuList;
            if (str != null) {
                return str;
            }
            if (allowFallback) {
                return getFallbackCPUList();
            }
            return null;
        }
    
        public void setCPUList(String cpuList) {
            this.cpuList = (cpuList == null || cpuList.isEmpty()) ? null : cpuList;
        }
    
        public String getCPUListWoW64() {
            return getCPUListWoW64(false);
        }
    
        public String getCPUListWoW64(boolean allowFallback) {
            String str = this.cpuListWoW64;
            if (str != null) {
                return str;
            }
            if (allowFallback) {
                return getFallbackCPUListWoW64();
            }
            return null;
        }
    
        public void setCPUListWoW64(String cpuListWoW64) {
            this.cpuListWoW64 = (cpuListWoW64 == null || cpuListWoW64.isEmpty()) ? null : cpuListWoW64;
        }
    
        public String getBox64Preset() {
            return this.box64Preset;
        }
    
        public void setBox64Preset(String box64Preset) {
            this.box64Preset = box64Preset;
        }
    
        public File getRootDir() {
            return this.rootDir;
        }
    
        public void setRootDir(File rootDir) {
            this.rootDir = rootDir;
        }
    
        public void setExtraData(JSONObject extraData) {
            this.extraData = extraData;
        }
    
        public String getExtra(String name) {
            return getExtra(name, "");
        }
    
        public String getExtra(String name, String fallback) {
            try {
                JSONObject jSONObject = this.extraData;
                return (jSONObject == null || !jSONObject.has(name)) ? fallback : this.extraData.getString(name);
            } catch (JSONException e) {
                return fallback;
            }
        }
    
        public void putExtra(String name, Object value) {
            if (this.extraData == null) {
                this.extraData = new JSONObject();
            }
            try {
                if (value != null) {
                    this.extraData.put(name, value);
                } else {
                    this.extraData.remove(name);
                }
            } catch (JSONException e) {
            }
        }
    
        public String getWineVersion() {
            return this.wineVersion;
        }
    
        public void setWineVersion(String wineVersion) {
            this.wineVersion = wineVersion;
        }
    
        public File getConfigFile() {
            return new File(this.rootDir, ".container");
        }
    
        public File getUserDir() {
            return new File(this.rootDir, ".wine/drive_c/users/xuser/");
        }
    
        public File getStartMenuDir() {
            return new File(this.rootDir, ".wine/drive_c/ProgramData/Microsoft/Windows/Start Menu/");
        }
    
        public File getIconsDir(int size) {
            return new File(this.rootDir, ".local/share/icons/hicolor/" + size + "x" + size + "/apps/");
        }
    
        public String getDesktopTheme() {
            return this.desktopTheme;
        }
    
        public void setDesktopTheme(String desktopTheme) {
            this.desktopTheme = desktopTheme;
        }
    
        public Iterable<Drive> drivesIterator() {
            return drivesIterator(this.drives);
        }
    
        public static Iterable<Drive> drivesIterator(final String drives) {
            final int[] index = {drives.indexOf(":")};
            return new Iterable() { // from class: com.winlator.container.Container$$ExternalSyntheticLambda0
                @Override // java.lang.Iterable
                public final Iterator iterator() {
                    Iterator lambda$drivesIterator$0;
                    lambda$drivesIterator$0 = Container.lambda$drivesIterator$0(index, drives);
                    return lambda$drivesIterator$0;
                }
            };
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ Iterator lambda$drivesIterator$0(final int[] index, final String drives) {
            return new Iterator<Drive>() { // from class: com.winlator.container.Container.1
                @Override // java.util.Iterator
                public boolean hasNext() {
                    return index[0] != -1;
                }
    
                /* JADX WARN: Can't rename method to resolve collision */
                @Override // java.util.Iterator
                public Drive next() {
                    String letter = String.valueOf(drives.charAt(index[0] - 1));
                    int nextIndex = drives.indexOf(":", index[0] + 1);
                    String str = drives;
                    String path = str.substring(index[0] + 1, nextIndex != -1 ? nextIndex - 1 : str.length());
                    index[0] = nextIndex;
                    return new Drive(letter, path);
                }
            };
        }
    
        public void saveData() {
            try {
                JSONObject data = new JSONObject();
                data.put("id", this.id);
                data.put("name", this.name);
                data.put("screenSize", this.screenSize);
                data.put("envVars", this.envVars);
                data.put("cpuList", this.cpuList);
                data.put("cpuListWoW64", this.cpuListWoW64);
                data.put("graphicsDriver", this.graphicsDriver);
                data.put("dxwrapper", this.dxwrapper);
                if (!this.dxwrapperConfig.isEmpty()) {
                    data.put("dxwrapperConfig", this.dxwrapperConfig);
                }
                if (!this.graphicsDriverConfig.isEmpty()) {
                    data.put("graphicsDriverConfig", this.graphicsDriverConfig);
                }
                if (!this.audioDriverConfig.isEmpty()) {
                    data.put("audioDriverConfig", this.audioDriverConfig);
                }
                data.put("audioDriver", this.audioDriver);
                data.put("wincomponents", this.wincomponents);
                data.put("drives", this.drives);
                data.put("showFPS", this.showFPS);
                data.put("startupSelection", (int) this.startupSelection);
                data.put("box64Preset", this.box64Preset);
                data.put("desktopTheme", this.desktopTheme);
                data.put("extraData", this.extraData);
                if (!WineInfo.isMainWineVersion(this.wineVersion)) {
                    data.put("wineVersion", this.wineVersion);
                }
                FileUtils.writeString(getConfigFile(), data.toString());
            } catch (JSONException e) {
            }
        }
    
        public void loadData(JSONObject data) throws JSONException {
            String key;
            this.wineVersion = WineInfo.MAIN_WINE_INFO.identifier();
            this.dxwrapperConfig = "";
            this.graphicsDriverConfig = "";
            this.audioDriverConfig = "";
            checkObsoleteOrMissingProperties(data);
            Iterator<String> it = data.keys();
            while (it.hasNext()) {
                key = it.next();
                switch (key) {
                    case "name":
                        setName(data.getString(key));
                        break;
                    case "screenSize":
                        setScreenSize(data.getString(key));
                        break;
                    case "envVars":
                        setEnvVars(data.getString(key));
                        break;
                    case "cpuList":
                        setCPUList(data.getString(key));
                        break;
                    case "cpuListWoW64":
                        setCPUListWoW64(data.getString(key));
                        break;
                    case "graphicsDriver":
                        setGraphicsDriver(data.getString(key));
                        break;
                    case "wincomponents":
                        setWinComponents(data.getString(key));
                        break;
                    case "dxwrapper":
                        setDXWrapper(data.getString(key));
                        break;
                    case "dxwrapperConfig":
                        setDXWrapperConfig(data.getString(key));
                        break;
                    case "graphicsDriverConfig":
                        setGraphicsDriverConfig(data.getString(key));
                        break;
                    case "audioDriverConfig":
                        setAudioDriverConfig(data.getString(key));
                        break;
                    case "drives":
                        setDrives(data.getString(key));
                        break;
                    case "showFPS":
                        setShowFPS(data.getBoolean(key));
                        break;
                    case "startupSelection":
                        setStartupSelection((byte) data.getInt(key));
                        break;
                    case "extraData":
                        JSONObject extraData = data.getJSONObject(key);
                        checkObsoleteOrMissingProperties(extraData);
                        setExtraData(extraData);
                        break;
                    case "wineVersion":
                        setWineVersion(data.getString(key));
                        break;
                    case "box64Preset":
                        setBox64Preset(data.getString(key));
                        break;
                    case "audioDriver":
                        setAudioDriver(data.getString(key));
                        break;
                    case "desktopTheme":
                        setDesktopTheme(data.getString(key));
                        break;
                }
            }
        }
    
        public static void checkObsoleteOrMissingProperties(JSONObject data) {
            try {
                if (data.has("extraData")) {
                    JSONObject extraData = data.getJSONObject("extraData");
                    int appVersion = Integer.parseInt(extraData.optString("appVersion", "0"));
                    if (appVersion < 16 && data.has("envVars")) {
                        EnvVars defaultEnvVars = new EnvVars("ZINK_DESCRIPTORS=lazy ZINK_DEBUG=compact MESA_SHADER_CACHE_DISABLE=false MESA_SHADER_CACHE_MAX_SIZE=512MB mesa_glthread=true WINEESYNC=1 TU_DEBUG=sysmem,noconform");
                        EnvVars envVars = new EnvVars(data.getString("envVars"));
                        Iterator<String> it = defaultEnvVars.iterator();
                        while (it.hasNext()) {
                            String name = it.next();
                            if (!envVars.has(name)) {
                                envVars.put(name, defaultEnvVars.get(name));
                            }
                        }
                        data.put("envVars", envVars.toString());
                    }
                }
                KeyValueSet wincomponents1 = new KeyValueSet("direct3d=1,directsound=1,directmusic=1,directshow=0,directplay=0,xaudio=1,vcrun2005=0,vcrun2010=1,wmdecoder=1");
                KeyValueSet wincomponents2 = new KeyValueSet(data.getString("wincomponents"));
                String result = "";
                Iterator<String[]> it2 = wincomponents1.iterator();
                while (it2.hasNext()) {
                    String[] wincomponent1 = it2.next();
                    String value = wincomponent1[1];
                    Iterator<String[]> it3 = wincomponents2.iterator();
                    while (true) {
                        if (!it3.hasNext()) {
                            break;
                        }
                        String[] wincomponent2 = it3.next();
                        if (wincomponent1[0].equals(wincomponent2[0])) {
                            value = wincomponent2[1];
                            break;
                        }
                    }
                    StringBuilder sb = new StringBuilder();
                    sb.append(result);
                    sb.append(!result.isEmpty() ? "," : "");
                    sb.append(wincomponent1[0]);
                    sb.append("=");
                    sb.append(value);
                    result = sb.toString();
                }
                data.put("wincomponents", result);
            } catch (JSONException e) {
            }
        }
    
        public static String getFallbackCPUList() {
            String cpuList = "";
            int numProcessors = Runtime.getRuntime().availableProcessors();
            for (int i = 0; i < numProcessors; i++) {
                StringBuilder sb = new StringBuilder();
                sb.append(cpuList);
                sb.append(!cpuList.isEmpty() ? "," : "");
                sb.append(i);
                cpuList = sb.toString();
            }
            return cpuList;
        }
    
        public static String getFallbackCPUListWoW64() {
            String cpuList = "";
            int numProcessors = Runtime.getRuntime().availableProcessors();
            for (int i = numProcessors / 2; i < numProcessors; i++) {
                StringBuilder sb = new StringBuilder();
                sb.append(cpuList);
                sb.append(!cpuList.isEmpty() ? "," : "");
                sb.append(i);
                cpuList = sb.toString();
            }
            return cpuList;
        }
    }
  + app/src/main/java/com/winlator/container/ContainerManager.java
    package com.winlator.container;
    
    import android.content.Context;
    import android.os.Handler;
    import com.winlator.R;
    import com.winlator.container.FileInfo;
    import com.winlator.core.Callback;
    import com.winlator.core.FileUtils;
    import com.winlator.core.TarCompressorUtils;
    import com.winlator.core.WineInfo;
    import com.winlator.xenvironment.RootFS;
    import java.io.File;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.Comparator;
    import java.util.Iterator;
    import java.util.concurrent.Executors;
    import org.json.JSONArray;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public class ContainerManager {
        private final Context context;
        private final File homeDir;
        private final ArrayList<Container> containers = new ArrayList<>();
        private int maxContainerId = 0;
    
        public ContainerManager(Context context) {
            this.context = context;
            File rootDir = RootFS.find(context).getRootDir();
            this.homeDir = new File(rootDir, "home");
            loadContainers();
        }
    
        public Context getContext() {
            return this.context;
        }
    
        public ArrayList<Container> getContainers() {
            return this.containers;
        }
    
        private void loadContainers() {
            this.containers.clear();
            this.maxContainerId = 0;
            try {
                File[] files = this.homeDir.listFiles();
                if (files != null) {
                    for (File file : files) {
                        if (file.isDirectory() && file.getName().startsWith("xuser-")) {
                            Container container = new Container(Integer.parseInt(file.getName().replace("xuser-", "")));
                            container.setRootDir(new File(this.homeDir, "xuser-" + container.id));
                            JSONObject data = new JSONObject(FileUtils.readString(container.getConfigFile()));
                            container.loadData(data);
                            this.containers.add(container);
                            this.maxContainerId = Math.max(this.maxContainerId, container.id);
                        }
                    }
                }
            } catch (JSONException e) {
            }
        }
    
        public void activateContainer(Container container) {
            container.setRootDir(new File(this.homeDir, "xuser-" + container.id));
            File file = new File(this.homeDir, "xuser");
            file.delete();
            FileUtils.symlink("xuser-" + container.id, file.getPath());
        }
    
        public void createContainerAsync(final JSONObject data, final Callback<Container> callback) {
            final Handler handler = new Handler();
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.container.ContainerManager$$ExternalSyntheticLambda3
                @Override // java.lang.Runnable
                public final void run() {
                    ContainerManager.this.lambda$createContainerAsync$1(data, handler, callback);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$createContainerAsync$1(JSONObject data, Handler handler, final Callback callback) {
            final Container container = createContainer(data);
            handler.post(new Runnable() { // from class: com.winlator.container.ContainerManager$$ExternalSyntheticLambda4
                @Override // java.lang.Runnable
                public final void run() {
                    Callback.this.call(container);
                }
            });
        }
    
        public void duplicateContainerAsync(final Container container, final Runnable callback) {
            final Handler handler = new Handler();
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.container.ContainerManager$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    ContainerManager.this.lambda$duplicateContainerAsync$2(container, handler, callback);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$duplicateContainerAsync$2(Container container, Handler handler, Runnable callback) {
            duplicateContainer(container);
            handler.post(callback);
        }
    
        public void removeContainerAsync(final Container container, final Runnable callback) {
            final Handler handler = new Handler();
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.container.ContainerManager$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    ContainerManager.this.lambda$removeContainerAsync$3(container, handler, callback);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$removeContainerAsync$3(Container container, Handler handler, Runnable callback) {
            removeContainer(container);
            handler.post(callback);
        }
    
        /* JADX WARN: Removed duplicated region for block: B:14:0x004c A[Catch: JSONException -> 0x006f, TryCatch #0 {JSONException -> 0x006f, blocks: (B:3:0x0003, B:7:0x002b, B:9:0x003c, B:14:0x004c, B:15:0x0053, B:17:0x005d, B:19:0x0061), top: B:2:0x0003 }] */
        /* JADX WARN: Removed duplicated region for block: B:17:0x005d A[Catch: JSONException -> 0x006f, TryCatch #0 {JSONException -> 0x006f, blocks: (B:3:0x0003, B:7:0x002b, B:9:0x003c, B:14:0x004c, B:15:0x0053, B:17:0x005d, B:19:0x0061), top: B:2:0x0003 }] */
        /* JADX WARN: Removed duplicated region for block: B:19:0x0061 A[Catch: JSONException -> 0x006f, TRY_LEAVE, TryCatch #0 {JSONException -> 0x006f, blocks: (B:3:0x0003, B:7:0x002b, B:9:0x003c, B:14:0x004c, B:15:0x0053, B:17:0x005d, B:19:0x0061), top: B:2:0x0003 }] */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        private com.winlator.container.Container createContainer(org.json.JSONObject r9) {
            /*
                r8 = this;
                java.lang.String r0 = "wineVersion"
                r1 = 0
                int r2 = r8.maxContainerId     // Catch: org.json.JSONException -> L6f
                r3 = 1
                int r2 = r2 + r3
                java.lang.String r4 = "id"
                r9.put(r4, r2)     // Catch: org.json.JSONException -> L6f
                java.io.File r4 = new java.io.File     // Catch: org.json.JSONException -> L6f
                java.io.File r5 = r8.homeDir     // Catch: org.json.JSONException -> L6f
                java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch: org.json.JSONException -> L6f
                r6.<init>()     // Catch: org.json.JSONException -> L6f
                java.lang.String r7 = "xuser-"
                r6.append(r7)     // Catch: org.json.JSONException -> L6f
                r6.append(r2)     // Catch: org.json.JSONException -> L6f
                java.lang.String r6 = r6.toString()     // Catch: org.json.JSONException -> L6f
                r4.<init>(r5, r6)     // Catch: org.json.JSONException -> L6f
                boolean r5 = r4.mkdirs()     // Catch: org.json.JSONException -> L6f
                if (r5 != 0) goto L2b
                return r1
            L2b:
                com.winlator.container.Container r5 = new com.winlator.container.Container     // Catch: org.json.JSONException -> L6f
                r5.<init>(r2)     // Catch: org.json.JSONException -> L6f
                r5.setRootDir(r4)     // Catch: org.json.JSONException -> L6f
                r5.loadData(r9)     // Catch: org.json.JSONException -> L6f
                boolean r6 = r9.has(r0)     // Catch: org.json.JSONException -> L6f
                if (r6 == 0) goto L49
                java.lang.String r6 = r9.getString(r0)     // Catch: org.json.JSONException -> L6f
                boolean r6 = com.winlator.core.WineInfo.isMainWineVersion(r6)     // Catch: org.json.JSONException -> L6f
                if (r6 == 0) goto L47
                goto L49
            L47:
                r6 = 0
                goto L4a
            L49:
                r6 = r3
            L4a:
                if (r6 != 0) goto L53
                java.lang.String r0 = r9.getString(r0)     // Catch: org.json.JSONException -> L6f
                r5.setWineVersion(r0)     // Catch: org.json.JSONException -> L6f
            L53:
                java.lang.String r0 = r5.getWineVersion()     // Catch: org.json.JSONException -> L6f
                boolean r0 = r8.extractContainerPatternFile(r0, r4)     // Catch: org.json.JSONException -> L6f
                if (r0 != 0) goto L61
                com.winlator.core.FileUtils.delete(r4)     // Catch: org.json.JSONException -> L6f
                return r1
            L61:
                r5.saveData()     // Catch: org.json.JSONException -> L6f
                int r0 = r8.maxContainerId     // Catch: org.json.JSONException -> L6f
                int r0 = r0 + r3
                r8.maxContainerId = r0     // Catch: org.json.JSONException -> L6f
                java.util.ArrayList<com.winlator.container.Container> r0 = r8.containers     // Catch: org.json.JSONException -> L6f
                r0.add(r5)     // Catch: org.json.JSONException -> L6f
                return r5
            L6f:
                r0 = move-exception
                return r1
            */
            throw new UnsupportedOperationException("Method not decompiled: com.winlator.container.ContainerManager.createContainer(org.json.JSONObject):com.winlator.container.Container");
        }
    
        private void duplicateContainer(Container srcContainer) {
            int id = this.maxContainerId + 1;
            File dstDir = new File(this.homeDir, "xuser-" + id);
            if (dstDir.mkdirs()) {
                if (!FileUtils.copy(srcContainer.getRootDir(), dstDir, new Callback() { // from class: com.winlator.container.ContainerManager$$ExternalSyntheticLambda0
                    @Override // com.winlator.core.Callback
                    public final void call(Object obj) {
                        FileUtils.chmod((File) obj, 505);
                    }
                })) {
                    FileUtils.delete(dstDir);
                    return;
                }
                Container dstContainer = new Container(id);
                dstContainer.setRootDir(dstDir);
                dstContainer.setName(srcContainer.getName() + " (" + this.context.getString(R.string.copy) + ")");
                dstContainer.setScreenSize(srcContainer.getScreenSize());
                dstContainer.setEnvVars(srcContainer.getEnvVars());
                dstContainer.setCPUList(srcContainer.getCPUList());
                dstContainer.setCPUListWoW64(srcContainer.getCPUListWoW64());
                dstContainer.setGraphicsDriver(srcContainer.getGraphicsDriver());
                dstContainer.setGraphicsDriverConfig(srcContainer.getGraphicsDriverConfig());
                dstContainer.setDXWrapper(srcContainer.getDXWrapper());
                dstContainer.setDXWrapperConfig(srcContainer.getDXWrapperConfig());
                dstContainer.setAudioDriver(srcContainer.getAudioDriver());
                dstContainer.setAudioDriverConfig(srcContainer.getAudioDriverConfig());
                dstContainer.setWinComponents(srcContainer.getWinComponents());
                dstContainer.setDrives(srcContainer.getDrives());
                dstContainer.setShowFPS(srcContainer.isShowFPS());
                dstContainer.setStartupSelection(srcContainer.getStartupSelection());
                dstContainer.setBox64Preset(srcContainer.getBox64Preset());
                dstContainer.setDesktopTheme(srcContainer.getDesktopTheme());
                dstContainer.saveData();
                this.maxContainerId++;
                this.containers.add(dstContainer);
            }
        }
    
        private void removeContainer(Container container) {
            if (FileUtils.delete(container.getRootDir())) {
                this.containers.remove(container);
            }
        }
    
        public ArrayList<Shortcut> loadShortcuts(Shortcut selectedFolder) {
            ArrayList<Shortcut> shortcuts = new ArrayList<>();
            if (selectedFolder != null) {
                File[] files = selectedFolder.file.listFiles();
                if (files != null) {
                    for (File file : files) {
                        if (file.getName().endsWith(".desktop") || file.isDirectory()) {
                            shortcuts.add(new Shortcut(selectedFolder.container, file));
                        }
                    }
                }
            } else {
                String desktopDirname = this.context.getString(R.string.desktop);
                Iterator<Container> it = this.containers.iterator();
                while (it.hasNext()) {
                    Container container = it.next();
                    File desktopDir = new File(container.getUserDir(), desktopDirname);
                    File[] files2 = desktopDir.listFiles();
                    if (files2 != null) {
                        for (File file2 : files2) {
                            if (file2.getName().endsWith(".desktop") || file2.isDirectory()) {
                                shortcuts.add(new Shortcut(container, file2));
                            }
                        }
                    }
                }
            }
            shortcuts.sort(new Comparator() { // from class: com.winlator.container.ContainerManager$$ExternalSyntheticLambda5
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$loadShortcuts$5;
                    lambda$loadShortcuts$5 = ContainerManager.lambda$loadShortcuts$5((Shortcut) obj, (Shortcut) obj2);
                    return lambda$loadShortcuts$5;
                }
            });
            return shortcuts;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ int lambda$loadShortcuts$5(Shortcut a, Shortcut b) {
            int value = Boolean.compare(b.file.isDirectory(), a.file.isDirectory());
            return value == 0 ? a.name.compareTo(b.name) : value;
        }
    
        public ArrayList<FileInfo> loadFiles(Container container, FileInfo parent) {
            ArrayList<FileInfo> fileInfos = new ArrayList<>();
            if (parent != null) {
                return parent.list();
            }
            String rootPath = container.getRootDir().getPath();
            fileInfos.add(new FileInfo(container, "C:", rootPath + "/.wine/drive_c", FileInfo.Type.DRIVE));
            for (Drive drive : container.drivesIterator()) {
                fileInfos.add(new FileInfo(container, drive.letter + ":", drive.path, FileInfo.Type.DRIVE));
            }
            File userDir = container.getUserDir();
            File documentsDir = new File(userDir, this.context.getString(R.string.documents));
            File favoritesDir = new File(userDir, this.context.getString(R.string.favorites));
            String name = documentsDir.getName();
            String path = documentsDir.getPath();
            FileInfo.Type type = FileInfo.Type.DIRECTORY;
            fileInfos.add(new FileInfo(container, name, path, type));
            fileInfos.add(new FileInfo(container, favoritesDir.getName(), favoritesDir.getPath(), type));
            Collections.sort(fileInfos);
            return fileInfos;
        }
    
        public int getNextContainerId() {
            return this.maxContainerId + 1;
        }
    
        public Container getContainerById(int id) {
            Iterator<Container> it = this.containers.iterator();
            while (it.hasNext()) {
                Container container = it.next();
                if (container.id == id) {
                    return container;
                }
            }
            return null;
        }
    
        private void copyCommonDlls(String srcName, String dstName, JSONObject commonDlls, File containerDir) throws JSONException {
            File srcDir = new File(RootFS.find(this.context).getRootDir(), "/opt/wine/lib/wine/" + srcName);
            JSONArray dlnames = commonDlls.getJSONArray(dstName);
            for (int i = 0; i < dlnames.length(); i++) {
                String dlname = dlnames.getString(i);
                File dstFile = new File(containerDir, ".wine/drive_c/windows/" + dstName + "/" + dlname);
                FileUtils.copy(new File(srcDir, dlname), dstFile);
            }
        }
    
        private boolean extractContainerPatternFile(String wineVersion, File containerDir) {
            if (WineInfo.isMainWineVersion(wineVersion)) {
                boolean result = TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, this.context, "container_pattern.tzst", containerDir);
                if (result) {
                    try {
                        JSONObject commonDlls = new JSONObject(FileUtils.readString(this.context, "common_dlls.json"));
                        copyCommonDlls("x86_64-windows", "system32", commonDlls, containerDir);
                        copyCommonDlls("i386-windows", "syswow64", commonDlls, containerDir);
                    } catch (JSONException e) {
                        return false;
                    }
                }
                return result;
            }
            File installedWineDir = RootFS.find(this.context).getInstalledWineDir();
            WineInfo wineInfo = WineInfo.fromIdentifier(this.context, wineVersion);
            File file = new File(installedWineDir, "container-pattern-" + wineInfo.fullVersion() + ".tzst");
            return TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, file, containerDir);
        }
    }
  + app/src/main/java/com/winlator/container/Drive.java
    package com.winlator.container;
    
    /* loaded from: classes.dex */
    public class Drive {
        public String letter;
        public String path;
    
        public Drive(String letter, String path) {
            this.letter = letter;
            this.path = path;
        }
    }
  + app/src/main/java/com/winlator/container/FileInfo.java
    package com.winlator.container;
    
    import com.winlator.core.FileUtils;
    import com.winlator.core.StringUtils;
    import com.winlator.core.WineUtils;
    import com.winlator.win32.MSLink;
    import java.io.File;
    import java.util.ArrayList;
    import java.util.Collections;
    
    /* loaded from: classes.dex */
    public class FileInfo implements Comparable<FileInfo> {
        private final Container container;
        private MSLink.LinkInfo linkInfo;
        public final String name;
        public final String path;
        public final Type type;
    
        public enum Type {
            FILE,
            DIRECTORY,
            DRIVE
        }
    
        public FileInfo(Container container, String path, Type type) {
            this(container, FileUtils.getName(path), path, type);
        }
    
        public FileInfo(Container container, String name, String path, Type type) {
            this.container = container;
            this.name = name;
            this.path = StringUtils.removeEndSlash(path);
            this.type = type;
        }
    
        public ArrayList<FileInfo> list() {
            File[] files;
            ArrayList<FileInfo> result = new ArrayList<>();
            File linkFile = getLinkFile();
            File parent = linkFile != null ? linkFile : toFile();
            if (parent.isDirectory() && (files = parent.listFiles()) != null) {
                for (File file : files) {
                    result.add(new FileInfo(this.container, file.getPath(), file.isDirectory() ? Type.DIRECTORY : Type.FILE));
                }
            }
            Collections.sort(result);
            return result;
        }
    
        public long getSize() {
            if (this.type == Type.FILE) {
                return toFile().length();
            }
            return 0L;
        }
    
        public int getItemCount() {
            File linkFile = getLinkFile();
            File file = linkFile != null ? linkFile : toFile();
            String[] items = file.list();
            if (items != null) {
                return items.length;
            }
            return 0;
        }
    
        public File toFile() {
            return new File(this.path);
        }
    
        public File getLinkFile() {
            MSLink.LinkInfo linkInfo = getLinkinfo();
            if (linkInfo != null) {
                return new File(WineUtils.dosToUnixPath(linkInfo.targetPath, this.container));
            }
            return null;
        }
    
        public MSLink.LinkInfo getLinkinfo() {
            MSLink.LinkInfo linkInfo = this.linkInfo;
            if (linkInfo != null) {
                return linkInfo;
            }
            if (this.name.endsWith(".lnk")) {
                this.linkInfo = MSLink.extractLinkInfo(toFile());
            }
            return this.linkInfo;
        }
    
        public boolean renameTo(String newName) {
            String newName2 = StringUtils.clearReservedChars(newName);
            File from = toFile();
            File to = new File(from.getParentFile(), newName2);
            return !to.exists() && from.renameTo(to);
        }
    
        public String getDisplayName() {
            MSLink.LinkInfo linkInfo = getLinkinfo();
            String str = this.name;
            return linkInfo != null ? FileUtils.getBasename(str) : str;
        }
    
        @Override // java.lang.Comparable
        public int compareTo(FileInfo other) {
            Type type = other.type;
            Type type2 = Type.DRIVE;
            int value = Boolean.compare(type == type2, this.type == type2);
            if (value == 0) {
                Type type3 = other.type;
                Type type4 = Type.DIRECTORY;
                value = Boolean.compare(type3 == type4, this.type == type4);
            }
            return value == 0 ? this.name.compareTo(other.name) : value;
        }
    }
  + app/src/main/java/com/winlator/container/Shortcut.java
    package com.winlator.container;
    
    import android.graphics.Bitmap;
    import android.graphics.BitmapFactory;
    import com.winlator.core.FileUtils;
    import com.winlator.core.StringUtils;
    import java.io.File;
    import java.util.Iterator;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public class Shortcut {
        public final Container container;
        private final JSONObject extraData = new JSONObject();
        public final File file;
        public final Bitmap icon;
        public final File iconFile;
        public final String name;
        public final String path;
        public final String wmClass;
    
        public Shortcut(Container container, File file) {
            String execArgs;
            Container container2 = container;
            this.container = container2;
            this.file = file;
            if (file.isDirectory()) {
                this.name = file.getName();
                this.path = null;
                this.icon = null;
                this.iconFile = null;
                this.wmClass = null;
                return;
            }
            short[] iconSizes = {64, 48, 32, 24, 16, 128, 256};
            int i = 1;
            Iterator<String> it = FileUtils.readLines(file, true).iterator();
            String section = "";
            String wmClass = "";
            File iconFile = null;
            Bitmap icon = null;
            String execArgs2 = "";
            while (it.hasNext()) {
                String line = it.next();
                if (!line.startsWith("#")) {
                    if (line.startsWith("[")) {
                        section = line.substring(i, line.indexOf("]"));
                    } else {
                        int index = line.indexOf("=");
                        if (index != -1) {
                            String key = line.substring(0, index);
                            String value = line.substring(index + 1);
                            if (section.equals("Desktop Entry")) {
                                execArgs2 = key.equals("Exec") ? value : execArgs2;
                                if (!key.equals("Icon")) {
                                    execArgs = execArgs2;
                                } else {
                                    int length = iconSizes.length;
                                    File iconFile2 = iconFile;
                                    int i2 = 0;
                                    while (true) {
                                        if (i2 >= length) {
                                            execArgs = execArgs2;
                                            iconFile = iconFile2;
                                            break;
                                        }
                                        short iconSize = iconSizes[i2];
                                        int i3 = length;
                                        File iconsDir = container2.getIconsDir(iconSize);
                                        StringBuilder sb = new StringBuilder();
                                        sb.append(value);
                                        execArgs = execArgs2;
                                        sb.append(".png");
                                        iconFile2 = new File(iconsDir, sb.toString());
                                        if (!iconFile2.isFile()) {
                                            i2++;
                                            container2 = container;
                                            length = i3;
                                            execArgs2 = execArgs;
                                        } else {
                                            icon = BitmapFactory.decodeFile(iconFile2.getPath());
                                            iconFile = iconFile2;
                                            break;
                                        }
                                    }
                                }
                                if (key.equals("StartupWMClass")) {
                                    wmClass = value;
                                    execArgs2 = execArgs;
                                } else {
                                    execArgs2 = execArgs;
                                }
                            } else if (section.equals("Extra Data")) {
                                try {
                                    this.extraData.put(key, value);
                                } catch (JSONException e) {
                                }
                            }
                        }
                    }
                    container2 = container;
                    i = 1;
                }
            }
            this.name = FileUtils.getBasename(file.getPath());
            this.icon = icon;
            this.iconFile = iconFile;
            this.path = StringUtils.unescapeDOSPath(execArgs2.substring(execArgs2.lastIndexOf("wine ") + 4));
            this.wmClass = wmClass;
            Container.checkObsoleteOrMissingProperties(this.extraData);
        }
    
        public String getExtra(String name) {
            return getExtra(name, "");
        }
    
        public String getExtra(String name, String fallback) {
            try {
                return this.extraData.has(name) ? this.extraData.getString(name) : fallback;
            } catch (JSONException e) {
                return fallback;
            }
        }
    
        public void putExtra(String name, String value) {
            try {
                if (value != null) {
                    this.extraData.put(name, value);
                } else {
                    this.extraData.remove(name);
                }
            } catch (JSONException e) {
            }
        }
    
        public void saveData() {
            String content = "[Desktop Entry]\n";
            Iterator<String> it = FileUtils.readLines(this.file).iterator();
            while (it.hasNext()) {
                String line = it.next();
                if (line.contains("[Extra Data]")) {
                    break;
                }
                if (!line.contains("[Desktop Entry]") && !line.isEmpty()) {
                    content = content + line + "\n";
                }
            }
            if (this.extraData.length() > 0) {
                content = content + "\n[Extra Data]\n";
                Iterator<String> keys = this.extraData.keys();
                while (keys.hasNext()) {
                    String key = keys.next();
                    try {
                        content = content + key + "=" + this.extraData.getString(key) + "\n";
                    } catch (JSONException e) {
                    }
                }
            }
            FileUtils.writeString(this.file, content);
        }
    
        public File getLinkFile() {
            String name = this.file.getName().replace(".desktop", ".lnk");
            return new File(this.file.getParentFile(), name);
        }
    
        public void remove() {
            if (this.file.isDirectory()) {
                FileUtils.delete(this.file);
                return;
            }
            File linkFile = getLinkFile();
            if (this.file.delete()) {
                File file = this.iconFile;
                if (file != null) {
                    file.delete();
                }
                if (linkFile.isFile()) {
                    linkFile.delete();
                }
            }
        }
    }
  + app/src/main/java/com/winlator/contentdialog/AddEnvVarDialog.java
    package com.winlator.contentdialog;
    
    import android.content.Context;
    import android.view.Menu;
    import android.view.MenuItem;
    import android.view.View;
    import android.widget.EditText;
    import android.widget.PopupMenu;
    import com.winlator.R;
    import com.winlator.widget.EnvVarsView;
    
    /* loaded from: classes.dex */
    public class AddEnvVarDialog extends ContentDialog {
        public AddEnvVarDialog(final Context context, final EnvVarsView envVarsView) {
            super(context, R.layout.add_env_var_dialog);
            final EditText etName = (EditText) findViewById(R.id.ETName);
            final EditText etValue = (EditText) findViewById(R.id.ETValue);
            setTitle(context.getString(R.string.new_environment_variable));
            setIcon(R.drawable.icon_env_var);
            findViewById(R.id.BTMenu).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.contentdialog.AddEnvVarDialog$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    AddEnvVarDialog.lambda$new$1(context, etName, view);
                }
            });
            setOnConfirmCallback(new Runnable() { // from class: com.winlator.contentdialog.AddEnvVarDialog$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    AddEnvVarDialog.lambda$new$2(etName, etValue, envVarsView);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$1(Context context, final EditText etName, View v) {
            PopupMenu popupMenu = new PopupMenu(context, v);
            Menu menu = popupMenu.getMenu();
            for (String[] knownEnvVar : EnvVarsView.knownEnvVars) {
                menu.add(knownEnvVar[0]);
            }
            popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() { // from class: com.winlator.contentdialog.AddEnvVarDialog$$ExternalSyntheticLambda1
                @Override // android.widget.PopupMenu.OnMenuItemClickListener
                public final boolean onMenuItemClick(MenuItem menuItem) {
                    boolean lambda$new$0;
                    lambda$new$0 = AddEnvVarDialog.lambda$new$0(etName, menuItem);
                    return lambda$new$0;
                }
            });
            popupMenu.show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ boolean lambda$new$0(EditText etName, MenuItem menuItem) {
            etName.setText(menuItem.getTitle());
            return true;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$2(EditText etName, EditText etValue, EnvVarsView envVarsView) {
            String name = etName.getText().toString().trim().replace(" ", "");
            String value = etValue.getText().toString().trim().replace(" ", "");
            if (!name.isEmpty() && !envVarsView.containsName(name)) {
                envVarsView.add(name, value);
            }
        }
    }
  + app/src/main/java/com/winlator/contentdialog/AudioDriverConfigDialog.java
    package com.winlator.contentdialog;
    
    import android.content.Context;
    import android.view.View;
    import android.widget.Spinner;
    import com.winlator.R;
    import com.winlator.core.KeyValueSet;
    import com.winlator.widget.SeekBar;
    
    /* loaded from: classes.dex */
    public class AudioDriverConfigDialog extends ContentDialog {
        public AudioDriverConfigDialog(final View anchor) {
            super(anchor.getContext(), R.layout.audio_driver_config_dialog);
            Context context = anchor.getContext();
            setIcon(R.drawable.icon_audio_settings);
            setTitle(context.getString(R.string.audio) + " " + context.getString(R.string.configuration));
            final Spinner sPerformanceMode = (Spinner) findViewById(R.id.SPerformanceMode);
            final SeekBar sbVolume = (SeekBar) findViewById(R.id.SBVolume);
            final SeekBar sbLatencyMillis = (SeekBar) findViewById(R.id.SBLatencyMillis);
            KeyValueSet config = new KeyValueSet(anchor.getTag());
            sPerformanceMode.setSelection(config.getInt("performanceMode", 1));
            sbVolume.setValue(config.getFloat("volume", 1.0f) * 100.0f);
            sbLatencyMillis.setValue(config.getInt("latencyMillis", 40));
            setOnConfirmCallback(new Runnable() { // from class: com.winlator.contentdialog.AudioDriverConfigDialog$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    AudioDriverConfigDialog.lambda$new$0(sPerformanceMode, sbVolume, sbLatencyMillis, anchor);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0(Spinner sPerformanceMode, SeekBar sbVolume, SeekBar sbLatencyMillis, View anchor) {
            KeyValueSet newConfig = new KeyValueSet();
            newConfig.put("performanceMode", Integer.valueOf(sPerformanceMode.getSelectedItemPosition()));
            newConfig.put("volume", Float.valueOf(sbVolume.getValue() / 100.0f));
            newConfig.put("latencyMillis", Integer.valueOf((int) sbLatencyMillis.getValue()));
            anchor.setTag(newConfig.toString());
        }
    }
  + app/src/main/java/com/winlator/contentdialog/ContentDialog.java
    package com.winlator.contentdialog;
    
    import android.app.Dialog;
    import android.content.Context;
    import android.util.SparseBooleanArray;
    import android.view.LayoutInflater;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.ArrayAdapter;
    import android.widget.EditText;
    import android.widget.FrameLayout;
    import android.widget.ImageView;
    import android.widget.LinearLayout;
    import android.widget.ListAdapter;
    import android.widget.ListView;
    import android.widget.TextView;
    import com.winlator.R;
    import com.winlator.core.AppUtils;
    import com.winlator.core.Callback;
    import java.util.ArrayList;
    
    /* loaded from: classes.dex */
    public class ContentDialog extends Dialog {
        private final View contentView;
        private Runnable onCancelCallback;
        private Runnable onConfirmCallback;
    
        public ContentDialog(Context context) {
            this(context, 0);
        }
    
        public ContentDialog(Context context, int layoutResId) {
            super(context, R.style.ContentDialog);
            View inflate = LayoutInflater.from(context).inflate(R.layout.content_dialog, (ViewGroup) null);
            this.contentView = inflate;
            if (layoutResId > 0) {
                FrameLayout frameLayout = (FrameLayout) inflate.findViewById(R.id.FrameLayout);
                frameLayout.setVisibility(0);
                View view = LayoutInflater.from(context).inflate(layoutResId, (ViewGroup) frameLayout, false);
                frameLayout.addView(view);
            }
            View confirmButton = inflate.findViewById(R.id.BTConfirm);
            confirmButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.contentdialog.ContentDialog$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    ContentDialog.this.lambda$new$0(view2);
                }
            });
            View cancelButton = inflate.findViewById(R.id.BTCancel);
            cancelButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.contentdialog.ContentDialog$$ExternalSyntheticLambda1
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    ContentDialog.this.lambda$new$1(view2);
                }
            });
            setContentView(inflate);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$0(View v) {
            Runnable runnable = this.onConfirmCallback;
            if (runnable != null) {
                runnable.run();
            }
            dismiss();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$1(View v) {
            Runnable runnable = this.onCancelCallback;
            if (runnable != null) {
                runnable.run();
            }
            dismiss();
        }
    
        public View getContentView() {
            return this.contentView;
        }
    
        public void setOnConfirmCallback(Runnable onConfirmCallback) {
            this.onConfirmCallback = onConfirmCallback;
        }
    
        public void setOnCancelCallback(Runnable onCancelCallback) {
            this.onCancelCallback = onCancelCallback;
        }
    
        @Override // android.app.Dialog
        public void setTitle(int titleResId) {
            setTitle(getContext().getString(titleResId));
        }
    
        public void setIcon(int iconResId) {
            ImageView imageView = (ImageView) findViewById(R.id.IVIcon);
            imageView.setImageResource(iconResId);
            imageView.setVisibility(0);
        }
    
        public void setTitle(String title) {
            LinearLayout titleBar = (LinearLayout) findViewById(R.id.LLTitleBar);
            TextView tvTitle = (TextView) findViewById(R.id.TVTitle);
            if (title != null && !title.isEmpty()) {
                tvTitle.setText(title);
                titleBar.setVisibility(0);
            } else {
                tvTitle.setText("");
                titleBar.setVisibility(8);
            }
        }
    
        public void setBottomBarText(String bottomBarText) {
            TextView tvBottomBarText = (TextView) findViewById(R.id.TVBottomBarText);
            if (bottomBarText != null && !bottomBarText.isEmpty()) {
                tvBottomBarText.setText(bottomBarText);
                tvBottomBarText.setVisibility(0);
            } else {
                tvBottomBarText.setText("");
                tvBottomBarText.setVisibility(8);
            }
        }
    
        public void setMessage(int msgResId) {
            setMessage(getContext().getString(msgResId));
        }
    
        public void setMessage(String message) {
            TextView tvMessage = (TextView) findViewById(R.id.TVMessage);
            if (message != null && !message.isEmpty()) {
                tvMessage.setText(message);
                tvMessage.setVisibility(0);
            } else {
                tvMessage.setText("");
                tvMessage.setVisibility(8);
            }
        }
    
        public static void alert(Context context, int msgResId, Runnable callback) {
            ContentDialog dialog = new ContentDialog(context);
            dialog.setMessage(msgResId);
            dialog.setOnConfirmCallback(callback);
            dialog.findViewById(R.id.BTCancel).setVisibility(8);
            dialog.show();
        }
    
        public static void confirm(Context context, int msgResId, Runnable callback) {
            ContentDialog dialog = new ContentDialog(context);
            dialog.setMessage(msgResId);
            dialog.setOnConfirmCallback(callback);
            dialog.show();
        }
    
        public static void prompt(Context context, int titleResId, String defaultText, final Callback<String> callback) {
            ContentDialog dialog = new ContentDialog(context);
            final EditText editText = (EditText) dialog.findViewById(R.id.EditText);
            editText.setHint(R.string.untitled);
            if (defaultText != null) {
                editText.setText(defaultText);
            }
            editText.setVisibility(0);
            dialog.setTitle(titleResId);
            dialog.setOnConfirmCallback(new Runnable() { // from class: com.winlator.contentdialog.ContentDialog$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    ContentDialog.lambda$prompt$2(editText, callback);
                }
            });
            dialog.show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$prompt$2(EditText editText, Callback callback) {
            String text = editText.getText().toString().trim();
            if (!text.isEmpty()) {
                callback.call(text);
            }
        }
    
        public static void showSelectionList(Context context, int titleResId, String[] items, boolean multiSelection, Callback<ArrayList<Integer>> callback) {
            showSelectionList(context, context.getString(titleResId), items, multiSelection, callback);
        }
    
        public static void showSelectionList(Context context, String title, String[] items, boolean multiSelection, final Callback<ArrayList<Integer>> callback) {
            ContentDialog dialog = new ContentDialog(context);
            final ListView listView = (ListView) dialog.findViewById(R.id.ListView);
            listView.getLayoutParams().width = AppUtils.getPreferredDialogWidth(context);
            listView.setChoiceMode(multiSelection ? 2 : 1);
            int layoutResId = multiSelection ? android.R.layout.simple_list_item_multiple_choice : android.R.layout.simple_list_item_single_choice;
            listView.setAdapter((ListAdapter) new ArrayAdapter(context, layoutResId, items));
            listView.setVisibility(0);
            dialog.setTitle(title);
            dialog.setOnConfirmCallback(new Runnable() { // from class: com.winlator.contentdialog.ContentDialog$$ExternalSyntheticLambda3
                @Override // java.lang.Runnable
                public final void run() {
                    ContentDialog.lambda$showSelectionList$3(listView, callback);
                }
            });
            dialog.show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$showSelectionList$3(ListView listView, Callback callback) {
            ArrayList<Integer> result = new ArrayList<>();
            SparseBooleanArray checkedItemPositions = listView.getCheckedItemPositions();
            for (int i = 0; i < checkedItemPositions.size(); i++) {
                if (checkedItemPositions.valueAt(i)) {
                    result.add(Integer.valueOf(checkedItemPositions.keyAt(i)));
                }
            }
            callback.call(result);
        }
    }
  + app/src/main/java/com/winlator/contentdialog/CreateFolderDialog.java
    package com.winlator.contentdialog;
    
    import android.content.Context;
    import android.widget.ArrayAdapter;
    import android.widget.EditText;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import com.winlator.R;
    import com.winlator.container.Container;
    import com.winlator.container.ContainerManager;
    import java.util.ArrayList;
    import java.util.Iterator;
    
    /* loaded from: classes.dex */
    public class CreateFolderDialog extends ContentDialog {
        private OnCreateFolderListener onCreateFolderListener;
    
        public interface OnCreateFolderListener {
            void onCreateFolder(Container container, String str);
        }
    
        public CreateFolderDialog(ContainerManager manager) {
            super(manager.getContext(), R.layout.create_folder_dialog);
            Context context = manager.getContext();
            final Spinner sContainer = (Spinner) findViewById(R.id.SContainer);
            final EditText etName = (EditText) findViewById(R.id.ETName);
            setTitle(context.getString(R.string.new_folder));
            final ArrayList<Container> containers = manager.getContainers();
            ArrayList<String> items = new ArrayList<>();
            Iterator<Container> it = containers.iterator();
            while (it.hasNext()) {
                Container container = it.next();
                items.add(container.getName());
            }
            sContainer.setAdapter((SpinnerAdapter) new ArrayAdapter(context, android.R.layout.simple_spinner_dropdown_item, items));
            setOnConfirmCallback(new Runnable() { // from class: com.winlator.contentdialog.CreateFolderDialog$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    CreateFolderDialog.this.lambda$new$0(etName, containers, sContainer);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$0(EditText etName, ArrayList containers, Spinner sContainer) {
            String name = etName.getText().toString().trim();
            Container container = (Container) containers.get(sContainer.getSelectedItemPosition());
            if (this.onCreateFolderListener == null || name.isEmpty()) {
                return;
            }
            this.onCreateFolderListener.onCreateFolder(container, name);
        }
    
        public void setOnCreateFolderListener(OnCreateFolderListener onCreateFolderListener) {
            this.onCreateFolderListener = onCreateFolderListener;
        }
    }
  + app/src/main/java/com/winlator/contentdialog/DXVKConfigDialog.java
    package com.winlator.contentdialog;
    
    import android.content.Context;
    import android.view.View;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import com.winlator.R;
    import com.winlator.core.AppUtils;
    import com.winlator.core.DefaultVersion;
    import com.winlator.core.EnvVars;
    import com.winlator.core.FileUtils;
    import com.winlator.core.InstallableComponents;
    import com.winlator.core.KeyValueSet;
    import com.winlator.core.StringUtils;
    import com.winlator.widget.GPUCardAdapter;
    import com.winlator.xenvironment.RootFS;
    import java.io.File;
    
    /* loaded from: classes.dex */
    public class DXVKConfigDialog extends ContentDialog {
        public DXVKConfigDialog(String graphicsDriver, final View anchor) {
            super(anchor.getContext(), R.layout.dxvk_config_dialog);
            setIcon(R.drawable.icon_display_settings);
            Context context = anchor.getContext();
            setTitle("DXVK " + context.getString(R.string.configuration));
            final Spinner sVersion = (Spinner) findViewById(R.id.SVersion);
            final Spinner sFramerate = (Spinner) findViewById(R.id.SFramerate);
            final Spinner sMaxDeviceMemory = (Spinner) findViewById(R.id.SMaxDeviceMemory);
            final Spinner sCustomDevice = (Spinner) findViewById(R.id.SCustomDevice);
            KeyValueSet config = new KeyValueSet(anchor.getTag());
            AppUtils.setSpinnerSelectionFromIdentifier(sFramerate, config.get("framerate", "0"));
            AppUtils.setSpinnerSelectionFromNumber(sMaxDeviceMemory, config.get("maxDeviceMemory", "0"));
            String version = config.get("version");
            String defaultVersion = DefaultVersion.DXVK(graphicsDriver);
            InstallableComponents.initViews(InstallableComponents.Type.DXVK, findViewById(R.id.DXVKToolbox), sVersion, version, defaultVersion);
            GPUCardAdapter adapter = new GPUCardAdapter(context, android.R.layout.simple_spinner_dropdown_item, R.string.none);
            sCustomDevice.setAdapter((SpinnerAdapter) adapter);
            String customDevice = config.get("customDevice");
            if (customDevice.contains(":")) {
                try {
                    int deviceId = Integer.parseInt(customDevice.split(":")[0], 16);
                    sCustomDevice.setSelection(adapter.getPositionByDeviceId(deviceId));
                } catch (NumberFormatException e) {
                }
            }
            setOnConfirmCallback(new Runnable() { // from class: com.winlator.contentdialog.DXVKConfigDialog$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    DXVKConfigDialog.lambda$new$0(sVersion, sFramerate, sMaxDeviceMemory, sCustomDevice, anchor);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0(Spinner sVersion, Spinner sFramerate, Spinner sMaxDeviceMemory, Spinner sCustomDevice, View anchor) {
            KeyValueSet newConfig = new KeyValueSet();
            newConfig.put("version", StringUtils.parseNumber(sVersion.getSelectedItem()));
            newConfig.put("framerate", StringUtils.parseNumber(sFramerate.getSelectedItem()));
            newConfig.put("maxDeviceMemory", StringUtils.parseNumber(sMaxDeviceMemory.getSelectedItem()));
            GPUCardAdapter.GPUCard gpuCard = (GPUCardAdapter.GPUCard) sCustomDevice.getSelectedItem();
            if (gpuCard.deviceId > 0) {
                newConfig.put("customDevice", String.format("%04x", Integer.valueOf(gpuCard.deviceId)) + ":" + String.format("%04x", Integer.valueOf(gpuCard.vendorId)) + ":" + gpuCard.name);
            }
            anchor.setTag(newConfig.toString());
        }
    
        public static void setEnvVars(Context context, KeyValueSet config, EnvVars envVars) {
            envVars.put("DXVK_STATE_CACHE_PATH", RootFS.getDosUserCachePath());
            envVars.put("DXVK_LOG_LEVEL", "none");
            File rootDir = RootFS.find(context).getRootDir();
            File dxvkConfigFile = new File(rootDir, "/home/xuser/.config/dxvk.conf");
            String content = "";
            String maxDeviceMemory = config.get("maxDeviceMemory");
            if (!maxDeviceMemory.isEmpty() && !maxDeviceMemory.equals("0")) {
                content = ("dxgi.maxDeviceMemory = " + maxDeviceMemory + "\n") + "dxgi.maxSharedMemory = " + maxDeviceMemory + "\n";
            }
            String framerate = config.get("framerate");
            if (!framerate.isEmpty() && !framerate.equals("0")) {
                content = (content + "dxgi.maxFrameRate = " + framerate + "\n") + "d3d9.maxFrameRate = " + framerate + "\n";
            }
            String customDevice = config.get("customDevice");
            if (customDevice.contains(":")) {
                String[] parts = customDevice.split(":");
                content = (((((content + "dxgi.customDeviceId = " + parts[0] + "\n") + "dxgi.customVendorId = " + parts[1] + "\n") + "d3d9.customDeviceId = " + parts[0] + "\n") + "d3d9.customVendorId = " + parts[1] + "\n") + "dxgi.customDeviceDesc = \"" + parts[2] + "\"\n") + "d3d9.customDeviceDesc = \"" + parts[2] + "\"\n";
            }
            if (config.getBoolean("constantBufferRangeCheck")) {
                content = content + "d3d11.constantBufferRangeCheck = \"True\"\n";
            }
            FileUtils.delete(dxvkConfigFile);
            if (!content.isEmpty() && FileUtils.writeString(dxvkConfigFile, content)) {
                envVars.put("DXVK_CONFIG_FILE", RootFS.getDosUserConfigPath() + "\\dxvk.conf");
            }
        }
    }
  + app/src/main/java/com/winlator/contentdialog/DebugDialog.java
    package com.winlator.contentdialog;
    
    import android.content.Context;
    import android.view.LayoutInflater;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.ImageButton;
    import android.widget.LinearLayout;
    import com.winlator.R;
    import com.winlator.core.AppUtils;
    import com.winlator.core.Callback;
    import com.winlator.core.UnitUtils;
    import com.winlator.widget.LogView;
    
    /* loaded from: classes.dex */
    public class DebugDialog extends ContentDialog implements Callback<String> {
        private final LogView logView;
        private boolean paused;
    
        public DebugDialog(Context context) {
            super(context, R.layout.debug_dialog);
            this.paused = false;
            setIcon(R.drawable.icon_debug);
            setTitle(context.getString(R.string.logs));
            LogView logView = (LogView) findViewById(R.id.LogView);
            this.logView = logView;
            logView.getLayoutParams().width = (int) UnitUtils.dpToPx(UnitUtils.pxToDp(AppUtils.getScreenWidth()) * 0.7f);
            findViewById(R.id.BTCancel).setVisibility(8);
            LinearLayout llBottomBarPanel = (LinearLayout) findViewById(R.id.LLBottomBarPanel);
            llBottomBarPanel.setVisibility(0);
            View toolbarView = LayoutInflater.from(context).inflate(R.layout.debug_toolbar, (ViewGroup) llBottomBarPanel, false);
            toolbarView.findViewById(R.id.BTClear).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.contentdialog.DebugDialog$$ExternalSyntheticLambda1
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    DebugDialog.this.lambda$new$0(view);
                }
            });
            toolbarView.findViewById(R.id.BTPause).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.contentdialog.DebugDialog$$ExternalSyntheticLambda2
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    DebugDialog.this.lambda$new$1(view);
                }
            });
            toolbarView.findViewById(R.id.BTExport).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.contentdialog.DebugDialog$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    DebugDialog.this.lambda$new$2(view);
                }
            });
            llBottomBarPanel.addView(toolbarView);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$0(View v) {
            this.logView.clear();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$1(View v) {
            boolean z = !this.paused;
            this.paused = z;
            ((ImageButton) v).setImageResource(z ? R.drawable.icon_play : R.drawable.icon_pause);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$2(View v) {
            this.logView.exportToFile();
        }
    
        @Override // com.winlator.core.Callback
        public void call(String line) {
            if (!this.paused) {
                this.logView.append(line + "\n");
            }
        }
    }
  + app/src/main/java/com/winlator/contentdialog/FileInfoDialog.java
    package com.winlator.contentdialog;
    
    import android.widget.TextView;
    import com.winlator.container.FileInfo;
    import com.winlator.core.StringUtils;
    import java.util.concurrent.atomic.AtomicLong;
    
    /* loaded from: classes.dex */
    public class FileInfoDialog extends ContentDialog {
        /* JADX WARN: Illegal instructions before constructor call */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public FileInfoDialog(android.content.Context r22, com.winlator.container.FileInfo r23, com.winlator.container.Container r24) {
            /*
                Method dump skipped, instructions count: 488
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: com.winlator.contentdialog.FileInfoDialog.<init>(android.content.Context, com.winlator.container.FileInfo, com.winlator.container.Container):void");
        }
    
        /* renamed from: com.winlator.contentdialog.FileInfoDialog$1, reason: invalid class name */
        static /* synthetic */ class AnonymousClass1 {
            static final /* synthetic */ int[] $SwitchMap$com$winlator$container$FileInfo$Type;
    
            static {
                int[] iArr = new int[FileInfo.Type.values().length];
                $SwitchMap$com$winlator$container$FileInfo$Type = iArr;
                try {
                    iArr[FileInfo.Type.FILE.ordinal()] = 1;
                } catch (NoSuchFieldError e) {
                }
                try {
                    $SwitchMap$com$winlator$container$FileInfo$Type[FileInfo.Type.DRIVE.ordinal()] = 2;
                } catch (NoSuchFieldError e2) {
                }
                try {
                    $SwitchMap$com$winlator$container$FileInfo$Type[FileInfo.Type.DIRECTORY.ordinal()] = 3;
                } catch (NoSuchFieldError e3) {
                }
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$1(final AtomicLong totalSize, AtomicLong lastTime, final TextView tvValue, Long size) {
            totalSize.addAndGet(size.longValue());
            long currTime = System.currentTimeMillis();
            int elapsedTime = (int) (currTime - lastTime.get());
            if (lastTime.get() == 0 || elapsedTime > 30) {
                tvValue.post(new Runnable() { // from class: com.winlator.contentdialog.FileInfoDialog$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        FileInfoDialog.lambda$new$0(tvValue, totalSize);
                    }
                });
                lastTime.set(currTime);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0(TextView tvValue, AtomicLong totalSize) {
            tvValue.setText(StringUtils.formatBytes(totalSize.get()));
        }
    }
  + app/src/main/java/com/winlator/contentdialog/ScreenEffectDialog.java
    package com.winlator.contentdialog;
    
    import android.content.SharedPreferences;
    import android.view.View;
    import android.widget.AdapterView;
    import android.widget.ArrayAdapter;
    import android.widget.Button;
    import android.widget.CheckBox;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import androidx.preference.PreferenceManager;
    import com.winlator.R;
    import com.winlator.XServerDisplayActivity;
    import com.winlator.core.AppUtils;
    import com.winlator.core.Callback;
    import com.winlator.core.KeyValueSet;
    import com.winlator.renderer.GLRenderer;
    import com.winlator.renderer.effects.CRTEffect;
    import com.winlator.renderer.effects.ColorEffect;
    import com.winlator.renderer.effects.FXAAEffect;
    import com.winlator.widget.SeekBar;
    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.LinkedHashSet;
    
    /* loaded from: classes.dex */
    public class ScreenEffectDialog extends ContentDialog {
        private final XServerDisplayActivity activity;
        private final CheckBox cbEnableCRTShader;
        private final CheckBox cbEnableFXAA;
        private final SharedPreferences preferences;
        private final Spinner sProfile;
        private final SeekBar sbBrightness;
        private final SeekBar sbContrast;
        private final SeekBar sbGamma;
    
        public ScreenEffectDialog(final XServerDisplayActivity activity) {
            super(activity, R.layout.screen_effect_dialog);
            this.activity = activity;
            setTitle(R.string.screen_effect);
            setIcon(R.drawable.icon_screen_effect);
            this.preferences = PreferenceManager.getDefaultSharedPreferences(activity);
            final GLRenderer renderer = activity.getXServerView().getRenderer();
            ColorEffect currentColorEffect = (ColorEffect) renderer.effectComposer.getEffect(ColorEffect.class);
            final ColorEffect colorEffect = currentColorEffect != null ? currentColorEffect : new ColorEffect();
            final FXAAEffect fxaaEffect = (FXAAEffect) renderer.effectComposer.getEffect(FXAAEffect.class);
            final CRTEffect crtEffect = (CRTEffect) renderer.effectComposer.getEffect(CRTEffect.class);
            Spinner spinner = (Spinner) findViewById(R.id.SProfile);
            this.sProfile = spinner;
            SeekBar seekBar = (SeekBar) findViewById(R.id.SBBrightness);
            this.sbBrightness = seekBar;
            SeekBar seekBar2 = (SeekBar) findViewById(R.id.SBContrast);
            this.sbContrast = seekBar2;
            SeekBar seekBar3 = (SeekBar) findViewById(R.id.SBGamma);
            this.sbGamma = seekBar3;
            CheckBox checkBox = (CheckBox) findViewById(R.id.CBEnableFXAA);
            this.cbEnableFXAA = checkBox;
            CheckBox checkBox2 = (CheckBox) findViewById(R.id.CBEnableCRTShader);
            this.cbEnableCRTShader = checkBox2;
            seekBar.setValue(colorEffect.getBrightness() * 100.0f);
            seekBar2.setValue(colorEffect.getContrast() * 100.0f);
            seekBar3.setValue(colorEffect.getGamma());
            checkBox.setChecked(fxaaEffect != null);
            checkBox2.setChecked(crtEffect != null);
            spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { // from class: com.winlator.contentdialog.ScreenEffectDialog.1
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                    String selectedProfile = position > 0 ? ScreenEffectDialog.this.sProfile.getItemAtPosition(position).toString() : null;
                    if (selectedProfile != null) {
                        ScreenEffectDialog.this.loadProfile(selectedProfile);
                    }
                }
    
                @Override // android.widget.AdapterView.OnItemSelectedListener
                public void onNothingSelected(AdapterView<?> parent) {
                }
            });
            loadProfileSpinner(spinner, activity.getScreenEffectProfile());
            findViewById(R.id.BTAddProfile).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.contentdialog.ScreenEffectDialog$$ExternalSyntheticLambda1
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ScreenEffectDialog.this.lambda$new$1(activity, view);
                }
            });
            findViewById(R.id.BTRemoveProfile).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.contentdialog.ScreenEffectDialog$$ExternalSyntheticLambda2
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ScreenEffectDialog.this.lambda$new$3(activity, view);
                }
            });
            setOnConfirmCallback(new Runnable() { // from class: com.winlator.contentdialog.ScreenEffectDialog$$ExternalSyntheticLambda4
                @Override // java.lang.Runnable
                public final void run() {
                    ScreenEffectDialog.this.lambda$new$4(colorEffect, renderer, fxaaEffect, crtEffect);
                }
            });
            Button resetButton = (Button) findViewById(R.id.BTReset);
            resetButton.setVisibility(0);
            resetButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.contentdialog.ScreenEffectDialog$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ScreenEffectDialog.this.lambda$new$5(view);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$1(XServerDisplayActivity activity, View v) {
            ContentDialog.prompt(activity, R.string.profile_name, null, new Callback() { // from class: com.winlator.contentdialog.ScreenEffectDialog$$ExternalSyntheticLambda3
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    ScreenEffectDialog.this.lambda$new$0((String) obj);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$0(String name) {
            addProfile(name, this.sProfile);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$3(XServerDisplayActivity activity, View v) {
            final String selectedProfile = this.sProfile.getSelectedItemPosition() > 0 ? this.sProfile.getSelectedItem().toString() : null;
            if (selectedProfile != null) {
                ContentDialog.confirm(activity, R.string.do_you_want_to_remove_this_profile, new Runnable() { // from class: com.winlator.contentdialog.ScreenEffectDialog$$ExternalSyntheticLambda5
                    @Override // java.lang.Runnable
                    public final void run() {
                        ScreenEffectDialog.this.lambda$new$2(selectedProfile);
                    }
                });
            } else {
                AppUtils.showToast(activity, R.string.no_profile_selected);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$2(String selectedProfile) {
            removeProfile(selectedProfile, this.sProfile);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$4(ColorEffect colorEffect, GLRenderer renderer, FXAAEffect fxaaEffect, CRTEffect crtEffect) {
            float brightness = this.sbBrightness.getValue();
            float contrast = this.sbContrast.getValue();
            float gamma = this.sbGamma.getValue();
            if (brightness != 0.0f || contrast != 0.0f || gamma != 1.0f) {
                colorEffect.setBrightness(brightness / 100.0f);
                colorEffect.setContrast(contrast / 100.0f);
                colorEffect.setGamma(gamma);
                renderer.effectComposer.addEffect(colorEffect);
            } else {
                renderer.effectComposer.removeEffect(colorEffect);
            }
            if (this.cbEnableFXAA.isChecked()) {
                if (fxaaEffect == null) {
                    renderer.effectComposer.addEffect(new FXAAEffect());
                }
            } else if (fxaaEffect != null) {
                renderer.effectComposer.removeEffect(fxaaEffect);
            }
            if (this.cbEnableCRTShader.isChecked()) {
                if (crtEffect == null) {
                    renderer.effectComposer.addEffect(new CRTEffect());
                }
            } else if (crtEffect != null) {
                renderer.effectComposer.removeEffect(crtEffect);
            }
            saveProfile(this.sProfile);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$5(View v) {
            resetSettings();
        }
    
        private void resetSettings() {
            this.sbBrightness.setValue(0.0f);
            this.sbContrast.setValue(0.0f);
            this.sbGamma.setValue(1.0f);
            this.cbEnableFXAA.setChecked(false);
            this.cbEnableCRTShader.setChecked(false);
        }
    
        private void saveProfile(Spinner sProfile) {
            String str;
            String selectedProfile = sProfile.getSelectedItemPosition() > 0 ? sProfile.getSelectedItem().toString() : null;
            if (selectedProfile != null) {
                LinkedHashSet<String> oldProfiles = new LinkedHashSet<>(this.preferences.getStringSet("screen_effect_profiles", new LinkedHashSet()));
                LinkedHashSet<String> newProfiles = new LinkedHashSet<>();
                KeyValueSet settings = new KeyValueSet();
                settings.put("brightness", Float.valueOf(this.sbBrightness.getValue()));
                settings.put("contrast", Float.valueOf(this.sbContrast.getValue()));
                settings.put("gamma", Float.valueOf(this.sbGamma.getValue()));
                settings.put("fxaa", Boolean.valueOf(this.cbEnableFXAA.isChecked()));
                settings.put("crt_shader", Boolean.valueOf(this.cbEnableCRTShader.isChecked()));
                Iterator<String> it = oldProfiles.iterator();
                while (it.hasNext()) {
                    String profile = it.next();
                    String name = profile.split(":")[0];
                    if (name.equals(selectedProfile)) {
                        str = selectedProfile + ":" + settings;
                    } else {
                        str = profile;
                    }
                    newProfiles.add(str);
                }
                this.preferences.edit().putStringSet("screen_effect_profiles", newProfiles).apply();
            }
            this.activity.setScreenEffectProfile(selectedProfile);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void loadProfile(String name) {
            LinkedHashSet<String> profiles = new LinkedHashSet<>(this.preferences.getStringSet("screen_effect_profiles", new LinkedHashSet()));
            Iterator<String> it = profiles.iterator();
            while (it.hasNext()) {
                String profile = it.next();
                String[] parts = profile.split(":");
                if (parts[0].equals(name)) {
                    if (parts.length > 1 && !parts[1].isEmpty()) {
                        KeyValueSet settings = new KeyValueSet(parts[1]);
                        this.sbBrightness.setValue(settings.getFloat("brightness", 0.0f));
                        this.sbContrast.setValue(settings.getFloat("contrast", 1.0f));
                        this.sbGamma.setValue(settings.getFloat("gamma", 1.0f));
                        this.cbEnableFXAA.setChecked(settings.getBoolean("fxaa", false));
                        this.cbEnableCRTShader.setChecked(settings.getBoolean("crt_shader", false));
                        return;
                    }
                    return;
                }
            }
        }
    
        private void addProfile(String newName, Spinner sProfile) {
            LinkedHashSet<String> profiles = new LinkedHashSet<>(this.preferences.getStringSet("screen_effect_profiles", new LinkedHashSet()));
            Iterator<String> it = profiles.iterator();
            while (it.hasNext()) {
                String profile = it.next();
                String name = profile.split(":")[0];
                if (name.equals(newName)) {
                    return;
                }
            }
            profiles.add(newName.replace(":", "") + ":");
            this.preferences.edit().putStringSet("screen_effect_profiles", profiles).apply();
            loadProfileSpinner(sProfile, newName);
        }
    
        private void removeProfile(String targetName, Spinner sProfile) {
            LinkedHashSet<String> profiles = new LinkedHashSet<>(this.preferences.getStringSet("screen_effect_profiles", new LinkedHashSet()));
            Iterator<String> it = profiles.iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                String profile = it.next();
                String name = profile.split(":")[0];
                if (name.equals(targetName)) {
                    profiles.remove(profile);
                    break;
                }
            }
            this.preferences.edit().putStringSet("screen_effect_profiles", profiles).apply();
            loadProfileSpinner(sProfile, null);
            resetSettings();
        }
    
        private void loadProfileSpinner(Spinner sProfile, String selectedName) {
            LinkedHashSet<String> profiles = new LinkedHashSet<>(this.preferences.getStringSet("screen_effect_profiles", new LinkedHashSet()));
            ArrayList<String> items = new ArrayList<>();
            items.add("-- " + this.activity.getString(R.string.select_profile) + " --");
            int selectedPosition = 0;
            int position = 1;
            Iterator<String> it = profiles.iterator();
            while (it.hasNext()) {
                String profile = it.next();
                String name = profile.split(":")[0];
                items.add(name);
                if (name.equals(selectedName)) {
                    selectedPosition = position;
                }
                position++;
            }
            sProfile.setAdapter((SpinnerAdapter) new ArrayAdapter(this.activity, android.R.layout.simple_spinner_dropdown_item, items));
            sProfile.setSelection(selectedPosition);
        }
    }
  + app/src/main/java/com/winlator/contentdialog/ShortcutSettingsDialog.java
    package com.winlator.contentdialog;
    
    import android.content.Context;
    import android.view.MenuItem;
    import android.view.View;
    import android.widget.ArrayAdapter;
    import android.widget.CheckBox;
    import android.widget.EditText;
    import android.widget.LinearLayout;
    import android.widget.PopupMenu;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import com.winlator.ContainerDetailFragment;
    import com.winlator.R;
    import com.winlator.ShortcutsFragment;
    import com.winlator.box64.Box64PresetManager;
    import com.winlator.container.Shortcut;
    import com.winlator.core.AppUtils;
    import com.winlator.core.EnvVars;
    import com.winlator.core.StringUtils;
    import com.winlator.inputcontrols.ControlsProfile;
    import com.winlator.inputcontrols.InputControlsManager;
    import com.winlator.widget.EnvVarsView;
    import com.winlator.winhandler.WinHandler;
    import java.io.File;
    import java.util.ArrayList;
    
    /* loaded from: classes.dex */
    public class ShortcutSettingsDialog extends ContentDialog {
        private final ShortcutsFragment fragment;
        private InputControlsManager inputControlsManager;
        private final Shortcut shortcut;
    
        public ShortcutSettingsDialog(ShortcutsFragment fragment, Shortcut shortcut) {
            super(fragment.getContext(), R.layout.shortcut_settings_dialog);
            this.fragment = fragment;
            this.shortcut = shortcut;
            setTitle(shortcut.name);
            setIcon(R.drawable.icon_settings);
            createContentView();
        }
    
        private void createContentView() {
            final Context context = this.fragment.getContext();
            this.inputControlsManager = new InputControlsManager(context);
            LinearLayout llContent = (LinearLayout) findViewById(R.id.LLContent);
            llContent.getLayoutParams().width = AppUtils.getPreferredDialogWidth(context);
            final EditText etName = (EditText) findViewById(R.id.ETName);
            etName.setText(this.shortcut.name);
            final EditText etExecArgs = (EditText) findViewById(R.id.ETExecArgs);
            etExecArgs.setText(this.shortcut.getExtra("execArgs"));
            View contentView = getContentView();
            Shortcut shortcut = this.shortcut;
            ContainerDetailFragment.loadScreenSizeSpinner(contentView, shortcut.getExtra("screenSize", shortcut.container.getScreenSize()));
            final Spinner sGraphicsDriver = (Spinner) findViewById(R.id.SGraphicsDriver);
            final Spinner sDXWrapper = (Spinner) findViewById(R.id.SDXWrapper);
            final View vDXWrapperConfig = findViewById(R.id.BTDXWrapperConfig);
            final View vGraphicsDriverConfig = findViewById(R.id.BTGraphicsDriverConfig);
            Shortcut shortcut2 = this.shortcut;
            vGraphicsDriverConfig.setTag(shortcut2.getExtra("graphicsDriverConfig", shortcut2.container.getGraphicsDriverConfig()));
            final View vAudioDriverConfig = findViewById(R.id.BTAudioDriverConfig);
            Shortcut shortcut3 = this.shortcut;
            vAudioDriverConfig.setTag(shortcut3.getExtra("audioDriverConfig", shortcut3.container.getAudioDriverConfig()));
            vAudioDriverConfig.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.contentdialog.ShortcutSettingsDialog$$ExternalSyntheticLambda3
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ShortcutSettingsDialog.lambda$createContentView$0(view);
                }
            });
            ContainerDetailFragment.setupDXWrapperSpinner(sGraphicsDriver, sDXWrapper, vDXWrapperConfig);
            Shortcut shortcut4 = this.shortcut;
            String selectedGraphicsDriver = shortcut4.getExtra("graphicsDriver", shortcut4.container.getGraphicsDriver());
            Shortcut shortcut5 = this.shortcut;
            String selectedDXWrapper = shortcut5.getExtra("dxwrapper", shortcut5.container.getDXWrapper());
            ContainerDetailFragment.loadGraphicsDriverSpinner(sGraphicsDriver, sDXWrapper, vGraphicsDriverConfig, selectedGraphicsDriver, selectedDXWrapper);
            Shortcut shortcut6 = this.shortcut;
            vDXWrapperConfig.setTag(shortcut6.getExtra("dxwrapperConfig", shortcut6.container.getDXWrapperConfig()));
            findViewById(R.id.BTHelpDXWrapper).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.contentdialog.ShortcutSettingsDialog$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    AppUtils.showHelpBox(context, view, R.string.dxwrapper_help_content);
                }
            });
            final Spinner sAudioDriver = (Spinner) findViewById(R.id.SAudioDriver);
            Shortcut shortcut7 = this.shortcut;
            AppUtils.setSpinnerSelectionFromIdentifier(sAudioDriver, shortcut7.getExtra("audioDriver", shortcut7.container.getAudioDriver()));
            final CheckBox cbForceFullscreen = (CheckBox) findViewById(R.id.CBForceFullscreen);
            cbForceFullscreen.setChecked(this.shortcut.getExtra("forceFullscreen", "0").equals("1"));
            final Spinner sBox64Preset = (Spinner) findViewById(R.id.SBox64Preset);
            Shortcut shortcut8 = this.shortcut;
            Box64PresetManager.loadSpinner(sBox64Preset, shortcut8.getExtra("box64Preset", shortcut8.container.getBox64Preset()));
            final Spinner sControlsProfile = (Spinner) findViewById(R.id.SControlsProfile);
            loadControlsProfileSpinner(sControlsProfile, this.shortcut.getExtra("controlsProfile", "0"));
            final Spinner sDInputMapperType = (Spinner) findViewById(R.id.SDInputMapperType);
            sDInputMapperType.setSelection(Byte.parseByte(this.shortcut.getExtra("dinputMapperType", String.valueOf(1))));
            final Spinner sPreferredInputApi = (Spinner) findViewById(R.id.SPreferredInputApi);
            sPreferredInputApi.setSelection(Byte.parseByte(this.shortcut.getExtra("preferredInputApi", String.valueOf(WinHandler.PreferredInputApi.BOTH.ordinal()))));
            View contentView2 = getContentView();
            Shortcut shortcut9 = this.shortcut;
            ContainerDetailFragment.createWinComponentsTab(contentView2, shortcut9.getExtra("wincomponents", shortcut9.container.getWinComponents()));
            final EnvVarsView envVarsView = createEnvVarsTab();
            AppUtils.setupTabLayout(getContentView(), R.id.TabLayout, R.id.LLTabWinComponents, R.id.LLTabEnvVars, R.id.LLTabAdvanced);
            findViewById(R.id.BTExtraArgsMenu).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.contentdialog.ShortcutSettingsDialog$$ExternalSyntheticLambda1
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    ShortcutSettingsDialog.lambda$createContentView$3(context, etExecArgs, view);
                }
            });
            setOnConfirmCallback(new Runnable() { // from class: com.winlator.contentdialog.ShortcutSettingsDialog$$ExternalSyntheticLambda5
                @Override // java.lang.Runnable
                public final void run() {
                    ShortcutSettingsDialog.this.lambda$createContentView$4(etName, sGraphicsDriver, sDXWrapper, vDXWrapperConfig, vGraphicsDriverConfig, vAudioDriverConfig, sAudioDriver, etExecArgs, cbForceFullscreen, envVarsView, sBox64Preset, sControlsProfile, sDInputMapperType, sPreferredInputApi);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$createContentView$0(View v) {
            new AudioDriverConfigDialog(v).show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$createContentView$3(Context context, final EditText etExecArgs, View v) {
            PopupMenu popupMenu = new PopupMenu(context, v);
            popupMenu.inflate(R.menu.extra_args_popup_menu);
            popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() { // from class: com.winlator.contentdialog.ShortcutSettingsDialog$$ExternalSyntheticLambda4
                @Override // android.widget.PopupMenu.OnMenuItemClickListener
                public final boolean onMenuItemClick(MenuItem menuItem) {
                    boolean lambda$createContentView$2;
                    lambda$createContentView$2 = ShortcutSettingsDialog.lambda$createContentView$2(etExecArgs, menuItem);
                    return lambda$createContentView$2;
                }
            });
            popupMenu.show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ boolean lambda$createContentView$2(EditText etExecArgs, MenuItem menuItem) {
            String str;
            String value = String.valueOf(menuItem.getTitle());
            String execArgs = etExecArgs.getText().toString();
            if (!execArgs.contains(value)) {
                if (execArgs.isEmpty()) {
                    str = value;
                } else {
                    str = execArgs + " " + value;
                }
                etExecArgs.setText(str);
                return true;
            }
            return true;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$createContentView$4(EditText etName, Spinner sGraphicsDriver, Spinner sDXWrapper, View vDXWrapperConfig, View vGraphicsDriverConfig, View vAudioDriverConfig, Spinner sAudioDriver, EditText etExecArgs, CheckBox cbForceFullscreen, EnvVarsView envVarsView, Spinner sBox64Preset, Spinner sControlsProfile, Spinner sDInputMapperType, Spinner sPreferredInputApi) {
            String name = etName.getText().toString().trim();
            if (!this.shortcut.name.equals(name) && !name.isEmpty()) {
                renameShortcut(name);
                return;
            }
            String graphicsDriver = StringUtils.parseIdentifier(sGraphicsDriver.getSelectedItem());
            String dxwrapper = StringUtils.parseIdentifier(sDXWrapper.getSelectedItem());
            String dxwrapperConfig = vDXWrapperConfig.getTag().toString();
            String graphicsDriverConfig = vGraphicsDriverConfig.getTag().toString();
            String audioDriverConfig = vAudioDriverConfig.getTag().toString();
            String audioDriver = StringUtils.parseIdentifier(sAudioDriver.getSelectedItem());
            String screenSize = ContainerDetailFragment.getScreenSize(getContentView());
            String execArgs = etExecArgs.getText().toString();
            this.shortcut.putExtra("execArgs", !execArgs.isEmpty() ? execArgs : null);
            Shortcut shortcut = this.shortcut;
            shortcut.putExtra("screenSize", !screenSize.equals(shortcut.container.getScreenSize()) ? screenSize : null);
            Shortcut shortcut2 = this.shortcut;
            shortcut2.putExtra("graphicsDriver", !graphicsDriver.equals(shortcut2.container.getGraphicsDriver()) ? graphicsDriver : null);
            Shortcut shortcut3 = this.shortcut;
            shortcut3.putExtra("dxwrapper", !dxwrapper.equals(shortcut3.container.getDXWrapper()) ? dxwrapper : null);
            Shortcut shortcut4 = this.shortcut;
            shortcut4.putExtra("dxwrapperConfig", !dxwrapperConfig.equals(shortcut4.container.getDXWrapperConfig()) ? dxwrapperConfig : null);
            Shortcut shortcut5 = this.shortcut;
            shortcut5.putExtra("graphicsDriverConfig", !graphicsDriverConfig.equals(shortcut5.container.getGraphicsDriverConfig()) ? graphicsDriverConfig : null);
            Shortcut shortcut6 = this.shortcut;
            shortcut6.putExtra("audioDriver", !audioDriver.equals(shortcut6.container.getAudioDriver()) ? audioDriver : null);
            Shortcut shortcut7 = this.shortcut;
            shortcut7.putExtra("audioDriverConfig", !audioDriverConfig.equals(shortcut7.container.getAudioDriverConfig()) ? audioDriverConfig : null);
            this.shortcut.putExtra("forceFullscreen", cbForceFullscreen.isChecked() ? "1" : null);
            String wincomponents = ContainerDetailFragment.getWinComponents(getContentView());
            Shortcut shortcut8 = this.shortcut;
            shortcut8.putExtra("wincomponents", !wincomponents.equals(shortcut8.container.getWinComponents()) ? wincomponents : null);
            String envVars = envVarsView.getEnvVars();
            this.shortcut.putExtra("envVars", !envVars.isEmpty() ? envVars : null);
            String box64Preset = Box64PresetManager.getSpinnerSelectedId(sBox64Preset);
            Shortcut shortcut9 = this.shortcut;
            shortcut9.putExtra("box64Preset", !box64Preset.equals(shortcut9.container.getBox64Preset()) ? box64Preset : null);
            ArrayList<ControlsProfile> profiles = this.inputControlsManager.getProfiles(true);
            int controlsProfile = sControlsProfile.getSelectedItemPosition() > 0 ? profiles.get(sControlsProfile.getSelectedItemPosition() - 1).id : 0;
            this.shortcut.putExtra("controlsProfile", controlsProfile > 0 ? String.valueOf(controlsProfile) : null);
            int dinputMapperType = sDInputMapperType.getSelectedItemPosition();
            this.shortcut.putExtra("dinputMapperType", dinputMapperType != 1 ? String.valueOf(dinputMapperType) : null);
            int preferredInputApi = sPreferredInputApi.getSelectedItemPosition();
            this.shortcut.putExtra("preferredInputApi", preferredInputApi != WinHandler.PreferredInputApi.BOTH.ordinal() ? String.valueOf(preferredInputApi) : null);
            this.shortcut.saveData();
        }
    
        private void renameShortcut(String newName) {
            String newName2 = StringUtils.clearReservedChars(newName);
            File parent = this.shortcut.file.getParentFile();
            File newFile = new File(parent, newName2 + ".desktop");
            if (!newFile.isFile()) {
                this.shortcut.file.renameTo(newFile);
            }
            File linkFile = new File(parent, this.shortcut.name + ".lnk");
            if (linkFile.isFile()) {
                File newFile2 = new File(parent, newName2 + ".lnk");
                if (!newFile2.isFile()) {
                    linkFile.renameTo(newFile2);
                }
            }
            this.fragment.refreshContent();
        }
    
        private EnvVarsView createEnvVarsTab() {
            View view = getContentView();
            final Context context = view.getContext();
            final EnvVarsView envVarsView = (EnvVarsView) view.findViewById(R.id.EnvVarsView);
            envVarsView.setEnvVars(new EnvVars(this.shortcut.getExtra("envVars")));
            view.findViewById(R.id.BTAddEnvVar).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.contentdialog.ShortcutSettingsDialog$$ExternalSyntheticLambda2
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    ShortcutSettingsDialog.lambda$createEnvVarsTab$5(context, envVarsView, view2);
                }
            });
            return envVarsView;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$createEnvVarsTab$5(Context context, EnvVarsView envVarsView, View v) {
            new AddEnvVarDialog(context, envVarsView).show();
        }
    
        private void loadControlsProfileSpinner(Spinner spinner, String selectedValue) {
            Context context = this.fragment.getContext();
            ArrayList<ControlsProfile> profiles = this.inputControlsManager.getProfiles(true);
            ArrayList<String> values = new ArrayList<>();
            values.add(context.getString(R.string.none));
            int selectedPosition = 0;
            int selectedId = Integer.parseInt(selectedValue);
            for (int i = 0; i < profiles.size(); i++) {
                ControlsProfile profile = profiles.get(i);
                if (profile.id == selectedId) {
                    selectedPosition = i + 1;
                }
                values.add(profile.getName());
            }
            spinner.setAdapter((SpinnerAdapter) new ArrayAdapter(context, android.R.layout.simple_spinner_dropdown_item, values));
            spinner.setSelection(selectedPosition, false);
        }
    }
  + app/src/main/java/com/winlator/contentdialog/StorageInfoDialog.java
    package com.winlator.contentdialog;
    
    import android.app.Activity;
    import android.widget.TextView;
    import com.google.android.material.progressindicator.CircularProgressIndicator;
    import com.winlator.R;
    import com.winlator.container.Container;
    import com.winlator.core.Callback;
    import com.winlator.core.FileUtils;
    import com.winlator.core.StringUtils;
    import java.io.File;
    import java.util.concurrent.atomic.AtomicLong;
    
    /* loaded from: classes.dex */
    public class StorageInfoDialog extends ContentDialog {
        public StorageInfoDialog(final Activity activity, final Container container) {
            super(activity, R.layout.container_storage_info_dialog);
            setTitle(R.string.storage_info);
            setIcon(R.drawable.icon_info);
            final AtomicLong driveCSize = new AtomicLong();
            driveCSize.set(0L);
            final AtomicLong cacheSize = new AtomicLong();
            cacheSize.set(0L);
            final AtomicLong totalSize = new AtomicLong();
            totalSize.set(0L);
            final TextView tvDriveCSize = (TextView) findViewById(R.id.TVDriveCSize);
            final TextView tvCacheSize = (TextView) findViewById(R.id.TVCacheSize);
            final TextView tvTotalSize = (TextView) findViewById(R.id.TVTotalSize);
            final TextView tvUsedSpace = (TextView) findViewById(R.id.TVUsedSpace);
            final CircularProgressIndicator circularProgressIndicator = (CircularProgressIndicator) findViewById(R.id.CircularProgressIndicator);
            final long internalStorageSize = FileUtils.getInternalStorageSize();
            final Runnable updateUI = new Runnable() { // from class: com.winlator.contentdialog.StorageInfoDialog$$ExternalSyntheticLambda3
                @Override // java.lang.Runnable
                public final void run() {
                    StorageInfoDialog.lambda$new$0(tvDriveCSize, driveCSize, tvCacheSize, cacheSize, tvTotalSize, totalSize, internalStorageSize, tvUsedSpace, circularProgressIndicator);
                }
            };
            File rootDir = container.getRootDir();
            File driveCDir = new File(rootDir, ".wine/drive_c");
            final File cacheDir = new File(rootDir, ".cache");
            final AtomicLong lastTime = new AtomicLong(System.currentTimeMillis());
            final Callback<Long> onAddSize = new Callback() { // from class: com.winlator.contentdialog.StorageInfoDialog$$ExternalSyntheticLambda2
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    StorageInfoDialog.lambda$new$1(totalSize, lastTime, activity, updateUI, (Long) obj);
                }
            };
            FileUtils.getSizeAsync(driveCDir, new Callback() { // from class: com.winlator.contentdialog.StorageInfoDialog$$ExternalSyntheticLambda0
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    StorageInfoDialog.lambda$new$2(driveCSize, onAddSize, (Long) obj);
                }
            });
            FileUtils.getSizeAsync(cacheDir, new Callback() { // from class: com.winlator.contentdialog.StorageInfoDialog$$ExternalSyntheticLambda1
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    StorageInfoDialog.lambda$new$3(cacheSize, onAddSize, (Long) obj);
                }
            });
            ((TextView) findViewById(R.id.BTCancel)).setText(R.string.clear_cache);
            setOnCancelCallback(new Runnable() { // from class: com.winlator.contentdialog.StorageInfoDialog$$ExternalSyntheticLambda4
                @Override // java.lang.Runnable
                public final void run() {
                    StorageInfoDialog.lambda$new$4(cacheDir, container);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0(TextView tvDriveCSize, AtomicLong driveCSize, TextView tvCacheSize, AtomicLong cacheSize, TextView tvTotalSize, AtomicLong totalSize, long internalStorageSize, TextView tvUsedSpace, CircularProgressIndicator circularProgressIndicator) {
            tvDriveCSize.setText(StringUtils.formatBytes(driveCSize.get()));
            tvCacheSize.setText(StringUtils.formatBytes(cacheSize.get()));
            tvTotalSize.setText(StringUtils.formatBytes(totalSize.get()));
            int progress = (int) ((totalSize.get() / internalStorageSize) * 100.0d);
            tvUsedSpace.setText(progress + "%");
            circularProgressIndicator.setProgress(progress, true);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$1(AtomicLong totalSize, AtomicLong lastTime, Activity activity, Runnable updateUI, Long size) {
            totalSize.addAndGet(size.longValue());
            long currTime = System.currentTimeMillis();
            int elapsedTime = (int) (currTime - lastTime.get());
            if (elapsedTime > 30) {
                activity.runOnUiThread(updateUI);
                lastTime.set(currTime);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$2(AtomicLong driveCSize, Callback onAddSize, Long size) {
            driveCSize.addAndGet(size.longValue());
            onAddSize.call(size);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$3(AtomicLong cacheSize, Callback onAddSize, Long size) {
            cacheSize.addAndGet(size.longValue());
            onAddSize.call(size);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$4(File cacheDir, Container container) {
            FileUtils.clear(cacheDir);
            container.putExtra("desktopTheme", null);
            container.saveData();
        }
    }
  + app/src/main/java/com/winlator/contentdialog/TurnipConfigDialog.java
    package com.winlator.contentdialog;
    
    import android.content.Context;
    import android.view.View;
    import android.widget.CheckBox;
    import android.widget.Spinner;
    import com.winlator.R;
    import com.winlator.core.AppUtils;
    import com.winlator.core.EnvVars;
    import com.winlator.core.InstallableComponents;
    import com.winlator.core.KeyValueSet;
    import com.winlator.core.StringUtils;
    
    /* loaded from: classes.dex */
    public class TurnipConfigDialog extends ContentDialog {
        public TurnipConfigDialog(final View anchor) {
            super(anchor.getContext(), R.layout.turnip_config_dialog);
            Context context = anchor.getContext();
            setIcon(R.drawable.icon_display_settings);
            setTitle("Turnip " + context.getString(R.string.configuration));
            final Spinner sVersion = (Spinner) findViewById(R.id.SVersion);
            final Spinner sMaxDeviceMemory = (Spinner) findViewById(R.id.SMaxDeviceMemory);
            final CheckBox cbUseHWBuf = (CheckBox) findViewById(R.id.CBUseHWBuf);
            final CheckBox cbForceWaitForFences = (CheckBox) findViewById(R.id.CBForceWaitForFences);
            KeyValueSet config = new KeyValueSet(anchor.getTag());
            cbUseHWBuf.setChecked(config.getBoolean("useHWBuf", true));
            cbForceWaitForFences.setChecked(config.getBoolean("forceWaitForFences"));
            AppUtils.setSpinnerSelectionFromNumber(sMaxDeviceMemory, config.get("maxDeviceMemory", String.valueOf(4096)));
            String version = config.get("version");
            InstallableComponents.initViews(InstallableComponents.Type.TURNIP, findViewById(R.id.TurnipToolbox), sVersion, version, "25.0.0");
            setOnConfirmCallback(new Runnable() { // from class: com.winlator.contentdialog.TurnipConfigDialog$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    TurnipConfigDialog.lambda$new$0(sVersion, sMaxDeviceMemory, cbUseHWBuf, cbForceWaitForFences, anchor);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0(Spinner sVersion, Spinner sMaxDeviceMemory, CheckBox cbUseHWBuf, CheckBox cbForceWaitForFences, View anchor) {
            KeyValueSet newConfig = new KeyValueSet();
            newConfig.put("version", StringUtils.parseNumber(sVersion.getSelectedItem()));
            newConfig.put("maxDeviceMemory", StringUtils.parseNumber(sMaxDeviceMemory.getSelectedItem()));
            newConfig.put("useHWBuf", cbUseHWBuf.isChecked() ? "1" : "0");
            newConfig.put("forceWaitForFences", cbForceWaitForFences.isChecked() ? "1" : "0");
            anchor.setTag(newConfig.toString());
        }
    
        public static void setEnvVars(KeyValueSet config, EnvVars envVars) {
            envVars.put("TU_OVERRIDE_HEAP_SIZE", config.get("maxDeviceMemory", String.valueOf(4096)));
            if (config.getBoolean("useHWBuf", true)) {
                envVars.put("MESA_VK_WSI_USE_HWBUF", "1");
            }
            if (config.getBoolean("forceWaitForFences")) {
                envVars.put("MESA_VK_WSI_FORCE_WAIT_FOR_FENCES", "1");
            }
        }
    }
  + app/src/main/java/com/winlator/contentdialog/VKD3DConfigDialog.java
    package com.winlator.contentdialog;
    
    import android.content.Context;
    import android.view.View;
    import android.widget.Spinner;
    import com.winlator.R;
    import com.winlator.core.AppUtils;
    import com.winlator.core.EnvVars;
    import com.winlator.core.InstallableComponents;
    import com.winlator.core.KeyValueSet;
    import com.winlator.core.StringUtils;
    import com.winlator.xenvironment.RootFS;
    
    /* loaded from: classes.dex */
    public class VKD3DConfigDialog extends ContentDialog {
        public VKD3DConfigDialog(final View anchor) {
            super(anchor.getContext(), R.layout.vkd3d_config_dialog);
            Context context = anchor.getContext();
            setIcon(R.drawable.icon_display_settings);
            setTitle("VKD3D " + context.getString(R.string.configuration));
            final Spinner sVersion = (Spinner) findViewById(R.id.SVersion);
            final Spinner sFeatureLevel = (Spinner) findViewById(R.id.SFeatureLevel);
            KeyValueSet config = new KeyValueSet(anchor.getTag());
            AppUtils.setSpinnerSelectionFromValue(sFeatureLevel, config.get("featureLevel", "12.2"));
            String version = config.get("version");
            InstallableComponents.initViews(InstallableComponents.Type.VKD3D, findViewById(R.id.VKD3DToolbox), sVersion, version, "2.13");
            setOnConfirmCallback(new Runnable() { // from class: com.winlator.contentdialog.VKD3DConfigDialog$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    VKD3DConfigDialog.lambda$new$0(sVersion, sFeatureLevel, anchor);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0(Spinner sVersion, Spinner sFeatureLevel, View anchor) {
            KeyValueSet newConfig = new KeyValueSet();
            newConfig.put("version", StringUtils.parseNumber(sVersion.getSelectedItem()));
            newConfig.put("featureLevel", sFeatureLevel.getSelectedItem().toString());
            anchor.setTag(newConfig.toString());
        }
    
        public static void setEnvVars(KeyValueSet config, EnvVars envVars) {
            envVars.put("DXVK_LOG_LEVEL", "none");
            envVars.put("DXVK_STATE_CACHE_PATH", RootFS.getDosUserCachePath());
            envVars.put("VKD3D_FEATURE_LEVEL", config.get("featureLevel", "12.2").replace(".", "_"));
            envVars.put("VKD3D_SHADER_CACHE_PATH", RootFS.getDosUserCachePath());
        }
    }
  + app/src/main/java/com/winlator/contentdialog/VirGLConfigDialog.java
    package com.winlator.contentdialog;
    
    import android.content.Context;
    import android.view.View;
    import android.widget.CheckBox;
    import android.widget.Spinner;
    import com.winlator.R;
    import com.winlator.core.AppUtils;
    import com.winlator.core.EnvVars;
    import com.winlator.core.KeyValueSet;
    import com.winlator.core.StringUtils;
    import java.util.ArrayList;
    import java.util.Iterator;
    
    /* loaded from: classes.dex */
    public class VirGLConfigDialog extends ContentDialog {
        public VirGLConfigDialog(final View anchor) {
            super(anchor.getContext(), R.layout.virgl_config_dialog);
            Context context = anchor.getContext();
            setIcon(R.drawable.icon_settings);
            setTitle("VirGL " + context.getString(R.string.configuration));
            final Spinner sGLVersion = (Spinner) findViewById(R.id.SVersion);
            final CheckBox cbDisableVertexArrayBGRA = (CheckBox) findViewById(R.id.CBDisableVertexArrayBGRA);
            KeyValueSet config = new KeyValueSet(anchor.getTag());
            AppUtils.setSpinnerSelectionFromIdentifier(sGLVersion, config.get("glVersion", "3.1"));
            cbDisableVertexArrayBGRA.setChecked(config.getBoolean("disableVertexArrayBGRA", true));
            setOnConfirmCallback(new Runnable() { // from class: com.winlator.contentdialog.VirGLConfigDialog$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    VirGLConfigDialog.lambda$new$0(sGLVersion, cbDisableVertexArrayBGRA, anchor);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0(Spinner sGLVersion, CheckBox cbDisableVertexArrayBGRA, View anchor) {
            KeyValueSet newConfig = new KeyValueSet();
            newConfig.put("glVersion", StringUtils.parseNumber(sGLVersion.getSelectedItem()));
            newConfig.put("disableVertexArrayBGRA", cbDisableVertexArrayBGRA.isChecked() ? "1" : "0");
            anchor.setTag(newConfig.toString());
        }
    
        public static void setEnvVars(KeyValueSet config, EnvVars envVars) {
            ArrayList<String> disabledExtensions = new ArrayList<>();
            disabledExtensions.add("GL_KHR_debug");
            if (config.getBoolean("disableVertexArrayBGRA", true)) {
                disabledExtensions.add("GL_EXT_vertex_array_bgra");
            }
            String mesaExtensionOverride = "";
            Iterator<String> it = disabledExtensions.iterator();
            while (it.hasNext()) {
                String disabledExtension = it.next();
                StringBuilder sb = new StringBuilder();
                sb.append(mesaExtensionOverride);
                sb.append(!mesaExtensionOverride.isEmpty() ? " " : "");
                sb.append("-");
                sb.append(disabledExtension);
                mesaExtensionOverride = sb.toString();
            }
            if (!mesaExtensionOverride.isEmpty()) {
                envVars.put("MESA_EXTENSION_OVERRIDE", mesaExtensionOverride);
            }
            envVars.put("MESA_GL_VERSION_OVERRIDE", config.get("glVersion", "3.1"));
        }
    }
  + app/src/main/java/com/winlator/contentdialog/VortekConfigDialog.java
    package com.winlator.contentdialog;
    
    import android.content.Context;
    import android.view.View;
    import android.widget.Spinner;
    import com.winlator.R;
    import com.winlator.core.AppUtils;
    import com.winlator.core.GPUHelper;
    import com.winlator.core.KeyValueSet;
    import com.winlator.core.StringUtils;
    import com.winlator.widget.MultiSelectionComboBox;
    import com.winlator.xenvironment.components.VortekRendererComponent;
    
    /* loaded from: classes.dex */
    public class VortekConfigDialog extends ContentDialog {
        public static final String DEFAULT_VK_MAX_VERSION;
    
        static {
            StringBuilder sb = new StringBuilder();
            int i = VortekRendererComponent.VK_MAX_VERSION;
            sb.append(GPUHelper.vkVersionMajor(i));
            sb.append(".");
            sb.append(GPUHelper.vkVersionMinor(i));
            DEFAULT_VK_MAX_VERSION = sb.toString();
        }
    
        public VortekConfigDialog(final View anchor) {
            super(anchor.getContext(), R.layout.vortek_config_dialog);
            Context context = anchor.getContext();
            setIcon(R.drawable.icon_display_settings);
            setTitle("Vortek " + context.getString(R.string.configuration));
            final Spinner sVkMaxVersion = (Spinner) findViewById(R.id.SVkMaxVersion);
            final Spinner sMaxDeviceMemory = (Spinner) findViewById(R.id.SMaxDeviceMemory);
            final MultiSelectionComboBox mscbExposedExtensions = (MultiSelectionComboBox) findViewById(R.id.MSCBExposedExtensions);
            final String[] deviceExtensions = GPUHelper.vkGetDeviceExtensions();
            mscbExposedExtensions.setPopupWindowWidth(360);
            mscbExposedExtensions.setDisplayText(context.getString(R.string.multiselection_combobox_display_text));
            mscbExposedExtensions.setItems(deviceExtensions);
            KeyValueSet config = new KeyValueSet(anchor.getTag());
            String exposedDeviceExtensionsVal = config.get("exposedDeviceExtensions", "all");
            if (exposedDeviceExtensionsVal.equals("all")) {
                mscbExposedExtensions.setSelectedItems(deviceExtensions);
            } else if (!exposedDeviceExtensionsVal.isEmpty()) {
                mscbExposedExtensions.setSelectedItems(exposedDeviceExtensionsVal.split("\\|"));
            }
            AppUtils.setSpinnerSelectionFromValue(sVkMaxVersion, config.get("vkMaxVersion", DEFAULT_VK_MAX_VERSION));
            AppUtils.setSpinnerSelectionFromNumber(sMaxDeviceMemory, config.get("maxDeviceMemory", String.valueOf(4096)));
            setOnConfirmCallback(new Runnable() { // from class: com.winlator.contentdialog.VortekConfigDialog$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    VortekConfigDialog.lambda$new$0(sVkMaxVersion, sMaxDeviceMemory, mscbExposedExtensions, deviceExtensions, anchor);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0(Spinner sVkMaxVersion, Spinner sMaxDeviceMemory, MultiSelectionComboBox mscbExposedExtensions, String[] deviceExtensions, View anchor) {
            KeyValueSet newConfig = new KeyValueSet();
            newConfig.put("vkMaxVersion", StringUtils.parseNumber(sVkMaxVersion.getSelectedItem(), "0"));
            newConfig.put("maxDeviceMemory", StringUtils.parseNumber(sMaxDeviceMemory.getSelectedItem()));
            String[] selectedItems = mscbExposedExtensions.getSelectedItems();
            if (selectedItems.length > 0) {
                if (selectedItems.length == deviceExtensions.length) {
                    newConfig.put("exposedDeviceExtensions", "all");
                } else {
                    newConfig.put("exposedDeviceExtensions", String.join("|", selectedItems));
                }
            }
            anchor.setTag(newConfig.toString());
        }
    }
  + app/src/main/java/com/winlator/contentdialog/WineD3DConfigDialog.java
    package com.winlator.contentdialog;
    
    import android.content.Context;
    import android.view.View;
    import android.widget.ArrayAdapter;
    import android.widget.CheckBox;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import com.winlator.R;
    import com.winlator.core.AppUtils;
    import com.winlator.core.EnvVars;
    import com.winlator.core.InstallableComponents;
    import com.winlator.core.KeyValueSet;
    import com.winlator.core.StringUtils;
    import com.winlator.widget.GPUCardAdapter;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Locale;
    
    /* loaded from: classes.dex */
    public class WineD3DConfigDialog extends ContentDialog {
        public WineD3DConfigDialog(final View anchor) {
            super(anchor.getContext(), R.layout.wined3d_config_dialog);
            Context context = anchor.getContext();
            setIcon(R.drawable.icon_display_settings);
            setTitle("WineD3D " + context.getString(R.string.configuration));
            final Spinner sVersion = (Spinner) findViewById(R.id.SVersion);
            KeyValueSet config = new KeyValueSet(anchor.getTag());
            String version = config.get("version");
            InstallableComponents.initViews(InstallableComponents.Type.WINED3D, findViewById(R.id.WineD3DToolbox), sVersion, version, "9.2");
            final CheckBox cbCSMT = (CheckBox) findViewById(R.id.CBCSMT);
            cbCSMT.setChecked(config.getInt("csmt", 3) != 0);
            GPUCardAdapter adapter = new GPUCardAdapter(context, android.R.layout.simple_spinner_dropdown_item);
            final Spinner sGPUName = (Spinner) findViewById(R.id.SGPUName);
            sGPUName.setAdapter((SpinnerAdapter) adapter);
            sGPUName.setSelection(adapter.getPositionByDeviceId(config.getInt("VideoPciDeviceID", 1728)));
            List<String> offscreenRenderingModeList = Arrays.asList("Backbuffer", "FBO");
            final Spinner sOffscreenRenderingMode = (Spinner) findViewById(R.id.SOffscreenRenderingMode);
            sOffscreenRenderingMode.setAdapter((SpinnerAdapter) new ArrayAdapter(context, android.R.layout.simple_spinner_dropdown_item, offscreenRenderingModeList));
            AppUtils.setSpinnerSelectionFromValue(sOffscreenRenderingMode, config.get("OffScreenRenderingMode", "fbo"));
            final CheckBox cbStrictShaderMath = (CheckBox) findViewById(R.id.CBStrictShaderMath);
            cbStrictShaderMath.setChecked(config.getInt("strict_shader_math", 1) != 0);
            final Spinner sVideoMemorySize = (Spinner) findViewById(R.id.SVideoMemorySize);
            String videoMemorySize = config.get("VideoMemorySize", "2048");
            AppUtils.setSpinnerSelectionFromNumber(sVideoMemorySize, videoMemorySize);
            setOnConfirmCallback(new Runnable() { // from class: com.winlator.contentdialog.WineD3DConfigDialog$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    WineD3DConfigDialog.lambda$new$0(sVersion, cbCSMT, sGPUName, sOffscreenRenderingMode, cbStrictShaderMath, sVideoMemorySize, anchor);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0(Spinner sVersion, CheckBox cbCSMT, Spinner sGPUName, Spinner sOffscreenRenderingMode, CheckBox cbStrictShaderMath, Spinner sVideoMemorySize, View anchor) {
            KeyValueSet newConfig = new KeyValueSet();
            newConfig.put("version", StringUtils.parseNumber(sVersion.getSelectedItem()));
            newConfig.put("csmt", cbCSMT.isChecked() ? "3" : "0");
            GPUCardAdapter.GPUCard gpuCard = (GPUCardAdapter.GPUCard) sGPUName.getSelectedItem();
            newConfig.put("VideoPciDeviceID", String.valueOf(gpuCard.deviceId));
            newConfig.put("VideoPciVendorID", String.valueOf(gpuCard.vendorId));
            newConfig.put("OffScreenRenderingMode", sOffscreenRenderingMode.getSelectedItem().toString().toLowerCase(Locale.ENGLISH));
            newConfig.put("strict_shader_math", cbStrictShaderMath.isChecked() ? "1" : "0");
            newConfig.put("VideoMemorySize", StringUtils.parseNumber(sVideoMemorySize.getSelectedItem()));
            anchor.setTag(newConfig.toString());
        }
    
        public static void setEnvVars(KeyValueSet config, EnvVars envVars) {
            envVars.put("WINE_D3D_CONFIG", String.join(",", "csmt=" + config.getHexString("csmt", 3), "VideoPciDeviceID=" + config.getHexString("VideoPciDeviceID", 1728), "VideoPciVendorID=" + config.getHexString("VideoPciVendorID", 4318), "OffScreenRenderingMode=" + config.get("OffScreenRenderingMode", "fbo"), "strict_shader_math=" + config.getHexString("strict_shader_math", 1), "VideoMemorySize=" + config.get("VideoMemorySize", "2048")));
        }
    }
  + app/src/main/java/com/winlator/core/AppUtils.java
    package com.winlator.core;
    
    import android.app.Activity;
    import android.content.Context;
    import android.content.Intent;
    import android.content.pm.PackageInfo;
    import android.content.pm.PackageManager;
    import android.content.res.Resources;
    import android.graphics.Rect;
    import android.os.Build;
    import android.os.Environment;
    import android.os.Looper;
    import android.text.Html;
    import android.view.LayoutInflater;
    import android.view.View;
    import android.view.ViewGroup;
    import android.view.ViewTreeObserver;
    import android.view.Window;
    import android.view.WindowInsets;
    import android.view.WindowInsetsController;
    import android.view.inputmethod.InputMethodManager;
    import android.widget.PopupWindow;
    import android.widget.Spinner;
    import android.widget.TextView;
    import android.widget.Toast;
    import androidx.appcompat.app.AppCompatActivity;
    import com.google.android.material.tabs.TabLayout;
    import com.winlator.R;
    import java.lang.ref.WeakReference;
    import java.util.ArrayList;
    
    /* loaded from: classes.dex */
    public abstract class AppUtils {
        public static final String DIRECTORY_DOWNLOADS = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getPath();
        private static WeakReference<Toast> globalToastReference = null;
    
        public static class RestartApplicationOptions {
            public int containerId;
            public int selectedMenuItemId;
            public String startPath;
        }
    
        public static void keepScreenOn(Activity activity) {
            activity.getWindow().addFlags(128);
        }
    
        public static void restartActivity(AppCompatActivity activity) {
            Intent intent = activity.getIntent();
            activity.finish();
            activity.startActivity(intent);
            activity.overridePendingTransition(0, 0);
        }
    
        public static void restartApplication(Context context) {
            restartApplication(context, null);
        }
    
        public static void restartApplication(Context context, RestartApplicationOptions options) {
            Intent intent = context.getPackageManager().getLaunchIntentForPackage(context.getPackageName());
            Intent mainIntent = Intent.makeRestartActivityTask(intent.getComponent());
            if (options != null) {
                int i = options.selectedMenuItemId;
                if (i > 0) {
                    mainIntent.putExtra("selected_menu_item_id", i);
                }
                int i2 = options.containerId;
                if (i2 > 0) {
                    mainIntent.putExtra("container_id", i2);
                }
                String str = options.startPath;
                if (str != null) {
                    mainIntent.putExtra("start_path", str);
                }
            }
            context.startActivity(mainIntent);
            Runtime.getRuntime().exit(0);
        }
    
        public static void showKeyboard(AppCompatActivity activity) {
            final InputMethodManager imm = (InputMethodManager) activity.getSystemService("input_method");
            if (Build.VERSION.SDK_INT > 29) {
                activity.getWindow().getDecorView().postDelayed(new Runnable() { // from class: com.winlator.core.AppUtils$$ExternalSyntheticLambda4
                    @Override // java.lang.Runnable
                    public final void run() {
                        imm.toggleSoftInput(2, 0);
                    }
                }, 500L);
            } else {
                imm.toggleSoftInput(2, 0);
            }
        }
    
        public static void hideSystemUI(Activity activity) {
            Window window = activity.getWindow();
            final View decorView = window.getDecorView();
            if (Build.VERSION.SDK_INT >= 30) {
                window.setDecorFitsSystemWindows(false);
                WindowInsetsController insetsController = decorView.getWindowInsetsController();
                if (insetsController != null) {
                    insetsController.hide(WindowInsets.Type.statusBars() | WindowInsets.Type.navigationBars());
                    insetsController.setSystemBarsBehavior(2);
                    return;
                }
                return;
            }
            decorView.setSystemUiVisibility(5894);
            decorView.setOnSystemUiVisibilityChangeListener(new View.OnSystemUiVisibilityChangeListener() { // from class: com.winlator.core.AppUtils$$ExternalSyntheticLambda0
                @Override // android.view.View.OnSystemUiVisibilityChangeListener
                public final void onSystemUiVisibilityChange(int i) {
                    AppUtils.lambda$hideSystemUI$1(decorView, i);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$hideSystemUI$1(View decorView, int visibility) {
            if ((visibility & 4) == 0) {
                decorView.setSystemUiVisibility(5894);
            }
        }
    
        public static boolean isUiThread() {
            return Looper.getMainLooper().getThread() == Thread.currentThread();
        }
    
        public static int getScreenWidth() {
            return Resources.getSystem().getDisplayMetrics().widthPixels;
        }
    
        public static int getScreenHeight() {
            return Resources.getSystem().getDisplayMetrics().heightPixels;
        }
    
        public static int getPreferredDialogWidth(Context context) {
            int orientation = context.getResources().getConfiguration().orientation;
            float scale = orientation == 1 ? 0.8f : 0.5f;
            return (int) UnitUtils.dpToPx(UnitUtils.pxToDp(getScreenWidth()) * scale);
        }
    
        public static Toast showToast(Context context, int textResId) {
            return showToast(context, context.getString(textResId));
        }
    
        public static Toast showToast(final Context context, final String text) {
            if (!isUiThread()) {
                if (context instanceof Activity) {
                    ((Activity) context).runOnUiThread(new Runnable() { // from class: com.winlator.core.AppUtils$$ExternalSyntheticLambda3
                        @Override // java.lang.Runnable
                        public final void run() {
                            AppUtils.showToast(context, text);
                        }
                    });
                }
                return null;
            }
            WeakReference<Toast> weakReference = globalToastReference;
            if (weakReference != null) {
                Toast toast = weakReference.get();
                if (toast != null) {
                    toast.cancel();
                }
                globalToastReference = null;
            }
            View view = LayoutInflater.from(context).inflate(R.layout.custom_toast, (ViewGroup) null);
            ((TextView) view.findViewById(R.id.TextView)).setText(text);
            Toast toast2 = new Toast(context);
            toast2.setGravity(81, 0, 50);
            toast2.setDuration(text.length() >= 40 ? 1 : 0);
            toast2.setView(view);
            toast2.show();
            globalToastReference = new WeakReference<>(toast2);
            return toast2;
        }
    
        public static PopupWindow showPopupWindow(View anchor, View contentView, int width, int height) {
            Context context = anchor.getContext();
            PopupWindow popupWindow = new PopupWindow(context);
            popupWindow.setElevation(5.0f);
            if (width == 0 && height == 0) {
                int widthMeasureSpec = View.MeasureSpec.makeMeasureSpec(0, 0);
                int heightMeasureSpec = View.MeasureSpec.makeMeasureSpec(0, 0);
                contentView.measure(widthMeasureSpec, heightMeasureSpec);
                popupWindow.setWidth(contentView.getMeasuredWidth());
                popupWindow.setHeight(contentView.getMeasuredHeight());
            } else {
                if (width > 0) {
                    popupWindow.setWidth((int) UnitUtils.dpToPx(width));
                } else {
                    popupWindow.setWidth(-2);
                }
                if (height > 0) {
                    popupWindow.setHeight((int) UnitUtils.dpToPx(height));
                } else {
                    popupWindow.setHeight(-2);
                }
            }
            popupWindow.setContentView(contentView);
            popupWindow.setFocusable(false);
            popupWindow.setOutsideTouchable(true);
            popupWindow.update();
            popupWindow.showAsDropDown(anchor);
            popupWindow.setFocusable(true);
            popupWindow.update();
            return popupWindow;
        }
    
        public static void showHelpBox(Context context, View anchor, int textResId) {
            showHelpBox(context, anchor, context.getString(textResId));
        }
    
        public static void showHelpBox(Context context, View anchor, String text) {
            int padding = (int) UnitUtils.dpToPx(8.0f);
            TextView textView = new TextView(context);
            textView.setLayoutParams(new ViewGroup.LayoutParams((int) UnitUtils.dpToPx(284.0f), -2));
            textView.setPadding(padding, padding, padding, padding);
            textView.setTextSize(1, 16.0f);
            textView.setText(Html.fromHtml(text, 0));
            int widthMeasureSpec = View.MeasureSpec.makeMeasureSpec(0, 0);
            int heightMeasureSpec = View.MeasureSpec.makeMeasureSpec(0, 0);
            textView.measure(widthMeasureSpec, heightMeasureSpec);
            showPopupWindow(anchor, textView, 300, textView.getMeasuredHeight());
        }
    
        public static int getVersionCode(Context context) {
            try {
                PackageInfo pInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);
                return pInfo.versionCode;
            } catch (PackageManager.NameNotFoundException e) {
                return 0;
            }
        }
    
        public static void observeSoftKeyboardVisibility(final View rootView, final Callback<Boolean> callback) {
            final boolean[] visible = {false};
            rootView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() { // from class: com.winlator.core.AppUtils$$ExternalSyntheticLambda1
                @Override // android.view.ViewTreeObserver.OnGlobalLayoutListener
                public final void onGlobalLayout() {
                    AppUtils.lambda$observeSoftKeyboardVisibility$3(rootView, visible, callback);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$observeSoftKeyboardVisibility$3(View rootView, boolean[] visible, Callback callback) {
            Rect rect = new Rect();
            rootView.getWindowVisibleDisplayFrame(rect);
            int screenHeight = rootView.getRootView().getHeight();
            int keypadHeight = screenHeight - rect.bottom;
            if (keypadHeight > screenHeight * 0.15f) {
                if (!visible[0]) {
                    visible[0] = true;
                    callback.call(true);
                    return;
                }
                return;
            }
            if (visible[0]) {
                visible[0] = false;
                callback.call(false);
            }
        }
    
        public static boolean setSpinnerSelectionFromValue(Spinner spinner, String value) {
            spinner.setSelection(0, false);
            for (int i = 0; i < spinner.getCount(); i++) {
                if (spinner.getItemAtPosition(i).toString().equalsIgnoreCase(value)) {
                    spinner.setSelection(i, false);
                    return true;
                }
            }
            return false;
        }
    
        public static boolean setSpinnerSelectionFromIdentifier(Spinner spinner, String identifier) {
            spinner.setSelection(0, false);
            for (int i = 0; i < spinner.getCount(); i++) {
                if (StringUtils.parseIdentifier(spinner.getItemAtPosition(i)).equals(identifier)) {
                    spinner.setSelection(i, false);
                    return true;
                }
            }
            return false;
        }
    
        public static boolean setSpinnerSelectionFromNumber(Spinner spinner, String number) {
            spinner.setSelection(0, false);
            for (int i = 0; i < spinner.getCount(); i++) {
                if (StringUtils.parseNumber(spinner.getItemAtPosition(i)).equals(number)) {
                    spinner.setSelection(i, false);
                    return true;
                }
            }
            return false;
        }
    
        public static void setupTabLayout(View view, int tabLayoutResId, int... tabResIds) {
            setupTabLayout(view, tabLayoutResId, null, tabResIds);
        }
    
        public static void setupTabLayout(final View view, int tabLayoutResId, final Callback<Integer> onShowTab, final int... tabResIds) {
            final Callback<Integer> tabSelectedCallback = new Callback() { // from class: com.winlator.core.AppUtils$$ExternalSyntheticLambda2
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    AppUtils.lambda$setupTabLayout$4(tabResIds, view, onShowTab, (Integer) obj);
                }
            };
            TabLayout tabLayout = (TabLayout) view.findViewById(tabLayoutResId);
            tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() { // from class: com.winlator.core.AppUtils.1
                @Override // com.google.android.material.tabs.TabLayout.BaseOnTabSelectedListener
                public void onTabSelected(TabLayout.Tab tab) {
                    Callback.this.call(Integer.valueOf(tab.getPosition()));
                }
    
                @Override // com.google.android.material.tabs.TabLayout.BaseOnTabSelectedListener
                public void onTabUnselected(TabLayout.Tab tab) {
                }
    
                @Override // com.google.android.material.tabs.TabLayout.BaseOnTabSelectedListener
                public void onTabReselected(TabLayout.Tab tab) {
                    Callback.this.call(Integer.valueOf(tab.getPosition()));
                }
            });
            tabLayout.getTabAt(0).select();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$setupTabLayout$4(int[] tabResIds, View view, Callback onShowTab, Integer position) {
            int i = 0;
            while (i < tabResIds.length) {
                View tabView = view.findViewById(tabResIds[i]);
                int visibility = position.intValue() == i ? 0 : 8;
                tabView.setVisibility(visibility);
                if (visibility == 0 && onShowTab != null) {
                    onShowTab.call(Integer.valueOf(tabResIds[i]));
                }
                i++;
            }
        }
    
        public static void findViewsWithClass(ViewGroup parent, Class viewClass, ArrayList<View> outViews) {
            int childCount = parent.getChildCount();
            for (int i = 0; i < childCount; i++) {
                View child = parent.getChildAt(i);
                Class _class = child.getClass();
                if (_class == viewClass || _class.getSuperclass() == viewClass) {
                    outViews.add(child);
                } else if (child instanceof ViewGroup) {
                    findViewsWithClass((ViewGroup) child, viewClass, outViews);
                }
            }
        }
    }
  + app/src/main/java/com/winlator/core/ArrayUtils.java
    package com.winlator.core;
    
    import java.util.Arrays;
    import org.json.JSONArray;
    import org.json.JSONException;
    
    /* loaded from: classes.dex */
    public abstract class ArrayUtils {
        public static byte[] concat(byte[]... elements) {
            byte[] result = Arrays.copyOf(elements[0], elements[0].length);
            for (int i = 1; i < elements.length; i++) {
                byte[] newArray = Arrays.copyOf(result, result.length + elements[i].length);
                System.arraycopy(elements[i], 0, newArray, result.length, elements[i].length);
                result = newArray;
            }
            return result;
        }
    
        @SafeVarargs
        public static <T> T[] concat(T[]... tArr) {
            Object[] objArr = (T[]) Arrays.copyOf(tArr[0], tArr[0].length);
            for (int i = 1; i < tArr.length; i++) {
                Object[] copyOf = Arrays.copyOf(objArr, objArr.length + tArr[i].length);
                System.arraycopy(tArr[i], 0, copyOf, objArr.length, tArr[i].length);
                objArr = (T[]) copyOf;
            }
            return (T[]) objArr;
        }
    
        public static String[] toStringArray(JSONArray data) {
            String[] stringArray = new String[data.length()];
            for (int i = 0; i < data.length(); i++) {
                try {
                    stringArray[i] = data.getString(i);
                } catch (JSONException e) {
                }
            }
            return stringArray;
        }
    
        public static boolean startsWith(byte[] prefix, byte[] array) {
            if (prefix == null || array == null || array.length < prefix.length) {
                return false;
            }
            for (int i = 0; i < prefix.length; i++) {
                if (array[i] != prefix[i]) {
                    return false;
                }
            }
            return true;
        }
    }
  + app/src/main/java/com/winlator/core/BatteryUtils.java
    package com.winlator.core;
    
    import android.app.Activity;
    import android.content.Context;
    import android.os.BatteryManager;
    
    /* loaded from: classes.dex */
    public abstract class BatteryUtils {
        public static int getCapacity(Context context) {
            try {
                Object powerProfile = Class.forName("com.android.internal.os.PowerProfile").getConstructor(Context.class).newInstance(context);
                Double capacity = (Double) Class.forName("com.android.internal.os.PowerProfile").getMethod("getBatteryCapacity", new Class[0]).invoke(powerProfile, new Object[0]);
                if (capacity != null) {
                    return capacity.intValue();
                }
                return 0;
            } catch (Exception e) {
                return 0;
            }
        }
    
        public static int getCurrentMicroamperes(Activity activity) {
            BatteryManager batteryManager = (BatteryManager) activity.getSystemService("batterymanager");
            int currentMicroamperes = batteryManager.getIntProperty(2);
            int currentMicroamperes2 = (currentMicroamperes == 0 || currentMicroamperes == Integer.MIN_VALUE) ? 0 : Math.abs(currentMicroamperes);
            return currentMicroamperes2 <= 1000 ? currentMicroamperes2 * 1000 : currentMicroamperes2;
        }
    
        public static float computePower(int currentMicroamperes, float voltage) {
            return (currentMicroamperes / 1000000.0f) * voltage;
        }
    }
  + app/src/main/java/com/winlator/core/CPUStatus.java
    package com.winlator.core;
    
    import java.io.File;
    import java.io.IOException;
    import java.io.RandomAccessFile;
    
    /* loaded from: classes.dex */
    public abstract class CPUStatus {
        public static short[] getCurrentClockSpeeds() {
            int numProcessors = Runtime.getRuntime().availableProcessors();
            short[] clockSpeeds = new short[numProcessors];
            for (int i = 0; i < numProcessors; i++) {
                int currFreq = FileUtils.readInt("/sys/devices/system/cpu/cpu" + i + "/cpufreq/scaling_cur_freq");
                clockSpeeds[i] = (short) (currFreq / 1000);
            }
            return clockSpeeds;
        }
    
        public static short getMaxClockSpeed(int cpuIndex) {
            int maxFreq = FileUtils.readInt("/sys/devices/system/cpu/cpu" + cpuIndex + "/cpufreq/cpuinfo_max_freq");
            return (short) (maxFreq / 1000);
        }
    
        public static int getTemperature() {
            String[] sensorFiles = {"/sys/devices/system/cpu/cpu0/cpufreq/cpu_temp", "/sys/devices/system/cpu/cpu0/cpufreq/FakeShmoo_cpu_temp", "/sys/devices/platform/tegra-i2c.3/i2c-4/4-004c/temperature", "/sys/devices/platform/omap/omap_temp_sensor.0/temperature", "/sys/devices/platform/tegra_tmon/temp1_input", "/sys/devices/platform/s5p-tmu/temperature", "/sys/devices/platform/s5p-tmu/curr_temp", "/sys/devices/virtual/thermal/thermal_zone10/temp", "/sys/devices/virtual/thermal/thermal_zone1/temp", "/sys/devices/virtual/thermal/thermal_zone0/temp", "/sys/class/thermal/thermal_zone0/temp", "/sys/class/thermal/thermal_zone1/temp", "/sys/class/thermal/thermal_zone3/temp", "/sys/class/thermal/thermal_zone4/temp", "/sys/class/hwmon/hwmon0/device/temp1_input", "/sys/class/hwmon/hwmonX/temp1_input", "/sys/class/i2c-adapter/i2c-4/4-004c/temperature", "/sys/kernel/debug/tegra_thermal/temp_tj", "/sys/htc/cpu_temp", "/sys/devices/platform/tegra-i2c.3/i2c-4/4-004c/ext_temperature", "/sys/devices/platform/tegra-tsensor/tsensor_temperature", "/sys/devices/virtual/sec/sec-lp-thermistor/temperature"};
            for (String path : sensorFiles) {
                File file = new File(path);
                if (file.exists()) {
                    try {
                        RandomAccessFile reader = new RandomAccessFile(file, "r");
                        try {
                            String value = reader.readLine();
                            int temperature = value != null ? Integer.parseInt(value) : 0;
                            if (temperature > 100 && temperature <= 1000) {
                                int i = (int) (temperature / 10.0f);
                                reader.close();
                                return i;
                            }
                            if (temperature > 1000 && temperature <= 10000) {
                                int i2 = (int) (temperature / 100.0f);
                                reader.close();
                                return i2;
                            }
                            if (temperature > 10000) {
                                int i3 = (int) (temperature / 1000.0f);
                                reader.close();
                                return i3;
                            }
                            reader.close();
                        } finally {
                        }
                    } catch (IOException e) {
                    } catch (NumberFormatException e2) {
                    }
                }
            }
            return 0;
        }
    }
  + app/src/main/java/com/winlator/core/Callback.java
    package com.winlator.core;
    
    /* loaded from: classes.dex */
    public interface Callback<T> {
        void call(T t);
    }
  + app/src/main/java/com/winlator/core/CubicBezierInterpolator.java
    package com.winlator.core;
    
    import android.graphics.PointF;
    import android.view.animation.Interpolator;
    
    /* loaded from: classes.dex */
    public class CubicBezierInterpolator implements Interpolator {
        private float ax;
        private float bx;
        private float cx;
        public final PointF end;
        public final PointF start;
    
        public CubicBezierInterpolator() {
            this(new PointF(0.0f, 0.0f), new PointF(0.0f, 0.0f));
        }
    
        public CubicBezierInterpolator(PointF start, PointF end) {
            this.start = start;
            this.end = end;
        }
    
        public void set(float x1, float y1, float x2, float y2) {
            this.start.set(x1, y1);
            this.end.set(x2, y2);
        }
    
        @Override // android.animation.TimeInterpolator
        public float getInterpolation(float time) {
            return getBezierCoordinateY(getXForTime(time));
        }
    
        private float getBezierCoordinateY(float time) {
            float f = this.start.y;
            float cy = f * 3.0f;
            float by = ((this.end.y - f) * 3.0f) - cy;
            float ay = (1.0f - cy) - by;
            return ((((time * ay) + by) * time) + cy) * time;
        }
    
        private float getXForTime(float time) {
            float x = time;
            for (int i = 1; i < 14; i++) {
                float z = getBezierCoordinateX(x) - time;
                if (Math.abs(z) < 0.001d) {
                    break;
                }
                x -= z / getXDerivate(x);
            }
            return x;
        }
    
        private float getXDerivate(float t) {
            return this.cx + (((this.bx * 2.0f) + (this.ax * 3.0f * t)) * t);
        }
    
        private float getBezierCoordinateX(float time) {
            float f = this.start.x;
            float f2 = f * 3.0f;
            this.cx = f2;
            float f3 = ((this.end.x - f) * 3.0f) - f2;
            this.bx = f3;
            float f4 = (1.0f - f2) - f3;
            this.ax = f4;
            return (f2 + ((f3 + (f4 * time)) * time)) * time;
        }
    }
  + app/src/main/java/com/winlator/core/CursorLocker.java
    package com.winlator.core;
    
    import com.winlator.math.Mathf;
    import com.winlator.xserver.XServer;
    import java.util.Timer;
    import java.util.TimerTask;
    
    /* loaded from: classes.dex */
    public class CursorLocker extends TimerTask {
        private short maxDistance;
        private final XServer xServer;
        private float damping = 0.25f;
        private boolean enabled = true;
        private final Object pauseLock = new Object();
    
        public CursorLocker(XServer xServer) {
            this.xServer = xServer;
            this.maxDistance = (short) (xServer.screenInfo.width * 0.05f);
            Timer timer = new Timer();
            timer.scheduleAtFixedRate(this, 0L, 16L);
        }
    
        public void setEnabled(boolean enabled) {
            if (enabled) {
                synchronized (this.pauseLock) {
                    this.enabled = true;
                    this.pauseLock.notifyAll();
                }
                return;
            }
            this.enabled = enabled;
        }
    
        @Override // java.util.TimerTask, java.lang.Runnable
        public void run() {
            synchronized (this.pauseLock) {
                if (!this.enabled) {
                    try {
                        this.pauseLock.wait();
                    } catch (InterruptedException e) {
                    }
                }
            }
            short x = this.xServer.pointer.getX();
            short s = this.maxDistance;
            short x2 = (short) Mathf.clamp((int) x, -s, this.xServer.screenInfo.width + s);
            short y = this.xServer.pointer.getY();
            short s2 = this.maxDistance;
            short y2 = (short) Mathf.clamp((int) y, -s2, this.xServer.screenInfo.height + s2);
            if (x2 < 0) {
                this.xServer.pointer.setX((short) Math.ceil(x2 * this.damping));
            } else {
                XServer xServer = this.xServer;
                if (x2 >= xServer.screenInfo.width) {
                    xServer.pointer.setX((short) Math.floor(r3 + ((x2 - r3) * this.damping)));
                }
            }
            if (y2 < 0) {
                this.xServer.pointer.setY((short) Math.ceil(y2 * this.damping));
                return;
            }
            XServer xServer2 = this.xServer;
            if (y2 >= xServer2.screenInfo.height) {
                xServer2.pointer.setY((short) Math.floor(r3 + ((y2 - r3) * this.damping)));
            }
        }
    }
  + app/src/main/java/com/winlator/core/DefaultVersion.java
    package com.winlator.core;
    
    /* loaded from: classes.dex */
    public abstract class DefaultVersion {
        public static String DXVK() {
            return DXVK(null);
        }
    
        public static String DXVK(String graphicsDriver) {
            return (graphicsDriver == null || graphicsDriver.equals("turnip")) ? "2.4.1" : "1.10.3";
        }
    }
  + app/src/main/java/com/winlator/core/DownloadProgressDialog.java
    package com.winlator.core;
    
    import android.R;
    import android.app.Activity;
    import android.app.Dialog;
    import android.view.View;
    import android.view.Window;
    import android.widget.TextView;
    import com.google.android.material.progressindicator.CircularProgressIndicator;
    import com.winlator.math.Mathf;
    
    /* loaded from: classes.dex */
    public class DownloadProgressDialog {
        private final Activity activity;
        private Dialog dialog;
    
        public DownloadProgressDialog(Activity activity) {
            this.activity = activity;
        }
    
        private void create() {
            if (this.dialog != null) {
                return;
            }
            Dialog dialog = new Dialog(this.activity, R.style.Theme.Translucent.NoTitleBar.Fullscreen);
            this.dialog = dialog;
            dialog.requestWindowFeature(1);
            this.dialog.setCancelable(false);
            this.dialog.setCanceledOnTouchOutside(false);
            this.dialog.setContentView(com.winlator.R.layout.download_progress_dialog);
            Window window = this.dialog.getWindow();
            if (window != null) {
                window.clearFlags(16);
                window.clearFlags(8);
            }
        }
    
        public void show(int textResId) {
            show(textResId, null);
        }
    
        public void show(Runnable onCancelCallback) {
            show(0, onCancelCallback);
        }
    
        public void show(int textResId, final Runnable onCancelCallback) {
            if (isShowing()) {
                return;
            }
            close();
            if (this.dialog == null) {
                create();
            }
            if (textResId > 0) {
                ((TextView) this.dialog.findViewById(com.winlator.R.id.TextView)).setText(textResId);
            }
            setProgress(0);
            if (onCancelCallback != null) {
                this.dialog.findViewById(com.winlator.R.id.BTCancel).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.core.DownloadProgressDialog$$ExternalSyntheticLambda0
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        onCancelCallback.run();
                    }
                });
                this.dialog.findViewById(com.winlator.R.id.LLBottomBar).setVisibility(0);
            }
            this.dialog.show();
        }
    
        public void setProgress(int progress) {
            if (this.dialog == null) {
                return;
            }
            int progress2 = Mathf.clamp(progress, 0, 100);
            ((CircularProgressIndicator) this.dialog.findViewById(com.winlator.R.id.CircularProgressIndicator)).setProgress(progress2);
            ((TextView) this.dialog.findViewById(com.winlator.R.id.TVProgress)).setText(progress2 + "%");
        }
    
        public void close() {
            try {
                Dialog dialog = this.dialog;
                if (dialog != null) {
                    dialog.dismiss();
                }
            } catch (Exception e) {
            }
        }
    
        public void closeOnUiThread() {
            this.activity.runOnUiThread(new Runnable() { // from class: com.winlator.core.DownloadProgressDialog$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    DownloadProgressDialog.this.close();
                }
            });
        }
    
        public boolean isShowing() {
            Dialog dialog = this.dialog;
            return dialog != null && dialog.isShowing();
        }
    }
  + app/src/main/java/com/winlator/core/ElfHelper.java
    package com.winlator.core;
    
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.io.InputStream;
    
    /* loaded from: classes.dex */
    public abstract class ElfHelper {
        private static int getEIClass(File binFile) {
            InputStream inStream;
            byte[] header;
            try {
                inStream = new FileInputStream(binFile);
                try {
                    header = new byte[52];
                    inStream.read(header);
                } finally {
                }
            } catch (IOException e) {
            }
            if (header[0] == Byte.MAX_VALUE && header[1] == 69 && header[2] == 76 && header[3] == 70) {
                byte b = header[4];
                inStream.close();
                return b;
            }
            inStream.close();
            return 0;
        }
    
        public static boolean is64Bit(File binFile) {
            return getEIClass(binFile) == 2;
        }
    }
  + app/src/main/java/com/winlator/core/EnvVars.java
    package com.winlator.core;
    
    import java.util.Iterator;
    import java.util.LinkedHashMap;
    
    /* loaded from: classes.dex */
    public class EnvVars implements Iterable<String> {
        private final LinkedHashMap<String, String> data = new LinkedHashMap<>();
    
        public EnvVars() {
        }
    
        public EnvVars(String values) {
            putAll(values);
        }
    
        public EnvVars put(String name, Object value) {
            this.data.put(name, String.valueOf(value));
            return this;
        }
    
        public void putAll(String[] items) {
            if (items == null) {
                return;
            }
            for (String item : items) {
                int index = item.indexOf("=");
                String name = item.substring(0, index);
                String value = item.substring(index + 1);
                this.data.put(name, value);
            }
        }
    
        public void putAll(String values) {
            if (values == null || values.isEmpty()) {
                return;
            }
            putAll(values.split(" "));
        }
    
        public void putAll(EnvVars envVars) {
            this.data.putAll(envVars.data);
        }
    
        public String get(String name) {
            return this.data.getOrDefault(name, "");
        }
    
        public void remove(String name) {
            this.data.remove(name);
        }
    
        public boolean has(String name) {
            return this.data.containsKey(name);
        }
    
        public void clear() {
            this.data.clear();
        }
    
        public String toString() {
            return String.join(" ", toStringArray());
        }
    
        public String[] toStringArray() {
            String[] stringArray = new String[this.data.size()];
            int index = 0;
            for (String key : this.data.keySet()) {
                stringArray[index] = key + "=" + this.data.get(key);
                index++;
            }
            return stringArray;
        }
    
        @Override // java.lang.Iterable
        public Iterator<String> iterator() {
            return this.data.keySet().iterator();
        }
    }
  + app/src/main/java/com/winlator/core/FileUtils.java
    package com.winlator.core;
    
    import android.content.Context;
    import android.net.Uri;
    import android.os.Environment;
    import android.os.StatFs;
    import android.system.ErrnoException;
    import android.system.Os;
    import java.io.BufferedInputStream;
    import java.io.BufferedOutputStream;
    import java.io.BufferedReader;
    import java.io.BufferedWriter;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.io.RandomAccessFile;
    import java.nio.channels.FileChannel;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.util.ArrayList;
    import java.util.Stack;
    import java.util.UUID;
    import java.util.concurrent.Executors;
    
    /* loaded from: classes.dex */
    public abstract class FileUtils {
        public static byte[] read(Context context, String assetFile) {
            try {
                InputStream inStream = context.getAssets().open(assetFile);
                try {
                    byte[] copyToByteArray = StreamUtils.copyToByteArray(inStream);
                    if (inStream != null) {
                        inStream.close();
                    }
                    return copyToByteArray;
                } finally {
                }
            } catch (IOException e) {
                return null;
            }
        }
    
        public static byte[] read(File file) {
            try {
                InputStream inStream = new BufferedInputStream(new FileInputStream(file));
                try {
                    byte[] copyToByteArray = StreamUtils.copyToByteArray(inStream);
                    inStream.close();
                    return copyToByteArray;
                } finally {
                }
            } catch (IOException e) {
                return null;
            }
        }
    
        public static String readString(Context context, String assetFile) {
            return new String(read(context, assetFile), StandardCharsets.UTF_8);
        }
    
        public static String readString(File file) {
            return new String(read(file), StandardCharsets.UTF_8);
        }
    
        public static String readString(Context context, Uri uri) {
            StringBuilder sb = new StringBuilder();
            try {
                InputStream inputStream = context.getContentResolver().openInputStream(uri);
                try {
                    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
                    while (true) {
                        try {
                            String line = reader.readLine();
                            if (line == null) {
                                break;
                            }
                            sb.append(line);
                        } finally {
                        }
                    }
                    String sb2 = sb.toString();
                    reader.close();
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    return sb2;
                } finally {
                }
            } catch (IOException e) {
                return null;
            }
        }
    
        public static boolean writeString(File file, String data) {
            try {
                BufferedWriter bw = new BufferedWriter(new FileWriter(file));
                try {
                    bw.write(data);
                    bw.flush();
                    bw.close();
                    return true;
                } finally {
                }
            } catch (IOException e) {
                e.printStackTrace();
                return false;
            }
        }
    
        public static void symlink(File linkTarget, File linkFile) {
            symlink(linkTarget.getAbsolutePath(), linkFile.getAbsolutePath());
        }
    
        public static void symlink(String linkTarget, String linkFile) {
            try {
                new File(linkFile).delete();
                Os.symlink(linkTarget, linkFile);
            } catch (ErrnoException e) {
            }
        }
    
        public static boolean isSymlink(File file) {
            return Files.isSymbolicLink(file.toPath());
        }
    
        public static boolean delete(File targetFile) {
            if (targetFile == null) {
                return false;
            }
            if (targetFile.isDirectory() && !isSymlink(targetFile) && !clear(targetFile)) {
                return false;
            }
            return targetFile.delete();
        }
    
        public static boolean clear(File targetFile) {
            File[] files;
            if (targetFile == null) {
                return false;
            }
            if (targetFile.isDirectory() && (files = targetFile.listFiles()) != null) {
                for (File file : files) {
                    if (!delete(file)) {
                        return false;
                    }
                }
                return true;
            }
            return true;
        }
    
        public static boolean isEmpty(File targetFile) {
            if (targetFile == null) {
                return true;
            }
            if (!targetFile.isDirectory()) {
                return targetFile.length() == 0;
            }
            String[] files = targetFile.list();
            return files == null || files.length == 0;
        }
    
        public static boolean isAscendantOf(File srcFile, File dstFile) {
            for (File parent = dstFile.getParentFile(); parent != null; parent = parent.getParentFile()) {
                if (parent.equals(srcFile)) {
                    return true;
                }
            }
            return false;
        }
    
        public static boolean copy(File srcFile, File dstFile) {
            return copy(srcFile, dstFile, (Callback<File>) null);
        }
    
        public static boolean copy(File srcFile, File dstFile, Callback<File> callback) {
            if (isSymlink(srcFile)) {
                return true;
            }
            if (srcFile.isDirectory()) {
                if (isAscendantOf(srcFile, dstFile) || !(dstFile.exists() || dstFile.mkdirs())) {
                    return false;
                }
                if (callback != null) {
                    callback.call(dstFile);
                }
                String[] filenames = srcFile.list();
                if (filenames != null) {
                    for (String filename : filenames) {
                        if (!copy(new File(srcFile, filename), new File(dstFile, filename), callback)) {
                            return false;
                        }
                    }
                }
                return true;
            }
            File parent = dstFile.getParentFile();
            if (!srcFile.exists() || (parent != null && !parent.exists() && !parent.mkdirs())) {
                return false;
            }
            try {
                FileChannel inChannel = new FileInputStream(srcFile).getChannel();
                FileChannel outChannel = new FileOutputStream(dstFile).getChannel();
                inChannel.transferTo(0L, inChannel.size(), outChannel);
                inChannel.close();
                outChannel.close();
                if (callback != null) {
                    callback.call(dstFile);
                }
                return dstFile.exists();
            } catch (IOException e) {
                return false;
            }
        }
    
        public static void copy(Context context, String assetFile, File dstFile) {
            if (isDirectory(context, assetFile)) {
                if (!dstFile.isDirectory()) {
                    dstFile.mkdirs();
                }
                try {
                    String[] filenames = context.getAssets().list(assetFile);
                    for (String filename : filenames) {
                        String relativePath = StringUtils.addEndSlash(assetFile) + filename;
                        if (isDirectory(context, relativePath)) {
                            copy(context, relativePath, new File(dstFile, filename));
                        } else {
                            copy(context, relativePath, dstFile);
                        }
                    }
                    return;
                } catch (IOException e) {
                    return;
                }
            }
            if (dstFile.isDirectory()) {
                dstFile = new File(dstFile, getName(assetFile));
            }
            File parent = dstFile.getParentFile();
            if (!parent.isDirectory()) {
                parent.mkdirs();
            }
            try {
                InputStream inStream = context.getAssets().open(assetFile);
                try {
                    BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(dstFile), 65536);
                    try {
                        StreamUtils.copy(inStream, outStream);
                        outStream.close();
                        if (inStream != null) {
                            inStream.close();
                        }
                    } finally {
                    }
                } finally {
                }
            } catch (IOException e2) {
            }
        }
    
        public static ArrayList<String> readLines(File file) {
            return readLines(file, false);
        }
    
        public static ArrayList<String> readLines(File file, boolean skipEmptyLines) {
            ArrayList<String> lines = new ArrayList<>();
            try {
                FileInputStream fis = new FileInputStream(file);
                try {
                    BufferedReader reader = new BufferedReader(new InputStreamReader(fis));
                    while (true) {
                        String readLine = reader.readLine();
                        String line = readLine;
                        if (readLine == null) {
                            break;
                        }
                        if (skipEmptyLines) {
                            line = line.trim();
                            if (line.isEmpty()) {
                            }
                        }
                        lines.add(line);
                    }
                    fis.close();
                } finally {
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            return lines;
        }
    
        public static String getName(String path) {
            if (path == null) {
                return "";
            }
            String path2 = StringUtils.removeEndSlash(path);
            int index = Math.max(path2.lastIndexOf(47), path2.lastIndexOf(92));
            return path2.substring(index + 1);
        }
    
        public static String getBasename(String path) {
            return getName(path).replaceFirst("\\.[^\\.]+$", "");
        }
    
        public static String getDirname(String path) {
            if (path == null) {
                return "";
            }
            String path2 = StringUtils.removeEndSlash(path);
            int index = Math.max(path2.lastIndexOf(47), path2.lastIndexOf(92));
            return path2.substring(0, index);
        }
    
        public static void chmod(File file, int mode) {
            try {
                Os.chmod(file.getAbsolutePath(), mode);
            } catch (ErrnoException e) {
            }
        }
    
        public static File createTempFile(File parent, String prefix) {
            File tempFile = null;
            boolean exists = true;
            while (exists) {
                tempFile = new File(parent, prefix + "-" + UUID.randomUUID().toString().replace("-", "") + ".tmp");
                exists = tempFile.exists();
            }
            return tempFile;
        }
    
        public static String getFilePathFromUri(Uri uri) {
            if (!uri.getAuthority().equals("com.android.externalstorage.documents")) {
                return null;
            }
            String[] parts = uri.getLastPathSegment().split(":");
            if (!parts[0].equalsIgnoreCase("primary")) {
                return null;
            }
            String path = Environment.getExternalStorageDirectory() + "/" + parts[1];
            return path;
        }
    
        public static void getSizeAsync(final File file, final Callback<Long> callback) {
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.core.FileUtils$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    FileUtils.getSize(file, (Callback<Long>) callback);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static void getSize(File file, Callback<Long> callback) {
            if (file == null) {
                return;
            }
            if (file.isFile()) {
                callback.call(Long.valueOf(file.length()));
                return;
            }
            Stack<File> stack = new Stack<>();
            stack.push(file);
            while (!stack.isEmpty()) {
                File current = stack.pop();
                File[] files = current.listFiles();
                if (files != null) {
                    for (File f : files) {
                        if (f.isDirectory()) {
                            stack.push(f);
                        } else {
                            long length = f.length();
                            if (length > 0) {
                                callback.call(Long.valueOf(length));
                            }
                        }
                    }
                }
            }
        }
    
        public static long getSize(Context context, String assetFile) {
            try {
                InputStream inStream = context.getAssets().open(assetFile);
                try {
                    long available = inStream.available();
                    inStream.close();
                    return available;
                } finally {
                }
            } catch (IOException e) {
                return 0L;
            }
        }
    
        public static long getInternalStorageSize() {
            File dataDir = Environment.getDataDirectory();
            StatFs stat = new StatFs(dataDir.getPath());
            long blockSize = stat.getBlockSizeLong();
            long totalBlocks = stat.getBlockCountLong();
            return totalBlocks * blockSize;
        }
    
        public static boolean isDirectory(Context context, String assetFile) {
            try {
                String[] files = context.getAssets().list(assetFile);
                if (files != null) {
                    return files.length > 0;
                }
                return false;
            } catch (IOException e) {
                return false;
            }
        }
    
        public static String toRelativePath(String basePath, String fullPath) {
            StringBuilder sb = new StringBuilder();
            sb.append(fullPath.startsWith("/") ? "/" : "");
            sb.append(new File(basePath).toURI().relativize(new File(fullPath).toURI()).getPath());
            return StringUtils.removeEndSlash(sb.toString());
        }
    
        public static int readInt(String path) {
            int result = 0;
            try {
                RandomAccessFile reader = new RandomAccessFile(path, "r");
                try {
                    String line = reader.readLine();
                    result = !line.isEmpty() ? Integer.parseInt(line) : 0;
                    reader.close();
                } finally {
                }
            } catch (Exception e) {
            }
            return result;
        }
    
        public static String readSymlink(File file) {
            try {
                return Files.readSymbolicLink(file.toPath()).toString();
            } catch (IOException e) {
                return "";
            }
        }
    
        public static String getExtension(String filename) {
            int dotIndex;
            return (filename == null || filename.isEmpty() || (dotIndex = filename.lastIndexOf(".")) == -1) ? "" : filename.substring(dotIndex + 1);
        }
    }
  + app/src/main/java/com/winlator/core/GPUHelper.java
    package com.winlator.core;
    
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    
    /* loaded from: classes.dex */
    public abstract class GPUHelper {
        public static native String[] vkGetDeviceExtensions();
    
        static {
            System.loadLibrary("winlator");
        }
    
        public static int vkMakeVersion(String value) {
            Pattern pattern = Pattern.compile("([0-9]+)\\.([0-9]+)\\.?([0-9]+)?");
            Matcher matcher = pattern.matcher(value);
            if (!matcher.find()) {
                return 0;
            }
            try {
                int major = matcher.group(1) != null ? Integer.parseInt(matcher.group(1)) : 0;
                int minor = matcher.group(2) != null ? Integer.parseInt(matcher.group(2)) : 0;
                int patch = matcher.group(3) != null ? Integer.parseInt(matcher.group(3)) : 0;
                if (matcher.group(1) == null && patch == 0) {
                    patch = minor;
                }
                return vkMakeVersion(major, minor, patch);
            } catch (NumberFormatException e) {
                return 0;
            }
        }
    
        public static int vkMakeVersion(int major, int minor, int patch) {
            return (major << 22) | (minor << 12) | patch;
        }
    
        public static int vkVersionMajor(int version) {
            return version >> 22;
        }
    
        public static int vkVersionMinor(int version) {
            return (version >> 12) & 1023;
        }
    }
  + app/src/main/java/com/winlator/core/HttpUtils.java
    package com.winlator.core;
    
    import android.app.Activity;
    import java.io.BufferedInputStream;
    import java.io.File;
    import java.io.FileOutputStream;
    import java.io.InputStream;
    import java.io.OutputStream;
    import java.net.HttpURLConnection;
    import java.net.URL;
    import java.nio.charset.StandardCharsets;
    import java.util.concurrent.Executors;
    import java.util.concurrent.atomic.AtomicBoolean;
    
    /* loaded from: classes.dex */
    public abstract class HttpUtils {
        /* JADX INFO: Access modifiers changed from: private */
        public static void downloadAsync(String url, Callback<String> onDownloadComplete) {
            try {
                HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
                if (connection.getResponseCode() != 200) {
                    onDownloadComplete.call(null);
                    return;
                }
                InputStream inStream = connection.getInputStream();
                try {
                    byte[] bytes = StreamUtils.copyToByteArray(inStream);
                    if (inStream != null) {
                        inStream.close();
                    }
                    onDownloadComplete.call(new String(bytes, StandardCharsets.UTF_8));
                } finally {
                }
            } catch (Exception e) {
                onDownloadComplete.call(null);
            }
        }
    
        public static void download(final String url, final Callback<String> onDownloadComplete) {
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.core.HttpUtils$$ExternalSyntheticLambda4
                @Override // java.lang.Runnable
                public final void run() {
                    HttpUtils.downloadAsync(url, onDownloadComplete);
                }
            });
        }
    
        private static void downloadAsync(String url, File destination, AtomicBoolean interruptRef, Callback<Integer> onPublishProgress, Callback<Boolean> onDownloadComplete) {
            try {
                interruptRef.set(false);
                HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
                if (connection.getResponseCode() != 200) {
                    onDownloadComplete.call(false);
                    return;
                }
                int contentLength = connection.getContentLength();
                InputStream inStream = new BufferedInputStream(connection.getInputStream(), 65536);
                try {
                    OutputStream outStream = new FileOutputStream(destination);
                    try {
                        byte[] buffer = new byte[1024];
                        int totalSize = 0;
                        while (true) {
                            int bytesRead = inStream.read(buffer);
                            if (bytesRead == -1 || interruptRef.get()) {
                                break;
                            }
                            totalSize += bytesRead;
                            if (onPublishProgress != null) {
                                int progress = (int) ((totalSize / contentLength) * 100.0f);
                                onPublishProgress.call(Integer.valueOf(progress));
                            }
                            outStream.write(buffer, 0, bytesRead);
                        }
                        outStream.close();
                        inStream.close();
                        onDownloadComplete.call(Boolean.valueOf(!interruptRef.get()));
                    } finally {
                    }
                } finally {
                }
            } catch (Exception e) {
                onDownloadComplete.call(false);
            }
        }
    
        public static void download(final Activity activity, final String url, final File destination, final Callback<Boolean> onDownloadComplete) {
            final DownloadProgressDialog dialog = new DownloadProgressDialog(activity);
            final AtomicBoolean interruptRef = new AtomicBoolean();
            dialog.show(new Runnable() { // from class: com.winlator.core.HttpUtils$$ExternalSyntheticLambda6
                @Override // java.lang.Runnable
                public final void run() {
                    interruptRef.set(true);
                }
            });
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.core.HttpUtils$$ExternalSyntheticLambda5
                @Override // java.lang.Runnable
                public final void run() {
                    HttpUtils.lambda$download$6(url, destination, interruptRef, activity, dialog, onDownloadComplete);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$download$6(String url, final File destination, AtomicBoolean interruptRef, final Activity activity, final DownloadProgressDialog dialog, final Callback onDownloadComplete) {
            downloadAsync(url, destination, interruptRef, new Callback() { // from class: com.winlator.core.HttpUtils$$ExternalSyntheticLambda0
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    HttpUtils.lambda$download$3(activity, dialog, (Integer) obj);
                }
            }, new Callback() { // from class: com.winlator.core.HttpUtils$$ExternalSyntheticLambda1
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    HttpUtils.lambda$download$5(destination, activity, dialog, onDownloadComplete, (Boolean) obj);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$download$3(Activity activity, final DownloadProgressDialog dialog, final Integer progress) {
            activity.runOnUiThread(new Runnable() { // from class: com.winlator.core.HttpUtils$$ExternalSyntheticLambda3
                @Override // java.lang.Runnable
                public final void run() {
                    HttpUtils.lambda$download$2(DownloadProgressDialog.this, progress);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$download$2(DownloadProgressDialog dialog, Integer progress) {
            dialog.setProgress(progress.intValue());
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$download$5(File destination, Activity activity, final DownloadProgressDialog dialog, final Callback onDownloadComplete, final Boolean success) {
            if (!success.booleanValue() && destination.isFile()) {
                destination.delete();
            }
            activity.runOnUiThread(new Runnable() { // from class: com.winlator.core.HttpUtils$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    HttpUtils.lambda$download$4(DownloadProgressDialog.this, onDownloadComplete, success);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$download$4(DownloadProgressDialog dialog, Callback onDownloadComplete, Boolean success) {
            dialog.close();
            onDownloadComplete.call(success);
        }
    }
  + app/src/main/java/com/winlator/core/ImageUtils.java
    package com.winlator.core;
    
    import android.content.Context;
    import android.graphics.Bitmap;
    import android.graphics.BitmapFactory;
    import android.net.Uri;
    import java.io.File;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.io.InputStream;
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public abstract class ImageUtils {
        private static int calculateInSampleSize(BitmapFactory.Options options, int maxSize) {
            int height = options.outHeight;
            int width = options.outWidth;
            int inSampleSize = 1;
            int reqWidth = width >= height ? maxSize : 0;
            int reqHeight = height >= width ? maxSize : 0;
            if (height > reqHeight || width > reqWidth) {
                int halfHeight = height / 2;
                int halfWidth = width / 2;
                while (halfHeight / inSampleSize >= reqHeight && halfWidth / inSampleSize >= reqWidth) {
                    inSampleSize *= 2;
                }
            }
            return inSampleSize;
        }
    
        public static Bitmap getBitmapFromUri(Context context, Uri uri, BitmapFactory.Options options) {
            InputStream is;
            InputStream is2 = null;
            Bitmap bitmap = null;
            try {
                try {
                    try {
                        is = context.getContentResolver().openInputStream(uri);
                        if (options != null) {
                            bitmap = BitmapFactory.decodeStream(is, null, options);
                        } else {
                            bitmap = BitmapFactory.decodeStream(is);
                        }
                    } catch (Throwable th) {
                        if (0 != 0) {
                            try {
                                is2.close();
                            } catch (IOException e) {
                            }
                        }
                        throw th;
                    }
                } catch (IOException e2) {
                    e2.printStackTrace();
                    if (0 != 0) {
                        is2.close();
                    }
                }
                if (is != null) {
                    is.close();
                }
            } catch (IOException e3) {
            }
            return bitmap;
        }
    
        /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:17:0x0025 -> B:6:0x0034). Please report as a decompilation issue!!! */
        public static Bitmap getBitmapFromUri(Context context, Uri uri, int maxSize) {
            InputStream is = null;
            BitmapFactory.Options options = new BitmapFactory.Options();
            try {
                try {
                    try {
                        is = context.getContentResolver().openInputStream(uri);
                        options.inJustDecodeBounds = true;
                        BitmapFactory.decodeStream(is, null, options);
                        int inSampleSize = calculateInSampleSize(options, maxSize);
                        options.inJustDecodeBounds = false;
                        options.inSampleSize = inSampleSize;
                        if (is != null) {
                            is.close();
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                        if (is != null) {
                            is.close();
                        }
                    }
                } catch (IOException e2) {
                }
                return getBitmapFromUri(context, uri, options);
            } catch (Throwable th) {
                if (is != null) {
                    try {
                        is.close();
                    } catch (IOException e3) {
                    }
                }
                throw th;
            }
        }
    
        public static boolean save(Bitmap bitmap, File output, Bitmap.CompressFormat compressFormat, int quality) {
            FileOutputStream fos = null;
            try {
                try {
                    fos = new FileOutputStream(output);
                    boolean compress = bitmap.compress(compressFormat, quality, fos);
                    try {
                        fos.flush();
                        fos.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    return compress;
                } catch (Exception e2) {
                    e2.printStackTrace();
                    if (fos != null) {
                        try {
                            fos.flush();
                            fos.close();
                            return false;
                        } catch (IOException e3) {
                            e3.printStackTrace();
                            return false;
                        }
                    }
                    return false;
                }
            } catch (Throwable th) {
                if (fos != null) {
                    try {
                        fos.flush();
                        fos.close();
                    } catch (IOException e4) {
                        e4.printStackTrace();
                    }
                }
                throw th;
            }
        }
    
        public static boolean isPNGData(ByteBuffer data) {
            int position = data.position();
            if (Byte.toUnsignedInt(data.get(position + 0)) != 137 || data.get(position + 1) != 80 || data.get(position + 2) != 78 || data.get(position + 3) != 71) {
                return false;
            }
            return true;
        }
    }
  + app/src/main/java/com/winlator/core/InstallableComponents.java
    package com.winlator.core;
    
    import android.app.Activity;
    import android.content.Context;
    import android.view.View;
    import android.widget.ArrayAdapter;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import com.winlator.R;
    import com.winlator.contentdialog.ContentDialog;
    import com.winlator.core.InstallableComponents;
    import com.winlator.core.TarCompressorUtils;
    import com.winlator.xenvironment.RootFS;
    import java.io.File;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.Comparator;
    import java.util.Locale;
    
    /* loaded from: classes.dex */
    public abstract class InstallableComponents {
    
        public enum Type {
            BOX64,
            TURNIP,
            DXVK,
            VKD3D,
            WINED3D;
    
            /* JADX INFO: Access modifiers changed from: private */
            public String lowerName() {
                return name().toLowerCase(Locale.ENGLISH);
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public String title() {
                switch (AnonymousClass1.$SwitchMap$com$winlator$core$InstallableComponents$Type[ordinal()]) {
                    case 1:
                        return "Box64";
                    case 2:
                        return "Turnip";
                    case 3:
                        return "DXVK";
                    case 4:
                        return "VKD3D";
                    case 5:
                        return "WineD3D";
                    default:
                        return "";
                }
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public String assetFolder() {
                switch (AnonymousClass1.$SwitchMap$com$winlator$core$InstallableComponents$Type[ordinal()]) {
                    case 1:
                        return "box64";
                    case 2:
                        return "graphics_driver";
                    case 3:
                    case 4:
                    case 5:
                        return "dxwrapper";
                    default:
                        return "";
                }
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public File getDestination(Context context) {
                File rootDir = RootFS.find(context).getRootDir();
                File windowsDir = new File(rootDir, "/home/xuser/.wine/drive_c/windows");
                return (this == DXVK || this == VKD3D || this == WINED3D) ? windowsDir : rootDir;
            }
        }
    
        /* renamed from: com.winlator.core.InstallableComponents$1, reason: invalid class name */
        static /* synthetic */ class AnonymousClass1 {
            static final /* synthetic */ int[] $SwitchMap$com$winlator$core$InstallableComponents$Type;
    
            static {
                int[] iArr = new int[Type.values().length];
                $SwitchMap$com$winlator$core$InstallableComponents$Type = iArr;
                try {
                    iArr[Type.BOX64.ordinal()] = 1;
                } catch (NoSuchFieldError e) {
                }
                try {
                    $SwitchMap$com$winlator$core$InstallableComponents$Type[Type.TURNIP.ordinal()] = 2;
                } catch (NoSuchFieldError e2) {
                }
                try {
                    $SwitchMap$com$winlator$core$InstallableComponents$Type[Type.DXVK.ordinal()] = 3;
                } catch (NoSuchFieldError e3) {
                }
                try {
                    $SwitchMap$com$winlator$core$InstallableComponents$Type[Type.VKD3D.ordinal()] = 4;
                } catch (NoSuchFieldError e4) {
                }
                try {
                    $SwitchMap$com$winlator$core$InstallableComponents$Type[Type.WINED3D.ordinal()] = 5;
                } catch (NoSuchFieldError e5) {
                }
            }
        }
    
        public static ArrayList<String> getBuiltinVersions(Type type) {
            String[] items = new String[0];
            switch (AnonymousClass1.$SwitchMap$com$winlator$core$InstallableComponents$Type[type.ordinal()]) {
                case 1:
                    items = new String[]{"0.3.2", "0.3.4"};
                    break;
                case 2:
                    items = new String[]{"24.1.0", "25.0.0"};
                    break;
                case 3:
                    items = new String[]{"0.96", "1.7.2", "1.10.3", "2.4.1"};
                    break;
                case 4:
                    items = new String[]{"2.13"};
                    break;
                case 5:
                    items = new String[]{"9.2"};
                    break;
            }
            return new ArrayList<>(Arrays.asList(items));
        }
    
        public static File getComponentDir(Type type, Context context) {
            File file = new File(context.getFilesDir(), "/installed_components/" + type.lowerName());
            if (!file.isDirectory()) {
                file.mkdirs();
            }
            return file;
        }
    
        public static ArrayList<String> getInstalledVersions(Type type, Context context) {
            String[] names;
            File componentDir = getComponentDir(type, context);
            ArrayList<String> result = new ArrayList<>();
            if (componentDir.isDirectory() && (names = componentDir.list()) != null) {
                for (String name : names) {
                    result.add(parseVersionText(type, FileUtils.getBasename(name)));
                }
            }
            return result;
        }
    
        public static void extractFile(Type type, Context context, String version, String defaultVersion) {
            File destination = type.getDestination(context);
            if (getBuiltinVersions(type).contains(version)) {
                String sourcePath = type.assetFolder() + "/" + type.lowerName() + "-" + version + ".tzst";
                TarCompressorUtils.extract(TarCompressorUtils.Type.ZSTD, context, sourcePath, destination);
                return;
            }
            File componentDir = getComponentDir(type, context);
            File source = new File(componentDir, type.lowerName() + "-" + version + ".tzst");
            TarCompressorUtils.Type type2 = TarCompressorUtils.Type.ZSTD;
            boolean success = TarCompressorUtils.extract(type2, source, destination);
            if (!success) {
                String sourcePath2 = type.assetFolder() + "/" + type.lowerName() + "-" + defaultVersion + ".tzst";
                TarCompressorUtils.extract(type2, context, sourcePath2, destination);
            }
        }
    
        private static String parseVersionText(Type type, String filename) {
            return filename.replace(type.lowerName() + "-", "").replace(".tzst", "");
        }
    
        private static void downloadComponentFile(final Type type, final String filename, final Spinner spinner, final String defaultItem) {
            final Activity activity = (Activity) spinner.getContext();
            File destination = new File(getComponentDir(type, activity), filename);
            if (destination.isFile()) {
                destination.delete();
            }
            HttpUtils.download(activity, String.format("https://raw.githubusercontent.com/brunodev85/winlator/main/installable_components/%s", type.lowerName() + "/" + filename), destination, new Callback() { // from class: com.winlator.core.InstallableComponents$$ExternalSyntheticLambda3
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    InstallableComponents.lambda$downloadComponentFile$0(InstallableComponents.Type.this, filename, spinner, defaultItem, activity, (Boolean) obj);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$downloadComponentFile$0(Type type, String filename, Spinner spinner, String defaultItem, Activity activity, Boolean success) {
            if (success.booleanValue()) {
                String selectedItem = StringUtils.parseIdentifier(parseVersionText(type, filename));
                loadSpinner(type, spinner, selectedItem, defaultItem);
            } else {
                AppUtils.showToast(activity, R.string.a_network_error_occurred);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static void showDownloadableListDialog(final Type type, final Spinner spinner, final String defaultItem) {
            final Activity activity = (Activity) spinner.getContext();
            final PreloaderDialog preloaderDialog = new PreloaderDialog(activity);
            preloaderDialog.lambda$showOnUiThread$0(R.string.loading);
            HttpUtils.download(String.format("https://raw.githubusercontent.com/brunodev85/winlator/main/installable_components/%s", type.lowerName() + "/index.txt"), new Callback() { // from class: com.winlator.core.InstallableComponents$$ExternalSyntheticLambda2
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    InstallableComponents.lambda$showDownloadableListDialog$3(activity, preloaderDialog, type, spinner, defaultItem, (String) obj);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$showDownloadableListDialog$3(final Activity activity, final PreloaderDialog preloaderDialog, final Type type, final Spinner spinner, final String defaultItem, final String content) {
            activity.runOnUiThread(new Runnable() { // from class: com.winlator.core.InstallableComponents$$ExternalSyntheticLambda5
                @Override // java.lang.Runnable
                public final void run() {
                    InstallableComponents.lambda$showDownloadableListDialog$2(PreloaderDialog.this, content, activity, type, spinner, defaultItem);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$showDownloadableListDialog$2(PreloaderDialog preloaderDialog, String content, Activity activity, final Type type, final Spinner spinner, final String defaultItem) {
            preloaderDialog.close();
            if (content != null) {
                if (content.isEmpty()) {
                    AppUtils.showToast(activity, R.string.there_are_no_items_to_download);
                    return;
                }
                final String[] filenames = content.split("\n");
                String[] items = (String[]) filenames.clone();
                for (int i = 0; i < items.length; i++) {
                    items[i] = type.title() + " " + parseVersionText(type, items[i]);
                }
                ContentDialog.showSelectionList((Context) activity, R.string.install_component, items, false, (Callback<ArrayList<Integer>>) new Callback() { // from class: com.winlator.core.InstallableComponents$$ExternalSyntheticLambda4
                    @Override // com.winlator.core.Callback
                    public final void call(Object obj) {
                        InstallableComponents.lambda$showDownloadableListDialog$1(InstallableComponents.Type.this, filenames, spinner, defaultItem, (ArrayList) obj);
                    }
                });
                return;
            }
            AppUtils.showToast(activity, R.string.a_network_error_occurred);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$showDownloadableListDialog$1(Type type, String[] filenames, Spinner spinner, String defaultItem, ArrayList positions) {
            if (!positions.isEmpty()) {
                downloadComponentFile(type, filenames[((Integer) positions.get(0)).intValue()], spinner, defaultItem);
            }
        }
    
        public static void initViews(final Type type, View toolbox, final Spinner spinner, final String selectedItem, final String defaultItem) {
            final Context context = spinner.getContext();
            toolbox.findViewWithTag("install").setOnClickListener(new View.OnClickListener() { // from class: com.winlator.core.InstallableComponents$$ExternalSyntheticLambda1
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    InstallableComponents.showDownloadableListDialog(InstallableComponents.Type.this, spinner, defaultItem);
                }
            });
            toolbox.findViewWithTag("remove").setOnClickListener(new View.OnClickListener() { // from class: com.winlator.core.InstallableComponents$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    InstallableComponents.lambda$initViews$6(spinner, type, context, selectedItem, defaultItem, view);
                }
            });
            loadSpinner(type, spinner, selectedItem, defaultItem);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$initViews$6(final Spinner spinner, final Type type, Context context, final String selectedItem, final String defaultItem, View v) {
            String identifier = StringUtils.parseIdentifier(spinner.getSelectedItem());
            if (!getBuiltinVersions(type).contains(identifier)) {
                final File targetFile = new File(getComponentDir(type, context), type.lowerName() + "-" + identifier + ".tzst");
                if (targetFile.isFile()) {
                    ContentDialog.confirm(context, R.string.do_you_want_to_remove_this_component_version, new Runnable() { // from class: com.winlator.core.InstallableComponents$$ExternalSyntheticLambda6
                        @Override // java.lang.Runnable
                        public final void run() {
                            InstallableComponents.lambda$initViews$5(targetFile, type, spinner, selectedItem, defaultItem);
                        }
                    });
                    return;
                }
                return;
            }
            AppUtils.showToast(context, R.string.you_cannot_remove_this_component_version);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$initViews$5(File targetFile, Type type, Spinner spinner, String selectedItem, String defaultItem) {
            FileUtils.delete(targetFile);
            loadSpinner(type, spinner, selectedItem, defaultItem);
        }
    
        private static void loadSpinner(Type type, Spinner spinner, String selectedItem, String defaultItem) {
            ArrayList<String> items = getBuiltinVersions(type);
            items.addAll(getInstalledVersions(type, spinner.getContext()));
            items.sort(new Comparator() { // from class: com.winlator.core.InstallableComponents$$ExternalSyntheticLambda7
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$loadSpinner$7;
                    lambda$loadSpinner$7 = InstallableComponents.lambda$loadSpinner$7((String) obj, (String) obj2);
                    return lambda$loadSpinner$7;
                }
            });
            spinner.setAdapter((SpinnerAdapter) new ArrayAdapter(spinner.getContext(), android.R.layout.simple_spinner_dropdown_item, items));
            if (selectedItem == null || selectedItem.isEmpty() || !AppUtils.setSpinnerSelectionFromIdentifier(spinner, selectedItem)) {
                AppUtils.setSpinnerSelectionFromIdentifier(spinner, defaultItem);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ int lambda$loadSpinner$7(String o1, String o2) {
            return Integer.compare(GPUHelper.vkMakeVersion(o1), GPUHelper.vkMakeVersion(o2));
        }
    }
  + app/src/main/java/com/winlator/core/KeyValueSet.java
    package com.winlator.core;
    
    import java.util.Iterator;
    
    /* loaded from: classes.dex */
    public class KeyValueSet implements Iterable<String[]> {
        private String data;
    
        public KeyValueSet() {
            this.data = "";
        }
    
        public KeyValueSet(Object data) {
            this(data != null ? data.toString() : null);
        }
    
        public KeyValueSet(String data) {
            String str = "";
            this.data = "";
            if (data != null && !data.isEmpty()) {
                str = data;
            }
            this.data = str;
        }
    
        private int[] indexOfKey(String key) {
            int start = 0;
            int end = this.data.indexOf(",");
            if (end == -1) {
                end = this.data.length();
            }
            while (start < end) {
                int index = this.data.indexOf("=", start);
                String currKey = this.data.substring(start, index);
                if (currKey.equals(key)) {
                    return new int[]{start, end};
                }
                start = end + 1;
                end = this.data.indexOf(",", start);
                if (end == -1) {
                    end = this.data.length();
                }
            }
            return null;
        }
    
        public String get(String key) {
            return get(key, "");
        }
    
        public String get(String key, String fallback) {
            if (this.data.isEmpty()) {
                return fallback;
            }
            Iterator<String[]> it = iterator();
            while (it.hasNext()) {
                String[] keyValue = it.next();
                if (keyValue[0].equals(key)) {
                    return keyValue[1];
                }
            }
            return fallback;
        }
    
        public float getFloat(String key, float fallback) {
            try {
                String value = get(key);
                return !value.isEmpty() ? Float.parseFloat(value) : fallback;
            } catch (NumberFormatException e) {
                return fallback;
            }
        }
    
        public int getInt(String key, int fallback) {
            try {
                String value = get(key);
                return !value.isEmpty() ? Integer.parseInt(value) : fallback;
            } catch (NumberFormatException e) {
                return fallback;
            }
        }
    
        public String getHexString(String key, int fallback) {
            int result;
            try {
                String value = get(key);
                result = !value.isEmpty() ? Integer.parseInt(value) : fallback;
            } catch (NumberFormatException e) {
                result = fallback;
            }
            return "0x" + String.format("%08x", Integer.valueOf(result));
        }
    
        public boolean getBoolean(String key) {
            return getBoolean(key, false);
        }
    
        public boolean getBoolean(String key, boolean fallback) {
            String value = get(key);
            return !value.isEmpty() ? value.equals("1") || value.equals("t") || value.equals("true") : fallback;
        }
    
        public KeyValueSet put(String key, Object value) {
            String str;
            int[] range = indexOfKey(key);
            if (range != null) {
                this.data = StringUtils.replace(this.data, range[0], range[1], key + "=" + value);
            } else {
                StringBuilder sb = new StringBuilder();
                if (this.data.isEmpty()) {
                    str = "";
                } else {
                    str = this.data + ",";
                }
                sb.append(str);
                sb.append(key);
                sb.append("=");
                sb.append(value);
                this.data = sb.toString();
            }
            return this;
        }
    
        @Override // java.lang.Iterable
        public Iterator<String[]> iterator() {
            int index = this.data.indexOf(",");
            final int[] start = {0};
            final int[] end = new int[1];
            end[0] = index != -1 ? index : this.data.length();
            final String[] item = new String[2];
            return new Iterator<String[]>() { // from class: com.winlator.core.KeyValueSet.1
                @Override // java.util.Iterator
                public boolean hasNext() {
                    return start[0] < end[0];
                }
    
                @Override // java.util.Iterator
                public String[] next() {
                    int index2 = KeyValueSet.this.data.indexOf("=", start[0]);
                    item[0] = KeyValueSet.this.data.substring(start[0], index2);
                    item[1] = KeyValueSet.this.data.substring(index2 + 1, end[0]);
                    int[] iArr = start;
                    int[] iArr2 = end;
                    iArr[0] = iArr2[0] + 1;
                    iArr2[0] = KeyValueSet.this.data.indexOf(",", start[0]);
                    int[] iArr3 = end;
                    if (iArr3[0] == -1) {
                        iArr3[0] = KeyValueSet.this.data.length();
                    }
                    return item;
                }
            };
        }
    
        public String toString() {
            return this.data;
        }
    
        public boolean isEmpty() {
            return this.data.isEmpty();
        }
    }
  + app/src/main/java/com/winlator/core/NetworkHelper.java
    package com.winlator.core;
    
    import android.content.Context;
    import android.net.DhcpInfo;
    import android.net.wifi.WifiManager;
    import java.net.InetAddress;
    import java.net.InterfaceAddress;
    import java.net.NetworkInterface;
    import java.net.SocketException;
    import java.net.UnknownHostException;
    
    /* loaded from: classes.dex */
    public class NetworkHelper {
        private final WifiManager wifiManager;
    
        public NetworkHelper(Context context) {
            this.wifiManager = (WifiManager) context.getSystemService("wifi");
        }
    
        public int getIpAddress() {
            WifiManager wifiManager = this.wifiManager;
            if (wifiManager != null) {
                return wifiManager.getConnectionInfo().getIpAddress();
            }
            return 0;
        }
    
        public int getNetmask() {
            DhcpInfo dhcpInfo;
            WifiManager wifiManager = this.wifiManager;
            if (wifiManager == null || (dhcpInfo = wifiManager.getDhcpInfo()) == null) {
                return 0;
            }
            int netmask = Integer.bitCount(dhcpInfo.netmask);
            int i = dhcpInfo.netmask;
            if (i < 8 || i > 32) {
                try {
                    InetAddress inetAddress = InetAddress.getByName(formatIpAddress(getIpAddress()));
                    NetworkInterface networkInterface = NetworkInterface.getByInetAddress(inetAddress);
                    if (networkInterface != null) {
                        for (InterfaceAddress address : networkInterface.getInterfaceAddresses()) {
                            if (inetAddress != null && inetAddress.equals(address.getAddress())) {
                                return address.getNetworkPrefixLength();
                            }
                        }
                        return netmask;
                    }
                    return netmask;
                } catch (SocketException e) {
                    return netmask;
                } catch (UnknownHostException e2) {
                    return netmask;
                }
            }
            return netmask;
        }
    
        public int getGateway() {
            DhcpInfo dhcpInfo;
            WifiManager wifiManager = this.wifiManager;
            if (wifiManager == null || (dhcpInfo = wifiManager.getDhcpInfo()) == null) {
                return 0;
            }
            return dhcpInfo.gateway;
        }
    
        public static String formatIpAddress(int ipAddress) {
            return (ipAddress & 255) + "." + ((ipAddress >> 8) & 255) + "." + ((ipAddress >> 16) & 255) + "." + ((ipAddress >> 24) & 255);
        }
    
        public static String formatNetmask(int netmask) {
            return netmask == 24 ? "255.255.255.0" : netmask == 16 ? "255.255.0.0" : netmask == 8 ? "255.0.0.0" : "0.0.0.0";
        }
    }
  + app/src/main/java/com/winlator/core/PreloaderDialog.java
    package com.winlator.core;
    
    import android.R;
    import android.app.Activity;
    import android.app.Dialog;
    import android.view.Window;
    import android.widget.TextView;
    
    /* loaded from: classes.dex */
    public class PreloaderDialog {
        private final Activity activity;
        private Dialog dialog;
    
        public PreloaderDialog(Activity activity) {
            this.activity = activity;
        }
    
        private void create() {
            if (this.dialog != null) {
                return;
            }
            Dialog dialog = new Dialog(this.activity, R.style.Theme.Translucent.NoTitleBar.Fullscreen);
            this.dialog = dialog;
            dialog.requestWindowFeature(1);
            this.dialog.setCancelable(false);
            this.dialog.setCanceledOnTouchOutside(false);
            this.dialog.setContentView(com.winlator.R.layout.preloader_dialog);
            Window window = this.dialog.getWindow();
            if (window != null) {
                window.clearFlags(16);
                window.clearFlags(8);
            }
        }
    
        /* renamed from: show, reason: merged with bridge method [inline-methods] */
        public synchronized void lambda$showOnUiThread$0(int textResId) {
            if (isShowing()) {
                return;
            }
            close();
            if (this.dialog == null) {
                create();
            }
            ((TextView) this.dialog.findViewById(com.winlator.R.id.TextView)).setText(textResId);
            this.dialog.show();
        }
    
        public void showOnUiThread(final int textResId) {
            this.activity.runOnUiThread(new Runnable() { // from class: com.winlator.core.PreloaderDialog$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    PreloaderDialog.this.lambda$showOnUiThread$0(textResId);
                }
            });
        }
    
        public synchronized void close() {
            try {
                Dialog dialog = this.dialog;
                if (dialog != null) {
                    dialog.dismiss();
                }
            } catch (Exception e) {
            }
        }
    
        public void closeOnUiThread() {
            this.activity.runOnUiThread(new Runnable() { // from class: com.winlator.core.PreloaderDialog$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    PreloaderDialog.this.close();
                }
            });
        }
    
        public boolean isShowing() {
            Dialog dialog = this.dialog;
            return dialog != null && dialog.isShowing();
        }
    }
  + app/src/main/java/com/winlator/core/ProcessHelper.java
    package com.winlator.core;
    
    import android.os.Process;
    import java.io.BufferedReader;
    import java.io.File;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.lang.reflect.Field;
    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.Map;
    import java.util.concurrent.Executors;
    
    /* loaded from: classes.dex */
    public abstract class ProcessHelper {
        private static final ArrayList<Callback<String>> debugCallbacks = new ArrayList<>();
    
        public static void suspendProcess(int pid) {
            Process.sendSignal(pid, 19);
        }
    
        public static void resumeProcess(int pid) {
            Process.sendSignal(pid, 18);
        }
    
        public static int exec(String command, EnvVars envVars, File workingDir) {
            return exec(command, envVars, workingDir, null);
        }
    
        public static int exec(String command, EnvVars envVars, File workingDir, Callback<Integer> terminationCallback) {
            int pid = -1;
            try {
                ProcessBuilder processBuilder = new ProcessBuilder(splitCommand(command)).directory(workingDir);
                if (debugCallbacks.isEmpty()) {
                    processBuilder.redirectOutput(new File("/dev/null")).redirectErrorStream(true);
                }
                Map<String, String> environment = processBuilder.environment();
                Iterator<String> it = envVars.iterator();
                while (it.hasNext()) {
                    String name = it.next();
                    environment.put(name, envVars.get(name));
                }
                Process process = processBuilder.start();
                Field pidField = process.getClass().getDeclaredField("pid");
                pidField.setAccessible(true);
                pid = pidField.getInt(process);
                pidField.setAccessible(false);
                if (!debugCallbacks.isEmpty()) {
                    createDebugThread(process.getInputStream());
                    createDebugThread(process.getErrorStream());
                }
                if (terminationCallback != null) {
                    createWaitForThread(process, terminationCallback);
                }
            } catch (Exception e) {
            }
            return pid;
        }
    
        private static void createDebugThread(final InputStream inputStream) {
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.core.ProcessHelper$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ProcessHelper.lambda$createDebugThread$0(inputStream);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$createDebugThread$0(InputStream inputStream) {
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
                while (true) {
                    try {
                        String line = reader.readLine();
                        if (line != null) {
                            ArrayList<Callback<String>> arrayList = debugCallbacks;
                            synchronized (arrayList) {
                                if (!arrayList.isEmpty()) {
                                    Iterator<Callback<String>> it = arrayList.iterator();
                                    while (it.hasNext()) {
                                        Callback<String> callback = it.next();
                                        callback.call(line);
                                    }
                                }
                            }
                        } else {
                            reader.close();
                            return;
                        }
                    } finally {
                    }
                }
            } catch (IOException e) {
            }
        }
    
        private static void createWaitForThread(final Process process, final Callback<Integer> terminationCallback) {
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.core.ProcessHelper$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    ProcessHelper.lambda$createWaitForThread$1(process, terminationCallback);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$createWaitForThread$1(Process process, Callback terminationCallback) {
            try {
                int status = process.waitFor();
                terminationCallback.call(Integer.valueOf(status));
            } catch (InterruptedException e) {
            }
        }
    
        public static void removeAllDebugCallbacks() {
            ArrayList<Callback<String>> arrayList = debugCallbacks;
            synchronized (arrayList) {
                arrayList.clear();
            }
        }
    
        public static void addDebugCallback(Callback<String> callback) {
            ArrayList<Callback<String>> arrayList = debugCallbacks;
            synchronized (arrayList) {
                if (!arrayList.contains(callback)) {
                    arrayList.add(callback);
                }
            }
        }
    
        public static void removeDebugCallback(Callback<String> callback) {
            ArrayList<Callback<String>> arrayList = debugCallbacks;
            synchronized (arrayList) {
                arrayList.remove(callback);
            }
        }
    
        public static String[] splitCommand(String command) {
            ArrayList<String> result = new ArrayList<>();
            boolean startedQuotes = false;
            String value = "";
            int i = 0;
            int count = command.length();
            while (true) {
                if (i < count) {
                    char currChar = command.charAt(i);
                    if (startedQuotes) {
                        if (currChar == '\"') {
                            startedQuotes = false;
                            if (!value.isEmpty()) {
                                result.add(value + '\"');
                                value = "";
                            }
                        } else {
                            value = value + currChar;
                        }
                    } else if (currChar == '\"') {
                        startedQuotes = true;
                        value = value + '\"';
                    } else {
                        char nextChar = i < count + (-1) ? command.charAt(i + 1) : (char) 0;
                        if (currChar == ' ' || (currChar == '\\' && nextChar == ' ')) {
                            if (currChar == '\\') {
                                value = value + ' ';
                                i++;
                            } else if (!value.isEmpty()) {
                                result.add(value);
                                value = "";
                            }
                        } else {
                            value = value + currChar;
                            if (i == count - 1) {
                                result.add(value);
                                value = "";
                            }
                        }
                    }
                    i++;
                } else {
                    return (String[]) result.toArray(new String[0]);
                }
            }
        }
    
        public static int getAffinityMask(String cpuList) {
            if (cpuList == null || cpuList.isEmpty()) {
                return 0;
            }
            String[] values = cpuList.split(",");
            int affinityMask = 0;
            for (String value : values) {
                byte index = Byte.parseByte(value);
                affinityMask |= (int) Math.pow(2.0d, index);
            }
            return affinityMask;
        }
    
        public static int getAffinityMask(boolean[] cpuList) {
            int affinityMask = 0;
            for (int i = 0; i < cpuList.length; i++) {
                if (cpuList[i]) {
                    affinityMask |= (int) Math.pow(2.0d, i);
                }
            }
            return affinityMask;
        }
    }
  + app/src/main/java/com/winlator/core/StreamUtils.java
    package com.winlator.core;
    
    import java.io.ByteArrayOutputStream;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.OutputStream;
    
    /* loaded from: classes.dex */
    public class StreamUtils {
        public static int skip(InputStream inStream, int bytesToSkip) {
            try {
                int bytesSkipped = (int) inStream.skip(bytesToSkip);
                if (bytesSkipped > 0 && bytesSkipped != bytesToSkip) {
                    byte[] skipBuffer = new byte[1024];
                    while (bytesSkipped != bytesToSkip) {
                        int bytesRead = inStream.read(skipBuffer, 0, Math.min(skipBuffer.length, bytesToSkip - bytesSkipped));
                        if (bytesRead == -1) {
                            break;
                        }
                        bytesSkipped += bytesRead;
                    }
                }
                return bytesSkipped;
            } catch (IOException e) {
                return 0;
            }
        }
    
        public static byte[] copyToByteArray(InputStream inStream) {
            if (inStream == null) {
                return new byte[0];
            }
            ByteArrayOutputStream outStream = new ByteArrayOutputStream(65536);
            copy(inStream, outStream);
            return outStream.toByteArray();
        }
    
        public static boolean copy(InputStream inStream, OutputStream outStream) {
            try {
                byte[] buffer = new byte[65536];
                while (true) {
                    int amountRead = inStream.read(buffer);
                    if (amountRead != -1) {
                        outStream.write(buffer, 0, amountRead);
                    } else {
                        outStream.flush();
                        return true;
                    }
                }
            } catch (IOException e) {
                return false;
            }
        }
    }
  + app/src/main/java/com/winlator/core/StringUtils.java
    package com.winlator.core;
    
    import android.content.Context;
    import java.nio.charset.Charset;
    import java.util.Arrays;
    import java.util.Locale;
    
    /* loaded from: classes.dex */
    public class StringUtils {
        public static String removeStartSlash(String value) {
            while (true) {
                if (value.startsWith("/") || value.startsWith("\\")) {
                    value = value.substring(1);
                } else {
                    return value;
                }
            }
        }
    
        public static String removeEndSlash(String value) {
            while (true) {
                if (value.endsWith("/") || value.endsWith("\\")) {
                    value = value.substring(0, value.length() - 1);
                } else {
                    return value;
                }
            }
        }
    
        public static String addEndSlash(String value) {
            if (value.endsWith("/")) {
                return value;
            }
            return value + "/";
        }
    
        public static String replace(String text, int start, int end, String value) {
            return text.substring(0, start) + value + text.substring(end);
        }
    
        public static String escapeDOSPath(String path) {
            return path.replace("\\", "\\\\").replace(" ", "\\ ");
        }
    
        public static String unescapeDOSPath(String path) {
            return path.replaceAll("\\\\([^\\\\]+)", "$1").replaceAll("\\\\([^\\\\]+)", "$1").replaceAll("\\\\\\\\", "\\\\").trim();
        }
    
        public static String parseIdentifier(Object text) {
            return text.toString().toLowerCase(Locale.ENGLISH).replaceAll(" *\\(([^\\)]+)\\)$", "").replaceAll("( \\+ )+| +", "-");
        }
    
        public static String parseNumber(Object text) {
            return parseNumber(text, "");
        }
    
        public static String parseNumber(Object text, String fallback) {
            String result = text != null ? text.toString().replaceAll("[^0-9\\.]+", "") : "";
            return !result.isEmpty() ? result : fallback;
        }
    
        public static String getString(Context context, String resName) {
            try {
                int resID = context.getResources().getIdentifier(resName.toLowerCase(Locale.ENGLISH), "string", context.getPackageName());
                return context.getString(resID);
            } catch (Exception e) {
                return null;
            }
        }
    
        public static String formatBytes(long bytes) {
            return formatBytes(bytes, true);
        }
    
        public static String formatBytes(long bytes, boolean withSuffix) {
            String suffix;
            if (bytes <= 0) {
                return "0 bytes";
            }
            String[] units = {"bytes", "KB", "MB", "GB", "TB"};
            int digitGroups = (int) (Math.log10(bytes) / Math.log10(1024.0d));
            if (withSuffix) {
                suffix = " " + units[digitGroups];
            } else {
                suffix = "";
            }
            return String.format(Locale.ENGLISH, "%.2f", Double.valueOf(bytes / Math.pow(1024.0d, digitGroups))) + suffix;
        }
    
        public static String fromANSIString(byte[] bytes) {
            return fromANSIString(bytes, null);
        }
    
        public static String fromANSIString(byte[] bytes, Charset charset) {
            String value = charset != null ? new String(bytes, charset) : new String(bytes);
            int indexOfNull = value.indexOf(0);
            return indexOfNull != -1 ? value.substring(0, indexOfNull) : value;
        }
    
        public static String clearReservedChars(String name) {
            return (name == null || name.isEmpty()) ? "" : name.replaceAll("[\\\\/:*?\"<>\\|]+", "");
        }
    
        public static String repeat(char chr, int count) {
            char[] buffer = new char[count];
            Arrays.fill(buffer, chr);
            return new String(buffer);
        }
    }
  + app/src/main/java/com/winlator/core/TarCompressorUtils.java
    package com.winlator.core;
    
    import android.content.Context;
    import android.net.Uri;
    import java.io.BufferedInputStream;
    import java.io.BufferedOutputStream;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.OutputStream;
    import org.apache.commons.compress.archivers.ArchiveInputStream;
    import org.apache.commons.compress.archivers.ArchiveOutputStream;
    import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
    import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
    import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
    import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
    import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;
    import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
    import org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;
    
    /* loaded from: classes.dex */
    public abstract class TarCompressorUtils {
    
        public interface OnExtractFileListener {
            File onExtractFile(File file, long j);
        }
    
        public enum Type {
            XZ,
            ZSTD
        }
    
        private static void addFile(ArchiveOutputStream tar, File file, String entryName) {
            try {
                tar.putArchiveEntry(tar.createArchiveEntry(file, entryName));
                BufferedInputStream inStream = new BufferedInputStream(new FileInputStream(file), 65536);
                try {
                    StreamUtils.copy(inStream, tar);
                    inStream.close();
                    tar.closeArchiveEntry();
                } finally {
                }
            } catch (Exception e) {
            }
        }
    
        private static void addLinkFile(ArchiveOutputStream tar, File file, String entryName) {
            try {
                TarArchiveEntry entry = new TarArchiveEntry(entryName, (byte) 50);
                entry.setLinkName(FileUtils.readSymlink(file));
                tar.putArchiveEntry(entry);
                tar.closeArchiveEntry();
            } catch (Exception e) {
            }
        }
    
        private static void addDirectory(ArchiveOutputStream tar, File folder, String basePath) throws IOException {
            File[] files = folder.listFiles();
            if (files == null) {
                return;
            }
            for (File file : files) {
                if (FileUtils.isSymlink(file)) {
                    addLinkFile(tar, file, basePath + file.getName());
                } else if (file.isDirectory()) {
                    String entryName = basePath + file.getName() + "/";
                    tar.putArchiveEntry(tar.createArchiveEntry(folder, entryName));
                    tar.closeArchiveEntry();
                    addDirectory(tar, file, entryName);
                } else {
                    addFile(tar, file, basePath + file.getName());
                }
            }
        }
    
        public static void compress(Type type, File file, File destination, int level) {
            compress(type, new File[]{file}, destination, level);
        }
    
        public static void compress(Type type, File[] files, File destination, int level) {
            try {
                OutputStream outStream = getCompressorOutputStream(type, destination, level);
                try {
                    TarArchiveOutputStream tar = new TarArchiveOutputStream(outStream);
                    try {
                        tar.setLongFileMode(2);
                        for (File file : files) {
                            if (FileUtils.isSymlink(file)) {
                                addLinkFile(tar, file, file.getName());
                            } else if (file.isDirectory()) {
                                String basePath = file.getName() + "/";
                                tar.putArchiveEntry(tar.createArchiveEntry(file, basePath));
                                tar.closeArchiveEntry();
                                addDirectory(tar, file, basePath);
                            } else {
                                addFile(tar, file, file.getName());
                            }
                        }
                        tar.finish();
                        tar.close();
                        if (outStream != null) {
                            outStream.close();
                        }
                    } finally {
                    }
                } finally {
                }
            } catch (IOException e) {
            }
        }
    
        public static boolean extract(Type type, Context context, String assetFile, File destination) {
            return extract(type, context, assetFile, destination, (OnExtractFileListener) null);
        }
    
        public static boolean extract(Type type, Context context, String assetFile, File destination, OnExtractFileListener onExtractFileListener) {
            try {
                return extract(type, context.getAssets().open(assetFile), destination, onExtractFileListener);
            } catch (IOException e) {
                return false;
            }
        }
    
        public static boolean extract(Type type, Context context, Uri source, File destination) {
            return extract(type, context, source, destination, (OnExtractFileListener) null);
        }
    
        public static boolean extract(Type type, Context context, Uri source, File destination, OnExtractFileListener onExtractFileListener) {
            if (source == null) {
                return false;
            }
            try {
                return extract(type, context.getContentResolver().openInputStream(source), destination, onExtractFileListener);
            } catch (FileNotFoundException e) {
                return false;
            }
        }
    
        public static boolean extract(Type type, File source, File destination) {
            return extract(type, source, destination, (OnExtractFileListener) null);
        }
    
        public static boolean extract(Type type, File source, File destination, OnExtractFileListener onExtractFileListener) {
            if (source == null || !source.isFile()) {
                return false;
            }
            try {
                return extract(type, new BufferedInputStream(new FileInputStream(source), 65536), destination, onExtractFileListener);
            } catch (FileNotFoundException e) {
                return false;
            }
        }
    
        private static boolean extract(Type type, InputStream source, File destination, OnExtractFileListener onExtractFileListener) {
            if (source == null) {
                return false;
            }
            try {
                InputStream inStream = getCompressorInputStream(type, source);
                try {
                    ArchiveInputStream tar = new TarArchiveInputStream(inStream);
                    while (true) {
                        try {
                            TarArchiveEntry entry = (TarArchiveEntry) tar.getNextEntry();
                            if (entry != null) {
                                if (tar.canReadEntryData(entry)) {
                                    File file = new File(destination, entry.getName());
                                    if (onExtractFileListener == null || (file = onExtractFileListener.onExtractFile(file, entry.getSize())) != null) {
                                        if (entry.isDirectory()) {
                                            if (!file.isDirectory()) {
                                                file.mkdirs();
                                            }
                                        } else if (entry.isSymbolicLink()) {
                                            FileUtils.symlink(entry.getLinkName(), file.getAbsolutePath());
                                        } else {
                                            BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(file), 65536);
                                            try {
                                                if (!StreamUtils.copy(tar, outStream)) {
                                                    outStream.close();
                                                    tar.close();
                                                    if (inStream != null) {
                                                        inStream.close();
                                                    }
                                                    return false;
                                                }
                                                outStream.close();
                                            } finally {
                                            }
                                        }
                                        FileUtils.chmod(file, 505);
                                    }
                                }
                            } else {
                                tar.close();
                                if (inStream != null) {
                                    inStream.close();
                                }
                                return true;
                            }
                        } finally {
                        }
                    }
                } finally {
                }
            } catch (IOException e) {
                return false;
            }
        }
    
        private static InputStream getCompressorInputStream(Type type, InputStream source) throws IOException {
            if (type == Type.XZ) {
                return new XZCompressorInputStream(source);
            }
            if (type == Type.ZSTD) {
                return new ZstdCompressorInputStream(source);
            }
            return null;
        }
    
        private static OutputStream getCompressorOutputStream(Type type, File destination, int level) throws IOException {
            if (type == Type.XZ) {
                return new XZCompressorOutputStream(new BufferedOutputStream(new FileOutputStream(destination), 65536), level);
            }
            if (type == Type.ZSTD) {
                return new ZstdCompressorOutputStream(new BufferedOutputStream(new FileOutputStream(destination), 65536), level);
            }
            return null;
        }
    }
  + app/src/main/java/com/winlator/core/UnitUtils.java
    package com.winlator.core;
    
    import android.content.res.Resources;
    
    /* loaded from: classes.dex */
    public class UnitUtils {
        public static float dpToPx(float dp) {
            return Resources.getSystem().getDisplayMetrics().density * dp;
        }
    
        public static float pxToDp(float px) {
            return px / Resources.getSystem().getDisplayMetrics().density;
        }
    }
  + app/src/main/java/com/winlator/core/Win32AppWorkarounds.java
    package com.winlator.core;
    
    import com.winlator.XServerDisplayActivity;
    import com.winlator.container.Container;
    import com.winlator.winhandler.WinHandler;
    import com.winlator.xserver.ScreenInfo;
    import com.winlator.xserver.Window;
    import java.util.Locale;
    
    /* loaded from: classes.dex */
    public class Win32AppWorkarounds {
        private final XServerDisplayActivity activity;
        private final short taskAffinityMask;
        private final short taskAffinityMaskWoW64;
    
        /* JADX INFO: Access modifiers changed from: private */
        interface DXWrapperConfigWorkaround extends Workaround {
            void setValue(String str, KeyValueSet keyValueSet);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        interface DXWrapperWorkaround extends Workaround {
            String getValue();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        interface EnvVarsWorkaround extends Workaround {
            void apply(EnvVars envVars);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        interface GraphicsDriverWorkaround extends Workaround {
            String getValue();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        interface ScreenSizeWorkaround extends Workaround {
            String getValue();
        }
    
        private interface WinComponentsWorkaround extends Workaround {
            void setValue(KeyValueSet keyValueSet);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        interface WindowWorkaround extends Workaround {
            void apply(Window window);
        }
    
        private interface Workaround {
        }
    
        private static class MultiWorkaround implements Workaround {
            private final Workaround[] list;
    
            public MultiWorkaround(Workaround... list) {
                this.list = list;
            }
        }
    
        public Win32AppWorkarounds(XServerDisplayActivity activity) {
            this.activity = activity;
            Container container = activity.getContainer();
            this.taskAffinityMask = (short) ProcessHelper.getAffinityMask(container.getCPUList(true));
            this.taskAffinityMaskWoW64 = (short) ProcessHelper.getAffinityMask(container.getCPUListWoW64(true));
        }
    
        private void applyWorkaround(Workaround workaround) {
            if (workaround instanceof EnvVarsWorkaround) {
                ((EnvVarsWorkaround) workaround).apply(this.activity.getOverrideEnvVars());
                return;
            }
            if (workaround instanceof ScreenSizeWorkaround) {
                this.activity.setScreenInfo(new ScreenInfo(((ScreenSizeWorkaround) workaround).getValue()));
                return;
            }
            if (workaround instanceof DXWrapperWorkaround) {
                this.activity.setDXWrapper(((DXWrapperWorkaround) workaround).getValue());
                return;
            }
            if (workaround instanceof DXWrapperConfigWorkaround) {
                ((DXWrapperConfigWorkaround) workaround).setValue(this.activity.getDXWrapper(), this.activity.getDXWrapperConfig());
                return;
            }
            if (workaround instanceof GraphicsDriverWorkaround) {
                this.activity.setGraphicsDriver(((GraphicsDriverWorkaround) workaround).getValue());
            } else if (workaround instanceof WinComponentsWorkaround) {
                KeyValueSet wincomponents = new KeyValueSet("direct3d=1,directsound=1,directmusic=1,directshow=0,directplay=0,xaudio=1,vcrun2005=0,vcrun2010=1,wmdecoder=1");
                ((WinComponentsWorkaround) workaround).setValue(wincomponents);
                this.activity.setWinComponents(wincomponents.toString());
            }
        }
    
        public void applyStartupWorkarounds(String className) {
            Workaround workaround = getWorkaroundFor(className);
            if (workaround == null) {
                return;
            }
            if (workaround instanceof MultiWorkaround) {
                for (Workaround workaround2 : ((MultiWorkaround) workaround).list) {
                    applyWorkaround(workaround2);
                }
                return;
            }
            applyWorkaround(workaround);
        }
    
        private void setProcessAffinity(Window window, int processAffinity) {
            int processId = window.getProcessId();
            String className = window.getClassName();
            WinHandler winHandler = this.activity.getWinHandler();
            if (processId > 0) {
                winHandler.setProcessAffinity(processId, processAffinity);
            } else if (!className.isEmpty()) {
                winHandler.setProcessAffinity(window.getClassName(), processAffinity);
            }
        }
    
        public void applyWindowWorkarounds(Window window) {
            Workaround workaround = getWorkaroundFor(window.getClassName());
            boolean canApplyProcessAffinity = false;
            if (workaround instanceof WindowWorkaround) {
                ((WindowWorkaround) workaround).apply(window);
            } else if (workaround instanceof MultiWorkaround) {
                Workaround[] workaroundArr = ((MultiWorkaround) workaround).list;
                int length = workaroundArr.length;
                int i = 0;
                while (true) {
                    if (i >= length) {
                        break;
                    }
                    Workaround workaround2 = workaroundArr[i];
                    if (!(workaround2 instanceof WindowWorkaround)) {
                        i++;
                    } else {
                        ((WindowWorkaround) workaround2).apply(window);
                        break;
                    }
                }
            }
            int windowGroup = window.getWMHintsValue(Window.WMHints.WINDOW_GROUP);
            if (window.isRenderable() && !window.getClassName().isEmpty() && windowGroup == window.id) {
                canApplyProcessAffinity = true;
            }
            if (canApplyProcessAffinity) {
                int processAffinity = window.isWoW64() ? this.taskAffinityMaskWoW64 : this.taskAffinityMask;
                if (processAffinity != 0) {
                    setProcessAffinity(window, processAffinity);
                }
            }
        }
    
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        private Workaround getWorkaroundFor(String className) {
            char c;
            String lowerCase = className.toLowerCase(Locale.ENGLISH);
            switch (lowerCase.hashCode()) {
                case -1995945005:
                    if (lowerCase.equals("wolfsp.exe")) {
                        c = 0;
                        break;
                    }
                    c = 65535;
                    break;
                case -1188946356:
                    if (lowerCase.equals("kof13_win32_release.exe")) {
                        c = 15;
                        break;
                    }
                    c = 65535;
                    break;
                case -564367624:
                    if (lowerCase.equals("blacklist_game.exe")) {
                        c = 7;
                        break;
                    }
                    c = 65535;
                    break;
                case -511243686:
                    if (lowerCase.equals("mgsgroundzeroes.exe")) {
                        c = 4;
                        break;
                    }
                    c = 65535;
                    break;
                case -202568778:
                    if (lowerCase.equals("ffxiiiimg.exe")) {
                        c = '\n';
                        break;
                    }
                    c = 65535;
                    break;
                case -153577407:
                    if (lowerCase.equals("moto.exe")) {
                        c = '\r';
                        break;
                    }
                    c = 65535;
                    break;
                case 2738287:
                    if (lowerCase.equals("rage64.exe")) {
                        c = 17;
                        break;
                    }
                    c = 65535;
                    break;
                case 48975857:
                    if (lowerCase.equals("rage.exe")) {
                        c = 16;
                        break;
                    }
                    c = 65535;
                    break;
                case 117517689:
                    if (lowerCase.equals("justcause2.exe")) {
                        c = 18;
                        break;
                    }
                    c = 65535;
                    break;
                case 227352164:
                    if (lowerCase.equals("moh_spearhead.exe")) {
                        c = 3;
                        break;
                    }
                    c = 65535;
                    break;
                case 528034511:
                    if (lowerCase.equals("dxmd.exe")) {
                        c = 14;
                        break;
                    }
                    c = 65535;
                    break;
                case 554662982:
                    if (lowerCase.equals("chronocross_launcher.exe")) {
                        c = 20;
                        break;
                    }
                    c = 65535;
                    break;
                case 629144659:
                    if (lowerCase.equals("sonicgenerations.exe")) {
                        c = 5;
                        break;
                    }
                    c = 65535;
                    break;
                case 982267280:
                    if (lowerCase.equals("fate.exe")) {
                        c = '\b';
                        break;
                    }
                    c = 65535;
                    break;
                case 1088440792:
                    if (lowerCase.equals("ffxii_tza.exe")) {
                        c = '\t';
                        break;
                    }
                    c = 65535;
                    break;
                case 1365728547:
                    if (lowerCase.equals("moh_breakthrough.exe")) {
                        c = 2;
                        break;
                    }
                    c = 65535;
                    break;
                case 1413560778:
                    if (lowerCase.equals("mohaa.exe")) {
                        c = 1;
                        break;
                    }
                    c = 65535;
                    break;
                case 1553760446:
                    if (lowerCase.equals("bioshock.exe")) {
                        c = 19;
                        break;
                    }
                    c = 65535;
                    break;
                case 1588518911:
                    if (lowerCase.equals("valkyria.exe")) {
                        c = 6;
                        break;
                    }
                    c = 65535;
                    break;
                case 1912726662:
                    if (lowerCase.equals("ffxiii2img.exe")) {
                        c = 11;
                        break;
                    }
                    c = 65535;
                    break;
                case 1970593221:
                    if (lowerCase.equals("farcry4.exe")) {
                        c = '\f';
                        break;
                    }
                    c = 65535;
                    break;
                default:
                    c = 65535;
                    break;
            }
            switch (c) {
                case 0:
                case 1:
                case 2:
                case 3:
                    return new MultiWorkaround(new EnvVarsWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda11
                        @Override // com.winlator.core.Win32AppWorkarounds.EnvVarsWorkaround
                        public final void apply(EnvVars envVars) {
                            envVars.put("MESA_EXTENSION_MAX_YEAR", "2002");
                        }
                    }, new GraphicsDriverWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda12
                        @Override // com.winlator.core.Win32AppWorkarounds.GraphicsDriverWorkaround
                        public final String getValue() {
                            String lambda$getWorkaroundFor$1;
                            lambda$getWorkaroundFor$1 = Win32AppWorkarounds.lambda$getWorkaroundFor$1();
                            return lambda$getWorkaroundFor$1;
                        }
                    }, new DXWrapperWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda1
                        @Override // com.winlator.core.Win32AppWorkarounds.DXWrapperWorkaround
                        public final String getValue() {
                            String lambda$getWorkaroundFor$2;
                            lambda$getWorkaroundFor$2 = Win32AppWorkarounds.lambda$getWorkaroundFor$2();
                            return lambda$getWorkaroundFor$2;
                        }
                    });
                case 4:
                    return new EnvVarsWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda10
                        @Override // com.winlator.core.Win32AppWorkarounds.EnvVarsWorkaround
                        public final void apply(EnvVars envVars) {
                            envVars.put("WINEFORCENTCONTINUE", "1");
                        }
                    };
                case 5:
                case 6:
                    return new EnvVarsWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda6
                        @Override // com.winlator.core.Win32AppWorkarounds.EnvVarsWorkaround
                        public final void apply(EnvVars envVars) {
                            envVars.put("WINEESYNC", "0");
                        }
                    };
                case 7:
                    return new EnvVarsWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda2
                        @Override // com.winlator.core.Win32AppWorkarounds.EnvVarsWorkaround
                        public final void apply(EnvVars envVars) {
                            Win32AppWorkarounds.this.lambda$getWorkaroundFor$5(envVars);
                        }
                    };
                case '\b':
                    return new ScreenSizeWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda14
                        @Override // com.winlator.core.Win32AppWorkarounds.ScreenSizeWorkaround
                        public final String getValue() {
                            String lambda$getWorkaroundFor$6;
                            lambda$getWorkaroundFor$6 = Win32AppWorkarounds.lambda$getWorkaroundFor$6();
                            return lambda$getWorkaroundFor$6;
                        }
                    };
                case '\t':
                    final ScreenInfo screenInfo = this.activity.getScreenInfo();
                    return new ScreenSizeWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda13
                        @Override // com.winlator.core.Win32AppWorkarounds.ScreenSizeWorkaround
                        public final String getValue() {
                            String lambda$getWorkaroundFor$7;
                            lambda$getWorkaroundFor$7 = Win32AppWorkarounds.lambda$getWorkaroundFor$7(ScreenInfo.this);
                            return lambda$getWorkaroundFor$7;
                        }
                    };
                case '\n':
                case 11:
                    return new EnvVarsWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda9
                        @Override // com.winlator.core.Win32AppWorkarounds.EnvVarsWorkaround
                        public final void apply(EnvVars envVars) {
                            envVars.put("EXTRA_EXEC_ARGS", "-FullScreenMode=Force -Shadow=512 -Msaa=2");
                        }
                    };
                case '\f':
                    return new EnvVarsWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda5
                        @Override // com.winlator.core.Win32AppWorkarounds.EnvVarsWorkaround
                        public final void apply(EnvVars envVars) {
                            envVars.put("WINVERSION", "winxp");
                        }
                    };
                case '\r':
                    return new EnvVarsWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda4
                        @Override // com.winlator.core.Win32AppWorkarounds.EnvVarsWorkaround
                        public final void apply(EnvVars envVars) {
                            envVars.put("BOX64_IGNOREINT3", "1");
                        }
                    };
                case 14:
                    return new EnvVarsWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda7
                        @Override // com.winlator.core.Win32AppWorkarounds.EnvVarsWorkaround
                        public final void apply(EnvVars envVars) {
                            envVars.put("WINEVMEMMAXSIZE", "16384");
                        }
                    };
                case 15:
                    return new EnvVarsWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda3
                        @Override // com.winlator.core.Win32AppWorkarounds.EnvVarsWorkaround
                        public final void apply(EnvVars envVars) {
                            envVars.put("WINEDLLOVERRIDES", "quartz=d");
                        }
                    };
                case 16:
                case 17:
                    return new EnvVarsWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda8
                        @Override // com.winlator.core.Win32AppWorkarounds.EnvVarsWorkaround
                        public final void apply(EnvVars envVars) {
                            envVars.put("ZINK_CONTEXT_THREADED", "0");
                        }
                    };
                case 18:
                case 19:
                    return new DXWrapperConfigWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda0
                        @Override // com.winlator.core.Win32AppWorkarounds.DXWrapperConfigWorkaround
                        public final void setValue(String str, KeyValueSet keyValueSet) {
                            Win32AppWorkarounds.lambda$getWorkaroundFor$14(str, keyValueSet);
                        }
                    };
                case 20:
                    return new WindowWorkaround() { // from class: com.winlator.core.Win32AppWorkarounds$$ExternalSyntheticLambda15
                        @Override // com.winlator.core.Win32AppWorkarounds.WindowWorkaround
                        public final void apply(Window window) {
                            Win32AppWorkarounds.lambda$getWorkaroundFor$15(window);
                        }
                    };
                default:
                    return null;
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ String lambda$getWorkaroundFor$1() {
            return "virgl";
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ String lambda$getWorkaroundFor$2() {
            return "wined3d";
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$getWorkaroundFor$5(EnvVars envVars) {
            envVars.put("WINEOVERRIDEAFFINITYMASK", Short.valueOf(this.taskAffinityMaskWoW64));
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ String lambda$getWorkaroundFor$6() {
            return "1024x768";
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ String lambda$getWorkaroundFor$7(ScreenInfo screenInfo) {
            return (screenInfo.width + 4) + "x" + (screenInfo.height + 4);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$getWorkaroundFor$14(String dxwrapper, KeyValueSet config) {
            if (dxwrapper.equals("dxvk")) {
                config.put("version", "1.10.3");
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$getWorkaroundFor$15(Window window) {
            window.attributes.setTransparent(true);
        }
    }
  + app/src/main/java/com/winlator/core/WineInfo.java
    package com.winlator.core;
    
    import android.content.Context;
    import android.os.Parcel;
    import android.os.Parcelable;
    import com.winlator.xenvironment.RootFS;
    import java.io.File;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    
    /* loaded from: classes.dex */
    public class WineInfo implements Parcelable {
        public final String path;
        public final String subversion;
        public final String version;
        public static final WineInfo MAIN_WINE_INFO = new WineInfo("9.2");
        private static final Pattern pattern = Pattern.compile("^wine\\-([0-9\\.]+)\\-?([0-9\\.]+)?\\-?(x86|x86_64)?$");
        public static final Parcelable.Creator<WineInfo> CREATOR = new Parcelable.Creator<WineInfo>() { // from class: com.winlator.core.WineInfo.1
            /* JADX WARN: Can't rename method to resolve collision */
            @Override // android.os.Parcelable.Creator
            public WineInfo createFromParcel(Parcel in) {
                return new WineInfo(in);
            }
    
            /* JADX WARN: Can't rename method to resolve collision */
            @Override // android.os.Parcelable.Creator
            public WineInfo[] newArray(int size) {
                return new WineInfo[size];
            }
        };
    
        public WineInfo(String version) {
            this.version = version;
            this.subversion = null;
            this.path = null;
        }
    
        public WineInfo(String version, String subversion, String path) {
            this.version = version;
            this.subversion = (subversion == null || subversion.isEmpty()) ? null : subversion;
            this.path = path;
        }
    
        private WineInfo(Parcel in) {
            this.version = in.readString();
            this.subversion = in.readString();
            this.path = in.readString();
        }
    
        public String identifier() {
            StringBuilder sb = new StringBuilder();
            sb.append("wine-");
            sb.append(fullVersion());
            sb.append("-");
            sb.append(this == MAIN_WINE_INFO ? "custom" : "");
            return sb.toString();
        }
    
        public String fullVersion() {
            String str;
            StringBuilder sb = new StringBuilder();
            sb.append(this.version);
            if (this.subversion != null) {
                str = "-" + this.subversion;
            } else {
                str = "";
            }
            sb.append(str);
            return sb.toString();
        }
    
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append("Wine ");
            sb.append(fullVersion());
            sb.append(this == MAIN_WINE_INFO ? " (Custom)" : "");
            return sb.toString();
        }
    
        @Override // android.os.Parcelable
        public int describeContents() {
            return 0;
        }
    
        @Override // android.os.Parcelable
        public void writeToParcel(Parcel dest, int flags) {
            dest.writeString(this.version);
            dest.writeString(this.subversion);
            dest.writeString(this.path);
        }
    
        public static WineInfo fromIdentifier(Context context, String identifier) {
            WineInfo wineInfo = MAIN_WINE_INFO;
            if (identifier.equals(wineInfo.identifier())) {
                return wineInfo;
            }
            Matcher matcher = pattern.matcher(identifier);
            if (matcher.find()) {
                File installedWineDir = RootFS.find(context).getInstalledWineDir();
                String path = new File(installedWineDir, identifier).getPath();
                return new WineInfo(matcher.group(1), matcher.group(2), path);
            }
            return wineInfo;
        }
    
        public static boolean isMainWineVersion(String wineVersion) {
            return wineVersion == null || wineVersion.equals(MAIN_WINE_INFO.identifier());
        }
    }
  + app/src/main/java/com/winlator/core/WineRegistryEditor.java
    package com.winlator.core;
    
    import com.winlator.core.WineRegistryEditor;
    import com.winlator.math.Mathf;
    import java.io.BufferedReader;
    import java.io.BufferedWriter;
    import java.io.Closeable;
    import java.io.File;
    import java.io.FileReader;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.Comparator;
    import java.util.Iterator;
    import java.util.Locale;
    import java.util.function.ToIntFunction;
    
    /* loaded from: classes.dex */
    public class WineRegistryEditor implements Closeable {
        private final File cloneFile;
        private final File file;
        private boolean modified = false;
        private boolean createKeyIfNotExist = true;
    
        private native int[] getKeyLocation(String str, String str2);
    
        private native int[] getValueLocation(String str, int[] iArr, String str2);
    
        static {
            System.loadLibrary("winlator");
        }
    
        public static class Location {
            public final int end;
            public int mbCount;
            public final int offset;
            public final int start;
            private Object tag;
    
            public Location(int offset, int start, int end) {
                this.offset = offset;
                this.start = start;
                this.end = end;
            }
    
            public int length() {
                return this.end - this.start;
            }
    
            public String toString() {
                return this.offset + "," + this.start + "," + this.end;
            }
    
            public int[] toIntArray() {
                return new int[]{this.offset, this.start, this.end, this.mbCount};
            }
    
            public boolean equals(Object obj) {
                if (!(obj instanceof Location)) {
                    return false;
                }
                Location other = (Location) obj;
                return this.offset == other.offset && this.start == other.start && this.end == other.end;
            }
        }
    
        public WineRegistryEditor(File file) {
            this.file = file;
            File createTempFile = FileUtils.createTempFile(file.getParentFile(), FileUtils.getBasename(file.getPath()));
            this.cloneFile = createTempFile;
            if (!file.isFile()) {
                try {
                    createTempFile.createNewFile();
                } catch (IOException e) {
                }
            } else {
                FileUtils.copy(file, createTempFile);
            }
        }
    
        private static String escape(String str) {
            return str.replace("\\", "\\\\").replace("\"", "\\\"");
        }
    
        private static String unescape(String str) {
            return str.replace("\\\"", "\"").replace("\\\\", "\\");
        }
    
        @Override // java.io.Closeable, java.lang.AutoCloseable
        public void close() {
            if (this.modified && this.cloneFile.exists()) {
                this.cloneFile.renameTo(this.file);
            } else {
                this.cloneFile.delete();
            }
        }
    
        public void setCreateKeyIfNotExist(boolean createKeyIfNotExist) {
            this.createKeyIfNotExist = createKeyIfNotExist;
        }
    
        private Location createKey(String key) {
            Location location = getParentKeyLocation(key);
            boolean success = false;
            char[] buffer = new char[65536];
            File tempFile = FileUtils.createTempFile(this.file.getParentFile(), FileUtils.getBasename(this.file.getPath()));
            try {
                BufferedReader reader = new BufferedReader(new FileReader(this.cloneFile), 65536);
                try {
                    BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile), 65536);
                    try {
                        if (location == null) {
                            while (true) {
                                int length = reader.read(buffer);
                                if (length == -1) {
                                    break;
                                }
                                writer.write(buffer, 0, length);
                            }
                        } else {
                            int i = 0;
                            int end = location.end + 1;
                            while (i < end) {
                                int length2 = Math.min(buffer.length, end - i);
                                reader.read(buffer, 0, length2);
                                writer.write(buffer, 0, length2);
                                i += length2;
                            }
                        }
                        long currentTime = System.currentTimeMillis() + 116444736000000000L;
                        String content = "\n[" + escape(key) + "] " + ((currentTime - 116444736000000000L) / 1000) + String.format(Locale.ENGLISH, "\n#time=%x%08x", Long.valueOf(currentTime >> 32), Integer.valueOf((int) currentTime)) + "\n";
                        writer.write(content);
                        while (true) {
                            int length3 = reader.read(buffer);
                            if (length3 == -1) {
                                break;
                            }
                            writer.write(buffer, 0, length3);
                        }
                        success = true;
                        writer.close();
                        reader.close();
                    } finally {
                    }
                } finally {
                }
            } catch (IOException e) {
            }
            if (success) {
                this.modified = true;
                tempFile.renameTo(this.cloneFile);
                return getKeyLocation(key);
            }
            tempFile.delete();
            return null;
        }
    
        public String getStringValue(String key, String name, String fallback) {
            String value = getRawValue(key, name);
            return value != null ? value.substring(1, value.length() - 1) : fallback;
        }
    
        public void setStringValue(String key, String name, String value) {
            String str;
            if (value != null) {
                str = "\"" + escape(value) + "\"";
            } else {
                str = "\"\"";
            }
            setRawValue(key, name, str);
        }
    
        public void setStringValues(String key, String[]... items) {
            String[][] escapedItems = new String[items.length][];
            for (int i = 0; i < items.length; i++) {
                String[] strArr = new String[2];
                strArr[0] = items[i][0];
                strArr[1] = items[i][1] != null ? "\"" + escape(items[i][1]) + "\"" : "\"\"";
                escapedItems[i] = strArr;
            }
            setRawValues(key, escapedItems);
        }
    
        public Integer getDwordValue(String key, String name, Integer fallback) {
            String value = getRawValue(key, name);
            if (value == null) {
                return fallback;
            }
            return Integer.decode("0x" + value.substring(6));
        }
    
        public void setDwordValue(String key, String name, int value) {
            setRawValue(key, name, "dword:" + String.format("%08x", Integer.valueOf(value)));
        }
    
        public void setHexValue(String key, String name, String value) {
            int start = ((int) Mathf.roundTo(name.length(), 2.0f)) + 7;
            StringBuilder lines = new StringBuilder();
            int j = start;
            for (int i = 0; i < value.length(); i++) {
                if (i > 0 && i % 2 == 0) {
                    lines.append(",");
                }
                int j2 = j + 1;
                if (j <= 56) {
                    j = j2;
                } else {
                    lines.append("\\\n  ");
                    j = 8;
                }
                lines.append(value.charAt(i));
            }
            setRawValue(key, name, "hex:" + ((Object) lines));
        }
    
        public void setHexValues(String key, String name, byte[] bytes) {
            StringBuilder data = new StringBuilder();
            for (byte b : bytes) {
                data.append(String.format(Locale.ENGLISH, "%02x", Integer.valueOf(Byte.toUnsignedInt(b))));
            }
            setHexValue(key, name, data.toString());
        }
    
        public byte[] getHexValues(String key, String name) {
            String value = getRawValue(key, name);
            if (value != null && value.startsWith("hex:")) {
                String[] items = value.replace("hex:", "").replace("\\\n  ", "").split(",");
                byte[] bytes = new byte[items.length];
                for (int i = 0; i < items.length; i++) {
                    try {
                        bytes[i] = Integer.decode("0x" + items[i]).byteValue();
                    } catch (NumberFormatException e) {
                    }
                }
                return bytes;
            }
            return null;
        }
    
        private String getRawValue(String key, String name) {
            Location valueLocation;
            Location keyLocation = getKeyLocation(key);
            if (keyLocation == null || (valueLocation = getValueLocation(keyLocation, name)) == null) {
                return null;
            }
            boolean success = false;
            char[] buffer = new char[valueLocation.length()];
            try {
                BufferedReader reader = new BufferedReader(new FileReader(this.cloneFile), 65536);
                try {
                    reader.skip(valueLocation.start);
                    success = reader.read(buffer) == buffer.length;
                    reader.close();
                } finally {
                }
            } catch (IOException e) {
            }
            if (success) {
                return unescape(new String(buffer));
            }
            return null;
        }
    
        private void setRawValue(String key, String name, String value) {
            BufferedReader reader;
            String str;
            Location keyLocation = getKeyLocation(key);
            if (keyLocation == null) {
                if (this.createKeyIfNotExist) {
                    keyLocation = createKey(key);
                } else {
                    return;
                }
            }
            Location valueLocation = getValueLocation(keyLocation, name);
            char[] buffer = new char[65536];
            boolean success = false;
            File tempFile = FileUtils.createTempFile(this.file.getParentFile(), FileUtils.getBasename(this.file.getPath()));
            try {
                reader = new BufferedReader(new FileReader(this.cloneFile), 65536);
            } catch (IOException e) {
            }
            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile), 65536);
                int i = 0;
                try {
                    int end = valueLocation != null ? valueLocation.start : keyLocation.end;
                    while (i < end) {
                        int length = Math.min(buffer.length, end - i);
                        reader.read(buffer, 0, length);
                        writer.write(buffer, 0, length);
                        i += length;
                    }
                    if (valueLocation == null) {
                        StringBuilder sb = new StringBuilder();
                        sb.append("\n");
                        if (name != null) {
                            str = "\"" + escape(name) + "\"";
                        } else {
                            str = "@";
                        }
                        sb.append(str);
                        sb.append("=");
                        sb.append(value);
                        writer.write(sb.toString());
                    } else {
                        writer.write(value);
                        reader.skip(valueLocation.length());
                    }
                    while (true) {
                        int length2 = reader.read(buffer);
                        if (length2 == -1) {
                            break;
                        } else {
                            writer.write(buffer, 0, length2);
                        }
                    }
                    success = true;
                    writer.close();
                    reader.close();
                    if (success) {
                        this.modified = true;
                        tempFile.renameTo(this.cloneFile);
                    } else {
                        tempFile.delete();
                    }
                } finally {
                }
            } finally {
            }
        }
    
        private void setRawValues(String key, String[]... items) {
            int i;
            String str;
            Location keyLocation = getKeyLocation(key);
            if (keyLocation == null) {
                if (this.createKeyIfNotExist) {
                    keyLocation = createKey(key);
                } else {
                    return;
                }
            }
            ArrayList<Location> valueLocations = new ArrayList<>();
            int i2 = 0;
            while (true) {
                i = -1;
                if (i2 >= items.length) {
                    break;
                }
                Location valueLocation = getValueLocation(keyLocation, items[i2][0]);
                if (valueLocation == null) {
                    valueLocation = new Location(0, (Integer.MAX_VALUE - items.length) + i2, -1);
                }
                valueLocation.tag = items[i2];
                valueLocations.add(valueLocation);
                i2++;
            }
            valueLocations.sort(Comparator.comparingInt(new ToIntFunction() { // from class: com.winlator.core.WineRegistryEditor$$ExternalSyntheticLambda0
                @Override // java.util.function.ToIntFunction
                public final int applyAsInt(Object obj) {
                    int i3;
                    i3 = ((WineRegistryEditor.Location) obj).start;
                    return i3;
                }
            }));
            char[] buffer = new char[65536];
            boolean success = false;
            File tempFile = FileUtils.createTempFile(this.file.getParentFile(), FileUtils.getBasename(this.file.getPath()));
            try {
                BufferedReader reader = new BufferedReader(new FileReader(this.cloneFile), 65536);
                try {
                    BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile), 65536);
                    int position = 0;
                    try {
                        Iterator<Location> it = valueLocations.iterator();
                        while (it.hasNext()) {
                            Location valueLocation2 = it.next();
                            if (valueLocation2.end != i) {
                                int i3 = position;
                                while (true) {
                                    int i4 = valueLocation2.start;
                                    if (i3 >= i4) {
                                        break;
                                    }
                                    int length = Math.min(buffer.length, i4 - i3);
                                    reader.read(buffer, 0, length);
                                    writer.write(buffer, 0, length);
                                    position += length;
                                    i3 += length;
                                }
                                writer.write(((String[]) valueLocation2.tag)[1]);
                                reader.skip(valueLocation2.length());
                                position += valueLocation2.length();
                                i = -1;
                            }
                        }
                        int i5 = position;
                        while (true) {
                            int i6 = keyLocation.end;
                            if (i5 >= i6) {
                                break;
                            }
                            int length2 = Math.min(buffer.length, i6 - i5);
                            reader.read(buffer, 0, length2);
                            writer.write(buffer, 0, length2);
                            i5 += length2;
                        }
                        Iterator<Location> it2 = valueLocations.iterator();
                        while (it2.hasNext()) {
                            Location valueLocation3 = it2.next();
                            if (valueLocation3.end == -1) {
                                String[] item = (String[]) valueLocation3.tag;
                                StringBuilder sb = new StringBuilder();
                                sb.append("\n");
                                if (item[0] != null) {
                                    str = "\"" + escape(item[0]) + "\"";
                                } else {
                                    str = "@";
                                }
                                sb.append(str);
                                sb.append("=");
                                sb.append(item[1]);
                                writer.write(sb.toString());
                            }
                        }
                        while (true) {
                            int length3 = reader.read(buffer);
                            if (length3 == -1) {
                                break;
                            } else {
                                writer.write(buffer, 0, length3);
                            }
                        }
                        success = true;
                        writer.close();
                        reader.close();
                    } finally {
                    }
                } finally {
                }
            } catch (IOException e) {
            }
            if (success) {
                this.modified = true;
                tempFile.renameTo(this.cloneFile);
            } else {
                tempFile.delete();
            }
        }
    
        public void removeValue(String key, String name) {
            Location valueLocation;
            Location keyLocation = getKeyLocation(key);
            if (keyLocation == null || (valueLocation = getValueLocation(keyLocation, name)) == null) {
                return;
            }
            removeRegion(valueLocation);
        }
    
        public boolean removeKey(String key) {
            return removeKey(key, false);
        }
    
        public boolean removeKey(String key, boolean removeTree) {
            boolean removed = false;
            if (!removeTree) {
                Location location = getKeyLocation(key, false);
                return location != null && removeRegion(location);
            }
            while (true) {
                Location location2 = getKeyLocation(key, true);
                if (location2 != null) {
                    if (removeRegion(location2)) {
                        removed = true;
                    }
                } else {
                    return removed;
                }
            }
        }
    
        private boolean removeRegion(Location location) {
            int i;
            char[] buffer = new char[65536];
            boolean success = false;
            File tempFile = FileUtils.createTempFile(this.file.getParentFile(), FileUtils.getBasename(this.file.getPath()));
            try {
                BufferedReader reader = new BufferedReader(new FileReader(this.cloneFile), 65536);
                try {
                    BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile), 65536);
                    int length = 0;
                    int i2 = 0;
                    while (true) {
                        try {
                            i = location.offset;
                            if (i2 >= i) {
                                break;
                            }
                            length = Math.min(buffer.length, i - i2);
                            reader.read(buffer, 0, length);
                            writer.write(buffer, 0, length);
                            i2 += length;
                        } finally {
                        }
                    }
                    boolean skipLine = length > 1 && buffer[length + (-1)] == '\n';
                    reader.skip((location.end - i) + (skipLine ? 1 : 0));
                    while (true) {
                        int length2 = reader.read(buffer);
                        if (length2 == -1) {
                            break;
                        }
                        writer.write(buffer, 0, length2);
                    }
                    success = true;
                    writer.close();
                    reader.close();
                } finally {
                }
            } catch (IOException e) {
            }
            if (success) {
                this.modified = true;
                tempFile.renameTo(this.cloneFile);
            } else {
                tempFile.delete();
            }
            return success;
        }
    
        private Location getParentKeyLocation(String key) {
            String[] parts = key.split("\\\\");
            ArrayList<String> stack = new ArrayList<>(Arrays.asList(parts).subList(0, parts.length - 1));
            while (!stack.isEmpty()) {
                String currentKey = String.join("\\", stack);
                Location location = getKeyLocation(currentKey, true);
                if (location != null) {
                    return location;
                }
                stack.remove(stack.size() - 1);
            }
            return null;
        }
    
        private Location getKeyLocation(String key) {
            return getKeyLocation(key, false);
        }
    
        private Location getKeyLocation(String key, boolean keyAsPrefix) {
            if (!this.cloneFile.isFile()) {
                return null;
            }
            StringBuilder sb = new StringBuilder();
            sb.append("[");
            sb.append(escape(key));
            sb.append(!keyAsPrefix ? "]" : "");
            String key2 = sb.toString();
            int[] result = getKeyLocation(this.cloneFile.getPath(), key2);
            Location location = new Location(result[0], result[1], result[2]);
            location.mbCount = result[3];
            if (location.start != -1) {
                return location;
            }
            return null;
        }
    
        private Location getValueLocation(Location keyLocation, String name) {
            String name2;
            if (!this.cloneFile.isFile() || keyLocation.start == keyLocation.end) {
                return null;
            }
            if (name != null) {
                name2 = "\"" + escape(name) + "\"=";
            } else {
                name2 = "@=";
            }
            int[] result = getValueLocation(this.cloneFile.getPath(), keyLocation.toIntArray(), name2);
            Location location = new Location(result[0], result[1], result[2]);
            if (location.start != -1) {
                return location;
            }
            return null;
        }
    }
  + app/src/main/java/com/winlator/core/WineStartMenuCreator.java
    package com.winlator.core;
    
    import android.content.Context;
    import com.winlator.container.Container;
    import com.winlator.win32.MSLink;
    import java.io.File;
    import org.json.JSONArray;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public abstract class WineStartMenuCreator {
        private static int parseShowCommand(String value) {
            if (value.equals("SW_SHOWMAXIMIZED")) {
                return 3;
            }
            if (value.equals("SW_SHOWMINNOACTIVE")) {
                return 7;
            }
            return 1;
        }
    
        private static void createMenuEntry(JSONObject item, File currentDir) throws JSONException {
            if (item.has("children")) {
                File currentDir2 = new File(currentDir, item.getString("name"));
                currentDir2.mkdirs();
                JSONArray children = item.getJSONArray("children");
                for (int i = 0; i < children.length(); i++) {
                    createMenuEntry(children.getJSONObject(i), currentDir2);
                }
                return;
            }
            File outputFile = new File(currentDir, item.getString("name") + ".lnk");
            MSLink.LinkInfo linkInfo = new MSLink.LinkInfo();
            linkInfo.targetPath = item.getString("path");
            linkInfo.arguments = item.optString("cmdArgs");
            linkInfo.iconLocation = item.optString("iconLocation", linkInfo.targetPath);
            linkInfo.iconIndex = item.optInt("iconIndex", 0);
            if (item.has("showCommand")) {
                linkInfo.showCommand = parseShowCommand(item.getString("showCommand"));
            }
            MSLink.createFile(linkInfo, outputFile);
        }
    
        private static void removeMenuEntry(JSONObject item, File currentDir) throws JSONException {
            if (item.has("children")) {
                File currentDir2 = new File(currentDir, item.getString("name"));
                JSONArray children = item.getJSONArray("children");
                for (int i = 0; i < children.length(); i++) {
                    removeMenuEntry(children.getJSONObject(i), currentDir2);
                }
                if (FileUtils.isEmpty(currentDir2)) {
                    currentDir2.delete();
                    return;
                }
                return;
            }
            new File(currentDir, item.getString("name") + ".lnk").delete();
        }
    
        private static void removeOldMenu(File containerStartMenuFile, File startMenuDir) throws JSONException {
            if (containerStartMenuFile.isFile()) {
                JSONArray data = new JSONArray(FileUtils.readString(containerStartMenuFile));
                for (int i = 0; i < data.length(); i++) {
                    removeMenuEntry(data.getJSONObject(i), startMenuDir);
                }
            }
        }
    
        public static void create(Context context, Container container) {
            try {
                File startMenuDir = container.getStartMenuDir();
                File containerStartMenuFile = new File(container.getRootDir(), ".startmenu");
                removeOldMenu(containerStartMenuFile, startMenuDir);
                JSONArray data = new JSONArray(FileUtils.readString(context, "wine_startmenu.json"));
                FileUtils.writeString(containerStartMenuFile, data.toString());
                for (int i = 0; i < data.length(); i++) {
                    createMenuEntry(data.getJSONObject(i), startMenuDir);
                }
            } catch (JSONException e) {
            }
        }
    }
  + app/src/main/java/com/winlator/core/WineThemeManager.java
    package com.winlator.core;
    
    import android.content.Context;
    import android.graphics.Bitmap;
    import android.graphics.BitmapFactory;
    import android.graphics.Canvas;
    import android.graphics.Color;
    import android.graphics.Paint;
    import android.graphics.Rect;
    import android.graphics.RectF;
    import com.winlator.R;
    import com.winlator.win32.MSBitmap;
    import com.winlator.xenvironment.RootFS;
    import com.winlator.xserver.ScreenInfo;
    import java.io.File;
    
    /* loaded from: classes.dex */
    public abstract class WineThemeManager {
        public static final String DEFAULT_DESKTOP_THEME = Theme.LIGHT + "," + BackgroundType.IMAGE + ",#0277bd";
    
        public enum BackgroundType {
            IMAGE,
            COLOR
        }
    
        public enum Theme {
            LIGHT,
            DARK
        }
    
        public static class ThemeInfo {
            public final int backgroundColor;
            public final BackgroundType backgroundType;
            public final Theme theme;
    
            public ThemeInfo(String value) {
                String[] values = value.split(",");
                this.theme = Theme.valueOf(values[0]);
                if (values.length < 3) {
                    this.backgroundColor = Color.parseColor(values[1]);
                    this.backgroundType = BackgroundType.IMAGE;
                } else {
                    this.backgroundType = BackgroundType.valueOf(values[1]);
                    this.backgroundColor = Color.parseColor(values[2]);
                }
            }
        }
    
        public static void apply(Context context, ThemeInfo themeInfo, ScreenInfo screenInfo) {
            Throwable th;
            File rootDir = RootFS.find(context).getRootDir();
            File userRegFile = new File(rootDir, "/home/xuser/.wine/user.reg");
            String background = Color.red(themeInfo.backgroundColor) + " " + Color.green(themeInfo.backgroundColor) + " " + Color.blue(themeInfo.backgroundColor);
            BackgroundType backgroundType = themeInfo.backgroundType;
            BackgroundType backgroundType2 = BackgroundType.IMAGE;
            if (backgroundType == backgroundType2) {
                createWallpaperBMPFile(context, screenInfo);
            }
            WineRegistryEditor registryEditor = new WineRegistryEditor(userRegFile);
            try {
                if (themeInfo.backgroundType == backgroundType2) {
                    try {
                        registryEditor.setStringValue("Control Panel\\Desktop", "Wallpaper", RootFS.getDosUserCachePath() + "\\wallpaper.bmp");
                    } catch (Throwable th2) {
                        th = th2;
                        try {
                            registryEditor.close();
                            throw th;
                        } catch (Throwable th3) {
                            th.addSuppressed(th3);
                            throw th;
                        }
                    }
                } else {
                    registryEditor.removeValue("Control Panel\\Desktop", "Wallpaper");
                }
                Theme theme = themeInfo.theme;
                try {
                    if (theme == Theme.LIGHT) {
                        registryEditor.setStringValue("Control Panel\\Colors", "ActiveBorder", "245 245 245");
                        registryEditor.setStringValue("Control Panel\\Colors", "ActiveTitle", "96 125 139");
                        registryEditor.setStringValue("Control Panel\\Colors", "Background", background);
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonAlternateFace", "245 245 245");
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonDkShadow", "158 158 158");
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonFace", "245 245 245");
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonHilight", "224 224 224");
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonLight", "255 255 255");
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonShadow", "158 158 158");
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonText", "0 0 0");
                        registryEditor.setStringValue("Control Panel\\Colors", "GradientActiveTitle", "96 125 139");
                        registryEditor.setStringValue("Control Panel\\Colors", "GradientInactiveTitle", "117 117 117");
                        registryEditor.setStringValue("Control Panel\\Colors", "GrayText", "158 158 158");
                        registryEditor.setStringValue("Control Panel\\Colors", "Hilight", "2 136 209");
                        registryEditor.setStringValue("Control Panel\\Colors", "HilightText", "255 255 255");
                        registryEditor.setStringValue("Control Panel\\Colors", "HotTrackingColor", "2 136 209");
                        registryEditor.setStringValue("Control Panel\\Colors", "InactiveBorder", "255 255 255");
                        registryEditor.setStringValue("Control Panel\\Colors", "InactiveTitle", "117 117 117");
                        registryEditor.setStringValue("Control Panel\\Colors", "InactiveTitleText", "200 200 200");
                        registryEditor.setStringValue("Control Panel\\Colors", "InfoText", "0 0 0");
                        registryEditor.setStringValue("Control Panel\\Colors", "InfoWindow", "255 255 255");
                        registryEditor.setStringValue("Control Panel\\Colors", "Menu", "245 245 245");
                        registryEditor.setStringValue("Control Panel\\Colors", "MenuBar", "245 245 245");
                        registryEditor.setStringValue("Control Panel\\Colors", "MenuHilight", "2 136 209");
                        registryEditor.setStringValue("Control Panel\\Colors", "MenuText", "0 0 0");
                        registryEditor.setStringValue("Control Panel\\Colors", "Scrollbar", "245 245 245");
                        registryEditor.setStringValue("Control Panel\\Colors", "TitleText", "255 255 255");
                        registryEditor.setStringValue("Control Panel\\Colors", "Window", "245 245 245");
                        registryEditor.setStringValue("Control Panel\\Colors", "WindowFrame", "158 158 158");
                        registryEditor.setStringValue("Control Panel\\Colors", "WindowText", "0 0 0");
                    } else if (theme == Theme.DARK) {
                        registryEditor.setStringValue("Control Panel\\Colors", "ActiveBorder", "48 48 48");
                        registryEditor.setStringValue("Control Panel\\Colors", "ActiveTitle", "33 33 33");
                        registryEditor.setStringValue("Control Panel\\Colors", "Background", background);
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonAlternateFace", "33 33 33");
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonDkShadow", "0 0 0");
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonFace", "33 33 33");
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonHilight", "48 48 48");
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonLight", "48 48 48");
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonShadow", "0 0 0");
                        registryEditor.setStringValue("Control Panel\\Colors", "ButtonText", "255 255 255");
                        registryEditor.setStringValue("Control Panel\\Colors", "GradientActiveTitle", "33 33 33");
                        registryEditor.setStringValue("Control Panel\\Colors", "GradientInactiveTitle", "33 33 33");
                        registryEditor.setStringValue("Control Panel\\Colors", "GrayText", "117 117 117");
                        registryEditor.setStringValue("Control Panel\\Colors", "Hilight", "2 136 209");
                        registryEditor.setStringValue("Control Panel\\Colors", "HilightText", "255 255 255");
                        registryEditor.setStringValue("Control Panel\\Colors", "HotTrackingColor", "2 136 209");
                        registryEditor.setStringValue("Control Panel\\Colors", "InactiveBorder", "48 48 48");
                        registryEditor.setStringValue("Control Panel\\Colors", "InactiveTitle", "33 33 33");
                        registryEditor.setStringValue("Control Panel\\Colors", "InactiveTitleText", "117 117 117");
                        registryEditor.setStringValue("Control Panel\\Colors", "InfoText", "255 255 255");
                        registryEditor.setStringValue("Control Panel\\Colors", "InfoWindow", "255 255 255");
                        registryEditor.setStringValue("Control Panel\\Colors", "Menu", "33 33 33");
                        registryEditor.setStringValue("Control Panel\\Colors", "MenuBar", "48 48 48");
                        registryEditor.setStringValue("Control Panel\\Colors", "MenuHilight", "2 136 209");
                        registryEditor.setStringValue("Control Panel\\Colors", "MenuText", "255 255 255");
                        registryEditor.setStringValue("Control Panel\\Colors", "Scrollbar", "48 48 48");
                        registryEditor.setStringValue("Control Panel\\Colors", "TitleText", "255 255 255");
                        registryEditor.setStringValue("Control Panel\\Colors", "Window", "48 48 48");
                        registryEditor.setStringValue("Control Panel\\Colors", "WindowFrame", "0 0 0");
                        registryEditor.setStringValue("Control Panel\\Colors", "WindowText", "255 255 255");
                    }
                    registryEditor.close();
                } catch (Throwable th4) {
                    th = th4;
                    registryEditor.close();
                    throw th;
                }
            } catch (Throwable th5) {
                th = th5;
            }
        }
    
        private static void createWallpaperBMPFile(Context context, ScreenInfo screenInfo) {
            int outputWidth = (int) Math.ceil((480.0f / screenInfo.height) * screenInfo.width);
            Bitmap outputBitmap = Bitmap.createBitmap(outputWidth, 480, Bitmap.Config.ARGB_8888);
            Paint paint = new Paint(1);
            Canvas canvas = new Canvas(outputBitmap);
            File userWallpaperFile = getUserWallpaperFile(context);
            if (userWallpaperFile.isFile()) {
                Bitmap image = BitmapFactory.decodeFile(userWallpaperFile.getPath());
                Rect srcRect = new Rect(0, 0, image.getWidth(), image.getHeight());
                Rect dstRect = new Rect(0, 0, outputWidth, 480);
                canvas.drawBitmap(image, srcRect, dstRect, paint);
            } else {
                BitmapFactory.Options options = new BitmapFactory.Options();
                options.inTargetDensity = 240;
                Bitmap wallpaperBitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.wallpaper, options);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(-16689253);
                canvas.drawRect(0.0f, 0.0f, outputWidth, 240.0f, paint);
                paint.setColor(-16615491);
                canvas.drawRect(0.0f, 240.0f, outputWidth, 480.0f, paint);
                float centerX = (outputWidth - 320.0f) * 0.5f;
                float centerY = (480.0f - 320.0f) * 0.5f;
                Rect srcRect2 = new Rect(0, 0, wallpaperBitmap.getWidth(), wallpaperBitmap.getHeight());
                RectF dstRect2 = new RectF(centerX, centerY, centerX + 320.0f, centerY + 320.0f);
                canvas.drawBitmap(wallpaperBitmap, srcRect2, dstRect2, paint);
            }
            RootFS rootFS = RootFS.find(context);
            MSBitmap.create(outputBitmap, new File(rootFS.getRootDir(), "/home/xuser/.cache/wallpaper.bmp"));
        }
    
        public static File getUserWallpaperFile(Context context) {
            return new File(RootFS.find(context).getRootDir(), "/home/xuser/.config/user-wallpaper.png");
        }
    }
  + app/src/main/java/com/winlator/core/WineUtils.java
    package com.winlator.core;
    
    import android.content.Context;
    import android.net.Uri;
    import com.winlator.container.Container;
    import com.winlator.container.Drive;
    import com.winlator.core.TarCompressorUtils;
    import com.winlator.win32.MSLogFont;
    import com.winlator.win32.WinVersions;
    import com.winlator.xenvironment.RootFS;
    import com.winlator.xenvironment.XEnvironment;
    import com.winlator.xenvironment.components.GuestProgramLauncherComponent;
    import java.io.File;
    import java.io.IOException;
    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.Locale;
    import java.util.concurrent.Executors;
    import java.util.concurrent.atomic.AtomicReference;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import org.json.JSONArray;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public abstract class WineUtils {
        public static void createDosdevicesSymlinks(Container container, boolean addDriveCDRom) {
            File rootDir = container.getRootDir();
            String dosdevicesPath = new File(rootDir, ".wine/dosdevices").getPath();
            File[] files = new File(dosdevicesPath).listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().matches("[a-z]:")) {
                        file.delete();
                    }
                }
            }
            FileUtils.symlink("../drive_c", dosdevicesPath + "/c:");
            FileUtils.symlink("../../../../", dosdevicesPath + "/z:");
            if (addDriveCDRom) {
                File driveX = new File(rootDir, ".wine/drive_x");
                if (!driveX.isDirectory()) {
                    driveX.mkdir();
                    FileUtils.chmod(driveX, 505);
                }
                String serial = String.format(Locale.ENGLISH, "%-8x", 88).replace(' ', '0');
                FileUtils.writeString(new File(driveX, ".windows-serial"), serial + "\n");
                FileUtils.symlink("../drive_x", dosdevicesPath + "/x:");
            }
            for (Drive drive : container.drivesIterator()) {
                File linkTarget = new File(drive.path);
                String path = linkTarget.getAbsolutePath();
                if (!linkTarget.isDirectory() && path.startsWith("/data/data/com.winlator/storage")) {
                    linkTarget.mkdirs();
                    FileUtils.chmod(linkTarget, 505);
                }
                FileUtils.symlink(path, dosdevicesPath + "/" + drive.letter.toLowerCase(Locale.ENGLISH) + ":");
            }
        }
    
        public static void extractWineFileForInstallAsync(final Context context, final Uri uri, final Callback<File> callback) {
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.core.WineUtils$$ExternalSyntheticLambda3
                @Override // java.lang.Runnable
                public final void run() {
                    WineUtils.lambda$extractWineFileForInstallAsync$0(context, uri, callback);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$extractWineFileForInstallAsync$0(Context context, Uri uri, Callback callback) {
            File destination = new File(RootFS.find(context).getInstalledWineDir(), "/preinstall/wine");
            FileUtils.delete(destination);
            destination.mkdirs();
            boolean success = TarCompressorUtils.extract(TarCompressorUtils.Type.XZ, context, uri, destination);
            if (!success) {
                FileUtils.delete(destination);
            }
            if (callback != null) {
                callback.call(success ? destination : null);
            }
        }
    
        public static void findWineVersionAsync(Context context, File wineDir, final Callback<WineInfo> callback) {
            File wineDir2;
            if (wineDir != null && wineDir.isDirectory()) {
                File[] files = wineDir.listFiles();
                if (files != null && files.length != 0) {
                    boolean is64Bit = true;
                    if (files.length != 1) {
                        wineDir2 = wineDir;
                    } else {
                        if (!files[0].isDirectory()) {
                            callback.call(null);
                            return;
                        }
                        wineDir2 = files[0];
                        files = wineDir2.listFiles();
                        if (files == null || files.length == 0) {
                            callback.call(null);
                            return;
                        }
                    }
                    File binDir = null;
                    int length = files.length;
                    int i = 0;
                    while (true) {
                        if (i >= length) {
                            break;
                        }
                        File file = files[i];
                        if (!file.isDirectory() || !file.getName().equals("bin")) {
                            i++;
                        } else {
                            binDir = file;
                            break;
                        }
                    }
                    if (binDir == null) {
                        callback.call(null);
                        return;
                    }
                    File wineBin = new File(binDir, "wine");
                    File wineBin64 = new File(binDir, "wine64");
                    if (!wineBin.isFile()) {
                        callback.call(null);
                        return;
                    }
                    if ((!wineBin64.isFile() || !ElfHelper.is64Bit(wineBin64)) && !ElfHelper.is64Bit(wineBin)) {
                        is64Bit = false;
                    }
                    if (!is64Bit) {
                        callback.call(null);
                        return;
                    }
                    RootFS rootFS = RootFS.find(context);
                    File rootDir = rootFS.getRootDir();
                    String wineBinPath = wineBin64.isFile() ? wineBin64.getPath() : wineBin.getPath();
                    final String winePath = wineDir2.getPath();
                    final AtomicReference<WineInfo> wineInfoRef = new AtomicReference<>();
                    final Callback<String> debugCallback = new Callback() { // from class: com.winlator.core.WineUtils$$ExternalSyntheticLambda2
                        @Override // com.winlator.core.Callback
                        public final void call(Object obj) {
                            WineUtils.lambda$findWineVersionAsync$1(wineInfoRef, winePath, (String) obj);
                        }
                    };
                    ProcessHelper.addDebugCallback(debugCallback);
                    File linkFile = new File(rootDir, "/home/xuser");
                    linkFile.delete();
                    FileUtils.symlink(wineDir2, linkFile);
                    XEnvironment environment = new XEnvironment(context, rootFS);
                    GuestProgramLauncherComponent guestProgramLauncherComponent = new GuestProgramLauncherComponent();
                    guestProgramLauncherComponent.setGuestExecutable(wineBinPath + " --version");
                    guestProgramLauncherComponent.setTerminationCallback(new Callback() { // from class: com.winlator.core.WineUtils$$ExternalSyntheticLambda0
                        @Override // com.winlator.core.Callback
                        public final void call(Object obj) {
                            WineUtils.lambda$findWineVersionAsync$2(Callback.this, wineInfoRef, debugCallback, (Integer) obj);
                        }
                    });
                    environment.addComponent(guestProgramLauncherComponent);
                    environment.startEnvironmentComponents();
                    return;
                }
                callback.call(null);
                return;
            }
            callback.call(null);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$findWineVersionAsync$1(AtomicReference wineInfoRef, String winePath, String line) {
            Pattern pattern = Pattern.compile("^wine\\-([0-9\\.]+)\\-?([0-9\\.]+)?", 2);
            Matcher matcher = pattern.matcher(line);
            if (matcher.find()) {
                String version = matcher.group(1);
                String subversion = matcher.groupCount() >= 2 ? matcher.group(2) : null;
                wineInfoRef.set(new WineInfo(version, subversion, winePath));
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$findWineVersionAsync$2(Callback callback, AtomicReference wineInfoRef, Callback debugCallback, Integer status) {
            callback.call((WineInfo) wineInfoRef.get());
            ProcessHelper.removeDebugCallback(debugCallback);
        }
    
        public static ArrayList<WineInfo> getInstalledWineInfos(Context context) {
            ArrayList<WineInfo> wineInfos = new ArrayList<>();
            wineInfos.add(WineInfo.MAIN_WINE_INFO);
            File installedWineDir = RootFS.find(context).getInstalledWineDir();
            File[] files = installedWineDir.listFiles();
            if (files != null) {
                for (File file : files) {
                    String name = file.getName();
                    if (name.startsWith("wine")) {
                        wineInfos.add(WineInfo.fromIdentifier(context, name));
                    }
                }
            }
            return wineInfos;
        }
    
        public static void setSystemFont(WineRegistryEditor userRegistry, String faceName) {
            byte[] fontNormalData = new MSLogFont().setFaceName(faceName).toByteArray();
            byte[] fontBoldData = new MSLogFont().setFaceName(faceName).setWeight(700).toByteArray();
            userRegistry.setHexValues("Control Panel\\Desktop\\WindowMetrics", "CaptionFont", fontBoldData);
            userRegistry.setHexValues("Control Panel\\Desktop\\WindowMetrics", "IconFont", fontNormalData);
            userRegistry.setHexValues("Control Panel\\Desktop\\WindowMetrics", "MenuFont", fontNormalData);
            userRegistry.setHexValues("Control Panel\\Desktop\\WindowMetrics", "MessageFont", fontNormalData);
            userRegistry.setHexValues("Control Panel\\Desktop\\WindowMetrics", "SmCaptionFont", fontNormalData);
            userRegistry.setHexValues("Control Panel\\Desktop\\WindowMetrics", "StatusFont", fontNormalData);
        }
    
        public static void applySystemTweaks(Context context, WineInfo wineInfo) {
            Throwable th;
            WineRegistryEditor registryEditor;
            Throwable th2;
            int length;
            int i;
            int i2;
            File userRegFile;
            String[] direct3dLibs;
            File rootDir = RootFS.find(context).getRootDir();
            File userCacheDir = new File(rootDir, "/home/xuser/.cache");
            if (!userCacheDir.isDirectory()) {
                userCacheDir.mkdirs();
            }
            File userConfigDir = new File(rootDir, "/home/xuser/.config");
            if (!userConfigDir.isDirectory()) {
                userConfigDir.mkdirs();
            }
            File systemRegFile = new File(rootDir, "/home/xuser/.wine/system.reg");
            File userRegFile2 = new File(rootDir, "/home/xuser/.wine/user.reg");
            WineRegistryEditor registryEditor2 = new WineRegistryEditor(systemRegFile);
            try {
                registryEditor2.setStringValue("Software\\Wine\\Drives", "x:", "cdrom");
                registryEditor2.setStringValue("Software\\Classes\\.reg", null, "REGfile");
                registryEditor2.setStringValue("Software\\Classes\\.reg", "Content Type", "application/reg");
                registryEditor2.setStringValue("Software\\Classes\\REGfile\\Shell\\Open\\command", null, "C:\\windows\\regedit.exe /C \"%1\"");
                registryEditor2.setStringValue("Software\\Classes\\dllfile\\DefaultIcon", null, "shell32.dll,-154");
                registryEditor2.setStringValue("Software\\Classes\\lnkfile\\DefaultIcon", null, "shell32.dll,-30");
                registryEditor2.setStringValue("Software\\Classes\\inifile\\DefaultIcon", null, "shell32.dll,-151");
                File corefontsAddedFile = new File(userConfigDir, "corefonts.added");
                if (!corefontsAddedFile.isFile()) {
                    try {
                        setupSystemFonts(registryEditor2);
                        FileUtils.writeString(corefontsAddedFile, String.valueOf(System.currentTimeMillis()));
                    } catch (Throwable th3) {
                        th = th3;
                        try {
                            registryEditor2.close();
                            throw th;
                        } catch (Throwable th4) {
                            th.addSuppressed(th4);
                            throw th;
                        }
                    }
                }
                registryEditor2.close();
                String[] direct3dLibs2 = {"d3d8", "d3d9", "d3d10", "d3d10_1", "d3d10core", "d3d11", "d3d12", "d3d12core", "ddraw", "dxgi", "wined3d"};
                String[] inputLibs = {"dinput", "dinput8", "xinput1_1", "xinput1_2", "xinput1_3", "xinput1_4", "xinput9_1_0", "xinputuap"};
                boolean isMainWineVersion = WineInfo.isMainWineVersion(wineInfo.identifier());
                File wineSystem32Dir = new File(rootDir, "/opt/wine/lib/wine/x86_64-windows");
                File wineSysWoW64Dir = new File(rootDir, "/opt/wine/lib/wine/i386-windows");
                File containerSystem32Dir = new File(rootDir, "/home/xuser/.wine/drive_c/windows/system32");
                File containerSysWoW64Dir = new File(rootDir, "/home/xuser/.wine/drive_c/windows/syswow64");
                WineRegistryEditor registryEditor3 = new WineRegistryEditor(userRegFile2);
                try {
                    length = direct3dLibs2.length;
                    i = 0;
                } catch (Throwable th5) {
                    registryEditor = registryEditor3;
                    th2 = th5;
                }
                while (true) {
                    File userCacheDir2 = userCacheDir;
                    if (i >= length) {
                        break;
                    }
                    try {
                        int i3 = length;
                        File userConfigDir2 = userConfigDir;
                        registryEditor = registryEditor3;
                        File systemRegFile2 = systemRegFile;
                        try {
                            registryEditor.setStringValue("Software\\Wine\\DllOverrides", direct3dLibs2[i], "native");
                            i++;
                            systemRegFile = systemRegFile2;
                            userCacheDir = userCacheDir2;
                            length = i3;
                            registryEditor3 = registryEditor;
                            userConfigDir = userConfigDir2;
                        } catch (Throwable th6) {
                            th2 = th6;
                        }
                    } catch (Throwable th7) {
                        registryEditor = registryEditor3;
                        th2 = th7;
                    }
                    try {
                        registryEditor.close();
                        throw th2;
                    } catch (Throwable th8) {
                        th2.addSuppressed(th8);
                        throw th2;
                    }
                }
                registryEditor = registryEditor3;
                try {
                    int length2 = inputLibs.length;
                    int i4 = 0;
                    while (i4 < length2) {
                        String name = inputLibs[i4];
                        if (isMainWineVersion) {
                            i2 = length2;
                            userRegFile = userRegFile2;
                            direct3dLibs = direct3dLibs2;
                            registryEditor.setStringValue("Software\\Wine\\DllOverrides", name, "builtin,native");
                        } else {
                            i2 = length2;
                            registryEditor.setStringValue("Software\\Wine\\DllOverrides", name, "native,builtin");
                            userRegFile = userRegFile2;
                            try {
                                direct3dLibs = direct3dLibs2;
                                try {
                                    FileUtils.copy(new File(wineSysWoW64Dir, name + ".dll"), new File(containerSysWoW64Dir, name + ".dll"));
                                    FileUtils.copy(new File(wineSystem32Dir, name + ".dll"), new File(containerSystem32Dir, name + ".dll"));
                                } catch (Throwable th9) {
                                    th2 = th9;
                                }
                            } catch (Throwable th10) {
                                th2 = th10;
                            }
                        }
                        i4++;
                        length2 = i2;
                        userRegFile2 = userRegFile;
                        direct3dLibs2 = direct3dLibs;
                    }
                    registryEditor.removeKey("Software\\Winlator\\WFM\\ContextMenu\\7-Zip");
                    registryEditor.setStringValue("Software\\Winlator\\WFM\\ContextMenu\\7-Zip", "Open Archive", "Z:\\opt\\apps\\7-Zip\\7zFM.exe \"%FILE%\"");
                    registryEditor.setStringValue("Software\\Winlator\\WFM\\ContextMenu\\7-Zip", "Extract Here", "Z:\\opt\\apps\\7-Zip\\7zG.exe x \"%FILE%\" -r -o\"%DIR%\" -y");
                    registryEditor.setStringValue("Software\\Winlator\\WFM\\ContextMenu\\7-Zip", "Extract to Folder", "Z:\\opt\\apps\\7-Zip\\7zG.exe x \"%FILE%\" -r -o\"%DIR%\\%BASENAME%\" -y");
                    registryEditor.setStringValue("Software\\Wine\\AddonsURL", null, "https://raw.githubusercontent.com/brunodev85/winlator/main/wine_addons/");
                    registryEditor.close();
                } catch (Throwable th11) {
                    th2 = th11;
                }
            } catch (Throwable th12) {
                th = th12;
            }
        }
    
        public static void changeBrowsersRegistryKey(Container container, boolean useAndroidBrowser) {
            File userRegFile = new File(container.getRootDir(), ".wine/user.reg");
            WineRegistryEditor registryEditor = new WineRegistryEditor(userRegFile);
            try {
                if (useAndroidBrowser) {
                    registryEditor.setStringValue("Software\\Wine\\WineBrowser", "Browsers", "C:\\windows\\winhandler.exe /url");
                } else {
                    registryEditor.setStringValue("Software\\Wine\\WineBrowser", "Browsers", "C:\\windows\\system32\\iexplore.exe");
                }
                registryEditor.close();
            } catch (Throwable th) {
                try {
                    registryEditor.close();
                } catch (Throwable th2) {
                    th.addSuppressed(th2);
                }
                throw th;
            }
        }
    
        public static void overrideWinComponentDlls(Context context, Container container, String wincomponents) {
            Throwable th;
            String dllOverridesKey;
            String dllOverridesKey2 = "Software\\Wine\\DllOverrides";
            File userRegFile = new File(container.getRootDir(), ".wine/user.reg");
            Iterator<String[]> oldWinComponentsIter = new KeyValueSet(container.getExtra("wincomponents", "direct3d=0,directsound=0,directmusic=0,directshow=0,directplay=0,xaudio=0,vcrun2005=0,vcrun2010=0,wmdecoder=0")).iterator();
            try {
                WineRegistryEditor registryEditor = new WineRegistryEditor(userRegFile);
                try {
                    try {
                        try {
                            JSONObject wincomponentsJSONObject = new JSONObject(FileUtils.readString(context, "wincomponents/wincomponents.json"));
                            try {
                                Iterator<String[]> it = new KeyValueSet(wincomponents).iterator();
                                while (it.hasNext()) {
                                    String[] wincomponent = it.next();
                                    if (!wincomponent[1].equals(oldWinComponentsIter.next()[1])) {
                                        String identifier = wincomponent[0];
                                        boolean useNative = wincomponent[1].equals("1");
                                        JSONObject wincomponentJSONObject = wincomponentsJSONObject.getJSONObject(identifier);
                                        JSONArray dlnames = wincomponentJSONObject.getJSONArray("dlnames");
                                        int i = 0;
                                        while (i < dlnames.length()) {
                                            String dlname = dlnames.getString(i);
                                            JSONObject wincomponentsJSONObject2 = wincomponentsJSONObject;
                                            if (useNative) {
                                                dllOverridesKey = dllOverridesKey2;
                                                try {
                                                    registryEditor.setStringValue("Software\\Wine\\DllOverrides", dlname, "native,builtin");
                                                } catch (Throwable th2) {
                                                    th = th2;
                                                    try {
                                                        registryEditor.close();
                                                        throw th;
                                                    } catch (Throwable th3) {
                                                        th.addSuppressed(th3);
                                                        throw th;
                                                    }
                                                }
                                            } else {
                                                dllOverridesKey = dllOverridesKey2;
                                                registryEditor.removeValue("Software\\Wine\\DllOverrides", dlname);
                                            }
                                            i++;
                                            wincomponentsJSONObject = wincomponentsJSONObject2;
                                            dllOverridesKey2 = dllOverridesKey;
                                        }
                                    }
                                }
                                registryEditor.close();
                            } catch (Throwable th4) {
                                th = th4;
                                th = th;
                                registryEditor.close();
                                throw th;
                            }
                        } catch (Throwable th5) {
                            th = th5;
                            th = th;
                            registryEditor.close();
                            throw th;
                        }
                    } catch (Throwable th6) {
                        th = th6;
                    }
                } catch (JSONException e) {
                }
            } catch (JSONException e2) {
            }
        }
    
        public static void setWinComponentRegistryKeys(File systemRegFile, String identifier, boolean useNative) {
            WineRegistryEditor registryEditor;
            if (identifier.equals("directsound")) {
                registryEditor = new WineRegistryEditor(systemRegFile);
                try {
                    if (useNative) {
                        registryEditor.setStringValue("Software\\Classes\\Wow6432Node\\CLSID\\{083863F1-70DE-11D0-BD40-00A0C911CE86}\\Instance\\{E30629D1-27E5-11CE-875D-00608CB78066}", "CLSID", "{E30629D1-27E5-11CE-875D-00608CB78066}");
                        registryEditor.setHexValue("Software\\Classes\\Wow6432Node\\CLSID\\{083863F1-70DE-11D0-BD40-00A0C911CE86}\\Instance\\{E30629D1-27E5-11CE-875D-00608CB78066}", "FilterData", "02000000000080000100000000000000307069330200000000000000010000000000000000000000307479330000000038000000480000006175647300001000800000aa00389b710100000000001000800000aa00389b71");
                        registryEditor.setStringValue("Software\\Classes\\Wow6432Node\\CLSID\\{083863F1-70DE-11D0-BD40-00A0C911CE86}\\Instance\\{E30629D1-27E5-11CE-875D-00608CB78066}", "FriendlyName", "Wave Audio Renderer");
                        registryEditor.setStringValue("Software\\Classes\\CLSID\\{083863F1-70DE-11D0-BD40-00A0C911CE86}\\Instance\\{E30629D1-27E5-11CE-875D-00608CB78066}", "CLSID", "{E30629D1-27E5-11CE-875D-00608CB78066}");
                        registryEditor.setHexValue("Software\\Classes\\CLSID\\{083863F1-70DE-11D0-BD40-00A0C911CE86}\\Instance\\{E30629D1-27E5-11CE-875D-00608CB78066}", "FilterData", "02000000000080000100000000000000307069330200000000000000010000000000000000000000307479330000000038000000480000006175647300001000800000aa00389b710100000000001000800000aa00389b71");
                        registryEditor.setStringValue("Software\\Classes\\CLSID\\{083863F1-70DE-11D0-BD40-00A0C911CE86}\\Instance\\{E30629D1-27E5-11CE-875D-00608CB78066}", "FriendlyName", "Wave Audio Renderer");
                    } else {
                        registryEditor.removeKey("Software\\Classes\\Wow6432Node\\CLSID\\{083863F1-70DE-11D0-BD40-00A0C911CE86}\\Instance\\{E30629D1-27E5-11CE-875D-00608CB78066}");
                        registryEditor.removeKey("Software\\Classes\\CLSID\\{083863F1-70DE-11D0-BD40-00A0C911CE86}\\Instance\\{E30629D1-27E5-11CE-875D-00608CB78066}");
                    }
                    registryEditor.close();
                    return;
                } finally {
                    try {
                        registryEditor.close();
                    } catch (Throwable th) {
                        th.addSuppressed(th);
                    }
                }
            }
            if (identifier.equals("wmdecoder")) {
                registryEditor = new WineRegistryEditor(systemRegFile);
                try {
                    if (useNative) {
                        registryEditor.setStringValue("Software\\Classes\\Wow6432Node\\CLSID\\{2EEB4ADF-4578-4D10-BCA7-BB955F56320A}\\InprocServer32", null, "C:\\windows\\syswow64\\wmadmod.dll");
                        registryEditor.setStringValue("Software\\Classes\\Wow6432Node\\CLSID\\{82D353DF-90BD-4382-8BC2-3F6192B76E34}\\InprocServer32", null, "C:\\windows\\syswow64\\wmvdecod.dll");
                    } else {
                        registryEditor.setStringValue("Software\\Classes\\Wow6432Node\\CLSID\\{2EEB4ADF-4578-4D10-BCA7-BB955F56320A}\\InprocServer32", null, "C:\\windows\\syswow64\\winegstreamer.dll");
                        registryEditor.setStringValue("Software\\Classes\\Wow6432Node\\CLSID\\{82D353DF-90BD-4382-8BC2-3F6192B76E34}\\InprocServer32", null, "C:\\windows\\syswow64\\winegstreamer.dll");
                    }
                    registryEditor.close();
                } catch (Throwable th2) {
                    throw th2;
                }
            }
        }
    
        public static void updateWineprefix(Context context, final Callback<Integer> terminationCallback) {
            RootFS rootFS = RootFS.find(context);
            final File rootDir = rootFS.getRootDir();
            File tmpDir = rootFS.getTmpDir();
            if (!tmpDir.isDirectory()) {
                tmpDir.mkdir();
            }
            FileUtils.writeString(new File(rootDir, "/home/xuser/.wine/.update-timestamp"), "0\n");
            EnvVars envVars = new EnvVars();
            envVars.put("WINEPREFIX", "/home/xuser/.wine");
            envVars.put("WINEDLLOVERRIDES", "mscoree,mshtml=d");
            XEnvironment environment = new XEnvironment(context, rootFS);
            GuestProgramLauncherComponent guestProgramLauncherComponent = new GuestProgramLauncherComponent();
            guestProgramLauncherComponent.setEnvVars(envVars);
            guestProgramLauncherComponent.setGuestExecutable("wine wineboot -u");
            guestProgramLauncherComponent.setTerminationCallback(new Callback() { // from class: com.winlator.core.WineUtils$$ExternalSyntheticLambda1
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    WineUtils.lambda$updateWineprefix$3(rootDir, terminationCallback, (Integer) obj);
                }
            });
            environment.addComponent(guestProgramLauncherComponent);
            environment.startEnvironmentComponents();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$updateWineprefix$3(File rootDir, Callback terminationCallback, Integer status) {
            FileUtils.writeString(new File(rootDir, "/home/xuser/.wine/.update-timestamp"), "disable\n");
            if (terminationCallback != null) {
                terminationCallback.call(status);
            }
        }
    
        public static boolean isWineprefixWasUpdated(Container container) {
            File file = new File(container.getRootDir(), "/.wine/.update-timestamp");
            String content = FileUtils.readString(file);
            if (!content.startsWith("disable")) {
                try {
                    int updateTimestamp = Integer.parseInt(content.replaceAll("[\r\n]+", ""));
                    if (updateTimestamp != 0) {
                        return FileUtils.writeString(file, "disable\n");
                    }
                    return false;
                } catch (NumberFormatException e) {
                    return false;
                }
            }
            return false;
        }
    
        public static void changeServicesStatus(Container container, boolean onlyEssential) {
            String[] services = {"BITS:3", "Eventlog:2", "HTTP:3", "LanmanServer:3", "NDIS:2", "PlugPlay:2", "RpcSs:3", "scardsvr:3", "Schedule:3", "Spooler:3", "StiSvc:3", "TermService:3", "winebus:3", "winehid:3", "Winmgmt:3", "wuauserv:3"};
            File systemRegFile = new File(container.getRootDir(), ".wine/system.reg");
            WineRegistryEditor registryEditor = new WineRegistryEditor(systemRegFile);
            try {
                registryEditor.setCreateKeyIfNotExist(false);
                for (String service : services) {
                    String name = service.substring(0, service.indexOf(":"));
                    int value = onlyEssential ? 4 : Character.getNumericValue(service.charAt(service.length() - 1));
                    registryEditor.setDwordValue("System\\CurrentControlSet\\Services\\" + name, "Start", value);
                }
                registryEditor.close();
            } finally {
            }
        }
    
        public static String unixToDOSPath(String unixPath, Container container) {
            int index;
            String dosPath = "";
            String driveLetter = "";
            Iterator<Drive> it = container.drivesIterator().iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                Drive drive = it.next();
                if (unixPath.startsWith(drive.path)) {
                    driveLetter = drive.letter + ":";
                    dosPath = unixPath.substring(drive.path.length()).replace("/", "\\");
                    break;
                }
            }
            if (dosPath.isEmpty() && (index = unixPath.indexOf("/.wine/drive_c")) != -1) {
                driveLetter = "C:";
                dosPath = unixPath.substring(index + 14).replace("/", "\\");
            }
            if (!dosPath.startsWith("\\")) {
                dosPath = dosPath + "\\";
            }
            String dosPath2 = driveLetter + StringUtils.removeEndSlash(dosPath);
            if (dosPath2.equals(driveLetter)) {
                return dosPath2 + "\\";
            }
            return dosPath2;
        }
    
        public static String dosToUnixPath(String dosPath, Container container) {
            int index = dosPath.indexOf(":");
            if (index == -1) {
                return "";
            }
            String driveLetter = dosPath.substring(0, index).toUpperCase(Locale.ENGLISH);
            String relativePath = StringUtils.removeStartSlash(dosPath.substring(index + 1).replace("\\", "/"));
            if (driveLetter.equals("C")) {
                String unixPath = container.getRootDir() + "/.wine/drive_c/" + relativePath;
                return unixPath;
            }
            if (driveLetter.equals("Z")) {
                File rootDir = new File(container.getRootDir(), "../../");
                try {
                    String unixPath2 = rootDir.getCanonicalPath() + "/" + relativePath;
                    return unixPath2;
                } catch (IOException e) {
                    return "";
                }
            }
            for (Drive drive : container.drivesIterator()) {
                if (drive.letter.equals(driveLetter)) {
                    String unixPath3 = drive.path + "/" + relativePath;
                    return unixPath3;
                }
            }
            return "";
        }
    
        public static void setWinVersion(Container container, int winVersionIdx) {
            Throwable th;
            WinVersions.WinVersion winVersion = WinVersions.getWinVersions()[winVersionIdx];
            String currentBuild = String.valueOf(winVersion.buildNumber);
            String currentVersion = winVersion.currentVersion;
            if (currentVersion == null) {
                currentVersion = ((int) winVersion.majorVersion) + "." + ((int) winVersion.minorVersion);
            }
            File systemRegFile = new File(container.getRootDir(), ".wine/system.reg");
            WineRegistryEditor registryEditor = new WineRegistryEditor(systemRegFile);
            try {
                registryEditor.setStringValue("Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion", "CurrentVersion", currentVersion);
                registryEditor.setDwordValue("Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion", "CurrentMajorVersionNumber", winVersion.majorVersion);
                registryEditor.setDwordValue("Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion", "CurrentMinorVersionNumber", winVersion.minorVersion);
                registryEditor.setStringValue("Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion", "CSDVersion", winVersion.csdVersion);
                registryEditor.setStringValue("Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion", "CurrentBuild", currentBuild);
                registryEditor.setStringValue("Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion", "CurrentBuildNumber", currentBuild);
                StringBuilder sb = new StringBuilder();
                sb.append("Microsoft ");
                try {
                    sb.append(winVersion.description);
                    registryEditor.setStringValue("Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion", "ProductName", sb.toString());
                    registryEditor.setStringValue("Software\\Microsoft\\Windows NT\\CurrentVersion", "CurrentVersion", currentVersion);
                    registryEditor.setDwordValue("Software\\Microsoft\\Windows NT\\CurrentVersion", "CurrentMajorVersionNumber", winVersion.majorVersion);
                    registryEditor.setDwordValue("Software\\Microsoft\\Windows NT\\CurrentVersion", "CurrentMinorVersionNumber", winVersion.minorVersion);
                    registryEditor.setStringValue("Software\\Microsoft\\Windows NT\\CurrentVersion", "CSDVersion", winVersion.csdVersion);
                    registryEditor.setStringValue("Software\\Microsoft\\Windows NT\\CurrentVersion", "CurrentBuild", currentBuild);
                    registryEditor.setStringValue("Software\\Microsoft\\Windows NT\\CurrentVersion", "CurrentBuildNumber", currentBuild);
                    registryEditor.setStringValue("Software\\Microsoft\\Windows NT\\CurrentVersion", "ProductName", "Microsoft " + winVersion.description);
                    registryEditor.close();
                } catch (Throwable th2) {
                    th = th2;
                    try {
                        registryEditor.close();
                        throw th;
                    } catch (Throwable th3) {
                        th.addSuppressed(th3);
                        throw th;
                    }
                }
            } catch (Throwable th4) {
                th = th4;
            }
        }
    
        private static void setupSystemFonts(WineRegistryEditor registryEditor) {
            String[][] corefonts = {new String[]{"Andale Mono (TrueType)", "andalemo.ttf"}, new String[]{"Arial (TrueType)", "arial.ttf"}, new String[]{"Arial Black (TrueType)", "ariblk.ttf"}, new String[]{"Arial Bold (TrueType)", "arialbd.ttf"}, new String[]{"Arial Bold Italic (TrueType)", "arialbi.ttf"}, new String[]{"Arial Italic (TrueType)", "ariali.ttf"}, new String[]{"Comic Sans MS (TrueType)", "comic.ttf"}, new String[]{"Comic Sans MS Bold (TrueType)", "comicbd.ttf"}, new String[]{"Courier New (TrueType)", "cour.ttf"}, new String[]{"Courier New Bold (TrueType)", "courbd.ttf"}, new String[]{"Courier New Bold Italic (TrueType)", "courbi.ttf"}, new String[]{"Courier New Italic (TrueType)", "couri.ttf"}, new String[]{"Georgia (TrueType)", "georgia.ttf"}, new String[]{"Georgia Bold (TrueType)", "georgiab.ttf"}, new String[]{"Georgia Bold Italic (TrueType)", "georgiaz.ttf"}, new String[]{"Georgia Italic (TrueType)", "georgiai.ttf"}, new String[]{"Impact (TrueType)", "impact.ttf"}, new String[]{"Times New Roman (TrueType)", "times.ttf"}, new String[]{"Times New Roman Bold (TrueType)", "timesbd.ttf"}, new String[]{"Times New Roman Bold Italic (TrueType)", "timesbi.ttf"}, new String[]{"Times New Roman Italic (TrueType)", "timesi.ttf"}, new String[]{"Trebuchet MS (TrueType)", "trebuc.ttf"}, new String[]{"Trebuchet MS Bold (TrueType)", "trebucbd.ttf"}, new String[]{"Trebuchet MS Bold Italic (TrueType)", "trebucbi.ttf"}, new String[]{"Trebuchet MS Italic (TrueType)", "trebucit.ttf"}, new String[]{"Verdana (TrueType)", "verdana.ttf"}, new String[]{"Verdana Bold (TrueType)", "verdanab.ttf"}, new String[]{"Verdana Bold Italic (TrueType)", "verdanaz.ttf"}, new String[]{"Verdana Italic (TrueType)", "verdanai.ttf"}, new String[]{"Webdings (TrueType)", "webdings.ttf"}};
            registryEditor.setStringValues("Software\\Microsoft\\Windows\\CurrentVersion\\Fonts", corefonts);
            registryEditor.setStringValues("Software\\Microsoft\\Windows NT\\CurrentVersion\\Fonts", corefonts);
            String[][] wineFonts = {new String[]{"Marlett (TrueType)", "Z:\\opt\\wine\\share\\wine\\fonts\\marlett.ttf"}, new String[]{"Symbol (TrueType)", "Z:\\opt\\wine\\share\\wine\\fonts\\symbol.ttf"}, new String[]{"Tahoma (TrueType)", "Z:\\opt\\wine\\share\\wine\\fonts\\tahoma.ttf"}, new String[]{"Tahoma Bold (TrueType)", "Z:\\opt\\wine\\share\\wine\\fonts\\tahomabd.ttf"}, new String[]{"Wingdings (TrueType)", "Z:\\opt\\wine\\share\\wine\\fonts\\wingding.ttf"}};
            registryEditor.setStringValues("Software\\Microsoft\\Windows\\CurrentVersion\\Fonts", wineFonts);
            registryEditor.setStringValues("Software\\Microsoft\\Windows NT\\CurrentVersion\\Fonts", wineFonts);
        }
    }
  + app/src/main/java/com/winlator/inputcontrols/Binding.java
    package com.winlator.inputcontrols;
    
    import com.winlator.xserver.Pointer;
    import com.winlator.xserver.XKeycode;
    import java.util.ArrayList;
    
    /* loaded from: classes.dex */
    public enum Binding {
        NONE,
        MOUSE_LEFT_BUTTON,
        MOUSE_MIDDLE_BUTTON,
        MOUSE_RIGHT_BUTTON,
        MOUSE_MOVE_LEFT,
        MOUSE_MOVE_RIGHT,
        MOUSE_MOVE_UP,
        MOUSE_MOVE_DOWN,
        MOUSE_SCROLL_UP,
        MOUSE_SCROLL_DOWN,
        KEY_UP,
        KEY_RIGHT,
        KEY_DOWN,
        KEY_LEFT,
        KEY_ENTER,
        KEY_ESC,
        KEY_BKSP,
        KEY_DEL,
        KEY_INSERT,
        KEY_TAB,
        KEY_SPACE,
        KEY_CTRL_L,
        KEY_CTRL_R,
        KEY_SHIFT_L,
        KEY_SHIFT_R,
        KEY_ALT_L,
        KEY_ALT_R,
        KEY_HOME,
        KEY_PRTSCN,
        KEY_PG_UP,
        KEY_PG_DOWN,
        KEY_END,
        KEY_CAPS_LOCK,
        KEY_NUM_LOCK,
        KEY_0,
        KEY_1,
        KEY_2,
        KEY_3,
        KEY_4,
        KEY_5,
        KEY_6,
        KEY_7,
        KEY_8,
        KEY_9,
        KEY_A,
        KEY_B,
        KEY_C,
        KEY_D,
        KEY_E,
        KEY_F,
        KEY_G,
        KEY_H,
        KEY_I,
        KEY_J,
        KEY_K,
        KEY_L,
        KEY_M,
        KEY_N,
        KEY_O,
        KEY_P,
        KEY_Q,
        KEY_R,
        KEY_S,
        KEY_T,
        KEY_U,
        KEY_V,
        KEY_W,
        KEY_X,
        KEY_Y,
        KEY_Z,
        KEY_BRACKET_LEFT,
        KEY_BRACKET_RIGHT,
        KEY_BACKSLASH,
        KEY_SLASH,
        KEY_SEMICOLON,
        KEY_COMMA,
        KEY_PERIOD,
        KEY_APOSTROPHE,
        KEY_KP_ADD,
        KEY_MINUS,
        KEY_F1,
        KEY_F2,
        KEY_F3,
        KEY_F4,
        KEY_F5,
        KEY_F6,
        KEY_F7,
        KEY_F8,
        KEY_F9,
        KEY_F10,
        KEY_F11,
        KEY_F12,
        KEY_KP_0,
        KEY_KP_1,
        KEY_KP_2,
        KEY_KP_3,
        KEY_KP_4,
        KEY_KP_5,
        KEY_KP_6,
        KEY_KP_7,
        KEY_KP_8,
        KEY_KP_9,
        GAMEPAD_BUTTON_A,
        GAMEPAD_BUTTON_B,
        GAMEPAD_BUTTON_X,
        GAMEPAD_BUTTON_Y,
        GAMEPAD_BUTTON_L1,
        GAMEPAD_BUTTON_R1,
        GAMEPAD_BUTTON_SELECT,
        GAMEPAD_BUTTON_START,
        GAMEPAD_BUTTON_L3,
        GAMEPAD_BUTTON_R3,
        GAMEPAD_BUTTON_L2,
        GAMEPAD_BUTTON_R2,
        GAMEPAD_LEFT_THUMB_UP,
        GAMEPAD_LEFT_THUMB_RIGHT,
        GAMEPAD_LEFT_THUMB_DOWN,
        GAMEPAD_LEFT_THUMB_LEFT,
        GAMEPAD_RIGHT_THUMB_UP,
        GAMEPAD_RIGHT_THUMB_RIGHT,
        GAMEPAD_RIGHT_THUMB_DOWN,
        GAMEPAD_RIGHT_THUMB_LEFT,
        GAMEPAD_DPAD_UP,
        GAMEPAD_DPAD_RIGHT,
        GAMEPAD_DPAD_DOWN,
        GAMEPAD_DPAD_LEFT;
    
        public final XKeycode keycode;
    
        Binding() {
            XKeycode keycode;
            try {
                keycode = XKeycode.valueOf(name());
            } catch (IllegalArgumentException e) {
                XKeycode keycode2 = XKeycode.KEY_NONE;
                String name = name();
                if (name.equals("KEY_PG_UP")) {
                    XKeycode keycode3 = XKeycode.KEY_PRIOR;
                    keycode = keycode3;
                } else if (!name.equals("KEY_PG_DOWN")) {
                    keycode = keycode2;
                } else {
                    XKeycode keycode4 = XKeycode.KEY_NEXT;
                    keycode = keycode4;
                }
            }
            this.keycode = keycode;
        }
    
        /* renamed from: com.winlator.inputcontrols.Binding$1, reason: invalid class name */
        static /* synthetic */ class AnonymousClass1 {
            static final /* synthetic */ int[] $SwitchMap$com$winlator$inputcontrols$Binding;
    
            static {
                int[] iArr = new int[Binding.values().length];
                $SwitchMap$com$winlator$inputcontrols$Binding = iArr;
                try {
                    iArr[Binding.KEY_SHIFT_L.ordinal()] = 1;
                } catch (NoSuchFieldError e) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_SHIFT_R.ordinal()] = 2;
                } catch (NoSuchFieldError e2) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_CTRL_L.ordinal()] = 3;
                } catch (NoSuchFieldError e3) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_CTRL_R.ordinal()] = 4;
                } catch (NoSuchFieldError e4) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_ALT_L.ordinal()] = 5;
                } catch (NoSuchFieldError e5) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_ALT_R.ordinal()] = 6;
                } catch (NoSuchFieldError e6) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_BRACKET_LEFT.ordinal()] = 7;
                } catch (NoSuchFieldError e7) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_BRACKET_RIGHT.ordinal()] = 8;
                } catch (NoSuchFieldError e8) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_BACKSLASH.ordinal()] = 9;
                } catch (NoSuchFieldError e9) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_SLASH.ordinal()] = 10;
                } catch (NoSuchFieldError e10) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_SEMICOLON.ordinal()] = 11;
                } catch (NoSuchFieldError e11) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_COMMA.ordinal()] = 12;
                } catch (NoSuchFieldError e12) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_PERIOD.ordinal()] = 13;
                } catch (NoSuchFieldError e13) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_APOSTROPHE.ordinal()] = 14;
                } catch (NoSuchFieldError e14) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_MINUS.ordinal()] = 15;
                } catch (NoSuchFieldError e15) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.KEY_KP_ADD.ordinal()] = 16;
                } catch (NoSuchFieldError e16) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.MOUSE_LEFT_BUTTON.ordinal()] = 17;
                } catch (NoSuchFieldError e17) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.MOUSE_MIDDLE_BUTTON.ordinal()] = 18;
                } catch (NoSuchFieldError e18) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.MOUSE_RIGHT_BUTTON.ordinal()] = 19;
                } catch (NoSuchFieldError e19) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.MOUSE_SCROLL_UP.ordinal()] = 20;
                } catch (NoSuchFieldError e20) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$Binding[Binding.MOUSE_SCROLL_DOWN.ordinal()] = 21;
                } catch (NoSuchFieldError e21) {
                }
            }
        }
    
        @Override // java.lang.Enum
        public String toString() {
            switch (AnonymousClass1.$SwitchMap$com$winlator$inputcontrols$Binding[ordinal()]) {
                case 1:
                    return "L SHIFT";
                case 2:
                    return "R SHIFT";
                case 3:
                    return "L CTRL";
                case 4:
                    return "R CTRL";
                case 5:
                    return "L ALT";
                case 6:
                    return "R ALT";
                case 7:
                    return "[";
                case 8:
                    return "]";
                case 9:
                    return "\\";
                case 10:
                    return "/";
                case 11:
                    return ";";
                case 12:
                    return ",";
                case 13:
                    return ".";
                case 14:
                    return "'";
                case 15:
                    return "-";
                case 16:
                    return "+";
                default:
                    return super.toString().replaceAll("^(MOUSE_)|(KEY_)|(GAMEPAD_)", "").replace("KP_", "NUMPAD_").replace("_", " ");
            }
        }
    
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        public static Binding fromString(String name) {
            char c;
            switch (name.hashCode()) {
                case -96200823:
                    if (name.equals("KEY_ALT")) {
                        c = 2;
                        break;
                    }
                    c = 65535;
                    break;
                case 1312809067:
                    if (name.equals("KEY_CTRL")) {
                        c = 0;
                        break;
                    }
                    c = 65535;
                    break;
                case 2056785506:
                    if (name.equals("KEY_SHIFT")) {
                        c = 1;
                        break;
                    }
                    c = 65535;
                    break;
                default:
                    c = 65535;
                    break;
            }
            switch (c) {
                case 0:
                    return KEY_CTRL_L;
                case 1:
                    return KEY_SHIFT_L;
                case 2:
                    return KEY_ALT_L;
                default:
                    return valueOf(name);
            }
        }
    
        public Pointer.Button getPointerButton() {
            switch (AnonymousClass1.$SwitchMap$com$winlator$inputcontrols$Binding[ordinal()]) {
                case 17:
                    return Pointer.Button.BUTTON_LEFT;
                case 18:
                    return Pointer.Button.BUTTON_MIDDLE;
                case 19:
                    return Pointer.Button.BUTTON_RIGHT;
                case 20:
                    return Pointer.Button.BUTTON_SCROLL_UP;
                case 21:
                    return Pointer.Button.BUTTON_SCROLL_DOWN;
                default:
                    return null;
            }
        }
    
        public boolean isMouse() {
            return name().startsWith("MOUSE_");
        }
    
        public boolean isKeyboard() {
            return name().startsWith("KEY_") || this == NONE;
        }
    
        public boolean isGamepad() {
            return name().startsWith("GAMEPAD_");
        }
    
        public boolean isMouseMove() {
            return this == MOUSE_MOVE_UP || this == MOUSE_MOVE_RIGHT || this == MOUSE_MOVE_DOWN || this == MOUSE_MOVE_LEFT;
        }
    
        public static String[] mouseBindingLabels() {
            ArrayList<String> names = new ArrayList<>();
            for (Binding binding : values()) {
                if (binding.isMouse()) {
                    names.add(binding.toString());
                }
            }
            return (String[]) names.toArray(new String[0]);
        }
    
        public static String[] keyboardBindingLabels() {
            ArrayList<String> labels = new ArrayList<>();
            for (Binding binding : values()) {
                if (binding.isKeyboard()) {
                    labels.add(binding.toString());
                }
            }
            return (String[]) labels.toArray(new String[0]);
        }
    
        public static String[] gamepadBindingLabels() {
            ArrayList<String> names = new ArrayList<>();
            for (Binding binding : values()) {
                if (binding.isGamepad()) {
                    names.add(binding.toString());
                }
            }
            return (String[]) names.toArray(new String[0]);
        }
    
        public static Binding[] mouseBindingValues() {
            ArrayList<Binding> labels = new ArrayList<>();
            for (Binding binding : values()) {
                if (binding.isMouse()) {
                    labels.add(binding);
                }
            }
            return (Binding[]) labels.toArray(new Binding[0]);
        }
    
        public static Binding[] keyboardBindingValues() {
            ArrayList<Binding> values = new ArrayList<>();
            for (Binding binding : values()) {
                if (binding.isKeyboard()) {
                    values.add(binding);
                }
            }
            return (Binding[]) values.toArray(new Binding[0]);
        }
    
        public static Binding[] gamepadBindingValues() {
            ArrayList<Binding> labels = new ArrayList<>();
            for (Binding binding : values()) {
                if (binding.isGamepad()) {
                    labels.add(binding);
                }
            }
            return (Binding[]) labels.toArray(new Binding[0]);
        }
    }
  + app/src/main/java/com/winlator/inputcontrols/ControlElement.java
    package com.winlator.inputcontrols;
    
    import android.graphics.Bitmap;
    import android.graphics.Canvas;
    import android.graphics.Paint;
    import android.graphics.Path;
    import android.graphics.PointF;
    import android.graphics.Rect;
    import androidx.core.graphics.ColorUtils;
    import com.winlator.core.CubicBezierInterpolator;
    import com.winlator.math.Mathf;
    import com.winlator.widget.InputControlsView;
    import com.winlator.widget.TouchpadView;
    import java.util.Arrays;
    import org.json.JSONArray;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public class ControlElement {
        private Binding[] bindings;
        private final Rect boundingBox;
        private boolean boundingBoxNeedsUpdate;
        private int currentPointerId;
        private PointF currentPosition;
        private byte iconId;
        private final InputControlsView inputControlsView;
        private CubicBezierInterpolator interpolator;
        private byte orientation;
        private Path path;
        private boolean pressed;
        private Range range;
        private float scale;
        private RangeScroller scroller;
        private boolean selected;
        private boolean[] states;
        private String text;
        private boolean toggleSwitch;
        private Object touchTime;
        private short x;
        private short y;
        private Type type = Type.BUTTON;
        private Shape shape = Shape.CIRCLE;
    
        public enum Type {
            BUTTON,
            D_PAD,
            RANGE_BUTTON,
            STICK,
            TRACKPAD;
    
            public static String[] names() {
                Type[] types = values();
                String[] names = new String[types.length];
                for (int i = 0; i < types.length; i++) {
                    names[i] = types[i].name().replace("_", "-");
                }
                return names;
            }
        }
    
        public enum Shape {
            CIRCLE,
            RECT,
            ROUND_RECT,
            SQUARE;
    
            public static String[] names() {
                Shape[] shapes = values();
                String[] names = new String[shapes.length];
                for (int i = 0; i < shapes.length; i++) {
                    names[i] = shapes[i].name().replace("_", " ");
                }
                return names;
            }
        }
    
        public enum Range {
            FROM_A_TO_Z(26),
            FROM_0_TO_9(10),
            FROM_F1_TO_F12(12),
            FROM_NP0_TO_NP9(10);
    
            public final byte max;
    
            Range(int max) {
                this.max = (byte) max;
            }
    
            public static String[] names() {
                Range[] ranges = values();
                String[] names = new String[ranges.length];
                for (int i = 0; i < ranges.length; i++) {
                    names[i] = ranges[i].name().replace("_", " ");
                }
                return names;
            }
        }
    
        public ControlElement(InputControlsView inputControlsView) {
            Binding binding = Binding.NONE;
            this.bindings = new Binding[]{binding, binding, binding, binding};
            this.scale = 1.0f;
            this.selected = false;
            this.pressed = false;
            this.toggleSwitch = false;
            this.currentPointerId = -1;
            this.boundingBox = new Rect();
            this.states = new boolean[4];
            this.boundingBoxNeedsUpdate = true;
            this.text = "";
            this.inputControlsView = inputControlsView;
        }
    
        private void reset() {
            this.bindings = new Binding[4];
            setBinding(Binding.NONE);
            this.scroller = null;
            Type type = this.type;
            if (type == Type.D_PAD || type == Type.STICK) {
                Binding[] bindingArr = this.bindings;
                bindingArr[0] = Binding.KEY_W;
                bindingArr[1] = Binding.KEY_D;
                bindingArr[2] = Binding.KEY_S;
                bindingArr[3] = Binding.KEY_A;
            } else if (type == Type.TRACKPAD) {
                Binding[] bindingArr2 = this.bindings;
                bindingArr2[0] = Binding.MOUSE_MOVE_UP;
                bindingArr2[1] = Binding.MOUSE_MOVE_RIGHT;
                bindingArr2[2] = Binding.MOUSE_MOVE_DOWN;
                bindingArr2[3] = Binding.MOUSE_MOVE_LEFT;
            } else if (type == Type.RANGE_BUTTON) {
                this.scroller = new RangeScroller(this.inputControlsView, this);
            }
            this.text = "";
            this.iconId = (byte) 0;
            this.range = null;
            this.boundingBoxNeedsUpdate = true;
        }
    
        public Type getType() {
            return this.type;
        }
    
        public void setType(Type type) {
            this.type = type;
            reset();
        }
    
        public byte getBindingCount() {
            return (byte) this.bindings.length;
        }
    
        public byte getFirstBindingIndex() {
            byte i = 0;
            while (true) {
                Binding[] bindingArr = this.bindings;
                if (i >= bindingArr.length) {
                    return (byte) 0;
                }
                if (bindingArr[i] != Binding.NONE) {
                    return i;
                }
                i = (byte) (i + 1);
            }
        }
    
        public void setBindingCount(int bindingCount) {
            this.bindings = new Binding[bindingCount];
            setBinding(Binding.NONE);
            this.states = new boolean[bindingCount];
            this.boundingBoxNeedsUpdate = true;
        }
    
        public Shape getShape() {
            return this.shape;
        }
    
        public void setShape(Shape shape) {
            this.shape = shape;
            this.boundingBoxNeedsUpdate = true;
        }
    
        public Range getRange() {
            Range range = this.range;
            return range != null ? range : Range.FROM_A_TO_Z;
        }
    
        public void setRange(Range range) {
            this.range = range;
        }
    
        public byte getOrientation() {
            return this.orientation;
        }
    
        public void setOrientation(byte orientation) {
            this.orientation = orientation;
            this.boundingBoxNeedsUpdate = true;
        }
    
        public boolean isToggleSwitch() {
            return this.toggleSwitch;
        }
    
        public void setToggleSwitch(boolean toggleSwitch) {
            this.toggleSwitch = toggleSwitch;
        }
    
        public Binding getBindingAt(int index) {
            Binding[] bindingArr = this.bindings;
            return index < bindingArr.length ? bindingArr[index] : Binding.NONE;
        }
    
        public void setBindingAt(int index, Binding binding) {
            Binding[] bindingArr = this.bindings;
            if (index >= bindingArr.length) {
                int oldLength = bindingArr.length;
                Binding[] bindingArr2 = (Binding[]) Arrays.copyOf(bindingArr, index + 1);
                this.bindings = bindingArr2;
                Arrays.fill(bindingArr2, oldLength - 1, bindingArr2.length, Binding.NONE);
                this.states = new boolean[this.bindings.length];
                this.boundingBoxNeedsUpdate = true;
            }
            this.bindings[index] = binding;
        }
    
        public void setBinding(Binding binding) {
            Arrays.fill(this.bindings, binding);
        }
    
        public float getScale() {
            return this.scale;
        }
    
        public void setScale(float scale) {
            this.scale = scale;
            this.boundingBoxNeedsUpdate = true;
        }
    
        public short getX() {
            return this.x;
        }
    
        public void setX(int x) {
            this.x = (short) x;
            this.boundingBoxNeedsUpdate = true;
        }
    
        public short getY() {
            return this.y;
        }
    
        public void setY(int y) {
            this.y = (short) y;
            this.boundingBoxNeedsUpdate = true;
        }
    
        public void setSelected(boolean selected) {
            this.selected = selected;
        }
    
        public String getText() {
            return this.text;
        }
    
        public void setText(String text) {
            this.text = text != null ? text : "";
        }
    
        public byte getIconId() {
            return this.iconId;
        }
    
        public void setIconId(int iconId) {
            this.iconId = (byte) iconId;
        }
    
        public Rect getBoundingBox() {
            if (this.boundingBoxNeedsUpdate) {
                computeBoundingBox();
            }
            return this.boundingBox;
        }
    
        private Rect computeBoundingBox() {
            int snappingSize = this.inputControlsView.getSnappingSize();
            int halfWidth = 0;
            int halfHeight = 0;
            switch (AnonymousClass1.$SwitchMap$com$winlator$inputcontrols$ControlElement$Type[this.type.ordinal()]) {
                case 1:
                    switch (AnonymousClass1.$SwitchMap$com$winlator$inputcontrols$ControlElement$Shape[this.shape.ordinal()]) {
                        case 1:
                        case 2:
                            halfWidth = snappingSize * 4;
                            halfHeight = snappingSize * 2;
                            break;
                        case 3:
                            halfWidth = (int) (snappingSize * 2.5f);
                            halfHeight = (int) (snappingSize * 2.5f);
                            break;
                        case 4:
                            halfWidth = snappingSize * 3;
                            halfHeight = snappingSize * 3;
                            break;
                    }
                case 2:
                    halfWidth = snappingSize * 7;
                    halfHeight = snappingSize * 7;
                    break;
                case 3:
                case 4:
                    halfWidth = snappingSize * 6;
                    halfHeight = snappingSize * 6;
                    break;
                case 5:
                    halfWidth = snappingSize * ((this.bindings.length * 4) / 2);
                    halfHeight = snappingSize * 2;
                    if (this.orientation == 1) {
                        halfWidth = halfHeight;
                        halfHeight = halfWidth;
                        break;
                    }
                    break;
            }
            float f = this.scale;
            int halfWidth2 = (int) (halfWidth * f);
            int halfHeight2 = (int) (halfHeight * f);
            Rect rect = this.boundingBox;
            short s = this.x;
            short s2 = this.y;
            rect.set(s - halfWidth2, s2 - halfHeight2, s + halfWidth2, s2 + halfHeight2);
            this.boundingBoxNeedsUpdate = false;
            this.path = null;
            return this.boundingBox;
        }
    
        private String getBindingTextAt(int index) {
            Binding binding = getBindingAt(index);
            String text = binding.toString().replace("NUMPAD ", "NP").replace("BUTTON ", "");
            if (text.length() > 7) {
                String[] parts = text.split(" ");
                StringBuilder sb = new StringBuilder();
                for (String part : parts) {
                    sb.append(part.charAt(0));
                }
                StringBuilder sb2 = new StringBuilder();
                sb2.append(binding.isMouse() ? "M" : "");
                sb2.append((Object) sb);
                return sb2.toString();
            }
            return text;
        }
    
        private String getDisplayText() {
            String str = this.text;
            if (str != null && !str.isEmpty()) {
                return this.text;
            }
            if (this.type == Type.BUTTON) {
                StringBuilder sb = new StringBuilder();
                byte i = 0;
                while (true) {
                    Binding[] bindingArr = this.bindings;
                    if (i >= bindingArr.length) {
                        break;
                    }
                    if (bindingArr[i] != Binding.NONE) {
                        if (sb.length() > 0) {
                            sb.append("+");
                        }
                        sb.append(getBindingTextAt(i));
                    }
                    i = (byte) (i + 1);
                }
                if (sb.length() > 0) {
                    return sb.toString();
                }
            }
            return getBindingTextAt(0);
        }
    
        private static float getTextSizeForWidth(Paint paint, String text, float desiredWidth) {
            paint.setTextSize(48.0f);
            return (48.0f * desiredWidth) / paint.measureText(text);
        }
    
        /* renamed from: com.winlator.inputcontrols.ControlElement$1, reason: invalid class name */
        static /* synthetic */ class AnonymousClass1 {
            static final /* synthetic */ int[] $SwitchMap$com$winlator$inputcontrols$ControlElement$Range;
            static final /* synthetic */ int[] $SwitchMap$com$winlator$inputcontrols$ControlElement$Shape;
            static final /* synthetic */ int[] $SwitchMap$com$winlator$inputcontrols$ControlElement$Type;
    
            static {
                int[] iArr = new int[Range.values().length];
                $SwitchMap$com$winlator$inputcontrols$ControlElement$Range = iArr;
                try {
                    iArr[Range.FROM_A_TO_Z.ordinal()] = 1;
                } catch (NoSuchFieldError e) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$ControlElement$Range[Range.FROM_0_TO_9.ordinal()] = 2;
                } catch (NoSuchFieldError e2) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$ControlElement$Range[Range.FROM_F1_TO_F12.ordinal()] = 3;
                } catch (NoSuchFieldError e3) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$ControlElement$Range[Range.FROM_NP0_TO_NP9.ordinal()] = 4;
                } catch (NoSuchFieldError e4) {
                }
                int[] iArr2 = new int[Type.values().length];
                $SwitchMap$com$winlator$inputcontrols$ControlElement$Type = iArr2;
                try {
                    iArr2[Type.BUTTON.ordinal()] = 1;
                } catch (NoSuchFieldError e5) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$ControlElement$Type[Type.D_PAD.ordinal()] = 2;
                } catch (NoSuchFieldError e6) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$ControlElement$Type[Type.TRACKPAD.ordinal()] = 3;
                } catch (NoSuchFieldError e7) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$ControlElement$Type[Type.STICK.ordinal()] = 4;
                } catch (NoSuchFieldError e8) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$ControlElement$Type[Type.RANGE_BUTTON.ordinal()] = 5;
                } catch (NoSuchFieldError e9) {
                }
                int[] iArr3 = new int[Shape.values().length];
                $SwitchMap$com$winlator$inputcontrols$ControlElement$Shape = iArr3;
                try {
                    iArr3[Shape.RECT.ordinal()] = 1;
                } catch (NoSuchFieldError e10) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$ControlElement$Shape[Shape.ROUND_RECT.ordinal()] = 2;
                } catch (NoSuchFieldError e11) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$ControlElement$Shape[Shape.SQUARE.ordinal()] = 3;
                } catch (NoSuchFieldError e12) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$ControlElement$Shape[Shape.CIRCLE.ordinal()] = 4;
                } catch (NoSuchFieldError e13) {
                }
            }
        }
    
        private static Binding getRangeBindingForIndex(Range range, int index) {
            switch (AnonymousClass1.$SwitchMap$com$winlator$inputcontrols$ControlElement$Range[range.ordinal()]) {
                case 1:
                    return Binding.valueOf("KEY_" + ((char) (index + 65)));
                case 2:
                    return Binding.valueOf("KEY_" + ((index + 1) % 10));
                case 3:
                    return Binding.valueOf("KEY_F" + (index + 1));
                case 4:
                    return Binding.valueOf("KEY_KP_" + ((index + 1) % 10));
                default:
                    return Binding.NONE;
            }
        }
    
        private static String getRangeTextForIndex(Range range, int index) {
            switch (AnonymousClass1.$SwitchMap$com$winlator$inputcontrols$ControlElement$Range[range.ordinal()]) {
                case 1:
                    return String.valueOf((char) (index + 65));
                case 2:
                    return String.valueOf((index + 1) % 10);
                case 3:
                    return "F" + (index + 1);
                case 4:
                    return "NP" + ((index + 1) % 10);
                default:
                    return "";
            }
        }
    
        public void draw(Canvas canvas) {
            Binding selectedBinding;
            boolean z;
            Rect boundingBox;
            int lightColor;
            int oldColor;
            Paint paint;
            float minTextSize;
            Range range;
            Paint paint2;
            String text;
            Range range2;
            Rect boundingBox2;
            float strokeWidth;
            int oldColor2;
            Binding selectedBinding2;
            int snappingSize;
            int lightColor2;
            Paint paint3;
            float minTextSize2;
            Paint paint4;
            Paint paint5;
            String text2;
            int snappingSize2 = this.inputControlsView.getSnappingSize();
            Paint paint6 = this.inputControlsView.getPaint();
            int lightColor3 = this.inputControlsView.getLightColor();
            paint6.setColor(this.selected ? this.inputControlsView.getHighlightColor() : lightColor3);
            paint6.setStyle(Paint.Style.STROKE);
            float strokeWidth2 = snappingSize2 * 0.25f;
            paint6.setStrokeWidth(strokeWidth2);
            Rect boundingBox3 = getBoundingBox();
            switch (AnonymousClass1.$SwitchMap$com$winlator$inputcontrols$ControlElement$Type[this.type.ordinal()]) {
                case 1:
                    if (this.pressed) {
                        paint6.setStyle(Paint.Style.FILL);
                    }
                    float cx = boundingBox3.centerX();
                    float cy = boundingBox3.centerY();
                    switch (AnonymousClass1.$SwitchMap$com$winlator$inputcontrols$ControlElement$Shape[this.shape.ordinal()]) {
                        case 1:
                            canvas.drawRect(boundingBox3, paint6);
                            break;
                        case 2:
                            float radius = boundingBox3.height() * 0.5f;
                            canvas.drawRoundRect(boundingBox3.left, boundingBox3.top, boundingBox3.right, boundingBox3.bottom, radius, radius, paint6);
                            break;
                        case 3:
                            float radius2 = snappingSize2 * 0.75f * this.scale;
                            canvas.drawRoundRect(boundingBox3.left, boundingBox3.top, boundingBox3.right, boundingBox3.bottom, radius2, radius2, paint6);
                            break;
                        case 4:
                            canvas.drawCircle(cx, cy, boundingBox3.width() * 0.5f, paint6);
                            break;
                    }
                    if (this.iconId > 0) {
                        drawIcon(canvas, cx, cy, boundingBox3.width(), boundingBox3.height(), this.iconId);
                        break;
                    } else {
                        String text3 = getDisplayText();
                        paint6.setTextSize(Math.min(getTextSizeForWidth(paint6, text3, boundingBox3.width() - (strokeWidth2 * 2.0f)), snappingSize2 * 2 * this.scale));
                        paint6.setTextAlign(Paint.Align.CENTER);
                        paint6.setStyle(Paint.Style.FILL);
                        paint6.setColor(this.pressed ? this.inputControlsView.getDarkColor() : lightColor3);
                        canvas.drawText(text3, this.x, this.y - ((paint6.descent() + paint6.ascent()) * 0.5f), paint6);
                        break;
                    }
                case 2:
                    float cx2 = boundingBox3.centerX();
                    float cy2 = boundingBox3.centerY();
                    float f = this.scale;
                    float offsetX = snappingSize2 * 2 * f;
                    float offsetY = snappingSize2 * 3 * f;
                    float start = snappingSize2 * f;
                    if (this.path == null) {
                        Path path = new Path();
                        this.path = path;
                        path.moveTo(cx2, cy2 - start);
                        this.path.lineTo(cx2 - offsetX, cy2 - offsetY);
                        this.path.lineTo(cx2 - offsetX, boundingBox3.top);
                        this.path.lineTo(cx2 + offsetX, boundingBox3.top);
                        this.path.lineTo(cx2 + offsetX, cy2 - offsetY);
                        this.path.close();
                        this.path.moveTo(cx2 - start, cy2);
                        this.path.lineTo(cx2 - offsetY, cy2 - offsetX);
                        this.path.lineTo(boundingBox3.left, cy2 - offsetX);
                        this.path.lineTo(boundingBox3.left, cy2 + offsetX);
                        this.path.lineTo(cx2 - offsetY, cy2 + offsetX);
                        this.path.close();
                        this.path.moveTo(cx2, cy2 + start);
                        this.path.lineTo(cx2 - offsetX, cy2 + offsetY);
                        this.path.lineTo(cx2 - offsetX, boundingBox3.bottom);
                        this.path.lineTo(cx2 + offsetX, boundingBox3.bottom);
                        this.path.lineTo(cx2 + offsetX, cy2 + offsetY);
                        this.path.close();
                        this.path.moveTo(cx2 + start, cy2);
                        this.path.lineTo(cx2 + offsetY, cy2 - offsetX);
                        this.path.lineTo(boundingBox3.right, cy2 - offsetX);
                        this.path.lineTo(boundingBox3.right, cy2 + offsetX);
                        this.path.lineTo(cx2 + offsetY, cy2 + offsetX);
                        this.path.close();
                    }
                    canvas.drawPath(this.path, paint6);
                    break;
                case 3:
                    float radius3 = boundingBox3.height() * 0.15f;
                    canvas.drawRoundRect(boundingBox3.left, boundingBox3.top, boundingBox3.right, boundingBox3.bottom, radius3, radius3, paint6);
                    float offset = strokeWidth2 * 2.5f;
                    float innerStrokeWidth = strokeWidth2 * 2.0f;
                    float innerHeight = boundingBox3.height() - (2.0f * offset);
                    float radius4 = ((innerHeight / boundingBox3.height()) * radius3) - ((innerStrokeWidth * 0.5f) + (strokeWidth2 * 0.5f));
                    paint6.setStrokeWidth(innerStrokeWidth);
                    canvas.drawRoundRect(boundingBox3.left + offset, boundingBox3.top + offset, boundingBox3.right - offset, boundingBox3.bottom - offset, radius4, radius4, paint6);
                    break;
                case 4:
                    int cx3 = boundingBox3.centerX();
                    int cy3 = boundingBox3.centerY();
                    int oldColor3 = paint6.getColor();
                    canvas.drawCircle(cx3, cy3, boundingBox3.height() * 0.5f, paint6);
                    PointF pointF = this.currentPosition;
                    float thumbstickX = pointF != null ? pointF.x : cx3;
                    float thumbstickY = pointF != null ? pointF.y : cy3;
                    short thumbRadius = (short) (snappingSize2 * 3.5f * this.scale);
                    paint6.setStyle(Paint.Style.FILL);
                    paint6.setColor(ColorUtils.setAlphaComponent(lightColor3, 50));
                    canvas.drawCircle(thumbstickX, thumbstickY, thumbRadius, paint6);
                    paint6.setStyle(Paint.Style.STROKE);
                    paint6.setColor(oldColor3);
                    canvas.drawCircle(thumbstickX, thumbstickY, thumbRadius + (strokeWidth2 * 0.5f), paint6);
                    break;
                case 5:
                    Range range3 = getRange();
                    int oldColor4 = paint6.getColor();
                    int darkColor = this.inputControlsView.getDarkColor();
                    float radius5 = snappingSize2 * 0.75f * this.scale;
                    float elementSize = this.scroller.getElementSize();
                    float minTextSize3 = snappingSize2 * 2 * this.scale;
                    float scrollOffset = this.scroller.getScrollOffset();
                    byte[] rangeIndex = this.scroller.getRangeIndex();
                    Binding selectedBinding3 = this.scroller.getBinding();
                    boolean wasPressed = false;
                    if (this.orientation == 0) {
                        int i = boundingBox3.top;
                        float lineTop = i + (strokeWidth2 * 0.5f);
                        int i2 = boundingBox3.bottom;
                        float lineBottom = i2 - (strokeWidth2 * 0.5f);
                        float startX = boundingBox3.left;
                        int snappingSize3 = snappingSize2;
                        Binding selectedBinding4 = selectedBinding3;
                        float minTextSize4 = minTextSize3;
                        int lightColor4 = lightColor3;
                        int oldColor5 = oldColor4;
                        canvas.drawRoundRect(startX, i, boundingBox3.right, i2, radius5, radius5, paint6);
                        if (this.path == null) {
                            Path path2 = new Path();
                            this.path = path2;
                            path2.addRoundRect(startX, boundingBox3.top, boundingBox3.right, boundingBox3.bottom, radius5, radius5, Path.Direction.CW);
                        }
                        canvas.save();
                        canvas.clipPath(this.path);
                        float startX2 = startX - (scrollOffset % elementSize);
                        byte i3 = rangeIndex[0];
                        while (i3 < rangeIndex[1]) {
                            int index = i3 % range3.max;
                            paint6.setStyle(Paint.Style.STROKE);
                            paint6.setColor(oldColor5);
                            boolean pressed = this.pressed && selectedBinding4 == getRangeBindingForIndex(range3, index);
                            if (startX2 <= boundingBox3.left || startX2 >= boundingBox3.right || pressed || wasPressed) {
                                range2 = range3;
                                boundingBox2 = boundingBox3;
                                strokeWidth = strokeWidth2;
                                oldColor2 = oldColor5;
                                selectedBinding2 = selectedBinding4;
                                snappingSize = snappingSize3;
                                lightColor2 = lightColor4;
                                paint3 = paint6;
                            } else {
                                range2 = range3;
                                boundingBox2 = boundingBox3;
                                strokeWidth = strokeWidth2;
                                oldColor2 = oldColor5;
                                lightColor2 = lightColor4;
                                paint3 = paint6;
                                selectedBinding2 = selectedBinding4;
                                snappingSize = snappingSize3;
                                canvas.drawLine(startX2, lineTop, startX2, lineBottom, paint3);
                            }
                            String text4 = getRangeTextForIndex(range2, index);
                            if (startX2 >= boundingBox2.right || startX2 + elementSize <= boundingBox2.left) {
                                minTextSize2 = minTextSize4;
                                paint4 = paint3;
                            } else {
                                Paint paint7 = paint3;
                                paint7.setStyle(Paint.Style.FILL);
                                if (!pressed) {
                                    paint5 = paint7;
                                    text2 = text4;
                                } else {
                                    paint7.setColor(lightColor2);
                                    paint5 = paint7;
                                    text2 = text4;
                                    canvas.drawRect(startX2, lineTop, startX2 + elementSize, lineBottom, paint5);
                                }
                                paint4 = paint5;
                                paint4.setColor(pressed ? darkColor : lightColor2);
                                minTextSize2 = minTextSize4;
                                paint4.setTextSize(Math.min(getTextSizeForWidth(paint4, text2, elementSize - (strokeWidth * 2.0f)), minTextSize2));
                                paint4.setTextAlign(Paint.Align.CENTER);
                                canvas.drawText(text2, (elementSize * 0.5f) + startX2, this.y - ((paint4.descent() + paint4.ascent()) * 0.5f), paint4);
                            }
                            startX2 += elementSize;
                            wasPressed = pressed;
                            i3 = (byte) (i3 + 1);
                            minTextSize4 = minTextSize2;
                            paint6 = paint4;
                            oldColor5 = oldColor2;
                            lightColor4 = lightColor2;
                            boundingBox3 = boundingBox2;
                            range3 = range2;
                            strokeWidth2 = strokeWidth;
                            snappingSize3 = snappingSize;
                            selectedBinding4 = selectedBinding2;
                        }
                        Paint paint8 = paint6;
                        paint8.setStyle(Paint.Style.STROKE);
                        paint8.setColor(oldColor5);
                        canvas.restore();
                        break;
                    } else {
                        Binding selectedBinding5 = selectedBinding3;
                        Paint paint9 = paint6;
                        int i4 = boundingBox3.left;
                        float lineLeft = i4 + (strokeWidth2 * 0.5f);
                        int i5 = boundingBox3.right;
                        float lineRight = i5 - (strokeWidth2 * 0.5f);
                        float startY = boundingBox3.top;
                        float f2 = i4;
                        float f3 = i5;
                        float f4 = boundingBox3.bottom;
                        int oldColor6 = oldColor4;
                        int lightColor5 = lightColor3;
                        Rect boundingBox4 = boundingBox3;
                        float minTextSize5 = minTextSize3;
                        Range range4 = range3;
                        canvas.drawRoundRect(f2, startY, f3, f4, radius5, radius5, paint9);
                        if (this.path == null) {
                            Path path3 = new Path();
                            this.path = path3;
                            path3.addRoundRect(boundingBox4.left, startY, boundingBox4.right, boundingBox4.bottom, radius5, radius5, Path.Direction.CW);
                        }
                        canvas.save();
                        canvas.clipPath(this.path);
                        byte i6 = rangeIndex[0];
                        float startY2 = startY - (scrollOffset % elementSize);
                        while (i6 < rangeIndex[1]) {
                            int index2 = i6 % range4.max;
                            paint9.setStyle(Paint.Style.STROKE);
                            paint9.setColor(oldColor6);
                            if (this.pressed) {
                                selectedBinding = selectedBinding5;
                                if (selectedBinding == getRangeBindingForIndex(range4, index2)) {
                                    z = true;
                                    boolean pressed2 = z;
                                    if (startY2 > boundingBox4.top || startY2 >= boundingBox4.bottom || pressed2 || wasPressed) {
                                        boundingBox = boundingBox4;
                                        lightColor = lightColor5;
                                        oldColor = oldColor6;
                                        paint = paint9;
                                        selectedBinding5 = selectedBinding;
                                        minTextSize = minTextSize5;
                                        range = range4;
                                    } else {
                                        boundingBox = boundingBox4;
                                        lightColor = lightColor5;
                                        selectedBinding5 = selectedBinding;
                                        oldColor = oldColor6;
                                        minTextSize = minTextSize5;
                                        range = range4;
                                        paint = paint9;
                                        canvas.drawLine(lineLeft, startY2, lineRight, startY2, paint9);
                                    }
                                    String text5 = getRangeTextForIndex(range, index2);
                                    if (startY2 < boundingBox.bottom || startY2 + elementSize <= boundingBox.top) {
                                        paint9 = paint;
                                    } else {
                                        Paint paint10 = paint;
                                        paint10.setStyle(Paint.Style.FILL);
                                        if (!pressed2) {
                                            paint2 = paint10;
                                            text = text5;
                                        } else {
                                            paint10.setColor(lightColor);
                                            paint2 = paint10;
                                            text = text5;
                                            canvas.drawRect(lineLeft, startY2, lineRight, startY2 + elementSize, paint2);
                                        }
                                        paint9 = paint2;
                                        paint9.setColor(pressed2 ? darkColor : lightColor);
                                        paint9.setTextSize(Math.min(getTextSizeForWidth(paint9, text, boundingBox.width() - (strokeWidth2 * 2.0f)), minTextSize));
                                        paint9.setTextAlign(Paint.Align.CENTER);
                                        canvas.drawText(text, this.x, ((elementSize * 0.5f) + startY2) - ((paint9.descent() + paint9.ascent()) * 0.5f), paint9);
                                    }
                                    startY2 += elementSize;
                                    wasPressed = pressed2;
                                    i6 = (byte) (i6 + 1);
                                    range4 = range;
                                    minTextSize5 = minTextSize;
                                    lightColor5 = lightColor;
                                    boundingBox4 = boundingBox;
                                    oldColor6 = oldColor;
                                }
                            } else {
                                selectedBinding = selectedBinding5;
                            }
                            z = false;
                            boolean pressed22 = z;
                            if (startY2 > boundingBox4.top) {
                            }
                            boundingBox = boundingBox4;
                            lightColor = lightColor5;
                            oldColor = oldColor6;
                            paint = paint9;
                            selectedBinding5 = selectedBinding;
                            minTextSize = minTextSize5;
                            range = range4;
                            String text52 = getRangeTextForIndex(range, index2);
                            if (startY2 < boundingBox.bottom) {
                            }
                            paint9 = paint;
                            startY2 += elementSize;
                            wasPressed = pressed22;
                            i6 = (byte) (i6 + 1);
                            range4 = range;
                            minTextSize5 = minTextSize;
                            lightColor5 = lightColor;
                            boundingBox4 = boundingBox;
                            oldColor6 = oldColor;
                        }
                        paint9.setStyle(Paint.Style.STROKE);
                        paint9.setColor(oldColor6);
                        canvas.restore();
                        break;
                    }
                    break;
            }
        }
    
        private void drawIcon(Canvas canvas, float cx, float cy, float width, float height, int iconId) {
            Paint paint = this.inputControlsView.getPaint();
            Bitmap icon = this.inputControlsView.getIcon((byte) iconId);
            paint.setColorFilter(this.pressed ? this.inputControlsView.getDarkColorFilter() : this.inputControlsView.getLightColorFilter());
            float snappingSize = this.inputControlsView.getSnappingSize();
            Shape shape = this.shape;
            int margin = (int) (snappingSize * ((shape == Shape.CIRCLE || shape == Shape.SQUARE) ? 2.0f : 1.0f) * this.scale);
            int halfSize = (int) ((Math.min(width, height) - margin) * 0.5f);
            Rect srcRect = new Rect(0, 0, icon.getWidth(), icon.getHeight());
            Rect dstRect = new Rect((int) (cx - halfSize), (int) (cy - halfSize), (int) (halfSize + cx), (int) (halfSize + cy));
            canvas.drawBitmap(icon, srcRect, dstRect, paint);
            paint.setColorFilter(null);
        }
    
        public JSONObject toJSONObject() {
            Range range;
            try {
                JSONObject elementJSONObject = new JSONObject();
                elementJSONObject.put("type", this.type.name());
                elementJSONObject.put("shape", this.shape.name());
                JSONArray bindingsJSONArray = new JSONArray();
                for (Binding binding : this.bindings) {
                    bindingsJSONArray.put(binding.name());
                }
                elementJSONObject.put("bindings", bindingsJSONArray);
                elementJSONObject.put("scale", Float.valueOf(this.scale));
                elementJSONObject.put("x", this.x / this.inputControlsView.getMaxWidth());
                elementJSONObject.put("y", this.y / this.inputControlsView.getMaxHeight());
                elementJSONObject.put("toggleSwitch", this.toggleSwitch);
                elementJSONObject.put("text", this.text);
                elementJSONObject.put("iconId", this.iconId);
                if (this.type == Type.RANGE_BUTTON && (range = this.range) != null) {
                    elementJSONObject.put("range", range.name());
                    int i = this.orientation;
                    if (i != 0) {
                        elementJSONObject.put("orientation", i);
                    }
                }
                return elementJSONObject;
            } catch (JSONException e) {
                return null;
            }
        }
    
        public boolean containsPoint(float x, float y) {
            return getBoundingBox().contains((int) (x + 0.5f), (int) (0.5f + y));
        }
    
        private boolean isKeepButtonPressedAfterMinTime() {
            Binding binding = getBindingAt(0);
            if (this.toggleSwitch) {
                return false;
            }
            return binding == Binding.GAMEPAD_BUTTON_L3 || binding == Binding.GAMEPAD_BUTTON_R3;
        }
    
        public boolean handleTouchDown(int pointerId, float x, float y) {
            if (this.currentPointerId == -1 && containsPoint(x, y)) {
                this.currentPointerId = pointerId;
                Type type = this.type;
                if (type == Type.BUTTON) {
                    if (isKeepButtonPressedAfterMinTime()) {
                        this.touchTime = Long.valueOf(System.currentTimeMillis());
                    }
                    if (!this.toggleSwitch || !this.selected) {
                        this.inputControlsView.handleInputEvent(this.bindings, true);
                    }
                    this.pressed = true;
                    this.inputControlsView.invalidate();
                    return true;
                }
                if (type == Type.RANGE_BUTTON) {
                    this.scroller.handleTouchDown(x, y);
                    this.pressed = true;
                    this.inputControlsView.invalidate();
                    return true;
                }
                if (type == Type.TRACKPAD) {
                    if (this.currentPosition == null) {
                        this.currentPosition = new PointF();
                    }
                    this.currentPosition.set(x, y);
                }
                return handleTouchMove(pointerId, x, y);
            }
            return false;
        }
    
        public boolean handleTouchMove(int pointerId, float x, float y) {
            Type type;
            float localY;
            float offsetX;
            boolean state;
            Rect boundingBox;
            float radius;
            int i = this.currentPointerId;
            if (pointerId == i && ((type = this.type) == Type.D_PAD || type == Type.STICK || type == Type.TRACKPAD)) {
                Rect boundingBox2 = getBoundingBox();
                float radius2 = boundingBox2.width() * 0.5f;
                TouchpadView touchpadView = this.inputControlsView.getTouchpadView();
                Type type2 = this.type;
                Type type3 = Type.TRACKPAD;
                if (type2 == type3) {
                    if (this.currentPosition == null) {
                        this.currentPosition = new PointF();
                    }
                    PointF pointF = this.currentPosition;
                    float[] deltaPoint = touchpadView.computeDeltaPoint(pointF.x, pointF.y, x, y);
                    localY = deltaPoint[0];
                    offsetX = deltaPoint[1];
                    this.currentPosition.set(x, y);
                } else {
                    float localX = x - boundingBox2.left;
                    float localY2 = y - boundingBox2.top;
                    float offsetX2 = localX - radius2;
                    float offsetY = localY2 - radius2;
                    float distance = Mathf.lengthSq(radius2 - localX, radius2 - localY2);
                    if (distance > radius2 * radius2) {
                        float angle = (float) Math.atan2(offsetY, offsetX2);
                        radius2 = radius2;
                        offsetX2 = (float) (Math.cos(angle) * radius2);
                        offsetY = (float) (Math.sin(angle) * radius2);
                    }
                    float deltaX = Mathf.clamp(offsetX2 / radius2, -1.0f, 1.0f);
                    localY = deltaX;
                    offsetX = Mathf.clamp(offsetY / radius2, -1.0f, 1.0f);
                }
                Type type4 = this.type;
                float f = 3.0f;
                byte b = 3;
                if (type4 == Type.STICK) {
                    if (this.currentPosition == null) {
                        this.currentPosition = new PointF();
                    }
                    PointF pointF2 = this.currentPosition;
                    pointF2.x = boundingBox2.left + (localY * radius2) + radius2;
                    pointF2.y = boundingBox2.top + (offsetX * radius2) + radius2;
                    boolean[] states = new boolean[4];
                    states[0] = offsetX <= -0.15f;
                    states[1] = localY >= 0.15f;
                    states[2] = offsetX >= 0.15f;
                    states[3] = localY <= -0.15f;
                    byte i2 = 0;
                    while (i2 < 4) {
                        float value = (i2 == 1 || i2 == b) ? localY : offsetX;
                        Binding binding = getBindingAt(i2);
                        if (binding.isGamepad()) {
                            this.inputControlsView.handleInputEvent(binding, true, Mathf.clamp(Math.max(0.0f, Math.abs(value) - 0.01f) * Mathf.sign(value) * f, -1.0f, 1.0f));
                            this.states[i2] = true;
                        } else {
                            boolean state2 = binding.isMouseMove() ? states[i2] || states[(i2 + 2) % 4] : states[i2];
                            this.inputControlsView.handleInputEvent(binding, state2, value);
                            this.states[i2] = state2;
                        }
                        i2 = (byte) (i2 + 1);
                        f = 3.0f;
                        b = 3;
                    }
                    this.inputControlsView.invalidate();
                    return true;
                }
                if (type4 == type3) {
                    boolean[] states2 = new boolean[4];
                    states2[0] = offsetX <= -0.8f;
                    states2[1] = localY >= 0.8f;
                    states2[2] = offsetX >= 0.8f;
                    states2[3] = localY <= -0.8f;
                    int cursorDx = 0;
                    int cursorDy = 0;
                    byte i3 = 0;
                    for (byte b2 = 4; i3 < b2; b2 = 4) {
                        float value2 = (i3 == 1 || i3 == 3) ? localY : offsetX;
                        Binding binding2 = getBindingAt(i3);
                        if (binding2.isGamepad()) {
                            if (this.interpolator == null) {
                                this.interpolator = new CubicBezierInterpolator();
                            }
                            if (Math.abs(value2) > 4.0f) {
                                value2 *= 3.0f;
                            }
                            boundingBox = boundingBox2;
                            radius = radius2;
                            this.interpolator.set(0.075f, 0.95f, 0.45f, 0.95f);
                            float interpolatedValue = this.interpolator.getInterpolation(Math.min(1.0f, Math.abs(value2 / 20.0f)));
                            this.inputControlsView.handleInputEvent(binding2, true, Mathf.clamp(Mathf.sign(value2) * interpolatedValue, -1.0f, 1.0f));
                            this.states[i3] = true;
                        } else {
                            boundingBox = boundingBox2;
                            radius = radius2;
                            if (Math.abs(value2) > 6.0f) {
                                value2 *= 1.5f;
                            }
                            if (binding2 == Binding.MOUSE_MOVE_LEFT || binding2 == Binding.MOUSE_MOVE_RIGHT) {
                                int cursorDy2 = Mathf.roundPoint(value2);
                                cursorDx = cursorDy2;
                            } else if (binding2 == Binding.MOUSE_MOVE_UP || binding2 == Binding.MOUSE_MOVE_DOWN) {
                                cursorDy = Mathf.roundPoint(value2);
                            } else {
                                this.inputControlsView.handleInputEvent(binding2, states2[i3], value2);
                                this.states[i3] = states2[i3];
                            }
                        }
                        i3 = (byte) (i3 + 1);
                        boundingBox2 = boundingBox;
                        radius2 = radius;
                    }
                    if (cursorDx != 0 || cursorDy != 0) {
                        this.inputControlsView.getXServer().injectPointerMoveDelta(cursorDx, cursorDy);
                        return true;
                    }
                    return true;
                }
                boolean[] states3 = new boolean[4];
                states3[0] = offsetX <= -0.3f;
                states3[1] = localY >= 0.3f;
                states3[2] = offsetX >= 0.3f;
                states3[3] = localY <= -0.3f;
                byte i4 = 0;
                while (i4 < 4) {
                    float value3 = (i4 == 1 || i4 == 3) ? localY : offsetX;
                    Binding binding3 = getBindingAt(i4);
                    if (binding3.isMouseMove()) {
                        if (!states3[i4] && !states3[(i4 + 2) % 4]) {
                            state = false;
                        }
                        state = true;
                    } else {
                        state = states3[i4];
                    }
                    this.inputControlsView.handleInputEvent(binding3, state, value3);
                    this.states[i4] = state;
                    i4 = (byte) (i4 + 1);
                }
                return true;
            }
            if (pointerId == i && this.type == Type.RANGE_BUTTON) {
                this.scroller.handleTouchMove(x, y);
                if (this.scroller.isScrolling()) {
                    this.pressed = false;
                    this.inputControlsView.invalidate();
                    return true;
                }
                return true;
            }
            return false;
        }
    
        public boolean handleTouchUp(int pointerId) {
            if (pointerId != this.currentPointerId) {
                return false;
            }
            Type type = this.type;
            if (type == Type.BUTTON) {
                if (isKeepButtonPressedAfterMinTime() && this.touchTime != null) {
                    boolean z = System.currentTimeMillis() - ((Long) this.touchTime).longValue() > 300;
                    this.selected = z;
                    if (!z) {
                        this.inputControlsView.handleInputEvent(this.bindings, false);
                    }
                    this.touchTime = null;
                } else if (!this.toggleSwitch || this.selected) {
                    this.inputControlsView.handleInputEvent(this.bindings, false);
                }
                if (this.toggleSwitch) {
                    this.selected = !this.selected;
                }
                this.pressed = false;
                this.inputControlsView.invalidate();
            } else if (type == Type.RANGE_BUTTON || type == Type.D_PAD || type == Type.STICK || type == Type.TRACKPAD) {
                byte i = 0;
                while (true) {
                    boolean[] zArr = this.states;
                    if (i >= zArr.length) {
                        break;
                    }
                    if (zArr[i]) {
                        this.inputControlsView.handleInputEvent(getBindingAt(i), false);
                    }
                    this.states[i] = false;
                    i = (byte) (i + 1);
                }
                Type type2 = this.type;
                if (type2 == Type.RANGE_BUTTON) {
                    this.scroller.handleTouchUp();
                    this.pressed = false;
                    this.inputControlsView.invalidate();
                } else if (type2 == Type.STICK) {
                    this.inputControlsView.invalidate();
                }
                if (this.currentPosition != null) {
                    this.currentPosition = null;
                }
            }
            this.currentPointerId = -1;
            return true;
        }
    }
  + app/src/main/java/com/winlator/inputcontrols/ControlsProfile.java
    package com.winlator.inputcontrols;
    
    import android.content.Context;
    import com.winlator.core.FileUtils;
    import com.winlator.inputcontrols.ControlElement;
    import com.winlator.widget.InputControlsView;
    import java.io.File;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.Iterator;
    import java.util.List;
    import java.util.Locale;
    import org.json.JSONArray;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public class ControlsProfile implements Comparable<ControlsProfile> {
        private final Context context;
        private final ArrayList<ExternalController> controllers;
        private boolean controllersLoaded;
        private float cursorSpeed = 1.0f;
        private boolean disableMouseInput = false;
        private final ArrayList<ControlElement> elements;
        private boolean elementsLoaded;
        private GamepadState gamepadState;
        public final int id;
        private final List<ControlElement> immutableElements;
        private String name;
        private boolean virtualGamepad;
    
        public ControlsProfile(Context context, int id) {
            ArrayList<ControlElement> arrayList = new ArrayList<>();
            this.elements = arrayList;
            this.controllers = new ArrayList<>();
            this.immutableElements = Collections.unmodifiableList(arrayList);
            this.elementsLoaded = false;
            this.controllersLoaded = false;
            this.virtualGamepad = false;
            this.context = context;
            this.id = id;
        }
    
        public String getName() {
            return this.name;
        }
    
        public void setName(String name) {
            this.name = name;
        }
    
        public float getCursorSpeed() {
            return this.cursorSpeed;
        }
    
        public void setCursorSpeed(float cursorSpeed) {
            this.cursorSpeed = cursorSpeed;
        }
    
        public boolean isDisableMouseInput() {
            return this.disableMouseInput;
        }
    
        public void setDisableMouseInput(boolean disableMouseInput) {
            this.disableMouseInput = disableMouseInput;
        }
    
        public boolean isVirtualGamepad() {
            return this.virtualGamepad;
        }
    
        public GamepadState getGamepadState() {
            if (this.gamepadState == null) {
                this.gamepadState = new GamepadState();
            }
            return this.gamepadState;
        }
    
        public ExternalController addController(String id) {
            ExternalController controller = getController(id);
            if (controller == null) {
                ArrayList<ExternalController> arrayList = this.controllers;
                ExternalController controller2 = ExternalController.getController(id);
                controller = controller2;
                arrayList.add(controller2);
            }
            this.controllersLoaded = true;
            return controller;
        }
    
        public void removeController(ExternalController controller) {
            if (!this.controllersLoaded) {
                loadControllers();
            }
            this.controllers.remove(controller);
        }
    
        public ExternalController getController(String id) {
            if (!this.controllersLoaded) {
                loadControllers();
            }
            Iterator<ExternalController> it = this.controllers.iterator();
            while (it.hasNext()) {
                ExternalController controller = it.next();
                if (controller.getId().equals(id)) {
                    return controller;
                }
            }
            return null;
        }
    
        public ExternalController getController(int deviceId) {
            if (!this.controllersLoaded) {
                loadControllers();
            }
            Iterator<ExternalController> it = this.controllers.iterator();
            while (it.hasNext()) {
                ExternalController controller = it.next();
                if (controller.getDeviceId() == deviceId) {
                    return controller;
                }
            }
            return null;
        }
    
        public String toString() {
            return this.name;
        }
    
        @Override // java.lang.Comparable
        public int compareTo(ControlsProfile o) {
            return Integer.compare(this.id, o.id);
        }
    
        public boolean isElementsLoaded() {
            return this.elementsLoaded;
        }
    
        public void save() {
            File file = getProfileFile(this.context, this.id);
            try {
                JSONObject data = new JSONObject();
                data.put("id", this.id);
                data.put("name", this.name);
                data.put("cursorSpeed", Float.valueOf(this.cursorSpeed));
                boolean z = this.disableMouseInput;
                if (z) {
                    data.put("disableMouseInput", z);
                }
                JSONArray elementsJSONArray = new JSONArray();
                if (!this.elementsLoaded && file.isFile()) {
                    elementsJSONArray = new JSONObject(FileUtils.readString(file)).getJSONArray("elements");
                } else {
                    Iterator<ControlElement> it = this.elements.iterator();
                    while (it.hasNext()) {
                        ControlElement element = it.next();
                        elementsJSONArray.put(element.toJSONObject());
                    }
                }
                data.put("elements", elementsJSONArray);
                JSONArray controllersJSONArray = new JSONArray();
                if (!this.controllersLoaded && file.isFile()) {
                    JSONObject profileJSONObject = new JSONObject(FileUtils.readString(file));
                    if (profileJSONObject.has("controllers")) {
                        controllersJSONArray = profileJSONObject.getJSONArray("controllers");
                    }
                } else {
                    Iterator<ExternalController> it2 = this.controllers.iterator();
                    while (it2.hasNext()) {
                        ExternalController controller = it2.next();
                        JSONObject controllerJSONObject = controller.toJSONObject();
                        if (controllerJSONObject != null) {
                            controllersJSONArray.put(controllerJSONObject);
                        }
                    }
                }
                if (controllersJSONArray.length() > 0) {
                    data.put("controllers", controllersJSONArray);
                }
                FileUtils.writeString(file, data.toString());
            } catch (JSONException e) {
            }
        }
    
        public static File getProfileFile(Context context, int id) {
            return new File(InputControlsManager.getProfilesDir(context), "controls-" + id + ".icp");
        }
    
        public void addElement(ControlElement element) {
            this.elements.add(element);
            this.elementsLoaded = true;
        }
    
        public void removeElement(ControlElement element) {
            this.elements.remove(element);
            this.elementsLoaded = true;
        }
    
        public List<ControlElement> getElements() {
            return this.immutableElements;
        }
    
        public boolean isTemplate() {
            return this.name.toLowerCase(Locale.ENGLISH).contains("template");
        }
    
        public ArrayList<ExternalController> loadControllers() {
            JSONObject profileJSONObject;
            this.controllers.clear();
            this.controllersLoaded = false;
            File file = getProfileFile(this.context, this.id);
            if (!file.isFile()) {
                return this.controllers;
            }
            try {
                profileJSONObject = new JSONObject(FileUtils.readString(file));
            } catch (JSONException e) {
                e.printStackTrace();
            }
            if (!profileJSONObject.has("controllers")) {
                return this.controllers;
            }
            JSONArray controllersJSONArray = profileJSONObject.getJSONArray("controllers");
            for (int i = 0; i < controllersJSONArray.length(); i++) {
                JSONObject controllerJSONObject = controllersJSONArray.getJSONObject(i);
                String id = controllerJSONObject.getString("id");
                ExternalController controller = new ExternalController();
                controller.setId(id);
                controller.setName(controllerJSONObject.getString("name"));
                JSONArray controllerBindingsJSONArray = controllerJSONObject.getJSONArray("controllerBindings");
                for (int j = 0; j < controllerBindingsJSONArray.length(); j++) {
                    JSONObject controllerBindingJSONObject = controllerBindingsJSONArray.getJSONObject(j);
                    ExternalControllerBinding controllerBinding = new ExternalControllerBinding();
                    controllerBinding.setKeyCode(controllerBindingJSONObject.getInt("keyCode"));
                    controllerBinding.setBinding(Binding.fromString(controllerBindingJSONObject.getString("binding")));
                    controller.addControllerBinding(controllerBinding);
                }
                this.controllers.add(controller);
            }
            this.controllersLoaded = true;
            return this.controllers;
        }
    
        public void loadElements(InputControlsView inputControlsView) {
            this.elements.clear();
            this.elementsLoaded = false;
            this.virtualGamepad = false;
            File file = getProfileFile(this.context, this.id);
            if (file.isFile()) {
                try {
                    JSONObject profileJSONObject = new JSONObject(FileUtils.readString(file));
                    JSONArray elementsJSONArray = profileJSONObject.getJSONArray("elements");
                    for (int i = 0; i < elementsJSONArray.length(); i++) {
                        JSONObject elementJSONObject = elementsJSONArray.getJSONObject(i);
                        ControlElement element = new ControlElement(inputControlsView);
                        element.setType(ControlElement.Type.valueOf(elementJSONObject.getString("type")));
                        element.setShape(ControlElement.Shape.valueOf(elementJSONObject.getString("shape")));
                        element.setToggleSwitch(elementJSONObject.getBoolean("toggleSwitch"));
                        element.setX((int) (elementJSONObject.getDouble("x") * inputControlsView.getMaxWidth()));
                        element.setY((int) (elementJSONObject.getDouble("y") * inputControlsView.getMaxHeight()));
                        element.setScale((float) elementJSONObject.getDouble("scale"));
                        element.setText(elementJSONObject.getString("text"));
                        element.setIconId(elementJSONObject.getInt("iconId"));
                        if (elementJSONObject.has("range")) {
                            element.setRange(ControlElement.Range.valueOf(elementJSONObject.getString("range")));
                        }
                        if (elementJSONObject.has("orientation")) {
                            element.setOrientation((byte) elementJSONObject.getInt("orientation"));
                        }
                        boolean hasGamepadBinding = true;
                        JSONArray bindingsJSONArray = elementJSONObject.getJSONArray("bindings");
                        for (int j = 0; j < bindingsJSONArray.length(); j++) {
                            Binding binding = Binding.fromString(bindingsJSONArray.getString(j));
                            element.setBindingAt(j, Binding.fromString(bindingsJSONArray.getString(j)));
                            if (!binding.isGamepad()) {
                                hasGamepadBinding = false;
                            }
                        }
                        if (!this.virtualGamepad && hasGamepadBinding) {
                            this.virtualGamepad = true;
                        }
                        this.elements.add(element);
                    }
                    this.elementsLoaded = true;
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
    }
  + app/src/main/java/com/winlator/inputcontrols/ExternalController.java
    package com.winlator.inputcontrols;
    
    import android.view.InputDevice;
    import android.view.KeyEvent;
    import android.view.MotionEvent;
    import androidx.constraintlayout.widget.R$styleable;
    import java.util.ArrayList;
    import java.util.Iterator;
    import org.json.JSONArray;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public class ExternalController {
        private String id;
        private String name;
        private int deviceId = -1;
        private final ArrayList<ExternalControllerBinding> controllerBindings = new ArrayList<>();
        public final GamepadState state = new GamepadState();
        private boolean processTriggerButtonOnMotionEvent = true;
    
        public String getName() {
            return this.name;
        }
    
        public void setName(String name) {
            this.name = name;
        }
    
        public String getId() {
            return this.id;
        }
    
        public void setId(String id) {
            this.id = id;
        }
    
        public int getDeviceId() {
            if (this.deviceId == -1) {
                int[] deviceIds = InputDevice.getDeviceIds();
                int length = deviceIds.length;
                int i = 0;
                while (true) {
                    if (i < length) {
                        int deviceId = deviceIds[i];
                        InputDevice device = InputDevice.getDevice(deviceId);
                        if (device == null || !device.getDescriptor().equals(this.id)) {
                            i++;
                        } else {
                            this.deviceId = deviceId;
                            break;
                        }
                    } else {
                        break;
                    }
                }
            }
            return this.deviceId;
        }
    
        public boolean isConnected() {
            for (int deviceId : InputDevice.getDeviceIds()) {
                InputDevice device = InputDevice.getDevice(deviceId);
                if (device != null && device.getDescriptor().equals(this.id)) {
                    return true;
                }
            }
            return false;
        }
    
        public ExternalControllerBinding getControllerBinding(int keyCode) {
            Iterator<ExternalControllerBinding> it = this.controllerBindings.iterator();
            while (it.hasNext()) {
                ExternalControllerBinding controllerBinding = it.next();
                if (controllerBinding.getKeyCodeForAxis() == keyCode) {
                    return controllerBinding;
                }
            }
            return null;
        }
    
        public ExternalControllerBinding getControllerBindingAt(int index) {
            return this.controllerBindings.get(index);
        }
    
        public void addControllerBinding(ExternalControllerBinding controllerBinding) {
            if (getControllerBinding(controllerBinding.getKeyCodeForAxis()) == null) {
                this.controllerBindings.add(controllerBinding);
            }
        }
    
        public int getPosition(ExternalControllerBinding controllerBinding) {
            return this.controllerBindings.indexOf(controllerBinding);
        }
    
        public void removeControllerBinding(ExternalControllerBinding controllerBinding) {
            this.controllerBindings.remove(controllerBinding);
        }
    
        public int getControllerBindingCount() {
            return this.controllerBindings.size();
        }
    
        public JSONObject toJSONObject() {
            try {
                if (this.controllerBindings.isEmpty()) {
                    return null;
                }
                JSONObject controllerJSONObject = new JSONObject();
                controllerJSONObject.put("id", this.id);
                controllerJSONObject.put("name", this.name);
                JSONArray controllerBindingsJSONArray = new JSONArray();
                Iterator<ExternalControllerBinding> it = this.controllerBindings.iterator();
                while (it.hasNext()) {
                    ExternalControllerBinding controllerBinding = it.next();
                    controllerBindingsJSONArray.put(controllerBinding.toJSONObject());
                }
                controllerJSONObject.put("controllerBindings", controllerBindingsJSONArray);
                return controllerJSONObject;
            } catch (JSONException e) {
                return null;
            }
        }
    
        public boolean equals(Object obj) {
            return obj instanceof ExternalController ? ((ExternalController) obj).id.equals(this.id) : super.equals(obj);
        }
    
        private void processJoystickInput(MotionEvent event, int historyPos) {
            boolean z = false;
            this.state.thumbLX = getCenteredAxis(event, 0, historyPos);
            this.state.thumbLY = getCenteredAxis(event, 1, historyPos);
            this.state.thumbRX = getCenteredAxis(event, 11, historyPos);
            this.state.thumbRY = getCenteredAxis(event, 14, historyPos);
            if (historyPos == -1) {
                float axisX = getCenteredAxis(event, 15, historyPos);
                float axisY = getCenteredAxis(event, 16, historyPos);
                GamepadState gamepadState = this.state;
                gamepadState.dpad[0] = axisY == -1.0f && Math.abs(gamepadState.thumbLY) < 0.15f;
                GamepadState gamepadState2 = this.state;
                gamepadState2.dpad[1] = axisX == 1.0f && Math.abs(gamepadState2.thumbLX) < 0.15f;
                GamepadState gamepadState3 = this.state;
                gamepadState3.dpad[2] = axisY == 1.0f && Math.abs(gamepadState3.thumbLY) < 0.15f;
                GamepadState gamepadState4 = this.state;
                boolean[] zArr = gamepadState4.dpad;
                if (axisX == -1.0f && Math.abs(gamepadState4.thumbLX) < 0.15f) {
                    z = true;
                }
                zArr[3] = z;
            }
        }
    
        private void processTriggerButton(MotionEvent event) {
            this.state.setPressed(10, event.getAxisValue(17) == 1.0f || event.getAxisValue(23) == 1.0f);
            this.state.setPressed(11, event.getAxisValue(18) == 1.0f || event.getAxisValue(22) == 1.0f);
        }
    
        public boolean updateStateFromMotionEvent(MotionEvent event) {
            if (isJoystickDevice(event)) {
                if (this.processTriggerButtonOnMotionEvent) {
                    processTriggerButton(event);
                }
                int historySize = event.getHistorySize();
                for (int i = 0; i < historySize; i++) {
                    processJoystickInput(event, i);
                }
                processJoystickInput(event, -1);
                return true;
            }
            return false;
        }
    
        public boolean updateStateFromKeyEvent(KeyEvent event) {
            boolean z = false;
            boolean pressed = event.getAction() == 0;
            int keyCode = event.getKeyCode();
            int buttonIdx = getButtonIdxByKeyCode(keyCode);
            if (buttonIdx != -1) {
                if (buttonIdx == 10 || buttonIdx == 11) {
                    this.processTriggerButtonOnMotionEvent = false;
                }
                this.state.setPressed(buttonIdx, pressed);
                return true;
            }
            switch (keyCode) {
                case 19:
                    GamepadState gamepadState = this.state;
                    gamepadState.dpad[0] = pressed && Math.abs(gamepadState.thumbLY) < 0.15f;
                    return true;
                case 20:
                    GamepadState gamepadState2 = this.state;
                    boolean[] zArr = gamepadState2.dpad;
                    if (pressed && Math.abs(gamepadState2.thumbLY) < 0.15f) {
                        z = true;
                    }
                    zArr[2] = z;
                    return true;
                case 21:
                    GamepadState gamepadState3 = this.state;
                    boolean[] zArr2 = gamepadState3.dpad;
                    if (pressed && Math.abs(gamepadState3.thumbLX) < 0.15f) {
                        z = true;
                    }
                    zArr2[3] = z;
                    return true;
                case 22:
                    GamepadState gamepadState4 = this.state;
                    boolean[] zArr3 = gamepadState4.dpad;
                    if (pressed && Math.abs(gamepadState4.thumbLX) < 0.15f) {
                        z = true;
                    }
                    zArr3[1] = z;
                    return true;
                default:
                    return false;
            }
        }
    
        public static ArrayList<ExternalController> getControllers() {
            int[] deviceIds = InputDevice.getDeviceIds();
            ArrayList<ExternalController> controllers = new ArrayList<>();
            for (int i = deviceIds.length - 1; i >= 0; i--) {
                InputDevice device = InputDevice.getDevice(deviceIds[i]);
                if (isGameController(device)) {
                    ExternalController controller = new ExternalController();
                    controller.setId(device.getDescriptor());
                    controller.setName(device.getName());
                    controllers.add(controller);
                }
            }
            return controllers;
        }
    
        public static ExternalController getController(String id) {
            Iterator<ExternalController> it = getControllers().iterator();
            while (it.hasNext()) {
                ExternalController controller = it.next();
                if (controller.getId().equals(id)) {
                    return controller;
                }
            }
            return null;
        }
    
        public static ExternalController getController(int deviceId) {
            int[] deviceIds = InputDevice.getDeviceIds();
            for (int i = deviceIds.length - 1; i >= 0; i--) {
                if (deviceIds[i] == deviceId || deviceId == 0) {
                    InputDevice device = InputDevice.getDevice(deviceIds[i]);
                    if (isGameController(device)) {
                        ExternalController controller = new ExternalController();
                        controller.setId(device.getDescriptor());
                        controller.setName(device.getName());
                        controller.deviceId = deviceIds[i];
                        return controller;
                    }
                }
            }
            return null;
        }
    
        public static boolean isGameController(InputDevice device) {
            if (device == null) {
                return false;
            }
            int sources = device.getSources();
            if (device.isVirtual()) {
                return false;
            }
            return (sources & 1025) == 1025 || (sources & 16777232) == 16777232;
        }
    
        public static float getCenteredAxis(MotionEvent event, int axis, int historyPos) {
            if (axis == 15 || axis == 16) {
                float value = event.getAxisValue(axis);
                if (Math.abs(value) == 1.0f) {
                    return value;
                }
                return 0.0f;
            }
            InputDevice device = event.getDevice();
            InputDevice.MotionRange range = device.getMotionRange(axis, event.getSource());
            if (range != null) {
                float flat = range.getFlat();
                float value2 = historyPos < 0 ? event.getAxisValue(axis) : event.getHistoricalAxisValue(axis, historyPos);
                if (Math.abs(value2) > flat) {
                    return value2;
                }
                return 0.0f;
            }
            return 0.0f;
        }
    
        public static boolean isJoystickDevice(MotionEvent event) {
            return (event.getSource() & 16777232) == 16777232 && event.getAction() == 2;
        }
    
        public static int getButtonIdxByKeyCode(int keyCode) {
            switch (keyCode) {
                case R$styleable.Constraint_layout_goneMarginBottom /* 96 */:
                    return 0;
                case R$styleable.Constraint_layout_goneMarginEnd /* 97 */:
                    return 1;
                case R$styleable.Constraint_layout_goneMarginLeft /* 98 */:
                case R$styleable.Constraint_layout_goneMarginTop /* 101 */:
                default:
                    return -1;
                case R$styleable.Constraint_layout_goneMarginRight /* 99 */:
                    return 2;
                case R$styleable.Constraint_layout_goneMarginStart /* 100 */:
                    return 3;
                case R$styleable.Constraint_motionProgress /* 102 */:
                    return 4;
                case R$styleable.Constraint_motionStagger /* 103 */:
                    return 5;
                case R$styleable.Constraint_pathMotionArc /* 104 */:
                    return 10;
                case 105:
                    return 11;
                case R$styleable.Constraint_transitionEasing /* 106 */:
                    return 8;
                case R$styleable.Constraint_transitionPathRotate /* 107 */:
                    return 9;
                case R$styleable.Constraint_visibilityMode /* 108 */:
                    return 7;
                case 109:
                    return 6;
            }
        }
    }
  + app/src/main/java/com/winlator/inputcontrols/ExternalControllerBinding.java
    package com.winlator.inputcontrols;
    
    import android.view.KeyEvent;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public class ExternalControllerBinding {
        private Binding binding = Binding.NONE;
        private short keyCode;
    
        public int getKeyCodeForAxis() {
            return this.keyCode;
        }
    
        public void setKeyCode(int keyCode) {
            this.keyCode = (short) keyCode;
        }
    
        public Binding getBinding() {
            return this.binding;
        }
    
        public void setBinding(Binding binding) {
            this.binding = binding;
        }
    
        public JSONObject toJSONObject() {
            try {
                JSONObject controllerBindingJSONObject = new JSONObject();
                controllerBindingJSONObject.put("keyCode", (int) this.keyCode);
                controllerBindingJSONObject.put("binding", this.binding.name());
                return controllerBindingJSONObject;
            } catch (JSONException e) {
                return null;
            }
        }
    
        public String toString() {
            short s = this.keyCode;
            switch (s) {
                case -8:
                    return "AXIS RZ+";
                case -7:
                    return "AXIS RZ-";
                case -6:
                    return "AXIS Z+";
                case -5:
                    return "AXIS Z-";
                case -4:
                    return "AXIS Y+";
                case -3:
                    return "AXIS Y-";
                case -2:
                    return "AXIS X+";
                case -1:
                    return "AXIS X-";
                default:
                    return KeyEvent.keyCodeToString(s).replace("KEYCODE_", "").replace("_", " ");
            }
        }
    
        public static int getKeyCodeForAxis(int axis, byte sign) {
            switch (axis) {
                case 0:
                    return sign > 0 ? -2 : -1;
                case 1:
                    return sign > 0 ? -3 : -4;
                case 11:
                    return sign > 0 ? -6 : -5;
                case 14:
                    return sign > 0 ? -7 : -8;
                case 15:
                    return sign > 0 ? 22 : 21;
                case 16:
                    return sign > 0 ? 20 : 19;
                default:
                    return 0;
            }
        }
    }
  + app/src/main/java/com/winlator/inputcontrols/GamepadState.java
    package com.winlator.inputcontrols;
    
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public class GamepadState {
        public float thumbLX = 0.0f;
        public float thumbLY = 0.0f;
        public float thumbRX = 0.0f;
        public float thumbRY = 0.0f;
        public final boolean[] dpad = new boolean[4];
        public short buttons = 0;
    
        public byte getPovHat() {
            boolean[] zArr = this.dpad;
            if (zArr[0] && zArr[1]) {
                return (byte) 1;
            }
            if (zArr[1] && zArr[2]) {
                return (byte) 3;
            }
            if (zArr[2] && zArr[3]) {
                return (byte) 5;
            }
            if (zArr[3] && zArr[0]) {
                return (byte) 7;
            }
            if (zArr[0]) {
                return (byte) 0;
            }
            if (zArr[1]) {
                return (byte) 2;
            }
            if (zArr[2]) {
                return (byte) 4;
            }
            return zArr[3] ? (byte) 6 : (byte) -1;
        }
    
        public void writeTo(ByteBuffer buffer) {
            buffer.putShort(this.buttons);
            buffer.put(getPovHat());
            buffer.putShort((short) (this.thumbLX * 32767.0f));
            buffer.putShort((short) (this.thumbLY * 32767.0f));
            buffer.putShort((short) (this.thumbRX * 32767.0f));
            buffer.putShort((short) (this.thumbRY * 32767.0f));
        }
    
        public void setPressed(int buttonIdx, boolean pressed) {
            int flag = 1 << buttonIdx;
            if (pressed) {
                this.buttons = (short) (this.buttons | flag);
            } else {
                this.buttons = (short) (this.buttons & (~flag));
            }
        }
    
        public boolean isPressed(int buttonIdx) {
            return (this.buttons & (1 << buttonIdx)) != 0;
        }
    
        public byte getDPadX() {
            boolean[] zArr = this.dpad;
            return (byte) (zArr[1] ? 1 : zArr[3] ? -1 : 0);
        }
    
        public byte getDPadY() {
            boolean[] zArr = this.dpad;
            int i = 0;
            if (zArr[0]) {
                i = -1;
            } else if (zArr[2]) {
                i = 1;
            }
            return (byte) i;
        }
    
        public void copy(GamepadState other) {
            this.thumbLX = other.thumbLX;
            this.thumbLY = other.thumbLY;
            this.thumbRX = other.thumbRX;
            this.thumbRY = other.thumbRY;
            this.buttons = other.buttons;
            System.arraycopy(other.dpad, 0, this.dpad, 0, 4);
        }
    }
  + app/src/main/java/com/winlator/inputcontrols/InputControlsManager.java
    package com.winlator.inputcontrols;
    
    import android.content.Context;
    import android.content.SharedPreferences;
    import android.content.res.AssetManager;
    import android.media.MediaScannerConnection;
    import android.os.Environment;
    import android.util.JsonReader;
    import androidx.preference.PreferenceManager;
    import com.winlator.core.AppUtils;
    import com.winlator.core.FileUtils;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.nio.charset.StandardCharsets;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.Iterator;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public class InputControlsManager {
        private final Context context;
        private int maxProfileId;
        private ArrayList<ControlsProfile> profiles;
        private boolean profilesLoaded = false;
    
        public InputControlsManager(Context context) {
            this.context = context;
        }
    
        public static File getProfilesDir(Context context) {
            File profilesDir = new File(context.getFilesDir(), "profiles");
            if (!profilesDir.isDirectory()) {
                profilesDir.mkdir();
            }
            return profilesDir;
        }
    
        public ArrayList<ControlsProfile> getProfiles() {
            return getProfiles(false);
        }
    
        public ArrayList<ControlsProfile> getProfiles(boolean ignoreTemplates) {
            if (!this.profilesLoaded) {
                loadProfiles(ignoreTemplates);
            }
            return this.profiles;
        }
    
        private void copyAssetProfilesIfNeeded() {
            AssetManager assetManager;
            File profilesDir;
            String[] assetFiles;
            SharedPreferences preferences;
            File profilesDir2 = getProfilesDir(this.context);
            if (FileUtils.isEmpty(profilesDir2)) {
                FileUtils.copy(this.context, "inputcontrols/profiles", profilesDir2);
                return;
            }
            SharedPreferences preferences2 = PreferenceManager.getDefaultSharedPreferences(this.context);
            int newVersion = AppUtils.getVersionCode(this.context);
            int i = 0;
            int oldVersion = preferences2.getInt("inputcontrols_app_version", 0);
            if (oldVersion == newVersion) {
                return;
            }
            preferences2.edit().putInt("inputcontrols_app_version", newVersion).apply();
            File[] files = profilesDir2.listFiles();
            if (files == null) {
                return;
            }
            try {
                AssetManager assetManager2 = this.context.getAssets();
                String[] assetFiles2 = assetManager2.list("inputcontrols/profiles");
                int length = assetFiles2.length;
                int i2 = 0;
                while (i2 < length) {
                    String assetFile = assetFiles2[i2];
                    String assetPath = "inputcontrols/profiles/" + assetFile;
                    ControlsProfile originProfile = loadProfile(this.context, assetManager2.open(assetPath));
                    File targetFile = null;
                    int length2 = files.length;
                    while (true) {
                        if (i >= length2) {
                            assetManager = assetManager2;
                            profilesDir = profilesDir2;
                            assetFiles = assetFiles2;
                            preferences = preferences2;
                            break;
                        }
                        File file = files[i];
                        assetManager = assetManager2;
                        profilesDir = profilesDir2;
                        try {
                            ControlsProfile targetProfile = loadProfile(this.context, file);
                            assetFiles = assetFiles2;
                            preferences = preferences2;
                            try {
                                if (originProfile.id != targetProfile.id || !originProfile.getName().equals(targetProfile.getName())) {
                                    i++;
                                    assetManager2 = assetManager;
                                    assetFiles2 = assetFiles;
                                    profilesDir2 = profilesDir;
                                    preferences2 = preferences;
                                } else {
                                    targetFile = file;
                                    break;
                                }
                            } catch (IOException e) {
                                return;
                            }
                        } catch (IOException e2) {
                            return;
                        }
                    }
                    if (targetFile != null) {
                        FileUtils.copy(this.context, assetPath, targetFile);
                    }
                    i2++;
                    assetManager2 = assetManager;
                    assetFiles2 = assetFiles;
                    profilesDir2 = profilesDir;
                    preferences2 = preferences;
                    i = 0;
                }
            } catch (IOException e3) {
            }
        }
    
        public void loadProfiles(boolean ignoreTemplates) {
            File profilesDir = getProfilesDir(this.context);
            copyAssetProfilesIfNeeded();
            ArrayList<ControlsProfile> profiles = new ArrayList<>();
            File[] files = profilesDir.listFiles();
            if (files != null) {
                for (File file : files) {
                    ControlsProfile profile = loadProfile(this.context, file);
                    if (!ignoreTemplates || !profile.isTemplate()) {
                        profiles.add(profile);
                    }
                    this.maxProfileId = Math.max(this.maxProfileId, profile.id);
                }
            }
            Collections.sort(profiles);
            this.profiles = profiles;
            this.profilesLoaded = true;
        }
    
        public ControlsProfile createProfile(String name) {
            Context context = this.context;
            int i = this.maxProfileId + 1;
            this.maxProfileId = i;
            ControlsProfile profile = new ControlsProfile(context, i);
            profile.setName(name);
            profile.save();
            this.profiles.add(profile);
            return profile;
        }
    
        public ControlsProfile duplicateProfile(ControlsProfile source) {
            String newName;
            int i = 1;
            while (true) {
                newName = source.getName() + " (" + i + ")";
                boolean found = false;
                Iterator<ControlsProfile> it = this.profiles.iterator();
                while (true) {
                    if (!it.hasNext()) {
                        break;
                    }
                    if (it.next().getName().equals(newName)) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    break;
                }
                i++;
            }
            int i2 = this.maxProfileId;
            int newId = i2 + 1;
            this.maxProfileId = newId;
            File newFile = ControlsProfile.getProfileFile(this.context, newId);
            try {
                JSONObject data = new JSONObject(FileUtils.readString(ControlsProfile.getProfileFile(this.context, source.id)));
                data.put("id", newId);
                data.put("name", newName);
                if (data.has("template")) {
                    data.remove("template");
                }
                FileUtils.writeString(newFile, data.toString());
            } catch (JSONException e) {
            }
            ControlsProfile profile = loadProfile(this.context, newFile);
            this.profiles.add(profile);
            return profile;
        }
    
        public void removeProfile(ControlsProfile profile) {
            File file = ControlsProfile.getProfileFile(this.context, profile.id);
            if (!file.isFile() || !file.delete()) {
                return;
            }
            this.profiles.remove(profile);
        }
    
        public ControlsProfile importProfile(JSONObject data) {
            try {
                if (data.has("id") && data.has("name")) {
                    int newId = this.maxProfileId + 1;
                    this.maxProfileId = newId;
                    File newFile = ControlsProfile.getProfileFile(this.context, newId);
                    data.put("id", newId);
                    FileUtils.writeString(newFile, data.toString());
                    ControlsProfile newProfile = loadProfile(this.context, newFile);
                    int foundIndex = -1;
                    int i = 0;
                    while (true) {
                        if (i >= this.profiles.size()) {
                            break;
                        }
                        ControlsProfile profile = this.profiles.get(i);
                        if (!profile.getName().equals(newProfile.getName())) {
                            i++;
                        } else {
                            foundIndex = i;
                            break;
                        }
                    }
                    if (foundIndex != -1) {
                        this.profiles.set(foundIndex, newProfile);
                    } else {
                        this.profiles.add(newProfile);
                    }
                    return newProfile;
                }
                return null;
            } catch (JSONException e) {
                return null;
            }
        }
    
        public File exportProfile(ControlsProfile profile) {
            File downloadsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);
            File destination = new File(downloadsDir, "Winlator/profiles/" + profile.getName() + ".icp");
            FileUtils.copy(ControlsProfile.getProfileFile(this.context, profile.id), destination);
            MediaScannerConnection.scanFile(this.context, new String[]{destination.getAbsolutePath()}, null, null);
            if (destination.isFile()) {
                return destination;
            }
            return null;
        }
    
        public static ControlsProfile loadProfile(Context context, File file) {
            try {
                return loadProfile(context, new FileInputStream(file));
            } catch (FileNotFoundException e) {
                return null;
            }
        }
    
        public static ControlsProfile loadProfile(Context context, InputStream inStream) {
            try {
                JsonReader reader = new JsonReader(new InputStreamReader(inStream, StandardCharsets.UTF_8));
                int profileId = 0;
                String profileName = null;
                float cursorSpeed = Float.NaN;
                boolean disableMouseInput = false;
                int fieldsRead = 0;
                try {
                    reader.beginObject();
                    while (reader.hasNext()) {
                        String name = reader.nextName();
                        if (name.equals("id")) {
                            profileId = reader.nextInt();
                            fieldsRead++;
                        } else if (name.equals("name")) {
                            profileName = reader.nextString();
                            fieldsRead++;
                        } else if (name.equals("cursorSpeed")) {
                            cursorSpeed = (float) reader.nextDouble();
                            fieldsRead++;
                        } else if (name.equals("disableMouseInput")) {
                            disableMouseInput = reader.nextBoolean();
                            fieldsRead++;
                        } else {
                            if (fieldsRead == 4) {
                                break;
                            }
                            reader.skipValue();
                        }
                    }
                    ControlsProfile profile = new ControlsProfile(context, profileId);
                    profile.setName(profileName);
                    profile.setCursorSpeed(cursorSpeed);
                    profile.setDisableMouseInput(disableMouseInput);
                    reader.close();
                    return profile;
                } finally {
                }
            } catch (IOException e) {
                return null;
            }
        }
    
        public ControlsProfile getProfile(int id) {
            Iterator<ControlsProfile> it = getProfiles().iterator();
            while (it.hasNext()) {
                ControlsProfile profile = it.next();
                if (profile.id == id) {
                    return profile;
                }
            }
            return null;
        }
    }
  + app/src/main/java/com/winlator/inputcontrols/RangeScroller.java
    package com.winlator.inputcontrols;
    
    import android.graphics.Rect;
    import com.winlator.inputcontrols.ControlElement;
    import com.winlator.inputcontrols.RangeScroller;
    import com.winlator.widget.InputControlsView;
    import java.util.Timer;
    import java.util.TimerTask;
    
    /* loaded from: classes.dex */
    public class RangeScroller {
        private float currentOffset;
        private final ControlElement element;
        private final InputControlsView inputControlsView;
        private float lastPosition;
        private float scrollOffset;
        private Timer timer;
        private long touchTime;
        private Binding binding = Binding.NONE;
        private boolean isActionDown = false;
        private boolean scrolling = false;
    
        public RangeScroller(InputControlsView inputControlsView, ControlElement element) {
            this.inputControlsView = inputControlsView;
            this.element = element;
        }
    
        public float getElementSize() {
            Rect boundingBox = this.element.getBoundingBox();
            return Math.max(boundingBox.width(), boundingBox.height()) / this.element.getBindingCount();
        }
    
        public float getScrollSize() {
            return getElementSize() * this.element.getRange().max;
        }
    
        public float getScrollOffset() {
            return this.scrollOffset;
        }
    
        public Binding getBinding() {
            return this.binding;
        }
    
        public boolean isScrolling() {
            return this.scrolling;
        }
    
        public byte[] getRangeIndex() {
            ControlElement.Range range = this.element.getRange();
            byte from = (byte) Math.floor((this.scrollOffset / getElementSize()) % range.max);
            if (from < 0) {
                from = (byte) (range.max + from);
            }
            byte to = (byte) (this.element.getBindingCount() + from + 1);
            return new byte[]{from, to};
        }
    
        private Binding getBindingByPosition(float x, float y) {
            Rect boundingBox = this.element.getBoundingBox();
            ControlElement.Range range = this.element.getRange();
            float offset = (this.element.getOrientation() == 0 ? x - boundingBox.left : y - boundingBox.top) - this.currentOffset;
            int index = (int) Math.floor((offset / getElementSize()) % range.max);
            if (index < 0) {
                index += range.max;
            }
            switch (AnonymousClass2.$SwitchMap$com$winlator$inputcontrols$ControlElement$Range[range.ordinal()]) {
                case 1:
                    return Binding.valueOf("KEY_" + ((char) (index + 65)));
                case 2:
                    return Binding.valueOf("KEY_" + ((index + 1) % 10));
                case 3:
                    return Binding.valueOf("KEY_F" + (index + 1));
                case 4:
                    return Binding.valueOf("KEY_KP_" + ((index + 1) % 10));
                default:
                    return Binding.NONE;
            }
        }
    
        /* renamed from: com.winlator.inputcontrols.RangeScroller$2, reason: invalid class name */
        static /* synthetic */ class AnonymousClass2 {
            static final /* synthetic */ int[] $SwitchMap$com$winlator$inputcontrols$ControlElement$Range;
    
            static {
                int[] iArr = new int[ControlElement.Range.values().length];
                $SwitchMap$com$winlator$inputcontrols$ControlElement$Range = iArr;
                try {
                    iArr[ControlElement.Range.FROM_A_TO_Z.ordinal()] = 1;
                } catch (NoSuchFieldError e) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$ControlElement$Range[ControlElement.Range.FROM_0_TO_9.ordinal()] = 2;
                } catch (NoSuchFieldError e2) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$ControlElement$Range[ControlElement.Range.FROM_F1_TO_F12.ordinal()] = 3;
                } catch (NoSuchFieldError e3) {
                }
                try {
                    $SwitchMap$com$winlator$inputcontrols$ControlElement$Range[ControlElement.Range.FROM_NP0_TO_NP9.ordinal()] = 4;
                } catch (NoSuchFieldError e4) {
                }
            }
        }
    
        private boolean isTap() {
            return System.currentTimeMillis() - this.touchTime < 200;
        }
    
        private void destroyTimer() {
            Timer timer = this.timer;
            if (timer != null) {
                timer.cancel();
                this.timer = null;
            }
        }
    
        public void handleTouchDown(float x, float y) {
            destroyTimer();
            this.scrolling = false;
            this.isActionDown = true;
            this.binding = getBindingByPosition(x, y);
            this.touchTime = System.currentTimeMillis();
            this.lastPosition = this.element.getOrientation() == 0 ? x : y;
            this.element.setBinding(Binding.NONE);
            Timer timer = new Timer(true);
            this.timer = timer;
            timer.schedule(new AnonymousClass1(), 200L);
        }
    
        /* renamed from: com.winlator.inputcontrols.RangeScroller$1, reason: invalid class name */
        class AnonymousClass1 extends TimerTask {
            AnonymousClass1() {
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$run$0() {
                RangeScroller.this.inputControlsView.handleInputEvent(RangeScroller.this.binding, true);
            }
    
            @Override // java.util.TimerTask, java.lang.Runnable
            public void run() {
                if (!RangeScroller.this.scrolling) {
                    RangeScroller.this.inputControlsView.post(new Runnable() { // from class: com.winlator.inputcontrols.RangeScroller$1$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            RangeScroller.AnonymousClass1.this.lambda$run$0();
                        }
                    });
                }
            }
        }
    
        public void handleTouchMove(float x, float y) {
            if (this.isActionDown) {
                float position = this.element.getOrientation() == 0 ? x : y;
                float deltaPosition = position - this.lastPosition;
                if (Math.abs(deltaPosition) >= 10.0f) {
                    this.scrolling = true;
                    destroyTimer();
                }
                if (this.scrolling) {
                    this.currentOffset += deltaPosition;
                    float scrollSize = getScrollSize();
                    float f = (-this.currentOffset) % scrollSize;
                    this.scrollOffset = f;
                    if (f < 0.0f) {
                        this.scrollOffset = f + scrollSize;
                    }
                    this.lastPosition = position;
                }
            }
        }
    
        public void handleTouchUp() {
            if (this.isActionDown) {
                destroyTimer();
                if (isTap() && !this.scrolling) {
                    this.inputControlsView.handleInputEvent(this.binding, true);
                    final Binding finalBinding = this.binding;
                    this.inputControlsView.postDelayed(new Runnable() { // from class: com.winlator.inputcontrols.RangeScroller$$ExternalSyntheticLambda0
                        @Override // java.lang.Runnable
                        public final void run() {
                            RangeScroller.this.lambda$handleTouchUp$0(finalBinding);
                        }
                    }, 30L);
                } else {
                    this.inputControlsView.handleInputEvent(this.binding, false);
                }
            }
            this.isActionDown = false;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$handleTouchUp$0(Binding finalBinding) {
            this.inputControlsView.handleInputEvent(finalBinding, false);
        }
    }
  + app/src/main/java/com/winlator/math/Mathf.java
    package com.winlator.math;
    
    /* loaded from: classes.dex */
    public abstract class Mathf {
        public static float clamp(float x, float min, float max) {
            return x < min ? min : x > max ? max : x;
        }
    
        public static int clamp(int x, int min, int max) {
            return x < min ? min : x > max ? max : x;
        }
    
        public static float roundTo(float x, float step) {
            return roundTo(x, step, true);
        }
    
        public static float roundTo(float x, float step, boolean roundHalfDown) {
            return (float) ((roundHalfDown ? Math.floor(x / step) : Math.round(r0)) * step);
        }
    
        public static int roundPoint(float x) {
            return (int) (x <= 0.0f ? Math.floor(x) : Math.ceil(x));
        }
    
        public static byte sign(float x) {
            return (byte) (x < 0.0f ? -1 : x > 0.0f ? 1 : 0);
        }
    
        public static float lengthSq(float x, float y) {
            return (x * x) + (y * y);
        }
    
        public static float fract(float x) {
            return x - ((int) Math.floor(x));
        }
    }
  + app/src/main/java/com/winlator/math/XForm.java
    package com.winlator.math;
    
    /* loaded from: classes.dex */
    public class XForm {
        private static final float[] tmpXForm = getInstance();
    
        public static float[] getInstance() {
            return identity(new float[6]);
        }
    
        public static float[] identity(float[] xform) {
            return set(xform, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f);
        }
    
        public static float[] set(float[] xform, float n11, float n12, float n21, float n22, float dx, float dy) {
            xform[0] = n11;
            xform[1] = n12;
            xform[2] = n21;
            xform[3] = n22;
            xform[4] = dx;
            xform[5] = dy;
            return xform;
        }
    
        public static float[] set(float[] xform, float tx, float ty, float sx, float sy) {
            xform[0] = sx;
            xform[1] = 0.0f;
            xform[2] = 0.0f;
            xform[3] = sy;
            xform[4] = tx;
            xform[5] = ty;
            return xform;
        }
    
        public static float[] makeTransform(float[] xform, float tx, float ty, float sx, float sy, float angle) {
            float c = (float) Math.cos(angle);
            float s = (float) Math.sin(angle);
            return set(xform, sx * c, sy * s, sx * (-s), sy * c, tx, ty);
        }
    
        public static float[] makeTranslation(float[] xform, float x, float y) {
            return set(xform, 1.0f, 0.0f, 0.0f, 1.0f, x, y);
        }
    
        public static float[] makeScale(float[] xform, float x, float y) {
            return set(xform, x, 0.0f, 0.0f, y, 0.0f, 0.0f);
        }
    
        public static synchronized float[] scale(float[] xform, float x, float y) {
            float[] multiply;
            synchronized (XForm.class) {
                multiply = multiply(xform, xform, makeScale(tmpXForm, x, y));
            }
            return multiply;
        }
    
        public static float[] multiply(float[] result, float[] ta, float[] tb) {
            float a0 = ta[0];
            float a3 = ta[3];
            float a1 = ta[1];
            float a4 = ta[4];
            float a2 = ta[2];
            float a5 = ta[5];
            float b0 = tb[0];
            float b3 = tb[3];
            float b1 = tb[1];
            float b4 = tb[4];
            float b2 = tb[2];
            float b5 = tb[5];
            result[0] = (a0 * b0) + (a1 * b2);
            result[1] = (a0 * b1) + (a1 * b3);
            result[2] = (a2 * b0) + (a3 * b2);
            result[3] = (a2 * b1) + (a3 * b3);
            result[4] = (a4 * b0) + (a5 * b2) + b4;
            result[5] = (a4 * b1) + (a5 * b3) + b5;
            return result;
        }
    
        public static float[] transformPoint(float[] xform, float x, float y) {
            return transformPoint(xform, x, y, new float[2]);
        }
    
        public static float[] transformPoint(float[] xform, float x, float y, float[] result) {
            result[0] = (xform[0] * x) + (xform[2] * y) + xform[4];
            result[1] = (xform[1] * x) + (xform[3] * y) + xform[5];
            return result;
        }
    }
  + app/src/main/java/com/winlator/renderer/EffectComposer.java
    package com.winlator.renderer;
    
    import android.opengl.GLES20;
    import com.winlator.renderer.effects.Effect;
    import com.winlator.renderer.material.ShaderMaterial;
    import java.util.ArrayList;
    import java.util.Iterator;
    
    /* loaded from: classes.dex */
    public class EffectComposer {
        private final GLRenderer renderer;
        private RenderTarget readBuffer = null;
        private RenderTarget writeBuffer = null;
        private final ArrayList<Effect> effects = new ArrayList<>();
    
        public EffectComposer(GLRenderer renderer) {
            this.renderer = renderer;
        }
    
        public synchronized void addEffect(Effect effect) {
            if (!this.effects.contains(effect)) {
                this.effects.add(effect);
            }
            this.renderer.xServerView.requestRender();
        }
    
        public synchronized void removeEffect(Effect effect) {
            this.effects.remove(effect);
            this.renderer.xServerView.requestRender();
        }
    
        public synchronized <T extends Effect> T getEffect(Class<T> effectClass) {
            Iterator<Effect> it = this.effects.iterator();
            while (it.hasNext()) {
                T t = (T) it.next();
                if (t.getClass() == effectClass) {
                    return t;
                }
            }
            return null;
        }
    
        public synchronized boolean hasEffects() {
            return !this.effects.isEmpty();
        }
    
        private void swapBuffers() {
            RenderTarget tmp = this.writeBuffer;
            this.writeBuffer = this.readBuffer;
            this.readBuffer = tmp;
        }
    
        private void renderEffect(Effect effect) {
            ShaderMaterial material = effect.getMaterial();
            material.use();
            this.renderer.quadVertices.bind(material.programId);
            GLRenderer gLRenderer = this.renderer;
            material.setUniformVec2("resolution", gLRenderer.surfaceWidth, gLRenderer.surfaceHeight);
            GLES20.glActiveTexture(33984);
            GLES20.glBindTexture(3553, this.readBuffer.getTextureId());
            material.setUniformInt("screenTexture", 0);
            GLES20.glDrawArrays(5, 0, this.renderer.quadVertices.count());
            GLES20.glBindTexture(3553, 0);
        }
    
        private void initBuffers() {
            if (this.readBuffer == null) {
                RenderTarget renderTarget = new RenderTarget();
                this.readBuffer = renderTarget;
                GLRenderer gLRenderer = this.renderer;
                renderTarget.allocateFramebuffer(gLRenderer.surfaceWidth, gLRenderer.surfaceHeight);
            }
            if (this.writeBuffer == null) {
                RenderTarget renderTarget2 = new RenderTarget();
                this.writeBuffer = renderTarget2;
                GLRenderer gLRenderer2 = this.renderer;
                renderTarget2.allocateFramebuffer(gLRenderer2.surfaceWidth, gLRenderer2.surfaceHeight);
            }
        }
    
        public synchronized void render() {
            initBuffers();
            GLES20.glBindFramebuffer(36160, hasEffects() ? this.readBuffer.getFramebuffer() : 0);
            this.renderer.drawFrame();
            Iterator<Effect> it = this.effects.iterator();
            while (it.hasNext()) {
                Effect effect = it.next();
                ArrayList<Effect> arrayList = this.effects;
                boolean renderToScreen = effect == arrayList.get(arrayList.size() - 1);
                GLES20.glBindFramebuffer(36160, !renderToScreen ? this.writeBuffer.getFramebuffer() : 0);
                GLRenderer gLRenderer = this.renderer;
                GLES20.glViewport(0, 0, gLRenderer.surfaceWidth, gLRenderer.surfaceHeight);
                this.renderer.viewportNeedsUpdate = true;
                GLES20.glClear(16384);
                renderEffect(effect);
                swapBuffers();
            }
        }
    }
  + app/src/main/java/com/winlator/renderer/FullscreenTransformation.java
    package com.winlator.renderer;
    
    import com.winlator.xserver.ScreenInfo;
    import com.winlator.xserver.Window;
    
    /* loaded from: classes.dex */
    public class FullscreenTransformation {
        public short height;
        public short width;
        private final Window window;
        public short x;
        public short y;
    
        public FullscreenTransformation(Window window) {
            this.window = window;
        }
    
        public void update(ScreenInfo screenInfo, short originWidth, short originHeight) {
            short targetHeight = (short) Math.min(screenInfo.height, (screenInfo.width / originWidth) * originHeight);
            short targetWidth = (short) ((targetHeight / originHeight) * originWidth);
            this.x = (short) ((screenInfo.width - targetWidth) * 0.5f);
            this.y = (short) ((screenInfo.height - targetHeight) * 0.5f);
            this.width = targetWidth;
            this.height = targetHeight;
        }
    
        public short[] transformPointerCoords(short x, short y) {
            short[] localPoint = this.window.rootPointToLocal(x, y, true);
            float scaleX = this.window.getWidth() / this.width;
            float scaleY = this.window.getHeight() / this.height;
            short transformedX = (short) Math.max(0.0f, (localPoint[0] * scaleX) + this.window.getRootX());
            short transformedY = (short) Math.max(0.0f, (localPoint[1] * scaleY) + this.window.getRootY());
            return new short[]{transformedX, transformedY};
        }
    }
  + app/src/main/java/com/winlator/renderer/GLRenderer$$ExternalSyntheticLambda0.java
    package com.winlator.renderer;
    
    /* compiled from: R8$$SyntheticClass */
    /* loaded from: classes.dex */
    public final /* synthetic */ class GLRenderer$$ExternalSyntheticLambda0 implements Runnable {
        public final /* synthetic */ GLRenderer f$0;
    
        public /* synthetic */ GLRenderer$$ExternalSyntheticLambda0(GLRenderer gLRenderer) {
            this.f$0 = gLRenderer;
        }
    
        @Override // java.lang.Runnable
        public final void run() {
            this.f$0.updateScene();
        }
    }
  + app/src/main/java/com/winlator/renderer/GLRenderer.java
    package com.winlator.renderer;
    
    import android.content.Context;
    import android.graphics.Bitmap;
    import android.graphics.BitmapFactory;
    import android.opengl.GLES20;
    import android.opengl.GLSurfaceView;
    import androidx.core.graphics.ColorUtils;
    import com.winlator.R;
    import com.winlator.math.Mathf;
    import com.winlator.math.XForm;
    import com.winlator.renderer.material.CursorMaterial;
    import com.winlator.renderer.material.WindowMaterial;
    import com.winlator.widget.XServerView;
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Cursor;
    import com.winlator.xserver.Decoration;
    import com.winlator.xserver.Drawable;
    import com.winlator.xserver.Pointer;
    import com.winlator.xserver.ScreenInfo;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.WindowManager;
    import com.winlator.xserver.XLock;
    import com.winlator.xserver.XServer;
    import java.util.ArrayList;
    import java.util.Iterator;
    import javax.microedition.khronos.egl.EGLConfig;
    import javax.microedition.khronos.opengles.GL10;
    
    /* loaded from: classes.dex */
    public class GLRenderer implements GLSurfaceView.Renderer, WindowManager.OnWindowModificationListener, Pointer.OnPointerMotionListener {
        private int cursorBackColor;
        private int cursorForeColor;
        private final CursorMaterial cursorMaterial;
        private float cursorScale;
        private boolean cursorVisible;
        public final EffectComposer effectComposer;
        private boolean forceWindowsFullscreen;
        private boolean fullscreen;
        private float magnifierZoom;
        protected final VertexAttribute quadVertices;
        private final ArrayList<RenderableWindow> renderableWindows;
        private final Drawable rootCursorDrawable;
        private boolean screenOffsetYRelativeToCursor;
        protected short surfaceHeight;
        protected short surfaceWidth;
        private final float[] tmpXForm1;
        private final float[] tmpXForm2;
        private boolean toggleFullscreen;
        private String[] unviewableWMClasses;
        public final ViewTransformation viewTransformation;
        protected boolean viewportNeedsUpdate;
        private final WindowMaterial windowMaterial;
        private final XServer xServer;
        public final XServerView xServerView;
    
        public GLRenderer(XServerView xServerView, XServer xServer) {
            VertexAttribute vertexAttribute = new VertexAttribute("position", 2);
            this.quadVertices = vertexAttribute;
            this.tmpXForm1 = XForm.getInstance();
            this.tmpXForm2 = XForm.getInstance();
            this.cursorMaterial = new CursorMaterial();
            this.windowMaterial = new WindowMaterial();
            this.viewTransformation = new ViewTransformation();
            this.renderableWindows = new ArrayList<>();
            this.fullscreen = false;
            this.toggleFullscreen = false;
            this.viewportNeedsUpdate = true;
            this.cursorVisible = true;
            this.cursorScale = 1.0f;
            this.cursorBackColor = 16777215;
            this.cursorForeColor = 0;
            this.screenOffsetYRelativeToCursor = false;
            this.unviewableWMClasses = null;
            this.magnifierZoom = 1.0f;
            this.effectComposer = new EffectComposer(this);
            this.xServerView = xServerView;
            this.xServer = xServer;
            this.rootCursorDrawable = createRootCursorDrawable();
            vertexAttribute.put(new float[]{0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f});
            xServer.windowManager.addOnWindowModificationListener(this);
            xServer.pointer.addOnPointerMotionListener(this);
        }
    
        @Override // android.opengl.GLSurfaceView.Renderer
        public void onSurfaceCreated(GL10 gl, EGLConfig config) {
            GPUImage.checkIsSupported();
            GLES20.glFrontFace(2305);
            GLES20.glDisable(2884);
            GLES20.glDisable(2929);
            GLES20.glDepthMask(false);
            GLES20.glEnable(3042);
            GLES20.glBlendFunc(770, 771);
            GLES20.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
        }
    
        @Override // android.opengl.GLSurfaceView.Renderer
        public void onSurfaceChanged(GL10 gl, int width, int height) {
            this.surfaceWidth = (short) width;
            this.surfaceHeight = (short) height;
            ViewTransformation viewTransformation = this.viewTransformation;
            ScreenInfo screenInfo = this.xServer.screenInfo;
            viewTransformation.update(width, height, screenInfo.width, screenInfo.height);
        }
    
        @Override // android.opengl.GLSurfaceView.Renderer
        public void onDrawFrame(GL10 gl) {
            if (this.toggleFullscreen) {
                this.fullscreen = !this.fullscreen;
                this.toggleFullscreen = false;
                this.viewportNeedsUpdate = true;
            }
            if (this.effectComposer.hasEffects()) {
                this.effectComposer.render();
            } else {
                drawFrame();
            }
        }
    
        protected void drawFrame() {
            if (this.viewportNeedsUpdate) {
                if (this.fullscreen) {
                    GLES20.glViewport(0, 0, this.surfaceWidth, this.surfaceHeight);
                } else {
                    ViewTransformation viewTransformation = this.viewTransformation;
                    GLES20.glViewport(viewTransformation.viewOffsetX, viewTransformation.viewOffsetY, viewTransformation.viewWidth, viewTransformation.viewHeight);
                }
                this.viewportNeedsUpdate = false;
            }
            GLES20.glClear(16384);
            float pointerX = 0.0f;
            float pointerY = 0.0f;
            float magnifierZoom = !this.screenOffsetYRelativeToCursor ? this.magnifierZoom : 1.0f;
            if (magnifierZoom != 1.0f) {
                short s = this.xServer.screenInfo.width;
                pointerX = Mathf.clamp((this.xServer.pointer.getX() * magnifierZoom) - (s * 0.5f), 0.0f, s * Math.abs(1.0f - magnifierZoom));
            }
            if (this.screenOffsetYRelativeToCursor || magnifierZoom != 1.0f) {
                float scaleY = magnifierZoom != 1.0f ? Math.abs(1.0f - magnifierZoom) : 0.5f;
                XServer xServer = this.xServer;
                float offsetY = xServer.screenInfo.height * (this.screenOffsetYRelativeToCursor ? 0.25f : 0.5f);
                pointerY = Mathf.clamp((xServer.pointer.getY() * magnifierZoom) - offsetY, 0.0f, this.xServer.screenInfo.height * scaleY);
            }
            XForm.makeTransform(this.tmpXForm2, -pointerX, -pointerY, magnifierZoom, magnifierZoom, 0.0f);
            renderWindows();
            if (this.cursorVisible) {
                renderCursor();
            }
        }
    
        @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
        public void onMapWindow(Window window) {
            this.xServerView.queueEvent(new GLRenderer$$ExternalSyntheticLambda0(this));
            this.xServerView.requestRender();
        }
    
        @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
        public void onUnmapWindow(Window window) {
            this.xServerView.queueEvent(new GLRenderer$$ExternalSyntheticLambda0(this));
            this.xServerView.requestRender();
        }
    
        @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
        public void onChangeWindowZOrder(Window window) {
            this.xServerView.queueEvent(new GLRenderer$$ExternalSyntheticLambda0(this));
            this.xServerView.requestRender();
        }
    
        @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
        public void onUpdateWindowContent(Window window) {
            this.xServerView.requestRender();
        }
    
        @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
        public void onUpdateWindowGeometry(final Window window, boolean resized) {
            if (resized) {
                this.xServerView.queueEvent(new GLRenderer$$ExternalSyntheticLambda0(this));
            } else {
                this.xServerView.queueEvent(new Runnable() { // from class: com.winlator.renderer.GLRenderer$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        GLRenderer.this.lambda$onUpdateWindowGeometry$0(window);
                    }
                });
            }
            this.xServerView.requestRender();
        }
    
        @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
        public void onUpdateWindowAttributes(Window window, Bitmask mask) {
            if (mask.isSet(16384)) {
                this.xServerView.requestRender();
            }
        }
    
        @Override // com.winlator.xserver.Pointer.OnPointerMotionListener
        public void onPointerMove(short x, short y) {
            this.xServerView.requestRender();
        }
    
        private void renderCursorDrawable(Drawable drawable, int x, int y) {
            synchronized (drawable.renderLock) {
                Texture texture = drawable.getTexture();
                texture.updateFromDrawable(drawable);
                float f = drawable.width;
                float f2 = this.cursorScale;
                XForm.set(this.tmpXForm1, x, y, f * f2, drawable.height * f2);
                float[] fArr = this.tmpXForm1;
                XForm.multiply(fArr, fArr, this.tmpXForm2);
                this.cursorMaterial.setUniformColor("backColor", this.cursorBackColor);
                this.cursorMaterial.setUniformColor("foreColor", this.cursorForeColor);
                GLES20.glActiveTexture(33984);
                GLES20.glBindTexture(3553, texture.getTextureId());
                this.cursorMaterial.setUniformInt("texture", 0);
                this.cursorMaterial.setUniformFloatArray("xform", this.tmpXForm1);
                GLES20.glDrawArrays(5, 0, this.quadVertices.count());
                GLES20.glBindTexture(3553, 0);
            }
        }
    
        private void renderWindowDrawable(Drawable drawable, int x, int y, boolean transparent, FullscreenTransformation fullscreenTransformation) {
            synchronized (drawable.renderLock) {
                Texture texture = drawable.getTexture();
                texture.updateFromDrawable(drawable);
                if (fullscreenTransformation != null) {
                    XForm.set(this.tmpXForm1, fullscreenTransformation.x, fullscreenTransformation.y, fullscreenTransformation.width, fullscreenTransformation.height);
                } else {
                    XForm.set(this.tmpXForm1, x, y, drawable.width, drawable.height);
                }
                float[] fArr = this.tmpXForm1;
                XForm.multiply(fArr, fArr, this.tmpXForm2);
                GLES20.glActiveTexture(33984);
                GLES20.glBindTexture(3553, texture.getTextureId());
                this.windowMaterial.setUniformInt("texture", 0);
                this.windowMaterial.setUniformFloat("noAlpha", !transparent ? 1.0f : 0.0f);
                this.windowMaterial.setUniformFloatArray("xform", this.tmpXForm1);
                GLES20.glDrawArrays(5, 0, this.quadVertices.count());
                GLES20.glBindTexture(3553, 0);
            }
        }
    
        private void renderWindows() {
            this.windowMaterial.use();
            WindowMaterial windowMaterial = this.windowMaterial;
            ScreenInfo screenInfo = this.xServer.screenInfo;
            windowMaterial.setUniformVec2("viewSize", screenInfo.width, screenInfo.height);
            this.quadVertices.bind(this.windowMaterial.programId);
            XLock lock = this.xServer.lock(XServer.Lockable.DRAWABLE_MANAGER);
            try {
                Iterator<RenderableWindow> it = this.renderableWindows.iterator();
                while (it.hasNext()) {
                    RenderableWindow window = it.next();
                    if (!window.content.isBlank()) {
                        renderWindowDrawable(window.content, window.rootX, window.rootY, window.transparent, window.fullscreenTransformation);
                    }
                }
                if (lock != null) {
                    lock.close();
                }
                this.quadVertices.disable();
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        private void renderCursor() {
            this.cursorMaterial.use();
            CursorMaterial cursorMaterial = this.cursorMaterial;
            ScreenInfo screenInfo = this.xServer.screenInfo;
            cursorMaterial.setUniformVec2("viewSize", screenInfo.width, screenInfo.height);
            this.quadVertices.bind(this.cursorMaterial.programId);
            XLock lock = this.xServer.lock(XServer.Lockable.DRAWABLE_MANAGER);
            try {
                Window pointWindow = this.xServer.inputDeviceManager.getPointWindow();
                Cursor cursor = pointWindow != null ? pointWindow.attributes.getCursor() : null;
                short x = this.xServer.pointer.getClampedX();
                short y = this.xServer.pointer.getClampedY();
                if (cursor != null) {
                    if (cursor.isVisible()) {
                        renderCursorDrawable(cursor.cursorImage, x - cursor.hotSpotX, y - cursor.hotSpotY);
                    }
                } else {
                    renderCursorDrawable(this.rootCursorDrawable, x, y);
                }
                if (lock != null) {
                    lock.close();
                }
                this.quadVertices.disable();
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public void toggleFullscreen() {
            this.toggleFullscreen = true;
            this.xServerView.requestRender();
        }
    
        private Drawable createRootCursorDrawable() {
            Context context = this.xServerView.getContext();
            BitmapFactory.Options options = new BitmapFactory.Options();
            options.inScaled = false;
            Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.cursor, options);
            return Drawable.fromBitmap(bitmap);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void updateScene() {
            XLock lock = this.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.DRAWABLE_MANAGER);
            try {
                this.renderableWindows.clear();
                Window window = this.xServer.windowManager.rootWindow;
                collectRenderableWindows(window, window.getX(), this.xServer.windowManager.rootWindow.getY());
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        private void collectRenderableWindows(Window window, int x, int y) {
            FullscreenTransformation fullscreenTransformation;
            if (window.isRenderable()) {
                if (window != this.xServer.windowManager.rootWindow) {
                    boolean viewable = true;
                    boolean inBounds = false;
                    if (this.unviewableWMClasses != null) {
                        String wmClass = window.getClassName();
                        String[] strArr = this.unviewableWMClasses;
                        int length = strArr.length;
                        int i = 0;
                        while (true) {
                            if (i >= length) {
                                break;
                            }
                            String unviewableWMClass = strArr[i];
                            if (!wmClass.contains(unviewableWMClass)) {
                                i++;
                            } else {
                                if (window.attributes.isEnabled()) {
                                    window.disableAllDescendants();
                                }
                                viewable = false;
                            }
                        }
                    }
                    if (viewable) {
                        Window parent = window.getParent();
                        boolean transparent = window.attributes.isTransparent() || parent.attributes.isTransparent();
                        if (this.forceWindowsFullscreen) {
                            short width = window.getWidth();
                            short height = window.getHeight();
                            if (width >= 320 && height >= 200) {
                                ScreenInfo screenInfo = this.xServer.screenInfo;
                                if (width < screenInfo.width && height < screenInfo.height) {
                                    inBounds = true;
                                }
                            }
                            if (window.getType() == Window.Type.NORMAL && inBounds && window.hasNoDecorations()) {
                                FullscreenTransformation fullscreenTransformation2 = window.getFullscreenTransformation();
                                if (fullscreenTransformation2 == null) {
                                    FullscreenTransformation fullscreenTransformation3 = new FullscreenTransformation(window);
                                    fullscreenTransformation2 = fullscreenTransformation3;
                                    window.setFullscreenTransformation(fullscreenTransformation3);
                                }
                                fullscreenTransformation2.update(this.xServer.screenInfo, window.getWidth(), window.getHeight());
                                if (parent != this.xServer.windowManager.rootWindow && parent.getChildCount() == 1 && parent.hasDecoration(Decoration.BORDER) && parent.hasDecoration(Decoration.TITLE)) {
                                    FullscreenTransformation parentFullscreenTransformation = parent.getFullscreenTransformation();
                                    if (parentFullscreenTransformation == null) {
                                        FullscreenTransformation fullscreenTransformation4 = new FullscreenTransformation(parent);
                                        parentFullscreenTransformation = fullscreenTransformation4;
                                        parent.setFullscreenTransformation(fullscreenTransformation4);
                                    }
                                    parentFullscreenTransformation.update(this.xServer.screenInfo, parent.getWidth(), parent.getHeight());
                                    removeRenderableWindow(parent);
                                } else {
                                    parent.setFullscreenTransformation(null);
                                }
                                fullscreenTransformation = fullscreenTransformation2;
                            } else {
                                window.setFullscreenTransformation(null);
                                fullscreenTransformation = null;
                            }
                            this.renderableWindows.add(new RenderableWindow(window.getContent(), x, y, transparent, fullscreenTransformation));
                        } else {
                            this.renderableWindows.add(new RenderableWindow(window.getContent(), x, y, transparent, null));
                        }
                    }
                }
                for (Window child : window.getChildren()) {
                    collectRenderableWindows(child, child.getX() + x, child.getY() + y);
                }
            }
        }
    
        private void removeRenderableWindow(Window window) {
            for (int i = 0; i < this.renderableWindows.size(); i++) {
                if (this.renderableWindows.get(i).content == window.getContent()) {
                    this.renderableWindows.remove(i);
                    return;
                }
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        /* renamed from: updateWindowPosition, reason: merged with bridge method [inline-methods] */
        public void lambda$onUpdateWindowGeometry$0(Window window) {
            Iterator<RenderableWindow> it = this.renderableWindows.iterator();
            while (it.hasNext()) {
                RenderableWindow renderableWindow = it.next();
                if (renderableWindow.content == window.getContent()) {
                    renderableWindow.rootX = window.getRootX();
                    renderableWindow.rootY = window.getRootY();
                    return;
                }
            }
        }
    
        public void setCursorVisible(boolean cursorVisible) {
            this.cursorVisible = cursorVisible;
            this.xServerView.requestRender();
        }
    
        public void setCursorScale(float cursorScale) {
            this.cursorScale = cursorScale;
        }
    
        public void setCursorColor(int cursorColor) {
            this.cursorBackColor = cursorColor;
            this.cursorForeColor = ColorUtils.calculateLuminance(cursorColor) < 0.5d ? 16777215 : 0;
        }
    
        public void setScreenOffsetYRelativeToCursor(boolean screenOffsetYRelativeToCursor) {
            this.screenOffsetYRelativeToCursor = screenOffsetYRelativeToCursor;
            this.xServerView.requestRender();
        }
    
        public void setForceWindowsFullscreen(boolean forceWindowsFullscreen) {
            this.forceWindowsFullscreen = forceWindowsFullscreen;
        }
    
        public void setUnviewableWMClasses(String... unviewableWMNames) {
            this.unviewableWMClasses = unviewableWMNames;
        }
    
        public boolean isFullscreen() {
            return this.fullscreen;
        }
    
        public float getMagnifierZoom() {
            return this.magnifierZoom;
        }
    
        public void setMagnifierZoom(float magnifierZoom) {
            this.magnifierZoom = magnifierZoom;
            this.xServerView.requestRender();
        }
    }
  + app/src/main/java/com/winlator/renderer/GPUImage.java
    package com.winlator.renderer;
    
    import androidx.annotation.Keep;
    import com.winlator.xserver.Drawable;
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public class GPUImage extends Texture {
        private static boolean supported = false;
        private long hardwareBufferPtr;
        private long imageKHRPtr;
        private boolean locked;
        private int nativeHandle;
        private short stride;
        private ByteBuffer virtualData;
    
        private native long createHardwareBuffer(short s, short s2, boolean z, boolean z2);
    
        private native long createImageKHR(long j, int i);
    
        private native void destroyHardwareBuffer(long j, boolean z);
    
        private native void destroyImageKHR(long j);
    
        private native ByteBuffer lockHardwareBuffer(long j);
    
        static {
            System.loadLibrary("winlator");
        }
    
        public GPUImage(short width, short height) {
            this(width, height, true, true);
        }
    
        public GPUImage(short width, short height, boolean cpuAccess) {
            this(width, height, cpuAccess, true);
        }
    
        public GPUImage(short width, short height, boolean cpuAccess, boolean useHALPixelFormatBGRA8888) {
            this.locked = false;
            long createHardwareBuffer = createHardwareBuffer(width, height, cpuAccess, useHALPixelFormatBGRA8888);
            this.hardwareBufferPtr = createHardwareBuffer;
            if (cpuAccess && createHardwareBuffer != 0) {
                this.virtualData = lockHardwareBuffer(createHardwareBuffer);
                this.locked = true;
            }
        }
    
        @Override // com.winlator.renderer.Texture
        public void allocateTexture(short width, short height, ByteBuffer data) {
            if (isAllocated()) {
                return;
            }
            super.allocateTexture(width, height, null);
            this.imageKHRPtr = createImageKHR(this.hardwareBufferPtr, this.textureId);
        }
    
        @Override // com.winlator.renderer.Texture
        public void updateFromDrawable(Drawable drawable) {
            if (!isAllocated()) {
                allocateTexture(drawable.width, drawable.height, null);
            }
            this.needsUpdate = false;
        }
    
        public short getStride() {
            return this.stride;
        }
    
        @Keep
        private void setStride(short stride) {
            this.stride = stride;
        }
    
        public int getNativeHandle() {
            return this.nativeHandle;
        }
    
        @Keep
        private void setNativeHandle(int nativeHandle) {
            this.nativeHandle = nativeHandle;
        }
    
        public ByteBuffer getVirtualData() {
            return this.virtualData;
        }
    
        @Override // com.winlator.renderer.Texture
        public void destroy() {
            destroyImageKHR(this.imageKHRPtr);
            destroyHardwareBuffer(this.hardwareBufferPtr, this.locked);
            this.virtualData = null;
            this.imageKHRPtr = 0L;
            this.hardwareBufferPtr = 0L;
            super.destroy();
        }
    
        public static boolean isSupported() {
            return supported;
        }
    
        public long getHardwareBufferPtr() {
            return this.hardwareBufferPtr;
        }
    
        public static void checkIsSupported() {
            GPUImage gpuImage = new GPUImage((short) 8, (short) 8);
            gpuImage.allocateTexture((short) 8, (short) 8, null);
            supported = (gpuImage.hardwareBufferPtr == 0 || gpuImage.imageKHRPtr == 0 || gpuImage.virtualData == null) ? false : true;
            gpuImage.destroy();
        }
    }
  + app/src/main/java/com/winlator/renderer/RenderTarget.java
    package com.winlator.renderer;
    
    import android.opengl.GLES20;
    
    /* loaded from: classes.dex */
    public class RenderTarget extends Texture {
        private int framebuffer;
    
        private void generateFramebuffer() {
            int[] framebuffers = new int[1];
            GLES20.glGenFramebuffers(1, framebuffers, 0);
            this.framebuffer = framebuffers[0];
        }
    
        public void allocateFramebuffer(int width, int height) {
            if (this.framebuffer != 0) {
                return;
            }
            generateFramebuffer();
            generateTextureId();
            GLES20.glBindFramebuffer(36160, this.framebuffer);
            GLES20.glActiveTexture(33984);
            GLES20.glPixelStorei(3317, this.unpackAlignment);
            GLES20.glBindTexture(3553, this.textureId);
            int i = this.format;
            GLES20.glTexImage2D(3553, 0, i, width, height, 0, i, 5121, null);
            setTextureParameters();
            GLES20.glFramebufferTexture2D(36160, 36064, 3553, this.textureId, 0);
            GLES20.glBindTexture(3553, 0);
            GLES20.glBindFramebuffer(36160, 0);
        }
    
        public int getFramebuffer() {
            return this.framebuffer;
        }
    }
  + app/src/main/java/com/winlator/renderer/RenderableWindow.java
    package com.winlator.renderer;
    
    import com.winlator.xserver.Drawable;
    
    /* loaded from: classes.dex */
    class RenderableWindow {
        final Drawable content;
        final FullscreenTransformation fullscreenTransformation;
        short rootX;
        short rootY;
        final boolean transparent;
    
        public RenderableWindow(Drawable content, int rootX, int rootY, boolean transparent, FullscreenTransformation fullscreenTransformation) {
            this.content = content;
            this.rootX = (short) rootX;
            this.rootY = (short) rootY;
            this.transparent = transparent;
            this.fullscreenTransformation = fullscreenTransformation;
        }
    }
  + app/src/main/java/com/winlator/renderer/Texture.java
    package com.winlator.renderer;
    
    import android.opengl.GLES20;
    import com.winlator.xserver.Drawable;
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public class Texture {
        protected int textureId = 0;
        protected int wrapS = 33071;
        protected int wrapT = 33071;
        protected int magFilter = 9729;
        protected int minFilter = 9729;
        protected int format = 32993;
        protected byte unpackAlignment = 4;
        protected boolean needsUpdate = true;
    
        protected void generateTextureId() {
            int[] textureIds = new int[1];
            GLES20.glGenTextures(1, textureIds, 0);
            this.textureId = textureIds[0];
        }
    
        protected void setTextureParameters() {
            GLES20.glTexParameteri(3553, 10242, this.wrapS);
            GLES20.glTexParameteri(3553, 10243, this.wrapT);
            GLES20.glTexParameteri(3553, 10240, this.magFilter);
            GLES20.glTexParameteri(3553, 10241, this.minFilter);
        }
    
        public void allocateTexture(short width, short height, ByteBuffer data) {
            generateTextureId();
            GLES20.glActiveTexture(33984);
            GLES20.glPixelStorei(3317, this.unpackAlignment);
            GLES20.glBindTexture(3553, this.textureId);
            if (data != null) {
                int i = this.format;
                GLES20.glTexImage2D(3553, 0, i, width, height, 0, i, 5121, data);
            }
            setTextureParameters();
            GLES20.glBindTexture(3553, 0);
        }
    
        public void setNeedsUpdate(boolean needsUpdate) {
            this.needsUpdate = needsUpdate;
        }
    
        public void updateFromDrawable(Drawable drawable) {
            ByteBuffer data = drawable.getData();
            if (data == null) {
                return;
            }
            if (!isAllocated()) {
                allocateTexture(drawable.width, drawable.height, data);
            } else if (this.needsUpdate) {
                GLES20.glBindTexture(3553, this.textureId);
                GLES20.glTexSubImage2D(3553, 0, 0, 0, drawable.width, drawable.height, this.format, 5121, data);
                GLES20.glBindTexture(3553, 0);
                this.needsUpdate = false;
            }
        }
    
        public boolean isAllocated() {
            return this.textureId > 0;
        }
    
        public int getTextureId() {
            return this.textureId;
        }
    
        public void copyFromFramebuffer(int framebuffer, short width, short height) {
            if (!isAllocated()) {
                allocateTexture(width, height, null);
            }
            GLES20.glBindFramebuffer(36160, framebuffer);
            GLES20.glActiveTexture(33984);
            GLES20.glBindTexture(3553, this.textureId);
            GLES20.glCopyTexImage2D(3553, 0, 6408, 0, 0, width, height, 0);
            GLES20.glBindTexture(3553, 0);
            GLES20.glBindFramebuffer(36160, 0);
        }
    
        public void destroy() {
            int i = this.textureId;
            if (i > 0) {
                int[] textureIds = {i};
                GLES20.glDeleteTextures(textureIds.length, textureIds, 0);
                this.textureId = 0;
            }
        }
    }
  + app/src/main/java/com/winlator/renderer/VertexAttribute.java
    package com.winlator.renderer;
    
    import android.opengl.GLES20;
    import java.nio.Buffer;
    import java.nio.FloatBuffer;
    
    /* loaded from: classes.dex */
    public class VertexAttribute {
        private Buffer buffer;
        private final byte itemSize;
        private final String name;
        private int bufferId = 0;
        private int location = -1;
        private boolean needsUpdate = true;
    
        public VertexAttribute(String name, int itemSize) {
            this.name = name;
            this.itemSize = (byte) itemSize;
        }
    
        public void put(float[] array) {
            this.buffer = FloatBuffer.wrap(array);
            this.needsUpdate = true;
        }
    
        public void update() {
            if (!this.needsUpdate || this.buffer == null) {
                return;
            }
            if (this.bufferId == 0) {
                int[] bufferIds = new int[1];
                GLES20.glGenBuffers(1, bufferIds, 0);
                this.bufferId = bufferIds[0];
            }
            int size = this.buffer.limit() * 4;
            GLES20.glBindBuffer(34962, this.bufferId);
            GLES20.glBufferData(34962, size, this.buffer, 35044);
            GLES20.glBindBuffer(34962, 0);
            this.needsUpdate = false;
        }
    
        public void bind(int programId) {
            update();
            if (this.location == -1) {
                this.location = GLES20.glGetAttribLocation(programId, this.name);
            }
            GLES20.glBindBuffer(34962, this.bufferId);
            GLES20.glEnableVertexAttribArray(this.location);
            GLES20.glVertexAttribPointer(this.location, (int) this.itemSize, 5126, false, 0, 0);
        }
    
        public void disable() {
            int i = this.location;
            if (i == -1) {
                return;
            }
            GLES20.glDisableVertexAttribArray(i);
        }
    
        public int count() {
            Buffer buffer = this.buffer;
            if (buffer != null) {
                return buffer.limit() / this.itemSize;
            }
            return 0;
        }
    }
  + app/src/main/java/com/winlator/renderer/ViewTransformation.java
    package com.winlator.renderer;
    
    /* loaded from: classes.dex */
    public class ViewTransformation {
        public float aspect;
        public float sceneOffsetX;
        public float sceneOffsetY;
        public float sceneScaleX;
        public float sceneScaleY;
        public int viewHeight;
        public int viewOffsetX;
        public int viewOffsetY;
        public int viewWidth;
    
        public void update(int outerWidth, int outerHeight, int innerWidth, int innerHeight) {
            this.aspect = Math.min(outerWidth / innerWidth, outerHeight / innerHeight);
            this.viewWidth = (int) Math.ceil(innerWidth * r0);
            this.viewHeight = (int) Math.ceil(innerHeight * this.aspect);
            float f = this.aspect;
            this.viewOffsetX = (int) ((outerWidth - (innerWidth * f)) * 0.5f);
            this.viewOffsetY = (int) ((outerHeight - (innerHeight * f)) * 0.5f);
            float f2 = (innerWidth * f) / outerWidth;
            this.sceneScaleX = f2;
            float f3 = (innerHeight * f) / outerHeight;
            this.sceneScaleY = f3;
            this.sceneOffsetX = (innerWidth - (innerWidth * f2)) * 0.5f;
            this.sceneOffsetY = (innerHeight - (innerHeight * f3)) * 0.5f;
        }
    }
  + app/src/main/java/com/winlator/renderer/effects/CRTEffect.java
    package com.winlator.renderer.effects;
    
    import com.winlator.renderer.material.ScreenMaterial;
    import com.winlator.renderer.material.ShaderMaterial;
    
    /* loaded from: classes.dex */
    public class CRTEffect extends Effect {
        @Override // com.winlator.renderer.effects.Effect
        protected ShaderMaterial createMaterial() {
            return new ScreenMaterial() { // from class: com.winlator.renderer.effects.CRTEffect.1
                @Override // com.winlator.renderer.material.ShaderMaterial
                protected String getFragmentShader() {
                    return String.join("\n", "precision highp float;", "#define CA_AMOUNT 1.0025", "#define SCANLINE_INTENSITY_X 0.125", "#define SCANLINE_INTENSITY_Y 0.375", "#define SCANLINE_SIZE 1024.0", "uniform sampler2D screenTexture;", "varying vec2 vUV;", "void main() {", "vec4 finalColor = texture2D(screenTexture, vUV);", "finalColor.rgb = vec3(", "texture2D(screenTexture, (vUV - 0.5) * CA_AMOUNT + 0.5).r,", "finalColor.g,", "texture2D(screenTexture, (vUV - 0.5) / CA_AMOUNT + 0.5).b", ");", "float scanlineX = abs(sin(vUV.x * SCANLINE_SIZE) * 0.5 * SCANLINE_INTENSITY_X);", "float scanlineY = abs(sin(vUV.y * SCANLINE_SIZE) * 0.5 * SCANLINE_INTENSITY_Y);", "gl_FragColor = vec4(mix(finalColor.rgb, vec3(0.0), scanlineX + scanlineY), finalColor.a);", "}");
                }
            };
        }
    }
  + app/src/main/java/com/winlator/renderer/effects/ColorEffect.java
    package com.winlator.renderer.effects;
    
    import com.winlator.renderer.material.ScreenMaterial;
    import com.winlator.renderer.material.ShaderMaterial;
    
    /* loaded from: classes.dex */
    public class ColorEffect extends Effect {
        private float brightness = 0.0f;
        private float contrast = 0.0f;
        private float gamma = 1.0f;
    
        @Override // com.winlator.renderer.effects.Effect
        public ShaderMaterial createMaterial() {
            ScreenMaterial material = new ScreenMaterial() { // from class: com.winlator.renderer.effects.ColorEffect.1
                @Override // com.winlator.renderer.material.ShaderMaterial
                protected String getFragmentShader() {
                    return String.join("\n", "precision highp float;", "uniform sampler2D screenTexture;", "uniform float brightness;", "uniform float contrast;", "uniform float gamma;", "varying vec2 vUV;", "void main() {", "vec4 texelColor = texture2D(screenTexture, vUV);", "vec3 color = texelColor.rgb;", "color = clamp(color + brightness, 0.0, 1.0);", "color = (color - 0.5) * clamp(contrast + 1.0, 0.5, 2.0) + 0.5;", "color = pow(color, vec3(1.0 / gamma));", "gl_FragColor = vec4(color, texelColor.a);", "}");
                }
    
                @Override // com.winlator.renderer.material.ShaderMaterial
                public void use() {
                    super.use();
                    setUniformFloat("brightness", ColorEffect.this.brightness);
                    setUniformFloat("contrast", ColorEffect.this.contrast);
                    setUniformFloat("gamma", ColorEffect.this.gamma);
                }
            };
            material.setUniformNames("brightness", "contrast", "gamma", "screenTexture");
            return material;
        }
    
        public float getBrightness() {
            return this.brightness;
        }
    
        public void setBrightness(float brightness) {
            this.brightness = brightness;
        }
    
        public float getContrast() {
            return this.contrast;
        }
    
        public void setContrast(float contrast) {
            this.contrast = contrast;
        }
    
        public float getGamma() {
            return this.gamma;
        }
    
        public void setGamma(float gamma) {
            this.gamma = gamma;
        }
    }
  + app/src/main/java/com/winlator/renderer/effects/Effect.java
    package com.winlator.renderer.effects;
    
    import com.winlator.renderer.material.ShaderMaterial;
    
    /* loaded from: classes.dex */
    public abstract class Effect {
        private ShaderMaterial material;
    
        protected ShaderMaterial createMaterial() {
            return null;
        }
    
        public ShaderMaterial getMaterial() {
            if (this.material == null) {
                this.material = createMaterial();
            }
            return this.material;
        }
    }
  + app/src/main/java/com/winlator/renderer/effects/FXAAEffect.java
    package com.winlator.renderer.effects;
    
    import com.winlator.renderer.material.ScreenMaterial;
    import com.winlator.renderer.material.ShaderMaterial;
    
    /* loaded from: classes.dex */
    public class FXAAEffect extends Effect {
        @Override // com.winlator.renderer.effects.Effect
        public ShaderMaterial createMaterial() {
            return new ScreenMaterial() { // from class: com.winlator.renderer.effects.FXAAEffect.1
                @Override // com.winlator.renderer.material.ShaderMaterial
                protected String getFragmentShader() {
                    return String.join("\n", "precision highp float;", "#define FXAA_MIN_REDUCE (1.0 / 128.0)", "#define FXAA_MUL_REDUCE (1.0 / 8.0)", "#define MAX_SPAN 8.0", "uniform sampler2D screenTexture;", "uniform vec2 resolution;", "const vec3 luma = vec3(0.299, 0.587, 0.114);", "void main() {", "vec2 invResolution = 1.0 / resolution;", "vec3 rgbNW = texture2D(screenTexture, (gl_FragCoord.xy + vec2(-1.0, -1.0)) * invResolution).rgb;", "vec3 rgbNE = texture2D(screenTexture, (gl_FragCoord.xy + vec2( 1.0, -1.0)) * invResolution).rgb;", "vec3 rgbSW = texture2D(screenTexture, (gl_FragCoord.xy + vec2(-1.0,  1.0)) * invResolution).rgb;", "vec3 rgbSE = texture2D(screenTexture, (gl_FragCoord.xy + vec2( 1.0,  1.0)) * invResolution).rgb;", "vec3 rgbM = texture2D(screenTexture,  gl_FragCoord.xy * invResolution).rgb;", "float lumaNW = dot(rgbNW, luma);", "float lumaNE = dot(rgbNE, luma);", "float lumaSW = dot(rgbSW, luma);", "float lumaSE = dot(rgbSE, luma);", "float lumaM  = dot(rgbM,  luma);", "float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));", "float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));", "vec2 dir;", "dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));", "dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));", "float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * 0.25 * FXAA_MUL_REDUCE, FXAA_MIN_REDUCE);", "float minDirFactor = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);", "dir = clamp(dir * minDirFactor, vec2(-MAX_SPAN), vec2(MAX_SPAN)) * invResolution;", "vec4 rgbA = 0.5 * (", "texture2D(screenTexture, gl_FragCoord.xy * invResolution + dir * (1.0 / 3.0 - 0.5)) +", "texture2D(screenTexture, gl_FragCoord.xy * invResolution + dir * (2.0 / 3.0 - 0.5)));", "vec4 rgbB = rgbA * 0.5 + 0.25 * (", "texture2D(screenTexture, gl_FragCoord.xy * invResolution + dir * -0.5) +", "texture2D(screenTexture, gl_FragCoord.xy * invResolution + dir *  0.5));", "float lumaB = dot(rgbB, vec4(luma, 0.0));", "gl_FragColor = lumaB < lumaMin || lumaB > lumaMax ? rgbA : rgbB;", "}");
                }
            };
        }
    }
  + app/src/main/java/com/winlator/renderer/material/CursorMaterial.java
    package com.winlator.renderer.material;
    
    /* loaded from: classes.dex */
    public class CursorMaterial extends ShaderMaterial {
        public CursorMaterial() {
            setUniformNames("xform", "viewSize", "texture", "backColor", "foreColor");
        }
    
        @Override // com.winlator.renderer.material.ShaderMaterial
        protected String getVertexShader() {
            return String.join("\n", "uniform float xform[6];", "uniform vec2 viewSize;", "attribute vec2 position;", "varying vec2 vUV;", "void main() {", "vUV = position;", "vec2 transformedPos = applyXForm(position, xform);", "gl_Position = vec4(2.0 * transformedPos.x / viewSize.x - 1.0, 1.0 - 2.0 * transformedPos.y / viewSize.y, 0.0, 1.0);", "}");
        }
    
        @Override // com.winlator.renderer.material.ShaderMaterial
        protected String getFragmentShader() {
            return String.join("\n", "precision mediump float;", "uniform sampler2D texture;", "uniform vec3 backColor;", "uniform vec3 foreColor;", "varying vec2 vUV;", "void main() {", "vec4 texelColor = texture2D(texture, vUV);", "gl_FragColor = vec4(mix(foreColor, backColor, texelColor.r), texelColor.a);", "}");
        }
    }
  + app/src/main/java/com/winlator/renderer/material/ScreenMaterial.java
    package com.winlator.renderer.material;
    
    /* loaded from: classes.dex */
    public class ScreenMaterial extends ShaderMaterial {
        public ScreenMaterial() {
            setUniformNames("resolution", "screenTexture");
        }
    
        @Override // com.winlator.renderer.material.ShaderMaterial
        protected String getVertexShader() {
            return String.join("\n", "attribute vec2 position;", "varying vec2 vUV;", "void main() {", "vUV = position;", "gl_Position = vec4(2.0 * position.x - 1.0, 2.0 * position.y - 1.0, 0.0, 1.0);", "}");
        }
    }
  + app/src/main/java/com/winlator/renderer/material/ShaderMaterial.java
    package com.winlator.renderer.material;
    
    import android.graphics.Color;
    import android.opengl.GLES20;
    import androidx.collection.ArrayMap;
    
    /* loaded from: classes.dex */
    public class ShaderMaterial {
        public int programId;
        private final ArrayMap<String, Integer> uniforms = new ArrayMap<>();
    
        protected String getFragmentShader() {
            throw null;
        }
    
        protected String getVertexShader() {
            throw null;
        }
    
        public void setUniformNames(String... names) {
            this.uniforms.clear();
            for (String name : names) {
                this.uniforms.put(name, -1);
            }
        }
    
        protected static int compileShaders(String vertexShader, String fragmentShader) {
            int beginIndex = vertexShader.indexOf("void main() {");
            String vertexShader2 = vertexShader.substring(0, beginIndex) + "vec2 applyXForm(vec2 p, float xform[6]) {\nreturn vec2(xform[0] * p.x + xform[2] * p.y + xform[4], xform[1] * p.x + xform[3] * p.y + xform[5]);\n}\n" + vertexShader.substring(beginIndex);
            int programId = GLES20.glCreateProgram();
            int[] compiled = new int[1];
            int vertexShaderId = GLES20.glCreateShader(35633);
            GLES20.glShaderSource(vertexShaderId, vertexShader2);
            GLES20.glCompileShader(vertexShaderId);
            GLES20.glGetShaderiv(vertexShaderId, 35713, compiled, 0);
            if (compiled[0] == 0) {
                throw new RuntimeException("Could not compile vertex shader: \n" + GLES20.glGetShaderInfoLog(vertexShaderId));
            }
            GLES20.glAttachShader(programId, vertexShaderId);
            int fragmentShaderId = GLES20.glCreateShader(35632);
            GLES20.glShaderSource(fragmentShaderId, fragmentShader);
            GLES20.glCompileShader(fragmentShaderId);
            GLES20.glGetShaderiv(fragmentShaderId, 35713, compiled, 0);
            if (compiled[0] == 0) {
                throw new RuntimeException("Could not compile fragment shader: \n" + GLES20.glGetShaderInfoLog(fragmentShaderId));
            }
            GLES20.glAttachShader(programId, fragmentShaderId);
            GLES20.glLinkProgram(programId);
            GLES20.glDeleteShader(vertexShaderId);
            GLES20.glDeleteShader(fragmentShaderId);
            return programId;
        }
    
        public void use() {
            if (this.programId == 0) {
                this.programId = compileShaders(getVertexShader(), getFragmentShader());
            }
            GLES20.glUseProgram(this.programId);
            for (int i = 0; i < this.uniforms.size(); i++) {
                int location = this.uniforms.valueAt(i).intValue();
                if (location == -1) {
                    String name = this.uniforms.keyAt(i);
                    this.uniforms.put(name, Integer.valueOf(GLES20.glGetUniformLocation(this.programId, name)));
                }
            }
        }
    
        public int getUniformLocation(String name) {
            Integer location = this.uniforms.get(name);
            if (location != null) {
                return location.intValue();
            }
            return -1;
        }
    
        public void setUniformColor(String uniformName, int color) {
            int location = getUniformLocation(uniformName);
            if (location != -1) {
                GLES20.glUniform3f(location, Color.red(color) * 0.003921569f, Color.green(color) * 0.003921569f, Color.blue(color) * 0.003921569f);
            }
        }
    
        public void setUniformFloat(String uniformName, float value) {
            int location = getUniformLocation(uniformName);
            if (location != -1) {
                GLES20.glUniform1f(location, value);
            }
        }
    
        public void setUniformFloatArray(String uniformName, float[] values) {
            int location = getUniformLocation(uniformName);
            if (location != -1) {
                GLES20.glUniform1fv(location, values.length, values, 0);
            }
        }
    
        public void setUniformInt(String uniformName, int value) {
            int location = getUniformLocation(uniformName);
            if (location != -1) {
                GLES20.glUniform1i(location, value);
            }
        }
    
        public void setUniformVec2(String uniformName, float x, float y) {
            int location = getUniformLocation(uniformName);
            if (location != -1) {
                GLES20.glUniform2f(location, x, y);
            }
        }
    }
  + app/src/main/java/com/winlator/renderer/material/WindowMaterial.java
    package com.winlator.renderer.material;
    
    /* loaded from: classes.dex */
    public class WindowMaterial extends ShaderMaterial {
        public WindowMaterial() {
            setUniformNames("xform", "viewSize", "texture", "noAlpha");
        }
    
        @Override // com.winlator.renderer.material.ShaderMaterial
        protected String getVertexShader() {
            return String.join("\n", "uniform float xform[6];", "uniform vec2 viewSize;", "attribute vec2 position;", "varying vec2 vUV;", "void main() {", "vUV = position;", "vec2 transformedPos = applyXForm(position, xform);", "gl_Position = vec4(2.0 * transformedPos.x / viewSize.x - 1.0, 1.0 - 2.0 * transformedPos.y / viewSize.y, 0.0, 1.0);", "}");
        }
    
        @Override // com.winlator.renderer.material.ShaderMaterial
        protected String getFragmentShader() {
            return String.join("\n", "precision mediump float;", "uniform sampler2D texture;", "uniform float noAlpha;", "varying vec2 vUV;", "void main() {", "vec4 texelColor = texture2D(texture, vUV);", "gl_FragColor = vec4(texelColor.rgb, max(texelColor.a, noAlpha));", "}");
        }
    }
  + app/src/main/java/com/winlator/sysvshm/SysVSHMConnectionHandler.java
    package com.winlator.sysvshm;
    
    import com.winlator.xconnector.Client;
    import com.winlator.xconnector.ConnectionHandler;
    
    /* loaded from: classes.dex */
    public class SysVSHMConnectionHandler implements ConnectionHandler {
        private final SysVSharedMemory sysVSharedMemory;
    
        public SysVSHMConnectionHandler(SysVSharedMemory sysVSharedMemory) {
            this.sysVSharedMemory = sysVSharedMemory;
        }
    
        @Override // com.winlator.xconnector.ConnectionHandler
        public void handleNewConnection(Client client) {
            client.createIOStreams();
            client.setTag(this.sysVSharedMemory);
        }
    
        @Override // com.winlator.xconnector.ConnectionHandler
        public void handleConnectionShutdown(Client client) {
        }
    }
  + app/src/main/java/com/winlator/sysvshm/SysVSHMRequestHandler.java
    package com.winlator.sysvshm;
    
    import com.winlator.xconnector.Client;
    import com.winlator.xconnector.RequestHandler;
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class SysVSHMRequestHandler implements RequestHandler {
        @Override // com.winlator.xconnector.RequestHandler
        public boolean handleRequest(Client client) throws IOException {
            XStreamLock lock;
            SysVSharedMemory sysVSharedMemory = (SysVSharedMemory) client.getTag();
            XInputStream inputStream = client.getInputStream();
            XOutputStream outputStream = client.getOutputStream();
            if (inputStream.available() < 5) {
                return false;
            }
            byte requestCode = inputStream.readByte();
            switch (requestCode) {
                case 0:
                    long size = inputStream.readUnsignedInt();
                    int shmid = sysVSharedMemory.get(size);
                    lock = outputStream.lock();
                    try {
                        outputStream.writeInt(shmid);
                        if (lock != null) {
                            lock.close();
                            return true;
                        }
                        return true;
                    } finally {
                    }
                case 1:
                    int shmid2 = inputStream.readInt();
                    lock = outputStream.lock();
                    try {
                        outputStream.writeByte((byte) 0);
                        outputStream.setAncillaryFd(sysVSharedMemory.getFd(shmid2));
                        if (lock != null) {
                            lock.close();
                            return true;
                        }
                        return true;
                    } finally {
                    }
                case 2:
                    int shmid3 = inputStream.readInt();
                    sysVSharedMemory.delete(shmid3);
                    return true;
                default:
                    return true;
            }
        }
    }
  + app/src/main/java/com/winlator/sysvshm/SysVSharedMemory.java
    package com.winlator.sysvshm;
    
    import android.util.SparseArray;
    import com.winlator.xconnector.XConnectorEpoll;
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public class SysVSharedMemory {
        private final SparseArray<SHMemory> shmemories = new SparseArray<>();
        private int maxSHMemoryId = 0;
    
        private static native int ashmemCreateRegion(int i, long j);
    
        public static native int createMemoryFd(String str, int i);
    
        public static native ByteBuffer mapSHMSegment(int i, long j, int i2, boolean z);
    
        public static native void unmapSHMSegment(ByteBuffer byteBuffer, long j);
    
        static {
            System.loadLibrary("winlator");
        }
    
        private static class SHMemory {
            private ByteBuffer data;
            private int fd;
            private long size;
    
            private SHMemory() {
            }
        }
    
        public int getFd(int shmid) {
            int i;
            synchronized (this.shmemories) {
                SHMemory shmemory = this.shmemories.get(shmid);
                i = shmemory != null ? shmemory.fd : -1;
            }
            return i;
        }
    
        public int get(long size) {
            synchronized (this.shmemories) {
                int index = this.shmemories.size();
                int fd = ashmemCreateRegion(index, size);
                if (fd < 0) {
                    return -1;
                }
                SHMemory shmemory = new SHMemory();
                int id = this.maxSHMemoryId + 1;
                this.maxSHMemoryId = id;
                shmemory.fd = fd;
                shmemory.size = size;
                this.shmemories.put(id, shmemory);
                return id;
            }
        }
    
        public void delete(int shmid) {
            SHMemory shmemory = this.shmemories.get(shmid);
            if (shmemory != null) {
                if (shmemory.fd != -1) {
                    XConnectorEpoll.closeFd(shmemory.fd);
                    shmemory.fd = -1;
                }
                this.shmemories.remove(shmid);
            }
        }
    
        public void deleteAll() {
            synchronized (this.shmemories) {
                for (int i = this.shmemories.size() - 1; i >= 0; i--) {
                    delete(this.shmemories.keyAt(i));
                }
            }
        }
    
        public ByteBuffer attach(int shmid) {
            synchronized (this.shmemories) {
                SHMemory shmemory = this.shmemories.get(shmid);
                if (shmemory != null) {
                    if (shmemory.data == null) {
                        shmemory.data = mapSHMSegment(shmemory.fd, shmemory.size, 0, true);
                    }
                    return shmemory.data;
                }
                return null;
            }
        }
    
        public void detach(ByteBuffer data) {
            synchronized (this.shmemories) {
                int i = 0;
                while (true) {
                    if (i >= this.shmemories.size()) {
                        break;
                    }
                    SHMemory shmemory = this.shmemories.valueAt(i);
                    if (shmemory.data == data) {
                        if (shmemory.data != null) {
                            unmapSHMSegment(shmemory.data, shmemory.size);
                            shmemory.data = null;
                        }
                    } else {
                        i++;
                    }
                }
            }
        }
    }
  + app/src/main/java/com/winlator/widget/CPUListView.java
    package com.winlator.widget;
    
    import android.content.Context;
    import android.util.AttributeSet;
    import android.view.LayoutInflater;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.CheckBox;
    import android.widget.LinearLayout;
    import android.widget.TextView;
    import com.winlator.R;
    import java.util.Arrays;
    import java.util.List;
    
    /* loaded from: classes.dex */
    public class CPUListView extends LinearLayout {
        private List<String> checkedCPUList;
        private final byte numProcessors;
    
        public CPUListView(Context context, AttributeSet attrs) {
            this(context, attrs, 0);
        }
    
        public CPUListView(Context context, AttributeSet attrs, int defStyleAttr) {
            super(context, attrs, defStyleAttr);
            setOrientation(0);
            this.numProcessors = (byte) Runtime.getRuntime().availableProcessors();
            refreshContent();
        }
    
        private void refreshContent() {
            removeAllViews();
            LayoutInflater inflater = LayoutInflater.from(getContext());
            for (int i = 0; i < this.numProcessors; i++) {
                boolean z = false;
                View itemView = inflater.inflate(R.layout.cpu_list_item, (ViewGroup) this, false);
                String tag = "CPU" + i;
                CheckBox checkBox = (CheckBox) itemView.findViewById(R.id.CheckBox);
                checkBox.setTag(tag);
                List<String> list = this.checkedCPUList;
                if (list == null || list.contains(String.valueOf(i))) {
                    z = true;
                }
                checkBox.setChecked(z);
                ((TextView) itemView.findViewById(R.id.TextView)).setText(tag);
                addView(itemView);
            }
        }
    
        public void setCheckedCPUList(String checkedCPUList) {
            this.checkedCPUList = Arrays.asList(checkedCPUList.split(","));
            refreshContent();
        }
    
        public String getCheckedCPUListAsString() {
            String cpuList = "";
            for (int i = 0; i < this.numProcessors; i++) {
                CheckBox checkBox = (CheckBox) findViewWithTag("CPU" + i);
                if (checkBox.isChecked()) {
                    StringBuilder sb = new StringBuilder();
                    sb.append(cpuList);
                    sb.append(!cpuList.isEmpty() ? "," : "");
                    sb.append(i);
                    cpuList = sb.toString();
                }
            }
            return cpuList;
        }
    
        public boolean[] getCheckedCPUList() {
            boolean[] cpuList = new boolean[this.numProcessors];
            for (int i = 0; i < this.numProcessors; i++) {
                CheckBox checkBox = (CheckBox) findViewWithTag("CPU" + i);
                cpuList[i] = checkBox.isChecked();
            }
            return cpuList;
        }
    
        public byte getNumProcessors() {
            return this.numProcessors;
        }
    }
  + app/src/main/java/com/winlator/widget/ColorPickerView.java
    package com.winlator.widget;
    
    import android.content.Context;
    import android.graphics.Bitmap;
    import android.graphics.BitmapFactory;
    import android.graphics.Canvas;
    import android.graphics.Color;
    import android.graphics.Paint;
    import android.graphics.Rect;
    import android.graphics.RectF;
    import android.util.AttributeSet;
    import android.view.View;
    import android.widget.ImageView;
    import android.widget.LinearLayout;
    import android.widget.PopupWindow;
    import com.winlator.R;
    import com.winlator.core.AppUtils;
    import com.winlator.core.UnitUtils;
    import java.util.Locale;
    
    /* loaded from: classes.dex */
    public class ColorPickerView extends View implements View.OnClickListener {
        private final Bitmap colorFrame;
        private int currentColor;
        private int[] palette;
    
        public ColorPickerView(Context context, AttributeSet attrs) {
            this(context, attrs, 0);
        }
    
        public ColorPickerView(Context context, AttributeSet attrs, int defStyleAttr) {
            super(context, attrs, defStyleAttr);
            this.palette = new int[]{16748288, 13840175, 9795021, 3046706, 33679, 161725, 6323595, 0};
            this.currentColor = 16777215;
            this.colorFrame = BitmapFactory.decodeResource(context.getResources(), R.drawable.color_frame);
            setBackgroundResource(R.drawable.combo_box);
            setClickable(true);
            setFocusable(true);
            setOnClickListener(this);
        }
    
        public int getColor() {
            return toARGB(this.currentColor);
        }
    
        public void setColor(int color) {
            this.currentColor = toRGB(color);
            invalidate();
        }
    
        public String getColorAsString() {
            return String.format(Locale.ENGLISH, "#%06X", Integer.valueOf(this.currentColor & 16777215));
        }
    
        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);
            int width = getWidth();
            int height = getHeight();
            if (width == 0 || height == 0) {
                return;
            }
            float rectSize = height - UnitUtils.dpToPx(12.0f);
            float startX = ((width - rectSize) * 0.5f) - UnitUtils.dpToPx(16.0f);
            float startY = (height - rectSize) * 0.5f;
            Paint paint = new Paint(1);
            paint.setColor(toARGB(this.currentColor));
            paint.setStyle(Paint.Style.FILL);
            canvas.drawRect(startX, startY, startX + rectSize, startY + rectSize, paint);
            Rect srcRect = new Rect(0, 0, this.colorFrame.getWidth(), this.colorFrame.getHeight());
            RectF dstRect = new RectF(startX, startY, startX + rectSize, startY + rectSize);
            canvas.drawBitmap(this.colorFrame, srcRect, dstRect, paint);
        }
    
        public static int toARGB(int rgb) {
            return Color.argb(255, Color.red(rgb), Color.green(rgb), Color.blue(rgb));
        }
    
        public static int toRGB(int argb) {
            return Color.argb(0, Color.red(argb), Color.green(argb), Color.blue(argb));
        }
    
        public void setPalette(int... palette) {
            this.palette = palette;
        }
    
        @Override // android.view.View.OnClickListener
        public void onClick(View anchor) {
            Context context = getContext();
            LinearLayout container = new LinearLayout(context);
            container.setLayoutParams(new LinearLayout.LayoutParams(-2, (int) UnitUtils.dpToPx(60.0f)));
            container.setOrientation(0);
            container.setGravity(16);
            container.setPadding(0, 0, (int) UnitUtils.dpToPx(4.0f), 0);
            Bitmap colorFrameSelected = BitmapFactory.decodeResource(context.getResources(), R.drawable.color_frame_selected);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams((int) UnitUtils.dpToPx(32.0f), (int) UnitUtils.dpToPx(32.0f));
            params.setMargins((int) UnitUtils.dpToPx(4.0f), 0, 0, 0);
            final PopupWindow[] popupWindow = {null};
            int[] iArr = this.palette;
            int length = iArr.length;
            for (int i = 0; i < length; i++) {
                final int color = iArr[i];
                ImageView imageView = new ImageView(context);
                imageView.setLayoutParams(params);
                imageView.setImageBitmap(color == this.currentColor ? colorFrameSelected : this.colorFrame);
                imageView.setBackgroundColor(toARGB(color));
                imageView.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.widget.ColorPickerView$$ExternalSyntheticLambda0
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        ColorPickerView.this.lambda$onClick$0(color, popupWindow, view);
                    }
                });
                container.addView(imageView);
            }
            popupWindow[0] = AppUtils.showPopupWindow(anchor, container, 0, 60);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onClick$0(int color, PopupWindow[] popupWindow, View v) {
            this.currentColor = color;
            invalidate();
            if (popupWindow[0] != null) {
                popupWindow[0].dismiss();
            }
        }
    }
  + app/src/main/java/com/winlator/widget/EnvVarsView.java
    package com.winlator.widget;
    
    import android.content.Context;
    import android.util.AttributeSet;
    import android.view.LayoutInflater;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.ArrayAdapter;
    import android.widget.EditText;
    import android.widget.FrameLayout;
    import android.widget.LinearLayout;
    import android.widget.Spinner;
    import android.widget.SpinnerAdapter;
    import android.widget.TextView;
    import android.widget.ToggleButton;
    import com.winlator.R;
    import com.winlator.core.AppUtils;
    import com.winlator.core.EnvVars;
    import com.winlator.core.UnitUtils;
    import java.util.Arrays;
    import java.util.Iterator;
    import java.util.Objects;
    
    /* loaded from: classes.dex */
    public class EnvVarsView extends FrameLayout {
        public static final String[][] knownEnvVars = {new String[]{"ZINK_DESCRIPTORS", "SELECT", "auto", "lazy", "cached", "notemplates"}, new String[]{"ZINK_DEBUG", "SELECT_MULTIPLE", "nir", "spirv", "tgsi", "validation", "sync", "compact", "noreorder"}, new String[]{"ZINK_CONTEXT_THREADED", "CHECKBOX", "0", "1"}, new String[]{"MESA_SHADER_CACHE_DISABLE", "CHECKBOX", "false", "true"}, new String[]{"mesa_glthread", "CHECKBOX", "false", "true"}, new String[]{"WINEESYNC", "CHECKBOX", "0", "1"}, new String[]{"TU_DEBUG", "SELECT_MULTIPLE", "startup", "nir", "nobin", "sysmem", "gmem", "forcebin", "layout", "noubwc", "nomultipos", "nolrz", "nolrzfc", "perf", "perfc", "flushall", "syncdraw", "push_consts_per_stage", "rast_order", "unaligned_store", "log_skip_gmem_ops", "dynamic", "bos", "3d_load", "fdm", "noconform", "rd"}, new String[]{"DXVK_HUD", "SELECT_MULTIPLE", "devinfo", "fps", "frametimes", "submissions", "drawcalls", "pipelines", "descriptors", "memory", "gpuload", "version", "api", "cs", "compiler", "samplers"}, new String[]{"DXVK_LOG_LEVEL", "SELECT", "none", "error", "warn", "info", "debug"}, new String[]{"GALLIUM_HUD", "TEXT"}, new String[]{"MESA_EXTENSION_MAX_YEAR", "NUMBER"}, new String[]{"PULSE_LATENCY_MSEC", "NUMBER"}};
        private final LinearLayout container;
        private final TextView emptyTextView;
        private final LayoutInflater inflater;
    
        /* JADX INFO: Access modifiers changed from: private */
        interface GetValueCallback {
            String call();
        }
    
        public EnvVarsView(Context context, AttributeSet attrs) {
            this(context, attrs, 0);
        }
    
        public EnvVarsView(Context context, AttributeSet attrs, int defStyleAttr) {
            this(context, attrs, defStyleAttr, 0);
        }
    
        public EnvVarsView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
            super(context, attrs, defStyleAttr, defStyleRes);
            this.inflater = LayoutInflater.from(context);
            LinearLayout linearLayout = new LinearLayout(context);
            this.container = linearLayout;
            linearLayout.setOrientation(1);
            linearLayout.setLayoutParams(new LinearLayout.LayoutParams(-1, -2));
            addView(linearLayout);
            TextView textView = new TextView(context);
            this.emptyTextView = textView;
            textView.setText(R.string.no_items_to_display);
            textView.setTextSize(1, 16.0f);
            textView.setGravity(17);
            int padding = (int) UnitUtils.dpToPx(16.0f);
            textView.setPadding(padding, padding, padding, padding);
            addView(textView);
        }
    
        private String[] findKnownEnvVar(String name) {
            for (String[] values : knownEnvVars) {
                if (values[0].equals(name)) {
                    return values;
                }
            }
            return null;
        }
    
        public String getEnvVars() {
            EnvVars envVars = new EnvVars();
            for (int i = 0; i < this.container.getChildCount(); i++) {
                View child = this.container.getChildAt(i);
                GetValueCallback getValueCallback = (GetValueCallback) child.getTag();
                String name = ((TextView) child.findViewById(R.id.TextView)).getText().toString();
                String value = getValueCallback.call().trim().replace(" ", "");
                if (!value.isEmpty()) {
                    envVars.put(name, value);
                }
            }
            return envVars.toString();
        }
    
        public boolean containsName(String name) {
            for (int i = 0; i < this.container.getChildCount(); i++) {
                View child = this.container.getChildAt(i);
                String text = ((TextView) child.findViewById(R.id.TextView)).getText().toString();
                if (name.equals(text)) {
                    return true;
                }
            }
            return false;
        }
    
        public void add(String name, String value) {
            Context context;
            final View itemView;
            final String[] knownEnvVar;
            String type;
            GetValueCallback getValueCallback;
            context = getContext();
            itemView = this.inflater.inflate(R.layout.env_vars_list_item, (ViewGroup) this.container, false);
            ((TextView) itemView.findViewById(R.id.TextView)).setText(name);
            knownEnvVar = findKnownEnvVar(name);
            type = knownEnvVar != null ? knownEnvVar[1] : "TEXT";
            switch (type) {
                case "CHECKBOX":
                    final ToggleButton toggleButton = (ToggleButton) itemView.findViewById(R.id.ToggleButton);
                    toggleButton.setVisibility(0);
                    toggleButton.setChecked(value.equals("1") || value.equals("true"));
                    getValueCallback = new GetValueCallback() { // from class: com.winlator.widget.EnvVarsView$$ExternalSyntheticLambda3
                        @Override // com.winlator.widget.EnvVarsView.GetValueCallback
                        public final String call() {
                            String lambda$add$0;
                            lambda$add$0 = EnvVarsView.lambda$add$0(toggleButton, knownEnvVar);
                            return lambda$add$0;
                        }
                    };
                    break;
                case "SELECT":
                    String[] items = (String[]) Arrays.copyOfRange(knownEnvVar, 2, knownEnvVar.length);
                    final Spinner spinner = (Spinner) itemView.findViewById(R.id.Spinner);
                    spinner.setAdapter((SpinnerAdapter) new ArrayAdapter(context, android.R.layout.simple_spinner_dropdown_item, items));
                    AppUtils.setSpinnerSelectionFromValue(spinner, value);
                    spinner.setVisibility(0);
                    getValueCallback = new GetValueCallback() { // from class: com.winlator.widget.EnvVarsView$$ExternalSyntheticLambda2
                        @Override // com.winlator.widget.EnvVarsView.GetValueCallback
                        public final String call() {
                            String lambda$add$1;
                            lambda$add$1 = EnvVarsView.lambda$add$1(spinner);
                            return lambda$add$1;
                        }
                    };
                    break;
                case "SELECT_MULTIPLE":
                    final MultiSelectionComboBox comboBox = (MultiSelectionComboBox) itemView.findViewById(R.id.MultiSelectionComboBox);
                    comboBox.setItems((String[]) Arrays.copyOfRange(knownEnvVar, 2, knownEnvVar.length));
                    comboBox.setSelectedItems(value.split(","));
                    comboBox.setVisibility(0);
                    Objects.requireNonNull(comboBox);
                    getValueCallback = new GetValueCallback() { // from class: com.winlator.widget.EnvVarsView$$ExternalSyntheticLambda4
                        @Override // com.winlator.widget.EnvVarsView.GetValueCallback
                        public final String call() {
                            return MultiSelectionComboBox.this.getSelectedItemsAsString();
                        }
                    };
                    break;
                case "TEXT":
                case "NUMBER":
                default:
                    final EditText editText = (EditText) itemView.findViewById(R.id.EditText);
                    editText.setVisibility(0);
                    editText.setText(value);
                    if (type.equals("NUMBER")) {
                        editText.setInputType(2);
                    }
                    getValueCallback = new GetValueCallback() { // from class: com.winlator.widget.EnvVarsView$$ExternalSyntheticLambda1
                        @Override // com.winlator.widget.EnvVarsView.GetValueCallback
                        public final String call() {
                            String lambda$add$2;
                            lambda$add$2 = EnvVarsView.lambda$add$2(editText);
                            return lambda$add$2;
                        }
                    };
                    break;
            }
            itemView.setTag(getValueCallback);
            itemView.findViewById(R.id.BTRemove).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.widget.EnvVarsView$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    EnvVarsView.this.lambda$add$3(itemView, view);
                }
            });
            this.container.addView(itemView);
            this.emptyTextView.setVisibility(8);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ String lambda$add$0(ToggleButton toggleButton, String[] knownEnvVar) {
            return toggleButton.isChecked() ? knownEnvVar[3] : knownEnvVar[2];
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ String lambda$add$1(Spinner spinner) {
            return spinner.getSelectedItem().toString();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ String lambda$add$2(EditText editText) {
            return editText.getText().toString();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$add$3(View itemView, View v) {
            this.container.removeView(itemView);
            if (this.container.getChildCount() == 0) {
                this.emptyTextView.setVisibility(0);
            }
        }
    
        public void setEnvVars(EnvVars envVars) {
            this.container.removeAllViews();
            Iterator<String> it = envVars.iterator();
            while (it.hasNext()) {
                String name = it.next();
                add(name, envVars.get(name));
            }
        }
    }
  + app/src/main/java/com/winlator/widget/FrameRating.java
    package com.winlator.widget;
    
    import android.content.Context;
    import android.os.SystemClock;
    import android.util.AttributeSet;
    import android.view.LayoutInflater;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.FrameLayout;
    import android.widget.TextView;
    import com.winlator.R;
    import java.util.Locale;
    
    /* loaded from: classes.dex */
    public class FrameRating extends FrameLayout implements Runnable {
        private int frameCount;
        private float lastFPS;
        private long lastTime;
        private final TextView textView;
    
        public FrameRating(Context context) {
            this(context, null);
        }
    
        public FrameRating(Context context, AttributeSet attrs) {
            this(context, attrs, 0);
        }
    
        public FrameRating(Context context, AttributeSet attrs, int defStyleAttr) {
            super(context, attrs, defStyleAttr);
            this.lastTime = 0L;
            this.frameCount = 0;
            this.lastFPS = 0.0f;
            View view = LayoutInflater.from(context).inflate(R.layout.frame_rating, (ViewGroup) this, false);
            this.textView = (TextView) view.findViewById(R.id.TVFPS);
            addView(view);
        }
    
        public void reset() {
            this.frameCount = 0;
            this.lastTime = SystemClock.elapsedRealtime();
            this.lastFPS = 0.0f;
        }
    
        public void update() {
            if (this.lastTime == 0) {
                this.lastTime = SystemClock.elapsedRealtime();
            }
            long time = SystemClock.elapsedRealtime();
            if (time >= 500 + this.lastTime) {
                this.lastFPS = (this.frameCount * 1000) / (time - r2);
                post(this);
                this.lastTime = time;
                this.frameCount = 0;
            }
            this.frameCount++;
        }
    
        @Override // java.lang.Runnable
        public void run() {
            if (getVisibility() == 8) {
                setVisibility(0);
            }
            this.textView.setText(String.format(Locale.ENGLISH, "%.1f", Float.valueOf(this.lastFPS)));
        }
    }
  + app/src/main/java/com/winlator/widget/GPUCardAdapter.java
    package com.winlator.widget;
    
    import android.content.Context;
    import android.widget.ArrayAdapter;
    import com.winlator.core.FileUtils;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;
    import org.json.JSONArray;
    import org.json.JSONException;
    import org.json.JSONObject;
    
    /* loaded from: classes.dex */
    public class GPUCardAdapter extends ArrayAdapter<GPUCard> {
    
        public static class GPUCard {
            public final int deviceId;
            public final String name;
            public final int vendorId;
    
            public GPUCard(String name, int deviceId, int vendorId) {
                this.name = name;
                this.deviceId = deviceId;
                this.vendorId = vendorId;
            }
    
            public String toString() {
                return this.name;
            }
        }
    
        public GPUCardAdapter(Context context, int resource) {
            this(context, resource, 0);
        }
    
        public GPUCardAdapter(Context context, int resource, int defaultItemTextId) {
            super(context, resource, loadData(context, defaultItemTextId));
        }
    
        private static List<GPUCard> loadData(Context context, int defaultItemTextId) {
            try {
                JSONArray gpuCards = new JSONArray(FileUtils.readString(context, "gpu_cards.json"));
                List<GPUCard> items = new ArrayList<>();
                if (defaultItemTextId > 0) {
                    items.add(new GPUCard(context.getString(defaultItemTextId), 0, 0));
                }
                for (int i = 0; i < gpuCards.length(); i++) {
                    JSONObject item = gpuCards.getJSONObject(i);
                    items.add(new GPUCard(item.getString("name"), item.getInt("deviceID"), item.getInt("vendorID")));
                }
                return items;
            } catch (JSONException e) {
                return Collections.emptyList();
            }
        }
    
        public int getPositionByDeviceId(int deviceId) {
            for (int i = 0; i < getCount(); i++) {
                GPUCard gpuCard = getItem(i);
                if (gpuCard.deviceId == deviceId) {
                    return i;
                }
            }
            return 0;
        }
    }
  + app/src/main/java/com/winlator/widget/ImagePickerView.java
    package com.winlator.widget;
    
    import android.content.Context;
    import android.content.Intent;
    import android.graphics.Bitmap;
    import android.graphics.BitmapFactory;
    import android.graphics.Canvas;
    import android.graphics.Paint;
    import android.graphics.Rect;
    import android.graphics.RectF;
    import android.net.Uri;
    import android.util.AttributeSet;
    import android.view.LayoutInflater;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.ImageView;
    import android.widget.PopupWindow;
    import com.winlator.MainActivity;
    import com.winlator.R;
    import com.winlator.core.AppUtils;
    import com.winlator.core.Callback;
    import com.winlator.core.FileUtils;
    import com.winlator.core.ImageUtils;
    import com.winlator.core.UnitUtils;
    import com.winlator.core.WineThemeManager;
    import java.io.File;
    
    /* loaded from: classes.dex */
    public class ImagePickerView extends View implements View.OnClickListener {
        private final Bitmap icon;
    
        public ImagePickerView(Context context, AttributeSet attrs) {
            this(context, attrs, 0);
        }
    
        public ImagePickerView(Context context, AttributeSet attrs, int defStyleAttr) {
            super(context, attrs, defStyleAttr);
            this.icon = BitmapFactory.decodeResource(context.getResources(), R.drawable.icon_image_picker);
            setBackgroundResource(R.drawable.combo_box);
            setClickable(true);
            setFocusable(true);
            setOnClickListener(this);
        }
    
        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);
            int width = getWidth();
            int height = getHeight();
            if (width == 0 || height == 0) {
                return;
            }
            float rectSize = height - UnitUtils.dpToPx(12.0f);
            float startX = ((width - rectSize) * 0.5f) - UnitUtils.dpToPx(16.0f);
            float startY = (height - rectSize) * 0.5f;
            Paint paint = new Paint(1);
            Rect srcRect = new Rect(0, 0, this.icon.getWidth(), this.icon.getHeight());
            RectF dstRect = new RectF(startX, startY, startX + rectSize, startY + rectSize);
            canvas.drawBitmap(this.icon, srcRect, dstRect, paint);
        }
    
        @Override // android.view.View.OnClickListener
        public void onClick(View anchor) {
            final Context context = getContext();
            final File userWallpaperFile = WineThemeManager.getUserWallpaperFile(context);
            View view = LayoutInflater.from(context).inflate(R.layout.image_picker_view, (ViewGroup) null);
            ImageView imageView = (ImageView) view.findViewById(R.id.ImageView);
            if (userWallpaperFile.isFile()) {
                imageView.setImageBitmap(BitmapFactory.decodeFile(userWallpaperFile.getPath()));
            } else {
                imageView.setImageResource(R.drawable.wallpaper);
            }
            final PopupWindow[] popupWindow = {null};
            View browseButton = view.findViewById(R.id.BTBrowse);
            browseButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.widget.ImagePickerView$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view2) {
                    ImagePickerView.lambda$onClick$1(context, userWallpaperFile, popupWindow, view2);
                }
            });
            View removeButton = view.findViewById(R.id.BTRemove);
            if (userWallpaperFile.isFile()) {
                removeButton.setVisibility(0);
                removeButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.widget.ImagePickerView$$ExternalSyntheticLambda1
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view2) {
                        ImagePickerView.lambda$onClick$2(userWallpaperFile, popupWindow, view2);
                    }
                });
            }
            popupWindow[0] = AppUtils.showPopupWindow(anchor, view, 200, 240);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$onClick$1(final Context context, final File userWallpaperFile, final PopupWindow[] popupWindow, View v) {
            MainActivity activity = (MainActivity) context;
            Intent intent = new Intent("android.intent.action.PICK");
            intent.setType("image/*");
            activity.setOpenFileCallback(new Callback() { // from class: com.winlator.widget.ImagePickerView$$ExternalSyntheticLambda2
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    ImagePickerView.lambda$onClick$0(context, userWallpaperFile, popupWindow, (Uri) obj);
                }
            });
            activity.startActivityForResult(intent, 2);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$onClick$0(Context context, File userWallpaperFile, PopupWindow[] popupWindow, Uri data) {
            Bitmap bitmap = ImageUtils.getBitmapFromUri(context, data, 1280);
            if (bitmap == null) {
                return;
            }
            ImageUtils.save(bitmap, userWallpaperFile, Bitmap.CompressFormat.PNG, 100);
            popupWindow[0].dismiss();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$onClick$2(File userWallpaperFile, PopupWindow[] popupWindow, View v) {
            FileUtils.delete(userWallpaperFile);
            popupWindow[0].dismiss();
        }
    }
  + app/src/main/java/com/winlator/widget/InputControlsView.java
    package com.winlator.widget;
    
    import android.content.Context;
    import android.graphics.Bitmap;
    import android.graphics.BitmapFactory;
    import android.graphics.Canvas;
    import android.graphics.Color;
    import android.graphics.ColorFilter;
    import android.graphics.Paint;
    import android.graphics.Point;
    import android.graphics.PointF;
    import android.graphics.PorterDuff;
    import android.graphics.PorterDuffColorFilter;
    import android.view.KeyEvent;
    import android.view.MotionEvent;
    import android.view.View;
    import android.widget.FrameLayout;
    import androidx.appcompat.R$styleable;
    import com.winlator.inputcontrols.Binding;
    import com.winlator.inputcontrols.ControlElement;
    import com.winlator.inputcontrols.ControlsProfile;
    import com.winlator.inputcontrols.ExternalController;
    import com.winlator.inputcontrols.ExternalControllerBinding;
    import com.winlator.inputcontrols.GamepadState;
    import com.winlator.math.Mathf;
    import com.winlator.winhandler.WinHandler;
    import com.winlator.xserver.Pointer;
    import com.winlator.xserver.XServer;
    import java.io.IOException;
    import java.io.InputStream;
    import java.util.Iterator;
    import java.util.List;
    import java.util.Timer;
    import java.util.TimerTask;
    
    /* loaded from: classes.dex */
    public class InputControlsView extends View {
        private final Point cursor;
        private ColorFilter darkColorFilter;
        private boolean editMode;
        private final Bitmap[] icons;
        private ColorFilter lightColorFilter;
        private final PointF mouseMoveOffset;
        private Timer mouseMoveTimer;
        private boolean moveCursor;
        private boolean moveElement;
        private float offsetX;
        private float offsetY;
        private float overlayOpacity;
        private final Paint paint;
        private ControlsProfile profile;
        private boolean readyToDraw;
        private ControlElement selectedElement;
        private boolean showTouchscreenControls;
        private int snappingSize;
        private float startX;
        private float startY;
        private TouchpadView touchpadView;
        private XServer xServer;
    
        public InputControlsView(Context context) {
            super(context);
            this.editMode = false;
            this.paint = new Paint(1);
            this.cursor = new Point();
            this.readyToDraw = false;
            this.moveCursor = false;
            this.moveElement = false;
            this.overlayOpacity = 0.4f;
            this.icons = new Bitmap[17];
            this.mouseMoveOffset = new PointF();
            this.showTouchscreenControls = true;
            setClickable(true);
            setFocusable(true);
            setFocusableInTouchMode(true);
            setBackgroundColor(0);
            setLayoutParams(new FrameLayout.LayoutParams(-1, -1));
        }
    
        public void setEditMode(boolean editMode) {
            this.editMode = editMode;
        }
    
        public void setOverlayOpacity(float overlayOpacity) {
            this.overlayOpacity = overlayOpacity;
        }
    
        public int getSnappingSize() {
            return this.snappingSize;
        }
    
        @Override // android.view.View
        protected synchronized void onDraw(Canvas canvas) {
            int width = getWidth();
            int height = getHeight();
            if (width != 0 && height != 0) {
                this.snappingSize = width / 100;
                this.readyToDraw = true;
                if (this.editMode) {
                    drawGrid(canvas);
                    drawCursor(canvas);
                }
                ControlsProfile controlsProfile = this.profile;
                if (controlsProfile != null) {
                    if (!controlsProfile.isElementsLoaded()) {
                        this.profile.loadElements(this);
                    }
                    List<ControlElement> elements = this.profile.getElements();
                    if (this.touchpadView != null && elements.isEmpty()) {
                        this.touchpadView.setPointerButtonRightEnabled(true);
                    }
                    if (this.showTouchscreenControls) {
                        for (ControlElement element : elements) {
                            element.draw(canvas);
                        }
                    }
                }
                super.onDraw(canvas);
                return;
            }
            this.readyToDraw = false;
        }
    
        private void drawGrid(Canvas canvas) {
            this.paint.setStyle(Paint.Style.FILL);
            this.paint.setStrokeWidth(this.snappingSize * 0.0625f);
            this.paint.setColor(-16777216);
            canvas.drawColor(-16777216);
            this.paint.setAntiAlias(false);
            this.paint.setColor(-13619152);
            int width = getMaxWidth();
            int height = getMaxHeight();
            int i = 0;
            while (i < width) {
                canvas.drawLine(i, 0.0f, i, height, this.paint);
                canvas.drawLine(0.0f, i, width, i, this.paint);
                i += this.snappingSize;
            }
            float cx = Mathf.roundTo(width * 0.5f, this.snappingSize);
            float cy = Mathf.roundTo(height * 0.5f, this.snappingSize);
            this.paint.setColor(-12434878);
            int i2 = 0;
            while (i2 < width) {
                canvas.drawLine(cx, i2, cx, this.snappingSize + i2, this.paint);
                canvas.drawLine(i2, cy, this.snappingSize + i2, cy, this.paint);
                i2 += this.snappingSize * 2;
            }
            this.paint.setAntiAlias(true);
        }
    
        private void drawCursor(Canvas canvas) {
            this.paint.setStyle(Paint.Style.FILL);
            this.paint.setStrokeWidth(this.snappingSize * 0.0625f);
            this.paint.setColor(-3790808);
            this.paint.setAntiAlias(false);
            canvas.drawLine(0.0f, this.cursor.y, getMaxWidth(), this.cursor.y, this.paint);
            int i = this.cursor.x;
            canvas.drawLine(i, 0.0f, i, getMaxHeight(), this.paint);
            this.paint.setAntiAlias(true);
        }
    
        public synchronized boolean addElement() {
            if (this.editMode && this.profile != null) {
                ControlElement element = new ControlElement(this);
                element.setX(this.cursor.x);
                element.setY(this.cursor.y);
                this.profile.addElement(element);
                this.profile.save();
                selectElement(element);
                return true;
            }
            return false;
        }
    
        public synchronized boolean removeElement() {
            ControlElement controlElement;
            ControlsProfile controlsProfile;
            if (this.editMode && (controlElement = this.selectedElement) != null && (controlsProfile = this.profile) != null) {
                controlsProfile.removeElement(controlElement);
                this.selectedElement = null;
                this.profile.save();
                invalidate();
                return true;
            }
            return false;
        }
    
        public ControlElement getSelectedElement() {
            return this.selectedElement;
        }
    
        private synchronized void deselectAllElements() {
            this.selectedElement = null;
            ControlsProfile controlsProfile = this.profile;
            if (controlsProfile != null) {
                for (ControlElement element : controlsProfile.getElements()) {
                    element.setSelected(false);
                }
            }
        }
    
        private void selectElement(ControlElement element) {
            deselectAllElements();
            if (element != null) {
                this.selectedElement = element;
                element.setSelected(true);
            }
            invalidate();
        }
    
        public synchronized ControlsProfile getProfile() {
            return this.profile;
        }
    
        public synchronized void setProfile(ControlsProfile profile) {
            if (profile != null) {
                this.profile = profile;
                deselectAllElements();
            } else {
                this.profile = null;
            }
        }
    
        public boolean isShowTouchscreenControls() {
            return this.showTouchscreenControls;
        }
    
        public void setShowTouchscreenControls(boolean showTouchscreenControls) {
            this.showTouchscreenControls = showTouchscreenControls;
        }
    
        public int getLightColor() {
            return Color.argb((int) (this.overlayOpacity * 255.0f), 255, 255, 255);
        }
    
        public int getDarkColor() {
            return Color.argb((int) (this.overlayOpacity * 255.0f), 0, 0, 0);
        }
    
        public int getHighlightColor() {
            return Color.argb((int) (this.overlayOpacity * 255.0f), 2, R$styleable.AppCompatTheme_windowFixedHeightMinor, 189);
        }
    
        private synchronized ControlElement intersectElement(float x, float y) {
            ControlsProfile controlsProfile = this.profile;
            if (controlsProfile != null) {
                for (ControlElement element : controlsProfile.getElements()) {
                    if (element.containsPoint(x, y)) {
                        return element;
                    }
                }
            }
            return null;
        }
    
        public Paint getPaint() {
            return this.paint;
        }
    
        public ColorFilter getLightColorFilter() {
            if (this.lightColorFilter == null) {
                this.lightColorFilter = new PorterDuffColorFilter(-1, PorterDuff.Mode.SRC_IN);
            }
            return this.lightColorFilter;
        }
    
        public ColorFilter getDarkColorFilter() {
            if (this.darkColorFilter == null) {
                this.darkColorFilter = new PorterDuffColorFilter(-16777216, PorterDuff.Mode.SRC_IN);
            }
            return this.darkColorFilter;
        }
    
        public TouchpadView getTouchpadView() {
            return this.touchpadView;
        }
    
        public void setTouchpadView(TouchpadView touchpadView) {
            this.touchpadView = touchpadView;
        }
    
        public XServer getXServer() {
            return this.xServer;
        }
    
        public void setXServer(XServer xServer) {
            this.xServer = xServer;
            createMouseMoveTimer();
        }
    
        public int getMaxWidth() {
            return (int) Mathf.roundTo(getWidth(), this.snappingSize);
        }
    
        public int getMaxHeight() {
            return (int) Mathf.roundTo(getHeight(), this.snappingSize);
        }
    
        private void createMouseMoveTimer() {
            ControlsProfile controlsProfile = this.profile;
            if (controlsProfile != null && this.mouseMoveTimer == null) {
                final float cursorSpeed = controlsProfile.getCursorSpeed();
                Timer timer = new Timer();
                this.mouseMoveTimer = timer;
                timer.schedule(new TimerTask() { // from class: com.winlator.widget.InputControlsView.1
                    @Override // java.util.TimerTask, java.lang.Runnable
                    public void run() {
                        InputControlsView.this.xServer.injectPointerMoveDelta((int) (InputControlsView.this.mouseMoveOffset.x * 10.0f * cursorSpeed), (int) (InputControlsView.this.mouseMoveOffset.y * 10.0f * cursorSpeed));
                    }
                }, 0L, 16L);
            }
        }
    
        private void processJoystickInput(ExternalController controller) {
            int[] axes = {0, 1, 11, 14, 15, 16};
            GamepadState gamepadState = controller.state;
            float[] values = {gamepadState.thumbLX, gamepadState.thumbLY, gamepadState.thumbRX, gamepadState.thumbRY, gamepadState.getDPadX(), controller.state.getDPadY()};
            for (byte i = 0; i < axes.length; i = (byte) (i + 1)) {
                if (Math.abs(values[i]) > 0.15f) {
                    ExternalControllerBinding controllerBinding = controller.getControllerBinding(ExternalControllerBinding.getKeyCodeForAxis(axes[i], Mathf.sign(values[i])));
                    if (controllerBinding != null) {
                        handleInputEvent(controllerBinding.getBinding(), true, values[i]);
                    }
                } else {
                    ExternalControllerBinding controllerBinding2 = controller.getControllerBinding(ExternalControllerBinding.getKeyCodeForAxis(axes[i], (byte) 1));
                    if (controllerBinding2 != null) {
                        handleInputEvent(controllerBinding2.getBinding(), false, values[i]);
                    }
                    ExternalControllerBinding controllerBinding3 = controller.getControllerBinding(ExternalControllerBinding.getKeyCodeForAxis(axes[i], (byte) -1));
                    if (controllerBinding3 != null) {
                        handleInputEvent(controllerBinding3.getBinding(), false, values[i]);
                    }
                }
            }
        }
    
        @Override // android.view.View
        public boolean onGenericMotionEvent(MotionEvent event) {
            ControlsProfile controlsProfile;
            ExternalController controller;
            if (!this.editMode && (controlsProfile = this.profile) != null && (controller = controlsProfile.getController(event.getDeviceId())) != null && controller.updateStateFromMotionEvent(event)) {
                ExternalControllerBinding controllerBinding = controller.getControllerBinding(androidx.constraintlayout.widget.R$styleable.Constraint_pathMotionArc);
                if (controllerBinding != null) {
                    handleInputEvent(controllerBinding.getBinding(), controller.state.isPressed(10));
                }
                ExternalControllerBinding controllerBinding2 = controller.getControllerBinding(105);
                if (controllerBinding2 != null) {
                    handleInputEvent(controllerBinding2.getBinding(), controller.state.isPressed(11));
                }
                processJoystickInput(controller);
                return true;
            }
            return super.onGenericMotionEvent(event);
        }
    
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent event) {
            ControlsProfile controlsProfile;
            if (this.editMode && this.readyToDraw) {
                switch (event.getAction()) {
                    case 0:
                        this.startX = event.getX();
                        float y = event.getY();
                        this.startY = y;
                        ControlElement element = intersectElement(this.startX, y);
                        this.moveCursor = true;
                        this.moveElement = false;
                        if (element != null) {
                            this.offsetX = this.startX - element.getX();
                            this.offsetY = this.startY - element.getY();
                            this.moveCursor = false;
                        }
                        selectElement(element);
                        break;
                    case 1:
                        if (this.selectedElement != null && (controlsProfile = this.profile) != null && this.moveElement) {
                            controlsProfile.save();
                        }
                        if (this.moveCursor) {
                            this.cursor.set((int) Mathf.roundTo(event.getX(), this.snappingSize), (int) Mathf.roundTo(event.getY(), this.snappingSize));
                        }
                        invalidate();
                        break;
                    case 2:
                        if (this.selectedElement != null) {
                            float dx = Math.abs(event.getX() - this.startX);
                            float dy = Math.abs(event.getY() - this.startY);
                            if (dx >= 10.0f || dy >= 10.0f) {
                                this.moveElement = true;
                            }
                            if (this.moveElement) {
                                this.selectedElement.setX((int) Mathf.roundTo(event.getX() - this.offsetX, this.snappingSize));
                                this.selectedElement.setY((int) Mathf.roundTo(event.getY() - this.offsetY, this.snappingSize));
                                invalidate();
                                break;
                            }
                        }
                        break;
                }
            }
            if (!this.editMode && this.profile != null) {
                int actionIndex = event.getActionIndex();
                int pointerId = event.getPointerId(actionIndex);
                int actionMasked = event.getActionMasked();
                boolean handled = false;
                switch (actionMasked) {
                    case 0:
                    case 5:
                        float x = event.getX(actionIndex);
                        float y2 = event.getY(actionIndex);
                        this.touchpadView.setPointerButtonLeftEnabled(true);
                        for (ControlElement element2 : this.profile.getElements()) {
                            if (element2.handleTouchDown(pointerId, x, y2)) {
                                handled = true;
                            }
                            if (element2.getBindingAt(0) == Binding.MOUSE_LEFT_BUTTON) {
                                this.touchpadView.setPointerButtonLeftEnabled(false);
                            }
                        }
                        if (!handled) {
                            this.touchpadView.onTouchEvent(event);
                            break;
                        }
                        break;
                    case 1:
                    case 3:
                    case 6:
                        Iterator<ControlElement> it = this.profile.getElements().iterator();
                        while (it.hasNext()) {
                            if (it.next().handleTouchUp(pointerId)) {
                                handled = true;
                            }
                        }
                        if (!handled) {
                            this.touchpadView.onTouchEvent(event);
                            break;
                        }
                        break;
                    case 2:
                        byte count = (byte) event.getPointerCount();
                        for (byte i = 0; i < count; i = (byte) (i + 1)) {
                            float x2 = event.getX(i);
                            float y3 = event.getY(i);
                            boolean handled2 = false;
                            Iterator<ControlElement> it2 = this.profile.getElements().iterator();
                            while (it2.hasNext()) {
                                if (it2.next().handleTouchMove(i, x2, y3)) {
                                    handled2 = true;
                                }
                            }
                            if (!handled2) {
                                this.touchpadView.onTouchEvent(event);
                            }
                        }
                        break;
                }
            }
            return true;
        }
    
        public boolean onKeyEvent(KeyEvent event) {
            ExternalController controller;
            ExternalControllerBinding controllerBinding;
            if (this.profile == null || event.getRepeatCount() != 0 || (controller = this.profile.getController(event.getDeviceId())) == null || (controllerBinding = controller.getControllerBinding(event.getKeyCode())) == null) {
                return false;
            }
            int action = event.getAction();
            if (action == 0) {
                handleInputEvent(controllerBinding.getBinding(), true);
            } else if (action == 1) {
                handleInputEvent(controllerBinding.getBinding(), false);
            }
            return true;
        }
    
        public void handleInputEvent(Binding[] bindings, boolean isActionDown) {
            for (Binding binding : bindings) {
                if (binding != Binding.NONE) {
                    handleInputEvent(binding, isActionDown, 0.0f);
                }
            }
        }
    
        public void handleInputEvent(Binding binding, boolean isActionDown) {
            handleInputEvent(binding, isActionDown, 0.0f);
        }
    
        public void handleInputEvent(Binding binding, boolean isActionDown, float offset) {
            if (binding.isGamepad()) {
                XServer xServer = this.xServer;
                WinHandler winHandler = xServer != null ? xServer.getWinHandler() : null;
                GamepadState state = this.profile.getGamepadState();
                int buttonIdx = binding.ordinal() - Binding.GAMEPAD_BUTTON_A.ordinal();
                if (buttonIdx <= 11) {
                    state.setPressed(buttonIdx, isActionDown);
                } else if (binding == Binding.GAMEPAD_LEFT_THUMB_UP || binding == Binding.GAMEPAD_LEFT_THUMB_DOWN) {
                    state.thumbLY = isActionDown ? offset : 0.0f;
                } else if (binding == Binding.GAMEPAD_LEFT_THUMB_LEFT || binding == Binding.GAMEPAD_LEFT_THUMB_RIGHT) {
                    state.thumbLX = isActionDown ? offset : 0.0f;
                } else if (binding == Binding.GAMEPAD_RIGHT_THUMB_UP || binding == Binding.GAMEPAD_RIGHT_THUMB_DOWN) {
                    state.thumbRY = isActionDown ? offset : 0.0f;
                } else if (binding == Binding.GAMEPAD_RIGHT_THUMB_LEFT || binding == Binding.GAMEPAD_RIGHT_THUMB_RIGHT) {
                    state.thumbRX = isActionDown ? offset : 0.0f;
                } else {
                    Binding binding2 = Binding.GAMEPAD_DPAD_UP;
                    if (binding == binding2 || binding == Binding.GAMEPAD_DPAD_RIGHT || binding == Binding.GAMEPAD_DPAD_DOWN || binding == Binding.GAMEPAD_DPAD_LEFT) {
                        state.dpad[binding.ordinal() - binding2.ordinal()] = isActionDown;
                    }
                }
                if (winHandler != null) {
                    ExternalController controller = winHandler.getCurrentController();
                    if (controller != null) {
                        controller.state.copy(state);
                    }
                    winHandler.sendGamepadState();
                    return;
                }
                return;
            }
            Binding binding3 = Binding.MOUSE_MOVE_LEFT;
            if (binding == binding3 || binding == Binding.MOUSE_MOVE_RIGHT) {
                PointF pointF = this.mouseMoveOffset;
                if (isActionDown) {
                    if (offset != 0.0f) {
                        r1 = offset;
                    } else {
                        r1 = binding != binding3 ? 1 : -1;
                    }
                }
                pointF.x = r1;
                if (isActionDown) {
                    createMouseMoveTimer();
                    return;
                }
                return;
            }
            if (binding == Binding.MOUSE_MOVE_DOWN || binding == Binding.MOUSE_MOVE_UP) {
                PointF pointF2 = this.mouseMoveOffset;
                if (isActionDown) {
                    if (offset != 0.0f) {
                        r1 = offset;
                    } else {
                        r1 = binding != Binding.MOUSE_MOVE_UP ? 1 : -1;
                    }
                }
                pointF2.y = r1;
                if (isActionDown) {
                    createMouseMoveTimer();
                    return;
                }
                return;
            }
            Pointer.Button pointerButton = binding.getPointerButton();
            if (isActionDown) {
                if (pointerButton != null) {
                    this.xServer.injectPointerButtonPress(pointerButton);
                    return;
                } else {
                    this.xServer.injectKeyPress(binding.keycode);
                    return;
                }
            }
            if (pointerButton != null) {
                this.xServer.injectPointerButtonRelease(pointerButton);
            } else {
                this.xServer.injectKeyRelease(binding.keycode);
            }
        }
    
        public Bitmap getIcon(byte id) {
            if (this.icons[id] == null) {
                Context context = getContext();
                try {
                    InputStream is = context.getAssets().open("inputcontrols/icons/" + ((int) id) + ".png");
                    try {
                        this.icons[id] = BitmapFactory.decodeStream(is);
                        if (is != null) {
                            is.close();
                        }
                    } finally {
                    }
                } catch (IOException e) {
                }
            }
            return this.icons[id];
        }
    }
  + app/src/main/java/com/winlator/widget/LogView.java
    package com.winlator.widget;
    
    import android.content.Context;
    import android.content.SharedPreferences;
    import android.graphics.Canvas;
    import android.graphics.Paint;
    import android.graphics.PointF;
    import android.os.Environment;
    import android.text.format.DateFormat;
    import android.util.AttributeSet;
    import android.view.View;
    import androidx.preference.PreferenceManager;
    import com.winlator.R;
    import com.winlator.core.AppUtils;
    import com.winlator.core.FileUtils;
    import com.winlator.core.UnitUtils;
    import java.io.BufferedOutputStream;
    import java.io.BufferedWriter;
    import java.io.File;
    import java.io.FileOutputStream;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.io.PrintStream;
    import java.util.ArrayList;
    import java.util.Iterator;
    
    /* loaded from: classes.dex */
    public class LogView extends View {
        private final float defaultTextSize;
        private boolean isActionDown;
        private final PointF lastPoint;
        private final ArrayList<String> lines;
        private final Object lock;
        private final float minScrollThumbSize;
        private final Paint paint;
        private final PrintStream printStream;
        private final float rowHeight;
        private final PointF scrollPosition;
        private final PointF scrollSize;
        private boolean scrollingHorizontally;
        private boolean scrollingVertically;
    
        public LogView(Context context, AttributeSet attrs) {
            this(context, attrs, 0);
        }
    
        public LogView(Context context, AttributeSet attrs, int defStyleAttr) {
            this(context, attrs, defStyleAttr, 0);
        }
    
        public LogView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
            super(context, attrs, defStyleAttr, defStyleRes);
            this.paint = new Paint(1);
            this.lines = new ArrayList<>();
            this.rowHeight = UnitUtils.dpToPx(30.0f);
            this.defaultTextSize = UnitUtils.dpToPx(16.0f);
            this.minScrollThumbSize = UnitUtils.dpToPx(6.0f);
            this.lastPoint = new PointF();
            this.scrollPosition = new PointF();
            this.scrollSize = new PointF();
            this.isActionDown = false;
            this.scrollingHorizontally = false;
            this.scrollingVertically = false;
            this.lock = new Object();
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
            String logPath = preferences.getString("log_file", getLogFile().getPath());
            boolean saveToFile = preferences.getBoolean("save_logs_to_file", false);
            File logFile = new File(logPath);
            FileUtils.delete(logFile);
            if (saveToFile) {
                PrintStream printStream = null;
                try {
                    printStream = new PrintStream(new BufferedOutputStream(new FileOutputStream(logFile), 65536));
                } catch (IOException e) {
                }
                this.printStream = printStream;
                return;
            }
            this.printStream = null;
        }
    
        @Override // android.view.View
        protected void onSizeChanged(int w, int h, int oldw, int oldh) {
            super.onSizeChanged(w, h, oldw, oldh);
            computeScrollSize();
        }
    
        @Override // android.view.View
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);
            int width = getWidth();
            int height = getHeight();
            if (width == 0 || height == 0) {
                return;
            }
            synchronized (this.lock) {
                this.paint.setStyle(Paint.Style.FILL);
                if (this.lines.isEmpty()) {
                    this.paint.setTextSize(UnitUtils.dpToPx(20.0f));
                    this.paint.setColor(-4342339);
                    String text = getContext().getString(R.string.no_items_to_display);
                    float centerX = (width - this.paint.measureText(text)) * 0.5f;
                    canvas.drawText(text, centerX, ((height - this.paint.getFontSpacing()) * 0.5f) - this.paint.ascent(), this.paint);
                    return;
                }
                this.paint.setTextSize(this.defaultTextSize);
                float textHeight = this.paint.getFontSpacing();
                float rowY = -this.scrollPosition.y;
                int count = this.lines.size();
                for (int i = 0; i < count; i++) {
                    float centerY = this.rowHeight;
                    if (rowY + centerY >= 0.0f && rowY < height) {
                        this.paint.setColor(i % 2 != 0 ? -1968642 : -1);
                        canvas.drawRect(-this.scrollPosition.x, rowY, width, rowY + this.rowHeight, this.paint);
                        this.paint.setColor(-14606047);
                        canvas.drawText(this.lines.get(i), -this.scrollPosition.x, (rowY - this.paint.ascent()) + ((this.rowHeight - textHeight) * 0.5f), this.paint);
                        rowY += this.rowHeight;
                    }
                    rowY += centerY;
                }
                drawScrollThumbs(canvas);
            }
        }
    
        private void drawScrollThumbs(Canvas canvas) {
            float scrollThumbX = getScrollThumbX();
            float scrollThumbY = getScrollThumbY();
            float scrollThumbWidth = getScrollThumbWidth();
            float scrollThumbHeight = getScrollThumbHeight();
            this.paint.setColor(855638016);
            float radius = this.minScrollThumbSize * 0.5f;
            canvas.drawRoundRect(scrollThumbX, getHeight() - this.minScrollThumbSize, scrollThumbX + scrollThumbWidth, getHeight(), radius, radius, this.paint);
            canvas.drawRoundRect(getWidth() - this.minScrollThumbSize, scrollThumbY, getWidth(), scrollThumbY + scrollThumbHeight, radius, radius, this.paint);
        }
    
        public float getScrollMaxLeft() {
            return Math.max(0.0f, this.scrollSize.x - getWidth());
        }
    
        public float getScrollMaxTop() {
            return Math.max(0.0f, this.scrollSize.y - getHeight());
        }
    
        public float getScrollThumbX() {
            float width = getWidth();
            float f = this.scrollSize.x;
            if (f <= 0.0f || f <= width) {
                return -3.4028235E38f;
            }
            return this.scrollPosition.x * (width / f);
        }
    
        public float getScrollThumbY() {
            float height = getHeight();
            float f = this.scrollSize.y;
            if (f <= 0.0f || f <= height) {
                return -3.4028235E38f;
            }
            return this.scrollPosition.y * (height / f);
        }
    
        public float getScrollThumbWidth() {
            float width = getWidth();
            float f = this.scrollSize.x;
            if (f <= 0.0f || f <= width) {
                return 0.0f;
            }
            return Math.max(width - ((getScrollMaxLeft() / this.scrollSize.x) * width), this.minScrollThumbSize);
        }
    
        public float getScrollThumbHeight() {
            float height = getHeight();
            float f = this.scrollSize.y;
            if (f <= 0.0f || f <= height) {
                return 0.0f;
            }
            return Math.max(height - ((getScrollMaxTop() / this.scrollSize.y) * height), this.minScrollThumbSize);
        }
    
        private void computeScrollSize() {
            int width = getWidth();
            int height = getHeight();
            if (width == 0 || height == 0) {
                return;
            }
            float maxWidth = 0.0f;
            this.paint.setTextSize(this.defaultTextSize);
            int count = this.lines.size();
            for (int i = 0; i < count; i++) {
                maxWidth = Math.max(this.paint.measureText(this.lines.get(i)), maxWidth);
            }
            this.scrollSize.x = Math.max(maxWidth, width);
            this.scrollSize.y = Math.max(this.rowHeight * this.lines.size(), height);
            this.scrollPosition.set(0.0f, getScrollMaxTop());
        }
    
        public void clear() {
            synchronized (this.lock) {
                this.lines.clear();
            }
            postInvalidate();
        }
    
        public void append(String line) {
            synchronized (this.lock) {
                String content = line.replace("\n", "");
                if (content.isEmpty()) {
                    return;
                }
                String logLine = "[" + ((Object) DateFormat.format("HH:mm:ss", System.currentTimeMillis())) + "]  " + content;
                this.lines.add(logLine);
                PrintStream printStream = this.printStream;
                if (printStream != null) {
                    printStream.append((CharSequence) (logLine + "\n"));
                    this.printStream.flush();
                }
                computeScrollSize();
                postInvalidate();
            }
        }
    
        public static File getLogFile() {
            File parent = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS), "Winlator");
            if (!parent.isDirectory()) {
                parent.mkdirs();
            }
            return new File(parent, "logs.txt");
        }
    
        public void exportToFile() {
            File logFile = getLogFile();
            String logPath = logFile.getPath();
            if (logFile.isFile()) {
                logFile.delete();
            }
            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter(logFile));
                try {
                    synchronized (this.lock) {
                        Iterator<String> it = this.lines.iterator();
                        while (it.hasNext()) {
                            String line = it.next();
                            writer.write(line + "\n");
                        }
                    }
                    String path = logPath.substring(logPath.indexOf(Environment.DIRECTORY_DOCUMENTS));
                    Context context = getContext();
                    AppUtils.showToast(context, context.getString(R.string.logs_exported_to) + " " + path);
                    writer.close();
                } finally {
                }
            } catch (IOException e) {
            }
        }
    
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        /* JADX WARN: Code restructure failed: missing block: B:19:0x0096, code lost:
    
            return true;
         */
        @Override // android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public boolean onTouchEvent(android.view.MotionEvent r8) {
            /*
                r7 = this;
                int r0 = r8.getAction()
                r1 = 0
                r2 = 1
                switch(r0) {
                    case 0: goto L82;
                    case 1: goto L7f;
                    case 2: goto Lb;
                    default: goto L9;
                }
            L9:
                goto L96
            Lb:
                boolean r0 = r7.isActionDown
                if (r0 == 0) goto L96
                float r0 = r8.getX()
                android.graphics.PointF r1 = r7.lastPoint
                float r1 = r1.x
                float r0 = r0 - r1
                float r1 = r8.getY()
                android.graphics.PointF r3 = r7.lastPoint
                float r3 = r3.y
                float r1 = r1 - r3
                float r3 = java.lang.Math.abs(r0)
                r4 = 1092616192(0x41200000, float:10.0)
                int r3 = (r3 > r4 ? 1 : (r3 == r4 ? 0 : -1))
                if (r3 <= 0) goto L2d
                r7.scrollingHorizontally = r2
            L2d:
                float r3 = java.lang.Math.abs(r1)
                int r3 = (r3 > r4 ? 1 : (r3 == r4 ? 0 : -1))
                if (r3 <= 0) goto L37
                r7.scrollingVertically = r2
            L37:
                boolean r3 = r7.scrollingHorizontally
                r4 = 0
                if (r3 == 0) goto L5b
                android.graphics.PointF r3 = r7.scrollPosition
                float r5 = r3.x
                float r5 = r5 - r0
                float r6 = r7.getScrollMaxLeft()
                float r5 = com.winlator.math.Mathf.clamp(r5, r4, r6)
                r3.x = r5
                android.graphics.PointF r3 = r7.lastPoint
                float r5 = r8.getX()
                float r6 = r8.getY()
                r3.set(r5, r6)
                r7.invalidate()
            L5b:
                boolean r3 = r7.scrollingVertically
                if (r3 == 0) goto L7e
                android.graphics.PointF r3 = r7.scrollPosition
                float r5 = r3.y
                float r5 = r5 - r1
                float r6 = r7.getScrollMaxTop()
                float r4 = com.winlator.math.Mathf.clamp(r5, r4, r6)
                r3.y = r4
                android.graphics.PointF r3 = r7.lastPoint
                float r4 = r8.getX()
                float r5 = r8.getY()
                r3.set(r4, r5)
                r7.invalidate()
            L7e:
                goto L96
            L7f:
                r7.isActionDown = r1
                goto L96
            L82:
                android.graphics.PointF r0 = r7.lastPoint
                float r3 = r8.getX()
                float r4 = r8.getY()
                r0.set(r3, r4)
                r7.isActionDown = r2
                r7.scrollingHorizontally = r1
                r7.scrollingVertically = r1
            L96:
                return r2
            */
            throw new UnsupportedOperationException("Method not decompiled: com.winlator.widget.LogView.onTouchEvent(android.view.MotionEvent):boolean");
        }
    }
  + app/src/main/java/com/winlator/widget/MagnifierView.java
    package com.winlator.widget;
    
    import android.content.Context;
    import android.content.SharedPreferences;
    import android.graphics.PointF;
    import android.util.AttributeSet;
    import android.view.LayoutInflater;
    import android.view.MotionEvent;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.FrameLayout;
    import android.widget.TextView;
    import androidx.preference.PreferenceManager;
    import com.winlator.R;
    import com.winlator.core.Callback;
    import com.winlator.core.UnitUtils;
    import com.winlator.math.Mathf;
    
    /* loaded from: classes.dex */
    public class MagnifierView extends FrameLayout {
        private Runnable hideButtonCallback;
        private short lastX;
        private short lastY;
        private final SharedPreferences preferences;
        private boolean restoreSavedPosition;
        private TextView textView;
        private Callback<Float> zoomButtonCallback;
    
        public MagnifierView(Context context) {
            this(context, null);
        }
    
        public MagnifierView(Context context, AttributeSet attrs) {
            this(context, attrs, 0);
        }
    
        public MagnifierView(Context context, AttributeSet attrs, int defStyleAttr) {
            this(context, attrs, defStyleAttr, 0);
        }
    
        public MagnifierView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
            super(context, attrs, defStyleAttr, defStyleRes);
            this.restoreSavedPosition = true;
            this.lastX = (short) 0;
            this.lastY = (short) 0;
            this.preferences = PreferenceManager.getDefaultSharedPreferences(context);
            setLayoutParams(new FrameLayout.LayoutParams(-2, -2));
            View contentView = LayoutInflater.from(context).inflate(R.layout.magnifier_view, (ViewGroup) this, false);
            final PointF startPoint = new PointF();
            final boolean[] isActionDown = {false};
            contentView.findViewById(R.id.BTMove).setOnTouchListener(new View.OnTouchListener() { // from class: com.winlator.widget.MagnifierView$$ExternalSyntheticLambda3
                @Override // android.view.View.OnTouchListener
                public final boolean onTouch(View view, MotionEvent motionEvent) {
                    boolean lambda$new$0;
                    lambda$new$0 = MagnifierView.this.lambda$new$0(startPoint, isActionDown, view, motionEvent);
                    return lambda$new$0;
                }
            });
            contentView.findViewById(R.id.BTZoomPlus).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.widget.MagnifierView$$ExternalSyntheticLambda2
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    MagnifierView.this.lambda$new$1(view);
                }
            });
            contentView.findViewById(R.id.BTZoomMinus).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.widget.MagnifierView$$ExternalSyntheticLambda1
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    MagnifierView.this.lambda$new$2(view);
                }
            });
            contentView.findViewById(R.id.BTHide).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.widget.MagnifierView$$ExternalSyntheticLambda0
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    MagnifierView.this.lambda$new$3(view);
                }
            });
            this.textView = (TextView) contentView.findViewById(R.id.TextView);
            addView(contentView);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        /* JADX WARN: Code restructure failed: missing block: B:15:0x0073, code lost:
    
            return true;
         */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public /* synthetic */ boolean lambda$new$0(android.graphics.PointF r6, boolean[] r7, android.view.View r8, android.view.MotionEvent r9) {
            /*
                r5 = this;
                int r0 = r9.getAction()
                r1 = 1
                r2 = 0
                switch(r0) {
                    case 0: goto L64;
                    case 1: goto L2a;
                    case 2: goto La;
                    default: goto L9;
                }
            L9:
                goto L73
            La:
                boolean r0 = r7[r2]
                if (r0 == 0) goto L73
                float r0 = r5.getX()
                float r2 = r9.getX()
                float r3 = r6.x
                float r2 = r2 - r3
                float r0 = r0 + r2
                float r2 = r5.getY()
                float r3 = r9.getY()
                float r4 = r6.y
                float r3 = r3 - r4
                float r2 = r2 + r3
                r5.movePanel(r0, r2)
                goto L73
            L2a:
                boolean r0 = r7[r2]
                if (r0 == 0) goto L5d
                short r0 = r5.lastX
                if (r0 <= 0) goto L5d
                short r0 = r5.lastY
                if (r0 <= 0) goto L5d
                android.content.SharedPreferences r0 = r5.preferences
                android.content.SharedPreferences$Editor r0 = r0.edit()
                java.lang.StringBuilder r3 = new java.lang.StringBuilder
                r3.<init>()
                short r4 = r5.lastX
                r3.append(r4)
                java.lang.String r4 = "|"
                r3.append(r4)
                short r4 = r5.lastY
                r3.append(r4)
                java.lang.String r3 = r3.toString()
                java.lang.String r4 = "magnifier_view"
                android.content.SharedPreferences$Editor r0 = r0.putString(r4, r3)
                r0.apply()
            L5d:
                r5.lastX = r2
                r5.lastY = r2
                r7[r2] = r2
                goto L73
            L64:
                float r0 = r9.getX()
                r6.x = r0
                float r0 = r9.getY()
                r6.y = r0
                r7[r2] = r1
            L73:
                return r1
            */
            throw new UnsupportedOperationException("Method not decompiled: com.winlator.widget.MagnifierView.lambda$new$0(android.graphics.PointF, boolean[], android.view.View, android.view.MotionEvent):boolean");
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$1(View v) {
            Callback<Float> callback = this.zoomButtonCallback;
            if (callback != null) {
                callback.call(Float.valueOf(0.25f));
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$2(View v) {
            Callback<Float> callback = this.zoomButtonCallback;
            if (callback != null) {
                callback.call(Float.valueOf(-0.25f));
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$3(View v) {
            Runnable runnable = this.hideButtonCallback;
            if (runnable != null) {
                runnable.run();
            }
        }
    
        public void setZoomValue(float value) {
            this.textView.setText(((int) (100.0f * value)) + "%");
        }
    
        @Override // android.widget.FrameLayout, android.view.ViewGroup, android.view.View
        protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
            super.onLayout(changed, left, top, right, bottom);
            if (this.restoreSavedPosition) {
                float x = 1000000.0f;
                float y = 1000000.0f;
                String config = this.preferences.getString("magnifier_view", null);
                if (config != null) {
                    try {
                        String[] parts = config.split("\\|");
                        x = Short.parseShort(parts[0]);
                        y = Short.parseShort(parts[1]);
                    } catch (NumberFormatException e) {
                    }
                }
                movePanel(x, y);
                this.restoreSavedPosition = false;
            }
        }
    
        private void movePanel(float x, float y) {
            int padding = (int) UnitUtils.dpToPx(8.0f);
            ViewGroup parent = (ViewGroup) getParent();
            int width = getWidth();
            int height = getHeight();
            int parentWidth = parent.getWidth();
            int parentHeight = parent.getHeight();
            float x2 = Mathf.clamp(x, padding, (parentWidth - padding) - width);
            float y2 = Mathf.clamp(y, padding, (parentHeight - padding) - height);
            setX(x2);
            setY(y2);
            this.lastX = (short) x2;
            this.lastY = (short) y2;
        }
    
        public Callback<Float> getZoomButtonCallback() {
            return this.zoomButtonCallback;
        }
    
        public void setZoomButtonCallback(Callback<Float> zoomButtonCallback) {
            this.zoomButtonCallback = zoomButtonCallback;
        }
    
        public Runnable getHideButtonCallback() {
            return this.hideButtonCallback;
        }
    
        public void setHideButtonCallback(Runnable hideButtonCallback) {
            this.hideButtonCallback = hideButtonCallback;
        }
    }
  + app/src/main/java/com/winlator/widget/MultiSelectionComboBox.java
    package com.winlator.widget;
    
    import android.R;
    import android.content.Context;
    import android.util.ArraySet;
    import android.util.AttributeSet;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.AdapterView;
    import android.widget.ArrayAdapter;
    import android.widget.CheckedTextView;
    import androidx.appcompat.widget.AppCompatTextView;
    import androidx.appcompat.widget.ListPopupWindow;
    import com.winlator.core.UnitUtils;
    import java.util.ArrayList;
    import java.util.Collections;
    
    /* loaded from: classes.dex */
    public class MultiSelectionComboBox extends AppCompatTextView {
        private String displayText;
        private String[] items;
        private int popupWindowWidth;
        private final ArraySet<String> selectedItemSet;
    
        public MultiSelectionComboBox(Context context, AttributeSet attrs) {
            this(context, attrs, 0);
        }
    
        public MultiSelectionComboBox(Context context, AttributeSet attrs, int defStyleAttr) {
            super(context, attrs, defStyleAttr);
            this.selectedItemSet = new ArraySet<>();
            this.popupWindowWidth = 260;
        }
    
        public String getDisplayText() {
            return this.displayText;
        }
    
        public void setDisplayText(String displayText) {
            this.displayText = displayText;
        }
    
        public int getPopupWindowWidth() {
            return this.popupWindowWidth;
        }
    
        public void setPopupWindowWidth(int popupWindowWidth) {
            this.popupWindowWidth = popupWindowWidth;
        }
    
        public String[] getItems() {
            return this.items;
        }
    
        public void setItems(String[] items) {
            this.items = items;
            updateDisplayText();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void updateDisplayText() {
            String str = this.displayText;
            if (str != null && !str.isEmpty()) {
                String itemCount = String.valueOf(this.items.length);
                String selectedItemCount = String.valueOf(this.selectedItemSet.size());
                setText(this.displayText.replaceFirst("%d", selectedItemCount).replaceFirst("%d", itemCount));
                return;
            }
            setText(getSelectedItemsAsString());
        }
    
        public void setSelectedItems(String[] selectedItems) {
            Collections.addAll(this.selectedItemSet, selectedItems);
            updateDisplayText();
        }
    
        public String[] getSelectedItems() {
            ArrayList<String> selectedItems = new ArrayList<>();
            for (String item : this.items) {
                if (this.selectedItemSet.contains(item)) {
                    selectedItems.add(item);
                }
            }
            return (String[]) selectedItems.toArray(new String[0]);
        }
    
        public String getSelectedItemsAsString() {
            String result = "";
            for (String item : this.items) {
                if (this.selectedItemSet.contains(item)) {
                    StringBuilder sb = new StringBuilder();
                    sb.append(result);
                    sb.append(!result.isEmpty() ? "," : "");
                    sb.append(item);
                    result = sb.toString();
                }
            }
            return result;
        }
    
        @Override // android.view.View
        public boolean performClick() {
            String[] strArr = this.items;
            if (strArr == null || strArr.length == 0) {
                return true;
            }
            final ArrayAdapter<String> adapter = new ArrayAdapter<String>(getContext(), R.layout.simple_list_item_multiple_choice, this.items) { // from class: com.winlator.widget.MultiSelectionComboBox.1
                @Override // android.widget.ArrayAdapter, android.widget.Adapter
                public View getView(int position, View convertView, ViewGroup parent) {
                    CheckedTextView checkedTextView = (CheckedTextView) super.getView(position, convertView, parent);
                    checkedTextView.setChecked(MultiSelectionComboBox.this.selectedItemSet.contains(MultiSelectionComboBox.this.items[position]));
                    MultiSelectionComboBox.this.updateDisplayText();
                    return checkedTextView;
                }
            };
            ListPopupWindow popupWindow = new ListPopupWindow(getContext());
            popupWindow.setAdapter(adapter);
            popupWindow.setAnchorView(this);
            popupWindow.setWidth((int) UnitUtils.dpToPx(this.popupWindowWidth));
            popupWindow.setOnItemClickListener(new AdapterView.OnItemClickListener() { // from class: com.winlator.widget.MultiSelectionComboBox$$ExternalSyntheticLambda0
                @Override // android.widget.AdapterView.OnItemClickListener
                public final void onItemClick(AdapterView adapterView, View view, int i, long j) {
                    MultiSelectionComboBox.this.lambda$performClick$0(adapter, adapterView, view, i, j);
                }
            });
            popupWindow.show();
            return true;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$performClick$0(ArrayAdapter adapter, AdapterView parent, View view, int position, long id) {
            String item = this.items[position];
            if (this.selectedItemSet.contains(item)) {
                this.selectedItemSet.remove(item);
            } else {
                this.selectedItemSet.add(item);
            }
            adapter.notifyDataSetChanged();
        }
    }
  + app/src/main/java/com/winlator/widget/NumberPicker.java
    package com.winlator.widget;
    
    import android.content.Context;
    import android.content.res.TypedArray;
    import android.util.AttributeSet;
    import android.view.LayoutInflater;
    import android.view.MotionEvent;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.EditText;
    import android.widget.FrameLayout;
    import com.winlator.R;
    import com.winlator.R$styleable;
    import com.winlator.math.Mathf;
    
    /* loaded from: classes.dex */
    public class NumberPicker extends FrameLayout implements View.OnTouchListener {
        private final EditText editText;
        private int maxValue;
        private int minValue;
        private OnValueChangeListener onValueChangeListener;
        private int step;
        private int value;
    
        public interface OnValueChangeListener {
            void onValueChange(NumberPicker numberPicker, int i);
        }
    
        public NumberPicker(Context context, AttributeSet attrs) {
            this(context, attrs, 0);
        }
    
        public NumberPicker(Context context, AttributeSet attrs, int defStyleAttr) {
            super(context, attrs, defStyleAttr);
            this.value = 0;
            this.minValue = 0;
            this.maxValue = 100;
            this.step = 1;
            LayoutInflater.from(context).inflate(R.layout.number_picker, (ViewGroup) this, true);
            this.editText = (EditText) findViewById(R.id.EditText);
            findViewById(R.id.BTDecrement).setOnTouchListener(this);
            findViewById(R.id.BTIncrement).setOnTouchListener(this);
            if (attrs != null) {
                TypedArray ta = context.obtainStyledAttributes(attrs, R$styleable.NumberPicker);
                this.minValue = ta.getInt(1, this.minValue);
                this.maxValue = ta.getInt(0, this.maxValue);
                setStep(ta.getInt(2, this.step));
                int value = ta.getInt(4, 0);
                ta.recycle();
                setValue(value);
                return;
            }
            setStep(this.step);
        }
    
        public void setValue(int value) {
            int clamp = Mathf.clamp(value, this.minValue, this.maxValue);
            this.value = clamp;
            this.editText.setText(String.valueOf(clamp));
        }
    
        public int getValue() {
            return this.value;
        }
    
        public int getMinValue() {
            return this.minValue;
        }
    
        public void setMinValue(int minValue) {
            this.minValue = minValue;
        }
    
        public int getMaxValue() {
            return this.maxValue;
        }
    
        public void setMaxValue(int maxValue) {
            this.maxValue = maxValue;
        }
    
        public void increment() {
            setValue(this.value + this.step);
        }
    
        public void decrement() {
            setValue(this.value - this.step);
        }
    
        public int getStep() {
            return this.step;
        }
    
        public void setStep(int step) {
            this.step = step;
        }
    
        public OnValueChangeListener getOnValueChangeListener() {
            return this.onValueChangeListener;
        }
    
        public void setOnValueChangeListener(OnValueChangeListener onValueChangeListener) {
            this.onValueChangeListener = onValueChangeListener;
        }
    
        private void onButtonClick(View v) {
            if (isEnabled()) {
                int id = v.getId();
                if (id == R.id.BTIncrement) {
                    increment();
                } else if (id == R.id.BTDecrement) {
                    decrement();
                }
                OnValueChangeListener onValueChangeListener = this.onValueChangeListener;
                if (onValueChangeListener != null) {
                    onValueChangeListener.onValueChange(this, this.value);
                }
            }
        }
    
        @Override // android.view.View.OnTouchListener
        public boolean onTouch(View v, MotionEvent event) {
            int action = event.getAction();
            if (action == 1 || action == 3) {
                onButtonClick(v);
            }
            return true;
        }
    }
  + app/src/main/java/com/winlator/widget/SeekBar.java
    package com.winlator.widget;
    
    import android.content.Context;
    import android.content.res.TypedArray;
    import android.graphics.Color;
    import android.graphics.LinearGradient;
    import android.graphics.Paint;
    import android.graphics.RectF;
    import android.os.Bundle;
    import android.os.Parcelable;
    import android.util.AttributeSet;
    import android.view.MotionEvent;
    import android.widget.ImageView;
    import androidx.appcompat.widget.AppCompatImageView;
    import androidx.core.content.ContextCompat;
    import com.winlator.R;
    import com.winlator.R$styleable;
    import com.winlator.core.StringUtils;
    import com.winlator.core.UnitUtils;
    import com.winlator.math.Mathf;
    import java.text.DecimalFormat;
    
    /* loaded from: classes.dex */
    public class SeekBar extends AppCompatImageView {
        private final float barHeight;
        private final int colorPrimary;
        private final int colorSecondary;
        private DecimalFormat decimalFormat;
        private LinearGradient glossyEffectGradient;
        private float maxValue;
        private float minValue;
        private float normalizedValue;
        private OnValueChangeListener onValueChangeListener;
        private float padding;
        private final Paint paint;
        private final RectF rect;
        private float step;
        private String suffix;
        private final int textColor;
        private float textSize;
        private final float thumbRadius;
        private final float thumbSize;
    
        public interface OnValueChangeListener {
            void onValueChangeListener(SeekBar seekBar, float f);
        }
    
        public SeekBar(Context context, AttributeSet attrs) {
            this(context, attrs, 0);
        }
    
        public SeekBar(Context context, AttributeSet attrs, int defStyle) {
            super(context, attrs, defStyle);
            this.paint = new Paint(1);
            this.minValue = 0.0f;
            this.maxValue = 100.0f;
            this.step = 1.0f;
            this.normalizedValue = 0.0f;
            this.textSize = UnitUtils.dpToPx(16.0f);
            this.textColor = -9211021;
            this.barHeight = UnitUtils.dpToPx(6.0f);
            float dpToPx = UnitUtils.dpToPx(20.0f);
            this.thumbSize = dpToPx;
            this.rect = new RectF();
            this.colorPrimary = -2631721;
            this.colorSecondary = ContextCompat.getColor(context, R.color.colorAccent);
            if (attrs != null) {
                TypedArray ta = context.obtainStyledAttributes(attrs, R$styleable.SeekBar, 0, 0);
                this.minValue = ta.getFloat(1, this.minValue);
                this.maxValue = ta.getFloat(0, this.maxValue);
                this.suffix = ta.getString(3);
                this.textSize = ta.getDimension(4, this.textSize);
                setStep(ta.getFloat(2, this.step));
                setValue(ta.getFloat(5, 0.0f));
                ta.recycle();
            }
            this.thumbRadius = dpToPx / 2.0f;
            setFocusable(true);
            setFocusableInTouchMode(true);
        }
    
        public String getSuffix() {
            return this.suffix;
        }
    
        public synchronized void setSuffix(String suffix) {
            this.suffix = suffix;
        }
    
        public OnValueChangeListener getOnValueChangeListener() {
            return this.onValueChangeListener;
        }
    
        public void setOnValueChangeListener(OnValueChangeListener onValueChangeListener) {
            this.onValueChangeListener = onValueChangeListener;
        }
    
        public float getValue() {
            float f = this.minValue;
            return f + (this.normalizedValue * (this.maxValue - f));
        }
    
        public synchronized void setValue(float value) {
            float roundTo = Mathf.roundTo(value, this.step);
            float f = this.minValue;
            this.normalizedValue = Mathf.clamp((roundTo - f) / (this.maxValue - f), 0.0f, 1.0f);
            postInvalidate();
        }
    
        public float getStep() {
            return this.step;
        }
    
        public synchronized void setStep(float step) {
            this.step = step;
            String[] parts = String.valueOf(Mathf.fract(step)).split("\\.");
            int decimalPlaces = parts[parts.length - 1].length();
            StringBuilder sb = new StringBuilder();
            sb.append("0.");
            sb.append(StringUtils.repeat(decimalPlaces > 1 ? '0' : '#', decimalPlaces));
            String format = sb.toString();
            this.decimalFormat = new DecimalFormat(format);
        }
    
        public float getMinValue() {
            return this.minValue;
        }
    
        public synchronized void setMinValue(float minValue) {
            this.minValue = minValue;
        }
    
        public float getMaxValue() {
            return this.maxValue;
        }
    
        public synchronized void setMaxValue(float maxValue) {
            this.maxValue = maxValue;
        }
    
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent event) {
            if (!isEnabled()) {
                return false;
            }
            switch (event.getAction()) {
                case 0:
                    setPressed(isInThumbRange(event.getX()));
                    if (!isPressed()) {
                        return super.onTouchEvent(event);
                    }
                    setNormalizedValue(event.getX());
                    if (getParent() != null) {
                        getParent().requestDisallowInterceptTouchEvent(true);
                    }
                    invalidate();
                    return true;
                case 1:
                    if (isPressed()) {
                        setNormalizedValue(event.getX());
                        setPressed(false);
                    }
                    invalidate();
                    OnValueChangeListener onValueChangeListener = this.onValueChangeListener;
                    if (onValueChangeListener != null) {
                        onValueChangeListener.onValueChangeListener(this, getValue());
                    }
                    return true;
                case 2:
                    if (isPressed()) {
                        setNormalizedValue(event.getX());
                        invalidate();
                    }
                    return true;
                case 3:
                    if (isPressed()) {
                        setPressed(false);
                    }
                    invalidate();
                    return true;
                default:
                    return true;
            }
        }
    
        @Override // android.widget.ImageView, android.view.View
        protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
            int margin = (int) UnitUtils.dpToPx(2.0f);
            int width = (int) UnitUtils.dpToPx(220.0f);
            int height = (int) (this.thumbSize + margin);
            setMeasuredDimension(ImageView.resolveSizeAndState(width + margin, widthMeasureSpec, 0), ImageView.resolveSizeAndState(height, heightMeasureSpec, 0));
        }
    
        /* JADX WARN: Removed duplicated region for block: B:19:0x0073 A[Catch: all -> 0x0143, TryCatch #0 {, blocks: (B:4:0x0005, B:8:0x0016, B:11:0x0050, B:13:0x0064, B:17:0x006e, B:19:0x0073, B:20:0x0079, B:22:0x00e9, B:23:0x0113), top: B:3:0x0005 }] */
        /* JADX WARN: Removed duplicated region for block: B:22:0x00e9 A[Catch: all -> 0x0143, TryCatch #0 {, blocks: (B:4:0x0005, B:8:0x0016, B:11:0x0050, B:13:0x0064, B:17:0x006e, B:19:0x0073, B:20:0x0079, B:22:0x00e9, B:23:0x0113), top: B:3:0x0005 }] */
        /* JADX WARN: Removed duplicated region for block: B:28:0x0078  */
        @Override // android.widget.ImageView, android.view.View
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        protected synchronized void onDraw(android.graphics.Canvas r26) {
            /*
                Method dump skipped, instructions count: 326
                To view this dump add '--comments-level debug' option
            */
            throw new UnsupportedOperationException("Method not decompiled: com.winlator.widget.SeekBar.onDraw(android.graphics.Canvas):void");
        }
    
        private int getThumbHoleColor() {
            int r = Mathf.clamp(Color.red(this.colorSecondary) - 30, 0, 255);
            int g = Mathf.clamp(Color.green(this.colorSecondary) - 30, 0, 255);
            int b = Mathf.clamp(Color.blue(this.colorSecondary) - 30, 0, 255);
            return Color.rgb(r, g, b);
        }
    
        @Override // android.view.View
        protected Parcelable onSaveInstanceState() {
            Bundle bundle = new Bundle();
            bundle.putParcelable("SUPER", super.onSaveInstanceState());
            bundle.putFloat("normalizedValue", this.normalizedValue);
            return bundle;
        }
    
        @Override // android.view.View
        protected void onRestoreInstanceState(Parcelable parcel) {
            Bundle bundle = (Bundle) parcel;
            super.onRestoreInstanceState(bundle.getParcelable("SUPER"));
            this.normalizedValue = bundle.getFloat("normalizedValue");
        }
    
        private boolean isInThumbRange(float touchX) {
            return Math.abs(touchX - getScreenCoord()) <= this.thumbRadius;
        }
    
        private float getScreenCoord() {
            return this.thumbRadius + (this.normalizedValue * (getWidth() - this.padding));
        }
    
        private void setNormalizedValue(float touchX) {
            int width = getWidth();
            float f = this.padding;
            if (width - f <= 0.0f) {
                return;
            }
            float normalizedStep = this.step / (this.maxValue - this.minValue);
            this.normalizedValue = Mathf.clamp(Mathf.roundTo((touchX - this.thumbRadius) / (width - f), normalizedStep), 0.0f, 1.0f);
        }
    }
  + app/src/main/java/com/winlator/widget/TouchpadView.java
    package com.winlator.widget;
    
    import android.R;
    import android.content.Context;
    import android.graphics.drawable.ColorDrawable;
    import android.graphics.drawable.StateListDrawable;
    import android.view.MotionEvent;
    import android.view.View;
    import android.widget.FrameLayout;
    import com.winlator.core.AppUtils;
    import com.winlator.math.Mathf;
    import com.winlator.math.XForm;
    import com.winlator.renderer.ViewTransformation;
    import com.winlator.winhandler.WinHandler;
    import com.winlator.xserver.Pointer;
    import com.winlator.xserver.ScreenInfo;
    import com.winlator.xserver.XServer;
    
    /* loaded from: classes.dex */
    public class TouchpadView extends View implements View.OnCapturedPointerListener {
        private Finger fingerPointerButtonLeft;
        private Finger fingerPointerButtonRight;
        private final Finger[] fingers;
        private Runnable fourFingersTapCallback;
        private boolean moveCursorToTouchpoint;
        private byte numFingers;
        private boolean pointerButtonLeftEnabled;
        private boolean pointerButtonRightEnabled;
        private float scrollAccumY;
        private boolean scrolling;
        private float sensitivity;
        private final XServer xServer;
        private final float[] xform;
    
        public TouchpadView(Context context, XServer xServer, boolean capturePointerOnExternalMouse) {
            super(context);
            this.fingers = new Finger[4];
            this.numFingers = (byte) 0;
            this.sensitivity = 1.0f;
            this.pointerButtonLeftEnabled = true;
            this.pointerButtonRightEnabled = true;
            this.moveCursorToTouchpoint = false;
            this.scrollAccumY = 0.0f;
            this.scrolling = false;
            this.xform = XForm.getInstance();
            this.xServer = xServer;
            setLayoutParams(new FrameLayout.LayoutParams(-1, -1));
            setBackground(createTransparentBackground());
            setClickable(true);
            setFocusable(true);
            setFocusableInTouchMode(false);
            int screenWidth = AppUtils.getScreenWidth();
            int screenHeight = AppUtils.getScreenHeight();
            ScreenInfo screenInfo = xServer.screenInfo;
            updateXform(screenWidth, screenHeight, screenInfo.width, screenInfo.height);
            if (capturePointerOnExternalMouse) {
                setOnCapturedPointerListener(this);
                setOnClickListener(new View.OnClickListener() { // from class: com.winlator.widget.TouchpadView$$ExternalSyntheticLambda0
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        TouchpadView.this.lambda$new$0(view);
                    }
                });
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$0(View view) {
            requestPointerCapture();
        }
    
        private static StateListDrawable createTransparentBackground() {
            StateListDrawable stateListDrawable = new StateListDrawable();
            ColorDrawable focusedDrawable = new ColorDrawable(0);
            ColorDrawable defaultDrawable = new ColorDrawable(0);
            stateListDrawable.addState(new int[]{R.attr.state_focused}, focusedDrawable);
            stateListDrawable.addState(new int[0], defaultDrawable);
            return stateListDrawable;
        }
    
        @Override // android.view.View
        protected void onSizeChanged(int w, int h, int oldw, int oldh) {
            super.onSizeChanged(w, h, oldw, oldh);
            ScreenInfo screenInfo = this.xServer.screenInfo;
            updateXform(w, h, screenInfo.width, screenInfo.height);
        }
    
        private void updateXform(int outerWidth, int outerHeight, int innerWidth, int innerHeight) {
            ViewTransformation viewTransformation = new ViewTransformation();
            viewTransformation.update(outerWidth, outerHeight, innerWidth, innerHeight);
            float invAspect = 1.0f / viewTransformation.aspect;
            if (!this.xServer.getRenderer().isFullscreen()) {
                XForm.makeTranslation(this.xform, -viewTransformation.viewOffsetX, -viewTransformation.viewOffsetY);
                XForm.scale(this.xform, invAspect, invAspect);
            } else {
                XForm.makeScale(this.xform, invAspect, invAspect);
            }
        }
    
        private class Finger {
            private int lastX;
            private int lastY;
            private final int startX;
            private final int startY;
            private final long touchTime;
            private int x;
            private int y;
    
            public Finger(float x, float y) {
                float[] transformedPoint = XForm.transformPoint(TouchpadView.this.xform, x, y);
                int i = (int) transformedPoint[0];
                this.lastX = i;
                this.startX = i;
                this.x = i;
                int i2 = (int) transformedPoint[1];
                this.lastY = i2;
                this.startY = i2;
                this.y = i2;
                this.touchTime = System.currentTimeMillis();
            }
    
            public void update(float x, float y) {
                this.lastX = this.x;
                this.lastY = this.y;
                float[] transformedPoint = XForm.transformPoint(TouchpadView.this.xform, x, y);
                this.x = (int) transformedPoint[0];
                this.y = (int) transformedPoint[1];
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public int deltaX() {
                float dx = (this.x - this.lastX) * TouchpadView.this.sensitivity;
                if (Math.abs(dx) > 6.0f) {
                    dx *= 1.5f;
                }
                return Mathf.roundPoint(dx);
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public int deltaY() {
                float dy = (this.y - this.lastY) * TouchpadView.this.sensitivity;
                if (Math.abs(dy) > 6.0f) {
                    dy *= 1.5f;
                }
                return Mathf.roundPoint(dy);
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public boolean isTap() {
                return System.currentTimeMillis() - this.touchTime < 200 && travelDistance() < 10.0f;
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public float travelDistance() {
                return (float) Math.hypot(this.x - this.startX, this.y - this.startY);
            }
        }
    
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        @Override // android.view.View
        public boolean onTouchEvent(MotionEvent event) {
            int actionIndex = event.getActionIndex();
            int pointerId = event.getPointerId(actionIndex);
            int actionMasked = event.getActionMasked();
            if (pointerId >= 4) {
                return true;
            }
            switch (actionMasked) {
                case 0:
                case 5:
                    if (event.isFromSource(8194)) {
                        return true;
                    }
                    this.scrollAccumY = 0.0f;
                    this.scrolling = false;
                    this.fingers[pointerId] = new Finger(event.getX(actionIndex), event.getY(actionIndex));
                    this.numFingers = (byte) (this.numFingers + 1);
                    return true;
                case 1:
                case 6:
                    Finger[] fingerArr = this.fingers;
                    if (fingerArr[pointerId] != null) {
                        fingerArr[pointerId].update(event.getX(actionIndex), event.getY(actionIndex));
                        handleFingerUp(this.fingers[pointerId]);
                        this.fingers[pointerId] = null;
                        this.numFingers = (byte) (this.numFingers - 1);
                    }
                    return true;
                case 2:
                    if (event.isFromSource(8194)) {
                        float[] transformedPoint = XForm.transformPoint(this.xform, event.getX(), event.getY());
                        if (isEnabled()) {
                            this.xServer.injectPointerMove((int) transformedPoint[0], (int) transformedPoint[1]);
                        }
                    } else {
                        for (byte i = 0; i < 4; i = (byte) (i + 1)) {
                            if (this.fingers[i] != null) {
                                int pointerIndex = event.findPointerIndex(i);
                                if (pointerIndex >= 0) {
                                    this.fingers[i].update(event.getX(pointerIndex), event.getY(pointerIndex));
                                    handleFingerMove(this.fingers[i]);
                                } else {
                                    handleFingerUp(this.fingers[i]);
                                    this.fingers[i] = null;
                                    this.numFingers = (byte) (this.numFingers - 1);
                                }
                            }
                        }
                    }
                    return true;
                case 3:
                    for (byte i2 = 0; i2 < 4; i2 = (byte) (i2 + 1)) {
                        this.fingers[i2] = null;
                    }
                    this.numFingers = (byte) 0;
                    return true;
                case 4:
                default:
                    return true;
            }
        }
    
        private void handleFingerUp(Finger finger1) {
            switch (this.numFingers) {
                case 1:
                    if (finger1.isTap()) {
                        if (this.moveCursorToTouchpoint) {
                            this.xServer.injectPointerMove(finger1.x, finger1.y);
                        }
                        pressPointerButtonLeft(finger1);
                        break;
                    }
                    break;
                case 2:
                    Finger finger2 = findSecondFinger(finger1);
                    if (finger2 != null && finger1.isTap()) {
                        pressPointerButtonRight(finger1);
                        break;
                    }
                    break;
                case 4:
                    if (this.fourFingersTapCallback != null) {
                        for (byte i = 0; i < 4; i = (byte) (i + 1)) {
                            Finger[] fingerArr = this.fingers;
                            if (fingerArr[i] != null && !fingerArr[i].isTap()) {
                                return;
                            }
                        }
                        this.fourFingersTapCallback.run();
                        break;
                    }
                    break;
            }
            releasePointerButtonLeft(finger1);
            releasePointerButtonRight(finger1);
        }
    
        private void handleFingerMove(Finger finger1) {
            byte b;
            if (isEnabled()) {
                boolean skipPointerMove = false;
                Finger finger2 = this.numFingers == 2 ? findSecondFinger(finger1) : null;
                if (finger2 != null) {
                    ScreenInfo screenInfo = this.xServer.screenInfo;
                    float resolutionScale = 1000.0f / Math.min((int) screenInfo.width, (int) screenInfo.height);
                    float currDistance = ((float) Math.hypot(finger1.x - finger2.x, finger1.y - finger2.y)) * resolutionScale;
                    if (currDistance < 350.0f) {
                        float f = this.scrollAccumY + (((finger1.y + finger2.y) * 0.5f) - ((finger1.lastY + finger2.lastY) * 0.5f));
                        this.scrollAccumY = f;
                        if (f < -100.0f) {
                            XServer xServer = this.xServer;
                            Pointer.Button button = Pointer.Button.BUTTON_SCROLL_DOWN;
                            xServer.injectPointerButtonPress(button);
                            this.xServer.injectPointerButtonRelease(button);
                            this.scrollAccumY = 0.0f;
                        } else if (f > 100.0f) {
                            XServer xServer2 = this.xServer;
                            Pointer.Button button2 = Pointer.Button.BUTTON_SCROLL_UP;
                            xServer2.injectPointerButtonPress(button2);
                            this.xServer.injectPointerButtonRelease(button2);
                            this.scrollAccumY = 0.0f;
                        }
                        this.scrolling = true;
                    } else if (currDistance >= 350.0f && !this.xServer.pointer.isButtonPressed(Pointer.Button.BUTTON_LEFT) && finger2.travelDistance() < 10.0f) {
                        pressPointerButtonLeft(finger1);
                        skipPointerMove = true;
                    }
                }
                if (!this.scrolling && (b = this.numFingers) <= 2 && !skipPointerMove) {
                    if (!this.moveCursorToTouchpoint || b != 1) {
                        int dx = finger1.deltaX();
                        int dy = finger1.deltaY();
                        WinHandler winHandler = this.xServer.getWinHandler();
                        if (this.xServer.isRelativeMouseMovement()) {
                            winHandler.mouseEvent(1, dx, dy, 0);
                            return;
                        } else {
                            this.xServer.injectPointerMoveDelta(dx, dy);
                            return;
                        }
                    }
                    this.xServer.injectPointerMove(finger1.x, finger1.y);
                }
            }
        }
    
        private Finger findSecondFinger(Finger finger) {
            for (byte i = 0; i < 4; i = (byte) (i + 1)) {
                Finger[] fingerArr = this.fingers;
                if (fingerArr[i] != null && fingerArr[i] != finger) {
                    return fingerArr[i];
                }
            }
            return null;
        }
    
        private void pressPointerButtonLeft(Finger finger) {
            if (isEnabled() && this.pointerButtonLeftEnabled) {
                Pointer pointer = this.xServer.pointer;
                Pointer.Button button = Pointer.Button.BUTTON_LEFT;
                if (!pointer.isButtonPressed(button)) {
                    this.xServer.injectPointerButtonPress(button);
                    this.fingerPointerButtonLeft = finger;
                }
            }
        }
    
        private void pressPointerButtonRight(Finger finger) {
            if (isEnabled() && this.pointerButtonRightEnabled) {
                Pointer pointer = this.xServer.pointer;
                Pointer.Button button = Pointer.Button.BUTTON_RIGHT;
                if (!pointer.isButtonPressed(button)) {
                    this.xServer.injectPointerButtonPress(button);
                    this.fingerPointerButtonRight = finger;
                }
            }
        }
    
        private void releasePointerButtonLeft(Finger finger) {
            if (isEnabled() && this.pointerButtonLeftEnabled && finger == this.fingerPointerButtonLeft && this.xServer.pointer.isButtonPressed(Pointer.Button.BUTTON_LEFT)) {
                postDelayed(new Runnable() { // from class: com.winlator.widget.TouchpadView$$ExternalSyntheticLambda2
                    @Override // java.lang.Runnable
                    public final void run() {
                        TouchpadView.this.lambda$releasePointerButtonLeft$1();
                    }
                }, 30L);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$releasePointerButtonLeft$1() {
            this.xServer.injectPointerButtonRelease(Pointer.Button.BUTTON_LEFT);
            this.fingerPointerButtonLeft = null;
        }
    
        private void releasePointerButtonRight(Finger finger) {
            if (isEnabled() && this.pointerButtonRightEnabled && finger == this.fingerPointerButtonRight && this.xServer.pointer.isButtonPressed(Pointer.Button.BUTTON_RIGHT)) {
                postDelayed(new Runnable() { // from class: com.winlator.widget.TouchpadView$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        TouchpadView.this.lambda$releasePointerButtonRight$2();
                    }
                }, 30L);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$releasePointerButtonRight$2() {
            this.xServer.injectPointerButtonRelease(Pointer.Button.BUTTON_RIGHT);
            this.fingerPointerButtonRight = null;
        }
    
        public void setSensitivity(float sensitivity) {
            this.sensitivity = sensitivity;
        }
    
        public void setPointerButtonLeftEnabled(boolean pointerButtonLeftEnabled) {
            this.pointerButtonLeftEnabled = pointerButtonLeftEnabled;
        }
    
        public void setPointerButtonRightEnabled(boolean pointerButtonRightEnabled) {
            this.pointerButtonRightEnabled = pointerButtonRightEnabled;
        }
    
        public void setFourFingersTapCallback(Runnable fourFingersTapCallback) {
            this.fourFingersTapCallback = fourFingersTapCallback;
        }
    
        public void setMoveCursorToTouchpoint(boolean moveCursorToTouchpoint) {
            this.moveCursorToTouchpoint = moveCursorToTouchpoint;
        }
    
        public boolean onExternalMouseEvent(MotionEvent event) {
            if (!isEnabled() || !event.isFromSource(8194)) {
                return false;
            }
            int actionButton = event.getActionButton();
            switch (event.getAction()) {
                case 7:
                    float[] transformedPoint = XForm.transformPoint(this.xform, event.getX(), event.getY());
                    this.xServer.injectPointerMove((int) transformedPoint[0], (int) transformedPoint[1]);
                    return true;
                case 8:
                    float scrollY = event.getAxisValue(9);
                    if (scrollY <= -1.0f) {
                        XServer xServer = this.xServer;
                        Pointer.Button button = Pointer.Button.BUTTON_SCROLL_DOWN;
                        xServer.injectPointerButtonPress(button);
                        this.xServer.injectPointerButtonRelease(button);
                    } else if (scrollY >= 1.0f) {
                        XServer xServer2 = this.xServer;
                        Pointer.Button button2 = Pointer.Button.BUTTON_SCROLL_UP;
                        xServer2.injectPointerButtonPress(button2);
                        this.xServer.injectPointerButtonRelease(button2);
                    }
                    return true;
                case 9:
                case 10:
                default:
                    return false;
                case 11:
                    if (actionButton == 1) {
                        this.xServer.injectPointerButtonPress(Pointer.Button.BUTTON_LEFT);
                    } else if (actionButton == 2) {
                        this.xServer.injectPointerButtonPress(Pointer.Button.BUTTON_RIGHT);
                    }
                    return true;
                case 12:
                    if (actionButton == 1) {
                        this.xServer.injectPointerButtonRelease(Pointer.Button.BUTTON_LEFT);
                    } else if (actionButton == 2) {
                        this.xServer.injectPointerButtonRelease(Pointer.Button.BUTTON_RIGHT);
                    }
                    return true;
            }
        }
    
        public float[] computeDeltaPoint(float lastX, float lastY, float x, float y) {
            float[] result = {0.0f, 0.0f};
            XForm.transformPoint(this.xform, lastX, lastY, result);
            float lastX2 = result[0];
            float lastY2 = result[1];
            XForm.transformPoint(this.xform, x, y, result);
            float x2 = result[0];
            float y2 = result[1];
            result[0] = x2 - lastX2;
            result[1] = y2 - lastY2;
            return result;
        }
    
        @Override // android.view.View.OnCapturedPointerListener
        public boolean onCapturedPointer(View view, MotionEvent event) {
            if (event.getAction() == 2) {
                float dx = event.getX() * this.sensitivity;
                if (Math.abs(dx) > 6.0f) {
                    dx *= 1.5f;
                }
                float dy = event.getY() * this.sensitivity;
                if (Math.abs(dy) > 6.0f) {
                    dy *= 1.5f;
                }
                this.xServer.injectPointerMoveDelta(Mathf.roundPoint(dx), Mathf.roundPoint(dy));
                return true;
            }
            event.setSource(event.getSource() | 8194);
            return onExternalMouseEvent(event);
        }
    }
  + app/src/main/java/com/winlator/widget/XServerView.java
    package com.winlator.widget;
    
    import android.annotation.SuppressLint;
    import android.content.Context;
    import android.opengl.GLSurfaceView;
    import android.widget.FrameLayout;
    import com.winlator.renderer.GLRenderer;
    import com.winlator.xserver.XServer;
    
    @SuppressLint({"ViewConstructor"})
    /* loaded from: classes.dex */
    public class XServerView extends GLSurfaceView {
        private final GLRenderer renderer;
    
        public XServerView(Context context, XServer xServer) {
            super(context);
            setLayoutParams(new FrameLayout.LayoutParams(-1, -1));
            setEGLContextClientVersion(3);
            setEGLConfigChooser(8, 8, 8, 8, 0, 0);
            setPreserveEGLContextOnPause(true);
            GLRenderer gLRenderer = new GLRenderer(this, xServer);
            this.renderer = gLRenderer;
            setRenderer(gLRenderer);
            setRenderMode(0);
        }
    
        public GLRenderer getRenderer() {
            return this.renderer;
        }
    }
  + app/src/main/java/com/winlator/win32/MSBitmap.java
    package com.winlator.win32;
    
    import android.graphics.Bitmap;
    import android.graphics.Color;
    import java.io.File;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.nio.ByteBuffer;
    import java.nio.ByteOrder;
    
    /* loaded from: classes.dex */
    public abstract class MSBitmap {
        public static Bitmap decodeBuffer(int width, int height, int bitCount, ByteBuffer data) {
            int height2;
            ByteBuffer byteBuffer = data;
            if (width == 0 || height == 0) {
                return null;
            }
            boolean invertY = true;
            if (height >= 0) {
                height2 = height;
            } else {
                height2 = height * (-1);
                invertY = false;
            }
            ByteBuffer pixels = ByteBuffer.allocate(width * height2 * 4);
            if (bitCount == 32) {
                int i = data.position();
                for (int y = height2 - 1; y >= 0; y--) {
                    int line = invertY ? y : (height2 - 1) - y;
                    int x = 0;
                    while (x < width) {
                        int i2 = i + 1;
                        byte b = byteBuffer.get(i);
                        int i3 = i2 + 1;
                        byte g = byteBuffer.get(i2);
                        int i4 = i3 + 1;
                        byte r = byteBuffer.get(i3);
                        int i5 = i4 + 1;
                        byte a = byteBuffer.get(i4);
                        int j = (line * width * 4) + (x * 4);
                        pixels.put(j + 2, b);
                        pixels.put(j + 1, g);
                        pixels.put(j + 0, r);
                        pixels.put(j + 3, a);
                        x++;
                        i = i5;
                    }
                    i += width % 4;
                }
            } else {
                byte r2 = -1;
                if (bitCount == 24) {
                    int i6 = data.position();
                    for (int y2 = height2 - 1; y2 >= 0; y2--) {
                        int line2 = invertY ? y2 : (height2 - 1) - y2;
                        int x2 = 0;
                        while (x2 < width) {
                            int i7 = i6 + 1;
                            byte b2 = byteBuffer.get(i6);
                            int i8 = i7 + 1;
                            byte g2 = byteBuffer.get(i7);
                            int i9 = i8 + 1;
                            byte r3 = byteBuffer.get(i8);
                            int j2 = (line2 * width * 4) + (x2 * 4);
                            pixels.put(j2 + 2, b2);
                            pixels.put(j2 + 1, g2);
                            pixels.put(j2 + 0, r3);
                            pixels.put(j2 + 3, (byte) -1);
                            x2++;
                            i6 = i9;
                        }
                        i6 += width % 4;
                    }
                } else if (bitCount <= 8) {
                    int colorTableOffset = data.position();
                    int colorTableSize = (int) (Math.pow(2.0d, bitCount) * 4.0d);
                    int y3 = height2 - 1;
                    int colorIndex = data.position() + colorTableSize;
                    while (y3 >= 0) {
                        int line3 = invertY ? y3 : (height2 - 1) - y3;
                        int x3 = 0;
                        while (x3 < width) {
                            int i10 = colorIndex + 1;
                            int colorIndex2 = Byte.toUnsignedInt(byteBuffer.get(colorIndex)) * 4;
                            byte b3 = byteBuffer.get(colorTableOffset + colorIndex2 + 0);
                            byte g3 = byteBuffer.get(colorTableOffset + colorIndex2 + 1);
                            byte r4 = byteBuffer.get(colorTableOffset + colorIndex2 + 2);
                            int j3 = (line3 * width * 4) + (x3 * 4);
                            pixels.put(j3 + 2, b3);
                            pixels.put(j3 + 1, g3);
                            pixels.put(j3 + 0, r4);
                            pixels.put(j3 + 3, (byte) -1);
                            x3++;
                            r2 = -1;
                            colorIndex = i10;
                            byteBuffer = data;
                        }
                        colorIndex += width % 4;
                        y3--;
                        byteBuffer = data;
                    }
                }
            }
            Bitmap bitmap = Bitmap.createBitmap(width, height2, Bitmap.Config.ARGB_8888);
            bitmap.copyPixelsFromBuffer(pixels);
            return bitmap;
        }
    
        public static boolean create(Bitmap bitmap, File outputFile) {
            int width = bitmap.getWidth();
            int height = bitmap.getHeight();
            int[] pixels = new int[width * height];
            bitmap.getPixels(pixels, 0, width, 0, 0, width, height);
            int extraBytes = width % 4;
            int imageSize = height * ((width * 3) + extraBytes);
            int infoHeaderSize = 40;
            ByteBuffer buffer = ByteBuffer.allocate(54 + imageSize).order(ByteOrder.LITTLE_ENDIAN);
            buffer.putShort((short) 19778);
            buffer.putInt(54 + imageSize);
            buffer.putInt(0);
            buffer.putInt(54);
            buffer.putInt(40);
            buffer.putInt(width);
            buffer.putInt(height);
            buffer.putShort((short) 1);
            buffer.putShort((short) 24);
            buffer.putInt(0);
            buffer.putInt(imageSize);
            buffer.putInt(0);
            buffer.putInt(0);
            buffer.putInt(0);
            buffer.putInt(0);
            int rowBytes = (width * 3) + extraBytes;
            int y = height - 1;
            int i = 0;
            while (y >= 0) {
                int x = 0;
                while (x < width) {
                    int j = 54 + (y * rowBytes) + (x * 3);
                    int i2 = i + 1;
                    int pixel = pixels[i];
                    int infoHeaderSize2 = infoHeaderSize;
                    int infoHeaderSize3 = Color.blue(pixel);
                    buffer.put(j + 0, (byte) infoHeaderSize3);
                    buffer.put(j + 1, (byte) Color.green(pixel));
                    buffer.put(j + 2, (byte) Color.red(pixel));
                    x++;
                    i = i2;
                    imageSize = imageSize;
                    infoHeaderSize = infoHeaderSize2;
                }
                int imageSize2 = imageSize;
                int infoHeaderSize4 = infoHeaderSize;
                if (extraBytes > 0) {
                    int fillOffset = (y * rowBytes) + 54 + (width * 3);
                    for (int j2 = fillOffset; j2 < fillOffset + extraBytes; j2++) {
                        buffer.put(j2, (byte) -1);
                    }
                }
                y--;
                imageSize = imageSize2;
                infoHeaderSize = infoHeaderSize4;
            }
            try {
                FileOutputStream fos = new FileOutputStream(outputFile);
                try {
                    fos.write(buffer.array());
                    try {
                        fos.close();
                        return true;
                    } catch (IOException e) {
                        return false;
                    }
                } catch (Throwable th) {
                    try {
                        try {
                            fos.close();
                            throw th;
                        } catch (Throwable th2) {
                            th.addSuppressed(th2);
                            throw th;
                        }
                    } catch (IOException e2) {
                        return false;
                    }
                }
            } catch (IOException e3) {
                return false;
            }
        }
    }
  + app/src/main/java/com/winlator/win32/MSIcon.java
    package com.winlator.win32;
    
    import android.graphics.Bitmap;
    import android.graphics.BitmapFactory;
    import com.winlator.core.FileUtils;
    import com.winlator.core.ImageUtils;
    import com.winlator.win32.MSIcon;
    import java.io.File;
    import java.nio.ByteBuffer;
    import java.nio.ByteOrder;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.Comparator;
    
    /* loaded from: classes.dex */
    public class MSIcon {
    
        /* JADX INFO: Access modifiers changed from: private */
        static class IconDirEntry {
            private short bitCount;
            private short colorPlanes;
            private int height;
            private int imageOffset;
            private int imageSize;
            private byte numberOfColors;
            private byte reserved;
            private int width;
    
            private IconDirEntry() {
            }
        }
    
        public static Bitmap decodeByteArray(byte[] bytes, int offset, int length) {
            ByteBuffer data = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);
            data.position(offset);
            if (ImageUtils.isPNGData(data)) {
                return BitmapFactory.decodeByteArray(bytes, offset, length);
            }
            int bitmapOffset = data.getInt();
            int bmpWidth = data.getInt();
            data.getInt();
            data.getShort();
            short bitCount = data.getShort();
            data.position(offset + bitmapOffset);
            return MSBitmap.decodeBuffer(bmpWidth, bmpWidth, bitCount, data);
        }
    
        public static Bitmap decodeFile(File icoFile) {
            byte[] bytes;
            if (!icoFile.isFile() || (bytes = FileUtils.read(icoFile)) == null) {
                return null;
            }
            ByteBuffer data = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN);
            short reserved = data.getShort();
            short imageType = data.getShort();
            short numberOfImages = data.getShort();
            if (reserved != 0 || imageType != 1 || numberOfImages <= 0 || numberOfImages >= 32) {
                return null;
            }
            ArrayList<IconDirEntry> entries = new ArrayList<>();
            for (byte i = 0; i < numberOfImages; i = (byte) (i + 1)) {
                IconDirEntry entry = new IconDirEntry();
                entry.width = Byte.toUnsignedInt(data.get());
                entry.height = Byte.toUnsignedInt(data.get());
                entry.numberOfColors = data.get();
                entry.reserved = data.get();
                entry.colorPlanes = data.getShort();
                entry.bitCount = data.getShort();
                entry.imageSize = data.getInt();
                entry.imageOffset = data.getInt();
                entries.add(entry);
            }
            Collections.sort(entries, new Comparator() { // from class: com.winlator.win32.MSIcon$$ExternalSyntheticLambda0
                @Override // java.util.Comparator
                public final int compare(Object obj, Object obj2) {
                    int lambda$decodeFile$0;
                    lambda$decodeFile$0 = MSIcon.lambda$decodeFile$0((MSIcon.IconDirEntry) obj, (MSIcon.IconDirEntry) obj2);
                    return lambda$decodeFile$0;
                }
            });
            IconDirEntry firstEntry = entries.get(0);
            return decodeByteArray(data.array(), firstEntry.imageOffset, firstEntry.imageSize);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ int lambda$decodeFile$0(IconDirEntry a, IconDirEntry b) {
            int value = Short.compare(b.bitCount, a.bitCount);
            return value != 0 ? value : Integer.compare(b.width, a.width);
        }
    }
  + app/src/main/java/com/winlator/win32/MSLink.java
    package com.winlator.win32;
    
    import com.winlator.core.ArrayUtils;
    import com.winlator.core.FileUtils;
    import com.winlator.core.StringUtils;
    import java.io.File;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.nio.ByteBuffer;
    import java.nio.ByteOrder;
    import java.nio.charset.StandardCharsets;
    import java.util.Arrays;
    
    /* loaded from: classes.dex */
    public abstract class MSLink {
    
        public static final class LinkInfo {
            public String arguments;
            public int fileSize;
            public int iconIndex;
            public String iconLocation;
            public boolean isDirectory;
            public int showCommand = 1;
            public String targetPath;
        }
    
        private static int charToHexDigit(char chr) {
            return chr >= 'A' ? (chr - 'A') + 10 : chr - '0';
        }
    
        private static byte twoCharsToByte(char chr1, char chr2) {
            return (byte) ((charToHexDigit(Character.toUpperCase(chr1)) * 16) + charToHexDigit(Character.toUpperCase(chr2)));
        }
    
        private static byte[] convertCLSIDtoDATA(String str) {
            return new byte[]{twoCharsToByte(str.charAt(6), str.charAt(7)), twoCharsToByte(str.charAt(4), str.charAt(5)), twoCharsToByte(str.charAt(2), str.charAt(3)), twoCharsToByte(str.charAt(0), str.charAt(1)), twoCharsToByte(str.charAt(11), str.charAt(12)), twoCharsToByte(str.charAt(9), str.charAt(10)), twoCharsToByte(str.charAt(16), str.charAt(17)), twoCharsToByte(str.charAt(14), str.charAt(15)), twoCharsToByte(str.charAt(19), str.charAt(20)), twoCharsToByte(str.charAt(21), str.charAt(22)), twoCharsToByte(str.charAt(24), str.charAt(25)), twoCharsToByte(str.charAt(26), str.charAt(27)), twoCharsToByte(str.charAt(28), str.charAt(29)), twoCharsToByte(str.charAt(30), str.charAt(31)), twoCharsToByte(str.charAt(32), str.charAt(33)), twoCharsToByte(str.charAt(34), str.charAt(35))};
        }
    
        private static byte[] stringToByteArray(String str) {
            byte[] bytes = new byte[str.length()];
            for (int i = 0; i < bytes.length; i++) {
                bytes[i] = (byte) str.charAt(i);
            }
            return bytes;
        }
    
        private static byte[] intToByteArray(int value) {
            return ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(value).array();
        }
    
        private static byte[] generateStringData(String str) {
            ByteBuffer buffer = ByteBuffer.allocate(str.length() + 2).order(ByteOrder.LITTLE_ENDIAN);
            buffer.putShort((short) str.length());
            for (int i = 0; i < str.length(); i++) {
                buffer.put((byte) str.charAt(i));
            }
            return buffer.array();
        }
    
        private static byte[] generateIDLIST(byte[] bytes) {
            ByteBuffer buffer = ByteBuffer.allocate(2).order(ByteOrder.LITTLE_ENDIAN).putShort((short) (bytes.length + 2));
            return ArrayUtils.concat(buffer.array(), bytes);
        }
    
        private static String readStringData(ByteBuffer data, boolean isUnicode) {
            short CountCharacters = data.getShort();
            if (CountCharacters == 0) {
                return null;
            }
            byte[] bytes = new byte[(isUnicode ? (short) 2 : (short) 1) * CountCharacters];
            data.get(bytes);
            String string = isUnicode ? new String(bytes, StandardCharsets.UTF_16LE) : new String(bytes);
            int indexOfNull = string.indexOf(0);
            return indexOfNull != -1 ? string.substring(0, indexOfNull) : string;
        }
    
        private static String readNullTerminatedString(ByteBuffer data) {
            byte[] bytes = new byte[256];
            int i = 0;
            while (true) {
                byte value = data.get();
                if (value == 0) {
                    return new String(Arrays.copyOf(bytes, i));
                }
                bytes[i] = value;
                i++;
            }
        }
    
        public static boolean createFile(LinkInfo linkInfo, File outputFile) {
            byte[] FileAttributes;
            byte[] prefixOfTarget;
            byte[] ShowCommand;
            byte[] prefixRoot;
            int i;
            byte b;
            int i2;
            byte[] targetRoot;
            byte[] targetLeaf;
            byte[] targetRoot2;
            int i3;
            Throwable th;
            byte[] targetLeaf2;
            byte[] HeaderSize = {76, 0, 0, 0};
            byte[] LinkCLSID = convertCLSIDtoDATA("00021401-0000-0000-c000-000000000046");
            int linkFlags = 257;
            String str = linkInfo.arguments;
            if (str != null && !str.isEmpty()) {
                linkFlags = 257 | 32;
            }
            String str2 = linkInfo.iconLocation;
            if (str2 != null && !str2.isEmpty()) {
                linkFlags |= 64;
            }
            byte[] LinkFlags = intToByteArray(linkFlags);
            linkInfo.targetPath = linkInfo.targetPath.replaceAll("/+", "\\\\");
            if (linkInfo.isDirectory) {
                FileAttributes = new byte[]{16, 0, 0, 0};
                prefixOfTarget = new byte[]{49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            } else {
                FileAttributes = new byte[]{32, 0, 0, 0};
                prefixOfTarget = new byte[]{50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            }
            byte[] CreationTime = {0, 0, 0, 0, 0, 0, 0, 0};
            byte[] FileSize = intToByteArray(linkInfo.fileSize);
            byte[] IconIndex = intToByteArray(linkInfo.iconIndex);
            byte[] ShowCommand2 = intToByteArray(linkInfo.showCommand);
            byte[] Hotkey = {0, 0};
            byte[] Reserved1 = {0, 0};
            byte[] Reserved2 = {0, 0, 0, 0};
            byte[] Reserved3 = {0, 0, 0, 0};
            byte[] CLSIDComputer = convertCLSIDtoDATA("20d04fe0-3aea-1069-a2d8-08002b30309d");
            byte[] CLSIDNetwork = convertCLSIDtoDATA("208d2c60-3aea-1069-a2d7-08002b30309d");
            if (linkInfo.targetPath.startsWith("\\")) {
                byte[] targetRoot3 = stringToByteArray(linkInfo.targetPath);
                prefixRoot = new byte[]{-61, 1, -127};
                if (linkInfo.targetPath.endsWith("\\")) {
                    targetLeaf2 = null;
                } else {
                    String str3 = linkInfo.targetPath;
                    targetLeaf2 = stringToByteArray(str3.substring(str3.lastIndexOf("\\") + 1));
                }
                targetLeaf = targetLeaf2;
                targetRoot = targetRoot3;
                byte[] targetRoot4 = {31, 88};
                ShowCommand = ShowCommand2;
                b = 0;
                i2 = 1;
                i = 2;
                targetRoot2 = ArrayUtils.concat(targetRoot4, CLSIDNetwork);
            } else {
                ShowCommand = ShowCommand2;
                byte[] prefixRoot2 = {47};
                int index = linkInfo.targetPath.indexOf("\\");
                prefixRoot = prefixRoot2;
                byte[] targetRoot5 = stringToByteArray(linkInfo.targetPath.substring(0, index + 1));
                byte[] targetLeaf3 = stringToByteArray(linkInfo.targetPath.substring(index + 1));
                i = 2;
                b = 0;
                i2 = 1;
                targetRoot = targetRoot5;
                targetLeaf = targetLeaf3;
                targetRoot2 = ArrayUtils.concat(new byte[]{31, 80}, CLSIDComputer);
            }
            byte[][] bArr = new byte[i][];
            bArr[b] = targetRoot;
            bArr[i2] = new byte[21];
            byte[] targetRoot6 = ArrayUtils.concat(bArr);
            byte[] endOfString = new byte[i2];
            endOfString[b] = b;
            byte[][] bArr2 = new byte[2][];
            bArr2[b] = generateIDLIST(targetRoot2);
            byte[][] bArr3 = new byte[3][];
            bArr3[b] = prefixRoot;
            bArr3[1] = targetRoot6;
            bArr3[2] = endOfString;
            bArr2[1] = generateIDLIST(ArrayUtils.concat(bArr3));
            byte[] IDListItems = ArrayUtils.concat(bArr2);
            if (targetLeaf != null) {
                byte[][] bArr4 = new byte[2][];
                bArr4[b] = IDListItems;
                byte[][] bArr5 = new byte[3][];
                bArr5[b] = prefixOfTarget;
                bArr5[1] = targetLeaf;
                i3 = 2;
                bArr5[2] = endOfString;
                bArr4[1] = generateIDLIST(ArrayUtils.concat(bArr5));
                IDListItems = ArrayUtils.concat(bArr4);
            } else {
                i3 = 2;
            }
            byte[] IDList = generateIDLIST(IDListItems);
            byte[] TerminalID = new byte[i3];
            // fill-array-data instruction
            TerminalID[0] = 0;
            TerminalID[1] = 0;
            byte[] StringData = new byte[0];
            if ((linkFlags & 32) != 0) {
                StringData = ArrayUtils.concat(StringData, generateStringData(linkInfo.arguments));
            }
            if ((linkFlags & 64) != 0) {
                StringData = ArrayUtils.concat(StringData, generateStringData(linkInfo.iconLocation));
            }
            byte[] StringData2 = StringData;
            try {
                FileOutputStream os = new FileOutputStream(outputFile);
                try {
                    os.write(HeaderSize);
                    os.write(LinkCLSID);
                    os.write(LinkFlags);
                    os.write(FileAttributes);
                    os.write(CreationTime);
                    os.write(CreationTime);
                    os.write(CreationTime);
                    os.write(FileSize);
                    os.write(IconIndex);
                    try {
                        os.write(ShowCommand);
                        try {
                            os.write(Hotkey);
                            try {
                                os.write(Reserved1);
                                try {
                                    os.write(Reserved2);
                                    try {
                                        os.write(Reserved3);
                                        os.write(IDList);
                                        try {
                                            os.write(TerminalID);
                                            if (StringData2.length > 0) {
                                                os.write(StringData2);
                                            }
                                            try {
                                                os.close();
                                                return true;
                                            } catch (IOException e) {
                                                return false;
                                            }
                                        } catch (Throwable th2) {
                                            th = th2;
                                            try {
                                                try {
                                                    os.close();
                                                    throw th;
                                                } catch (Throwable th3) {
                                                    th.addSuppressed(th3);
                                                    throw th;
                                                }
                                            } catch (IOException e2) {
                                                return false;
                                            }
                                        }
                                    } catch (Throwable th4) {
                                        th = th4;
                                    }
                                } catch (Throwable th5) {
                                    th = th5;
                                }
                            } catch (Throwable th6) {
                                th = th6;
                            }
                        } catch (Throwable th7) {
                            th = th7;
                        }
                    } catch (Throwable th8) {
                        th = th8;
                    }
                } catch (Throwable th9) {
                    th = th9;
                }
            } catch (IOException e3) {
                return false;
            }
        }
    
        public static LinkInfo extractLinkInfo(File linkFile) {
            boolean z;
            int i;
            byte[] bytes;
            String str;
            byte[] bytes2 = FileUtils.read(linkFile);
            if (bytes2 == null) {
                return null;
            }
            ByteBuffer data = ByteBuffer.wrap(bytes2).order(ByteOrder.LITTLE_ENDIAN);
            if (data.get() == 76 && data.get() == 0 && data.get() == 0) {
                if (data.get() == 0) {
                    int LinkFlags = data.getInt(20);
                    int IconIndex = data.getInt(56);
                    data.position(76);
                    String driveLetter = "";
                    String path = "";
                    boolean isDirectory = false;
                    if ((LinkFlags & 1) != 0) {
                        short IDListSize = data.getShort();
                        byte[] prefixOfDirectory = {49, 0, 0, 0, 0, 0};
                        byte[] prefixOfArchive = {50, 0, 0, 0, 0, 0};
                        while (IDListSize > 2) {
                            short ItemIDSize = data.getShort();
                            byte[] ItemData = new byte[ItemIDSize - 2];
                            data.get(ItemData);
                            if (ArrayUtils.startsWith(prefixOfDirectory, ItemData)) {
                                String filename = StringUtils.fromANSIString(Arrays.copyOfRange(ItemData, 12, ItemData.length));
                                StringBuilder sb = new StringBuilder();
                                sb.append(path);
                                if (path.isEmpty()) {
                                    bytes = bytes2;
                                    str = "";
                                } else {
                                    bytes = bytes2;
                                    str = "\\";
                                }
                                sb.append(str);
                                sb.append(filename);
                                path = sb.toString();
                                isDirectory = true;
                            } else {
                                bytes = bytes2;
                                if (ArrayUtils.startsWith(prefixOfArchive, ItemData)) {
                                    String filename2 = StringUtils.fromANSIString(Arrays.copyOfRange(ItemData, 12, ItemData.length));
                                    StringBuilder sb2 = new StringBuilder();
                                    sb2.append(path);
                                    sb2.append(!path.isEmpty() ? "\\" : "");
                                    sb2.append(filename2);
                                    path = sb2.toString();
                                    isDirectory = false;
                                } else if (ItemData[0] == 47 || ItemData[0] == 35) {
                                    driveLetter = StringUtils.fromANSIString(Arrays.copyOfRange(ItemData, 1, ItemData.length));
                                }
                            }
                            IDListSize = (short) (IDListSize - ItemIDSize);
                            bytes2 = bytes;
                        }
                        data.getShort();
                    }
                    if ((LinkFlags & 2) != 0) {
                        int oldPosition = data.position();
                        int LinkInfoSize = data.getInt();
                        int LinkInfoHeaderSize = data.getInt();
                        int LinkInfoFlags = data.getInt();
                        if (LinkInfoHeaderSize < 36 && (LinkInfoFlags & 2) == 0) {
                            data.getInt();
                            data.getInt();
                            data.getInt();
                            data.getInt();
                            if ((LinkInfoFlags & 1) != 0) {
                                data.position(data.position() + 17);
                                String LocalBasePath = readNullTerminatedString(data);
                                linkInfo = 0 == 0 ? new LinkInfo() : null;
                                linkInfo.targetPath = LocalBasePath;
                            }
                            data.get();
                        } else {
                            data.position(oldPosition + LinkInfoSize);
                        }
                    }
                    if (!driveLetter.matches("[A-Za-z]:\\\\?")) {
                        z = true;
                    } else {
                        if (!driveLetter.endsWith("\\")) {
                            driveLetter = driveLetter + "\\";
                        }
                        if (linkInfo == null) {
                            linkInfo = new LinkInfo();
                        }
                        linkInfo.targetPath = driveLetter + path;
                        linkInfo.isDirectory = isDirectory;
                        if (IconIndex != 0) {
                            z = true;
                            i = Math.abs(IconIndex) + 1;
                        } else {
                            z = true;
                            i = -1;
                        }
                        linkInfo.iconIndex = i;
                    }
                    boolean isUnicode = (LinkFlags & 128) != 0 ? z : false;
                    if ((LinkFlags & 4) != 0) {
                        readStringData(data, isUnicode);
                    }
                    if ((LinkFlags & 8) != 0) {
                        readStringData(data, isUnicode);
                    }
                    if ((LinkFlags & 16) != 0) {
                        readStringData(data, isUnicode);
                    }
                    if ((LinkFlags & 32) != 0) {
                        String arguments = readStringData(data, isUnicode);
                        if (linkInfo != null) {
                            linkInfo.arguments = arguments;
                        }
                    }
                    if ((LinkFlags & 64) != 0) {
                        String iconLocation = readStringData(data, isUnicode);
                        if (linkInfo != null) {
                            if (iconLocation != null && iconLocation.equals("shell32.dll")) {
                                iconLocation = "C:/windows/system32/shell32.dll";
                            }
                            linkInfo.iconLocation = iconLocation;
                        }
                    }
                    return linkInfo;
                }
            }
            return null;
        }
    }
  + app/src/main/java/com/winlator/win32/MSLogFont.java
    package com.winlator.win32;
    
    import java.nio.ByteBuffer;
    import java.nio.ByteOrder;
    
    /* loaded from: classes.dex */
    public class MSLogFont {
        private int height = -11;
        private int width = 0;
        private int escapement = 0;
        private int orientation = 0;
        private int weight = 400;
        private byte italic = 0;
        private byte underline = 0;
        private byte strikeOut = 0;
        private byte charSet = 0;
        private byte outPrecision = 0;
        private byte clipPrecision = 0;
        private byte quality = 0;
        private byte pitchAndFamily = 34;
        private String faceName = "Tahoma";
    
        public MSLogFont setWeight(int weight) {
            this.weight = weight;
            return this;
        }
    
        public String getFaceName() {
            return this.faceName;
        }
    
        public MSLogFont setFaceName(String faceName) {
            this.faceName = faceName;
            return this;
        }
    
        public byte[] toByteArray() {
            ByteBuffer data = ByteBuffer.allocate(92).order(ByteOrder.LITTLE_ENDIAN);
            data.putInt(this.height);
            data.putInt(this.width);
            data.putInt(this.escapement);
            data.putInt(this.orientation);
            data.putInt(this.weight);
            data.put(this.italic);
            data.put(this.underline);
            data.put(this.strikeOut);
            data.put(this.charSet);
            data.put(this.outPrecision);
            data.put(this.clipPrecision);
            data.put(this.quality);
            data.put(this.pitchAndFamily);
            for (int i = 0; i < this.faceName.length(); i++) {
                data.putChar(this.faceName.charAt(i));
            }
            return data.array();
        }
    
        public MSLogFont fromByteArray(byte[] byteArray) {
            char chr;
            if (byteArray == null || byteArray.length < 92) {
                return this;
            }
            ByteBuffer data = ByteBuffer.wrap(byteArray).order(ByteOrder.LITTLE_ENDIAN);
            this.height = data.getInt();
            this.width = data.getInt();
            this.escapement = data.getInt();
            this.orientation = data.getInt();
            this.weight = data.getInt();
            this.italic = data.get();
            this.underline = data.get();
            this.strikeOut = data.get();
            this.charSet = data.get();
            this.outPrecision = data.get();
            this.clipPrecision = data.get();
            this.quality = data.get();
            this.pitchAndFamily = data.get();
            StringBuilder sb = new StringBuilder();
            while (data.remaining() > 0 && (chr = data.getChar()) != 0) {
                sb.append(chr);
            }
            this.faceName = sb.toString();
            return this;
        }
    }
  + app/src/main/java/com/winlator/win32/PEParser.java
    package com.winlator.win32;
    
    import android.graphics.Bitmap;
    import com.winlator.core.StreamUtils;
    import com.winlator.core.StringUtils;
    import java.io.BufferedInputStream;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.io.InputStream;
    import java.nio.ByteBuffer;
    import java.nio.ByteOrder;
    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.Stack;
    
    /* loaded from: classes.dex */
    public class PEParser {
        private final File peFile;
        private int resourcesRVA = 0;
        private int resourcesOffset = 0;
    
        private interface ImageResourceEntry {
        }
    
        private static class ImageResourceDirectoryEntry implements ImageResourceEntry {
            private final boolean dataIsDirectory;
            private ImageResourceDirectory directory;
            private final int name;
            private final boolean nameIsString;
            private final int offsetToData;
    
            private ImageResourceDirectoryEntry(ByteBuffer data) {
                int field1 = data.getInt();
                int field2 = data.getInt();
                this.name = field1 & Integer.MAX_VALUE;
                this.nameIsString = ((field1 >> 31) & 1) != 0;
                this.offsetToData = Integer.MAX_VALUE & field2;
                this.dataIsDirectory = ((field2 >> 31) & 1) != 0;
            }
        }
    
        private static class ImageResourceDataEntry implements ImageResourceEntry {
            private final int codePage;
            private final int offsetToData;
            private final int reserved;
            private final int size;
    
            private ImageResourceDataEntry(ByteBuffer data) {
                this.offsetToData = data.getInt();
                this.size = data.getInt();
                this.codePage = data.getInt();
                this.reserved = data.getInt();
            }
        }
    
        private static class ImageResourceDirectory {
            private final int characteristics;
            private final ArrayList<ImageResourceEntry> entries;
            private final short majorVersion;
            private final short minorVersion;
            private final short numberOfIdEntries;
            private final short numberOfNamedEntries;
            private final int timeDateStamp;
    
            private ImageResourceDirectory(ByteBuffer data, int level) {
                this.entries = new ArrayList<>();
                this.characteristics = data.getInt();
                this.timeDateStamp = data.getInt();
                this.majorVersion = data.getShort();
                this.minorVersion = data.getShort();
                short s = data.getShort();
                this.numberOfNamedEntries = s;
                short s2 = data.getShort();
                this.numberOfIdEntries = s2;
                int numberOfEntries = s + s2;
                for (int i = 0; i < numberOfEntries; i++) {
                    ImageResourceDirectoryEntry directoryEntry = new ImageResourceDirectoryEntry(data);
                    if ((directoryEntry.name == 3 && directoryEntry.dataIsDirectory) || (level > 0 && directoryEntry.dataIsDirectory)) {
                        int oldPosition = data.position();
                        data.position(directoryEntry.offsetToData);
                        directoryEntry.directory = new ImageResourceDirectory(data, level + 1);
                        data.position(oldPosition);
                        this.entries.add(0, directoryEntry);
                    } else if (level > 0) {
                        int oldPosition2 = data.position();
                        data.position(directoryEntry.offsetToData);
                        ImageResourceDataEntry dataEntry = new ImageResourceDataEntry(data);
                        data.position(oldPosition2);
                        this.entries.add(0, dataEntry);
                    }
                }
            }
        }
    
        private PEParser(File peFile) {
            this.peFile = peFile;
        }
    
        private ByteBuffer readIconData(int iconOffset, int iconSize) {
            try {
                InputStream inStream = new BufferedInputStream(new FileInputStream(this.peFile), 65536);
                try {
                    byte[] iconBytes = new byte[iconSize];
                    StreamUtils.skip(inStream, iconOffset);
                    int bytesRead = inStream.read(iconBytes);
                    ByteBuffer order = bytesRead != -1 ? ByteBuffer.wrap(iconBytes).order(ByteOrder.LITTLE_ENDIAN) : null;
                    inStream.close();
                    return order;
                } finally {
                }
            } catch (IOException e) {
                return null;
            }
        }
    
        private ImageResourceDirectory readImageResourceDirectory() {
            try {
                InputStream inStream = new BufferedInputStream(new FileInputStream(this.peFile), 65536);
                try {
                    ByteBuffer allocate = ByteBuffer.allocate(64);
                    ByteOrder byteOrder = ByteOrder.LITTLE_ENDIAN;
                    ByteBuffer dosHeader = allocate.order(byteOrder);
                    int filePosition = 0 + inStream.read(dosHeader.array());
                    short magicNumber = dosHeader.getShort();
                    if (magicNumber == 23117) {
                        dosHeader.position(60);
                        int fileHeaderOffset = dosHeader.getInt() + 4;
                        int filePosition2 = filePosition + StreamUtils.skip(inStream, fileHeaderOffset - filePosition);
                        ByteBuffer fileHeader = ByteBuffer.allocate(20).order(byteOrder);
                        int filePosition3 = filePosition2 + inStream.read(fileHeader.array());
                        Short.toUnsignedInt(fileHeader.getShort());
                        short numberOfSections = fileHeader.getShort();
                        fileHeader.position(fileHeader.position() + 12);
                        short sizeofOptionalHeader = fileHeader.getShort();
                        int filePosition4 = filePosition3 + StreamUtils.skip(inStream, sizeofOptionalHeader);
                        int i = 0;
                        this.resourcesRVA = 0;
                        this.resourcesOffset = 0;
                        int resourcesSize = 0;
                        ByteBuffer sectionHeader = ByteBuffer.allocate(40).order(byteOrder);
                        byte[] nameBytes = new byte[8];
                        byte i2 = 0;
                        while (true) {
                            if (i2 >= numberOfSections) {
                                break;
                            }
                            sectionHeader.position(i);
                            filePosition4 += inStream.read(sectionHeader.array());
                            sectionHeader.get(nameBytes);
                            String name = StringUtils.fromANSIString(nameBytes);
                            if (!name.equals(".rsrc")) {
                                i2 = (byte) (i2 + 1);
                                i = 0;
                            } else {
                                sectionHeader.getInt();
                                this.resourcesRVA = sectionHeader.getInt();
                                resourcesSize = sectionHeader.getInt();
                                this.resourcesOffset = sectionHeader.getInt();
                                break;
                            }
                        }
                        int i3 = this.resourcesOffset;
                        if (i3 > 0) {
                            int skip = filePosition4 + StreamUtils.skip(inStream, i3 - filePosition4);
                            ByteBuffer resourcesBuffer = ByteBuffer.allocate(resourcesSize).order(ByteOrder.LITTLE_ENDIAN);
                            inStream.read(resourcesBuffer.array(), 0, resourcesBuffer.limit());
                            ImageResourceDirectory imageResourceDirectory = new ImageResourceDirectory(resourcesBuffer, 0);
                            inStream.close();
                            return imageResourceDirectory;
                        }
                        inStream.close();
                        return null;
                    }
                    inStream.close();
                    return null;
                } finally {
                }
            } catch (IOException e) {
                return null;
            }
        }
    
        /* JADX WARN: Code restructure failed: missing block: B:10:0x0047, code lost:
    
            if (r3 == r22) goto L20;
         */
        /* JADX WARN: Code restructure failed: missing block: B:11:0x004a, code lost:
    
            r11 = false;
         */
        /* JADX WARN: Code restructure failed: missing block: B:12:0x0056, code lost:
    
            r9 = r11;
         */
        /* JADX WARN: Code restructure failed: missing block: B:13:0x0057, code lost:
    
            if (r9 == false) goto L55;
         */
        /* JADX WARN: Code restructure failed: missing block: B:16:0x0065, code lost:
    
            return android.graphics.BitmapFactory.decodeByteArray(r7.array(), 0, r7.limit());
         */
        /* JADX WARN: Code restructure failed: missing block: B:23:0x0053, code lost:
    
            if (r23 == (r8.outWidth >= 32)) goto L20;
         */
        /* JADX WARN: Code restructure failed: missing block: B:32:0x009a, code lost:
    
            if (r3 == r22) goto L38;
         */
        /* JADX WARN: Code restructure failed: missing block: B:33:0x00a9, code lost:
    
            r10 = false;
         */
        /* JADX WARN: Code restructure failed: missing block: B:34:0x00aa, code lost:
    
            r9 = r10;
         */
        /* JADX WARN: Code restructure failed: missing block: B:35:0x00ab, code lost:
    
            if (r9 == false) goto L53;
         */
        /* JADX WARN: Code restructure failed: missing block: B:36:0x00ad, code lost:
    
            r7.position(r8);
            r10 = com.winlator.win32.MSBitmap.decodeBuffer(r12, r12, r15, r7);
         */
        /* JADX WARN: Code restructure failed: missing block: B:37:0x00b4, code lost:
    
            if (r10 == null) goto L54;
         */
        /* JADX WARN: Code restructure failed: missing block: B:39:0x00b6, code lost:
    
            return r10;
         */
        /* JADX WARN: Code restructure failed: missing block: B:41:0x00b7, code lost:
    
            continue;
         */
        /* JADX WARN: Code restructure failed: missing block: B:42:0x00a5, code lost:
    
            if (r15 < 8) goto L40;
         */
        /* JADX WARN: Code restructure failed: missing block: B:43:0x00a7, code lost:
    
            r10 = true;
         */
        /* JADX WARN: Code restructure failed: missing block: B:46:0x00a2, code lost:
    
            if (r23 == (r12 >= 32)) goto L38;
         */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        private android.graphics.Bitmap decodeIcon(int r22, boolean r23, java.util.ArrayList<com.winlator.win32.PEParser.ImageResourceDataEntry> r24) {
            /*
                r21 = this;
                r0 = r21
                r1 = r22
                r2 = r23
                r3 = 0
            L7:
                int r4 = r24.size()
                if (r3 >= r4) goto Lbb
                r4 = r24
                java.lang.Object r5 = r4.get(r3)
                com.winlator.win32.PEParser$ImageResourceDataEntry r5 = (com.winlator.win32.PEParser.ImageResourceDataEntry) r5
                int r6 = com.winlator.win32.PEParser.ImageResourceDataEntry.access$700(r5)
                int r7 = r0.resourcesRVA
                int r6 = r6 - r7
                int r7 = r0.resourcesOffset
                int r6 = r6 + r7
                int r7 = com.winlator.win32.PEParser.ImageResourceDataEntry.access$800(r5)
                java.nio.ByteBuffer r7 = r0.readIconData(r6, r7)
                if (r7 == 0) goto Lb7
                boolean r8 = com.winlator.core.ImageUtils.isPNGData(r7)
                r9 = 32
                r10 = 0
                r11 = 1
                if (r8 == 0) goto L67
                android.graphics.BitmapFactory$Options r8 = new android.graphics.BitmapFactory$Options
                r8.<init>()
                r8.inJustDecodeBounds = r11
                byte[] r12 = r7.array()
                int r13 = r7.limit()
                android.graphics.BitmapFactory.decodeByteArray(r12, r10, r13, r8)
                if (r1 < 0) goto L4c
                if (r3 != r1) goto L4a
            L49:
                goto L56
            L4a:
                r11 = r10
                goto L56
            L4c:
                int r12 = r8.outWidth
                if (r12 < r9) goto L52
                r9 = r11
                goto L53
            L52:
                r9 = r10
            L53:
                if (r2 != r9) goto L4a
                goto L49
            L56:
                r9 = r11
                if (r9 == 0) goto L66
                byte[] r11 = r7.array()
                int r12 = r7.limit()
                android.graphics.Bitmap r10 = android.graphics.BitmapFactory.decodeByteArray(r11, r10, r12)
                return r10
            L66:
                goto Lb7
            L67:
                int r8 = r7.getInt()
                int r12 = r7.getInt()
                int r13 = r7.getInt()
                short r14 = r7.getShort()
                short r15 = r7.getShort()
                int r16 = r7.getInt()
                int r17 = r7.getInt()
                int r18 = r7.getInt()
                int r19 = r7.getInt()
                int r20 = r7.getInt()
                r10 = 8
                if (r15 != r10) goto L98
                if (r16 != 0) goto L97
                if (r20 == 0) goto L98
            L97:
                goto Lb7
            L98:
                if (r1 < 0) goto L9d
                if (r3 != r1) goto La9
            L9c:
                goto La5
            L9d:
                if (r12 < r9) goto La1
                r9 = r11
                goto La2
            La1:
                r9 = 0
            La2:
                if (r2 != r9) goto La9
                goto L9c
            La5:
                if (r15 < r10) goto La9
                r10 = r11
                goto Laa
            La9:
                r10 = 0
            Laa:
                r9 = r10
                if (r9 == 0) goto Lb7
                r7.position(r8)
                android.graphics.Bitmap r10 = com.winlator.win32.MSBitmap.decodeBuffer(r12, r12, r15, r7)
                if (r10 == 0) goto Lb7
                return r10
            Lb7:
                int r3 = r3 + 1
                goto L7
            Lbb:
                r4 = r24
                r3 = 0
                return r3
            */
            throw new UnsupportedOperationException("Method not decompiled: com.winlator.win32.PEParser.decodeIcon(int, boolean, java.util.ArrayList):android.graphics.Bitmap");
        }
    
        private Bitmap extractIcon(int iconIndex) {
            ImageResourceDirectory rootDirectory;
            if (!this.peFile.isFile() || (rootDirectory = readImageResourceDirectory()) == null) {
                return null;
            }
            ArrayList<ImageResourceDataEntry> dataEntries = new ArrayList<>();
            Stack<ImageResourceDirectory> stack = new Stack<>();
            stack.push(rootDirectory);
            while (!stack.isEmpty()) {
                ImageResourceDirectory directory = stack.pop();
                Iterator it = directory.entries.iterator();
                while (it.hasNext()) {
                    ImageResourceEntry entry = (ImageResourceEntry) it.next();
                    if (entry instanceof ImageResourceDirectoryEntry) {
                        stack.push(((ImageResourceDirectoryEntry) entry).directory);
                    } else if (entry instanceof ImageResourceDataEntry) {
                        dataEntries.add((ImageResourceDataEntry) entry);
                    }
                }
            }
            if (iconIndex < 0) {
                Bitmap bitmap = decodeIcon(-1, true, dataEntries);
                if (bitmap != null) {
                    return bitmap;
                }
                Bitmap bitmap2 = decodeIcon(-1, false, dataEntries);
                if (bitmap2 != null) {
                    return bitmap2;
                }
                return null;
            }
            return decodeIcon(iconIndex, true, dataEntries);
        }
    
        public static Bitmap extractIcon(File peFile) {
            return extractIcon(peFile, -1);
        }
    
        public static Bitmap extractIcon(File peFile, int iconIndex) {
            return new PEParser(peFile).extractIcon(iconIndex);
        }
    }
  + app/src/main/java/com/winlator/win32/WinVersions.java
    package com.winlator.win32;
    
    import android.R;
    import android.content.Context;
    import android.widget.ArrayAdapter;
    import android.widget.Spinner;
    import com.winlator.container.Container;
    import com.winlator.core.WineRegistryEditor;
    import java.io.File;
    import java.util.concurrent.Executors;
    
    /* loaded from: classes.dex */
    public abstract class WinVersions {
    
        public static class WinVersion {
            public final int buildNumber;
            public final String csdVersion;
            public final String currentVersion;
            public final String description;
            public final byte majorVersion;
            public final byte minorVersion;
            public final String version;
    
            public WinVersion(String version, String description, String currentVersion, int majorVersion, int minorVersion, int buildNumber, String csdVersion) {
                this.version = version;
                this.description = description;
                this.currentVersion = currentVersion;
                this.majorVersion = (byte) majorVersion;
                this.minorVersion = (byte) minorVersion;
                this.buildNumber = buildNumber;
                this.csdVersion = csdVersion;
            }
    
            public String toString() {
                return this.description;
            }
        }
    
        public static WinVersion[] getWinVersions() {
            return new WinVersion[]{new WinVersion("win11", "Windows 11", "6.3", 10, 0, 22000, ""), new WinVersion("win10", "Windows 10", "6.3", 10, 0, 19043, ""), new WinVersion("win81", "Windows 8.1", null, 6, 3, 9600, ""), new WinVersion("win8", "Windows 8", null, 6, 2, 9200, ""), new WinVersion("win2008r2", "Windows 2008 R2", null, 6, 1, 7601, "Service Pack 1"), new WinVersion("win7", "Windows 7", null, 6, 1, 7601, "Service Pack 1"), new WinVersion("win2008", "Windows 2008", null, 6, 0, 6002, "Service Pack 2"), new WinVersion("vista", "Windows Vista", null, 6, 0, 6002, "Service Pack 2"), new WinVersion("win2003", "Windows 2003", null, 5, 2, 3790, "Service Pack 2"), new WinVersion("winxp64", "Windows XP 64", null, 5, 2, 3790, "Service Pack 2"), new WinVersion("winxp", "Windows XP", null, 5, 1, 2600, "Service Pack 3"), new WinVersion("win2k", "Windows 2000", null, 5, 0, 2195, "Service Pack 4")};
        }
    
        public static void loadSpinner(Container container, final Spinner sWinVersion) {
            Context context = sWinVersion.getContext();
            final WinVersion[] winVersions = getWinVersions();
            byte oldPosition = 0;
            int i = 0;
            while (true) {
                if (i >= winVersions.length) {
                    break;
                }
                if (!winVersions[i].version.equals("win7")) {
                    i++;
                } else {
                    oldPosition = (byte) i;
                    break;
                }
            }
            sWinVersion.setAdapter(new ArrayAdapter(context, R.layout.simple_spinner_dropdown_item, winVersions));
            sWinVersion.setSelection(oldPosition);
            sWinVersion.setTag(Byte.valueOf(oldPosition));
            if (container != null) {
                final File systemRegFile = new File(container.getRootDir(), ".wine/system.reg");
                if (systemRegFile.isFile()) {
                    sWinVersion.setEnabled(false);
                    Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.win32.WinVersions$$ExternalSyntheticLambda1
                        @Override // java.lang.Runnable
                        public final void run() {
                            WinVersions.lambda$loadSpinner$1(sWinVersion, systemRegFile, winVersions);
                        }
                    });
                }
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$loadSpinner$1(final Spinner sWinVersion, File systemRegFile, WinVersion[] winVersions) {
            byte position = (byte) sWinVersion.getSelectedItemPosition();
            WineRegistryEditor registryEditor = new WineRegistryEditor(systemRegFile);
            try {
                String productName = registryEditor.getStringValue("Software\\Microsoft\\Windows NT\\CurrentVersion", "ProductName", "");
                String productName2 = productName.replaceAll("(Microsoft )|( Pro)", "");
                int i = 0;
                while (true) {
                    if (i >= winVersions.length) {
                        break;
                    }
                    if (!winVersions[i].description.equals(productName2)) {
                        i++;
                    } else {
                        position = (byte) i;
                        break;
                    }
                }
                registryEditor.close();
                final byte newPosition = position;
                sWinVersion.post(new Runnable() { // from class: com.winlator.win32.WinVersions$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        WinVersions.lambda$loadSpinner$0(sWinVersion, newPosition);
                    }
                });
            } catch (Throwable th) {
                try {
                    registryEditor.close();
                } catch (Throwable th2) {
                    th.addSuppressed(th2);
                }
                throw th;
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$loadSpinner$0(Spinner sWinVersion, byte newPosition) {
            sWinVersion.setSelection(newPosition);
            sWinVersion.setTag(Byte.valueOf(newPosition));
            sWinVersion.setEnabled(true);
        }
    }
  + app/src/main/java/com/winlator/winhandler/MouseEventFlags.java
    package com.winlator.winhandler;
    
    import com.winlator.xserver.Pointer;
    
    /* loaded from: classes.dex */
    public abstract class MouseEventFlags {
    
        /* renamed from: com.winlator.winhandler.MouseEventFlags$1, reason: invalid class name */
        static /* synthetic */ class AnonymousClass1 {
            static final /* synthetic */ int[] $SwitchMap$com$winlator$xserver$Pointer$Button;
    
            static {
                int[] iArr = new int[Pointer.Button.values().length];
                $SwitchMap$com$winlator$xserver$Pointer$Button = iArr;
                try {
                    iArr[Pointer.Button.BUTTON_LEFT.ordinal()] = 1;
                } catch (NoSuchFieldError e) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$Pointer$Button[Pointer.Button.BUTTON_MIDDLE.ordinal()] = 2;
                } catch (NoSuchFieldError e2) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$Pointer$Button[Pointer.Button.BUTTON_RIGHT.ordinal()] = 3;
                } catch (NoSuchFieldError e3) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$Pointer$Button[Pointer.Button.BUTTON_SCROLL_DOWN.ordinal()] = 4;
                } catch (NoSuchFieldError e4) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$Pointer$Button[Pointer.Button.BUTTON_SCROLL_UP.ordinal()] = 5;
                } catch (NoSuchFieldError e5) {
                }
            }
        }
    
        public static int getFlagFor(Pointer.Button button, boolean isActionDown) {
            switch (AnonymousClass1.$SwitchMap$com$winlator$xserver$Pointer$Button[button.ordinal()]) {
                case 1:
                    return isActionDown ? 2 : 4;
                case 2:
                    return isActionDown ? 32 : 64;
                case 3:
                    return isActionDown ? 8 : 16;
                case 4:
                case 5:
                    return 2048;
                default:
                    return 0;
            }
        }
    }
  + app/src/main/java/com/winlator/winhandler/OnGetProcessInfoListener.java
    package com.winlator.winhandler;
    
    /* loaded from: classes.dex */
    public interface OnGetProcessInfoListener {
        void onGetProcessInfo(int i, int i2, ProcessInfo processInfo);
    }
  + app/src/main/java/com/winlator/winhandler/ProcessInfo.java
    package com.winlator.winhandler;
    
    import com.winlator.core.StringUtils;
    import java.util.ArrayList;
    
    /* loaded from: classes.dex */
    public class ProcessInfo {
        public final int affinityMask;
        public final long memoryUsage;
        public final String name;
        public final int pid;
        public final boolean wow64Process;
    
        public ProcessInfo(int pid, String name, long memoryUsage, int affinityMask, boolean wow64Process) {
            this.pid = pid;
            this.name = name;
            this.memoryUsage = memoryUsage;
            this.affinityMask = affinityMask;
            this.wow64Process = wow64Process;
        }
    
        public String getFormattedMemoryUsage() {
            return StringUtils.formatBytes(this.memoryUsage);
        }
    
        public String getCPUList() {
            int numProcessors = Runtime.getRuntime().availableProcessors();
            ArrayList<String> cpuList = new ArrayList<>();
            for (byte i = 0; i < numProcessors; i = (byte) (i + 1)) {
                if ((this.affinityMask & (1 << i)) != 0) {
                    cpuList.add(String.valueOf((int) i));
                }
            }
            return String.join(",", (CharSequence[]) cpuList.toArray(new String[0]));
        }
    }
  + app/src/main/java/com/winlator/winhandler/TaskManagerDialog.java
    package com.winlator.winhandler;
    
    import android.app.ActivityManager;
    import android.content.BroadcastReceiver;
    import android.content.Context;
    import android.content.DialogInterface;
    import android.content.Intent;
    import android.content.IntentFilter;
    import android.graphics.Bitmap;
    import android.os.Build;
    import android.view.LayoutInflater;
    import android.view.Menu;
    import android.view.MenuItem;
    import android.view.View;
    import android.view.ViewGroup;
    import android.widget.Button;
    import android.widget.ImageView;
    import android.widget.LinearLayout;
    import android.widget.PopupMenu;
    import android.widget.TextView;
    import com.winlator.R;
    import com.winlator.XServerDisplayActivity;
    import com.winlator.contentdialog.ContentDialog;
    import com.winlator.core.BatteryUtils;
    import com.winlator.core.CPUStatus;
    import com.winlator.core.Callback;
    import com.winlator.core.FileUtils;
    import com.winlator.core.ProcessHelper;
    import com.winlator.core.StringUtils;
    import com.winlator.core.UnitUtils;
    import com.winlator.widget.CPUListView;
    import com.winlator.winhandler.TaskManagerDialog;
    import com.winlator.xenvironment.RootFS;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.XLock;
    import com.winlator.xserver.XServer;
    import java.io.File;
    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.Locale;
    import java.util.Timer;
    import java.util.TimerTask;
    
    /* loaded from: classes.dex */
    public class TaskManagerDialog extends ContentDialog implements OnGetProcessInfoListener {
        private final XServerDisplayActivity activity;
        private final BatteryInfo batteryInfo;
        private final Panel batteryPanel;
        private BroadcastReceiver batteryReceiver;
        private final Panel cpuPanel;
        private final LayoutInflater inflater;
        private final Object lock;
        private final Panel memoryPanel;
        private Timer timer;
    
        /* JADX INFO: Access modifiers changed from: package-private */
        public static /* synthetic */ void access$1000(TaskManagerDialog x0) {
            x0.update();
        }
    
        private static class BatteryInfo {
            private int level;
            private int temperature;
            private float voltage;
    
            private BatteryInfo() {
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        static class Panel {
            private View[] itemViews;
            private PopupMenu popupMenu;
            private View view;
    
            private Panel() {
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public void setTitle(String title) {
                ((TextView) this.view.findViewById(R.id.TVTitle)).setText(title);
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public void setIconAt(int index, int icon) {
                ((ImageView) this.itemViews[index].findViewById(R.id.ImageView)).setImageResource(icon);
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public void setTextAt(int index, String value) {
                ((TextView) this.itemViews[index].findViewById(R.id.TextView)).setText(value);
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public void setPopupMenuItems(ArrayList<String> items) {
                if (this.popupMenu == null) {
                    View menuButton = this.view.findViewById(R.id.BTMenu);
                    this.popupMenu = new PopupMenu(this.view.getContext(), menuButton);
                    menuButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.winhandler.TaskManagerDialog$Panel$$ExternalSyntheticLambda0
                        @Override // android.view.View.OnClickListener
                        public final void onClick(View view) {
                            TaskManagerDialog.Panel.this.lambda$setPopupMenuItems$0(view);
                        }
                    });
                    menuButton.setVisibility(0);
                }
                Menu menu = this.popupMenu.getMenu();
                menu.clear();
                Iterator<String> it = items.iterator();
                while (it.hasNext()) {
                    String item = it.next();
                    menu.add(item);
                }
            }
    
            /* JADX INFO: Access modifiers changed from: private */
            public /* synthetic */ void lambda$setPopupMenuItems$0(View v) {
                this.popupMenu.show();
            }
        }
    
        public TaskManagerDialog(final XServerDisplayActivity activity) {
            super(activity, R.layout.task_manager_dialog);
            this.lock = new Object();
            this.batteryInfo = new BatteryInfo();
            this.activity = activity;
            setCancelable(false);
            setTitle(R.string.task_manager);
            setIcon(R.drawable.icon_task_manager);
            Button cancelButton = (Button) findViewById(R.id.BTCancel);
            cancelButton.setText(R.string.new_task);
            cancelButton.setOnClickListener(new View.OnClickListener() { // from class: com.winlator.winhandler.TaskManagerDialog$$ExternalSyntheticLambda1
                @Override // android.view.View.OnClickListener
                public final void onClick(View view) {
                    TaskManagerDialog.this.lambda$new$1(activity, view);
                }
            });
            setOnDismissListener(new DialogInterface.OnDismissListener() { // from class: com.winlator.winhandler.TaskManagerDialog$$ExternalSyntheticLambda0
                @Override // android.content.DialogInterface.OnDismissListener
                public final void onDismiss(DialogInterface dialogInterface) {
                    TaskManagerDialog.this.lambda$new$2(activity, dialogInterface);
                }
            });
            FileUtils.clear(getIconDir(activity));
            this.inflater = LayoutInflater.from(activity);
            this.batteryReceiver = new BroadcastReceiver() { // from class: com.winlator.winhandler.TaskManagerDialog.1
                @Override // android.content.BroadcastReceiver
                public void onReceive(Context context, Intent intent) {
                    String action = intent.getAction();
                    if (action != null && action.equals("android.intent.action.BATTERY_CHANGED")) {
                        int voltage = intent.getIntExtra("voltage", 0);
                        int temperature = intent.getIntExtra("temperature", 0);
                        int level = intent.getIntExtra("level", 0);
                        int scale = intent.getIntExtra("scale", 0);
                        TaskManagerDialog.this.batteryInfo.voltage = voltage / 1000.0f;
                        TaskManagerDialog.this.batteryInfo.temperature = (int) (temperature / 10.0f);
                        TaskManagerDialog.this.batteryInfo.level = (int) ((level / scale) * 100.0f);
                    }
                }
            };
            IntentFilter filter = new IntentFilter();
            filter.addAction("android.intent.action.BATTERY_CHANGED");
            activity.registerReceiver(this.batteryReceiver, filter);
            Panel createPanel = createPanel(2);
            this.cpuPanel = createPanel;
            createPanel.setIconAt(0, R.drawable.icon_cpu);
            createPanel.setIconAt(1, R.drawable.icon_temperature);
            Panel createPanel2 = createPanel(1);
            this.memoryPanel = createPanel2;
            createPanel2.setIconAt(0, R.drawable.icon_memory);
            Panel createPanel3 = createPanel(2);
            this.batteryPanel = createPanel3;
            createPanel3.setIconAt(0, R.drawable.icon_power);
            createPanel3.setIconAt(1, R.drawable.icon_temperature);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$1(final XServerDisplayActivity activity, View v) {
            dismiss();
            ContentDialog.prompt(activity, R.string.new_task, "taskmgr.exe", new Callback() { // from class: com.winlator.winhandler.TaskManagerDialog$$ExternalSyntheticLambda4
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    TaskManagerDialog.lambda$new$0(XServerDisplayActivity.this, (String) obj);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0(XServerDisplayActivity activity, String command) {
            activity.getWinHandler().exec(command);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$new$2(XServerDisplayActivity activity, DialogInterface dialog) {
            BroadcastReceiver broadcastReceiver = this.batteryReceiver;
            if (broadcastReceiver != null) {
                activity.unregisterReceiver(broadcastReceiver);
            }
            Timer timer = this.timer;
            if (timer != null) {
                timer.cancel();
                this.timer = null;
            }
            activity.getWinHandler().setOnGetProcessInfoListener(null);
        }
    
        private Panel createPanel(int numItems) {
            LinearLayout llPanelList = (LinearLayout) findViewById(R.id.LLPanelList);
            View view = this.inflater.inflate(R.layout.task_manager_panel, (ViewGroup) llPanelList, false);
            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(-1, -2);
            if (llPanelList.getChildCount() > 0) {
                params.setMargins(0, (int) UnitUtils.dpToPx(6.0f), 0, 0);
            }
            view.setLayoutParams(params);
            llPanelList.addView(view);
            LinearLayout llItemList = (LinearLayout) view.findViewById(R.id.LLItemList);
            Panel panel = new Panel();
            panel.view = view;
            panel.itemViews = new View[numItems];
            for (int i = 0; i < numItems; i++) {
                View itemView = this.inflater.inflate(R.layout.task_manager_panel_item, (ViewGroup) llItemList, false);
                panel.itemViews[i] = itemView;
                llItemList.addView(itemView);
            }
            return panel;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void update() {
            synchronized (this.lock) {
                this.activity.getWinHandler().listProcesses();
                LinearLayout container = (LinearLayout) findViewById(R.id.LLProcessList);
                if (container.getChildCount() == 0) {
                    findViewById(R.id.TVEmptyText).setVisibility(0);
                }
            }
            updateCPUPanel();
            updateMemoryPanel();
            updateBatteryPanel();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        /* renamed from: showListItemMenu, reason: merged with bridge method [inline-methods] */
        public void lambda$onGetProcessInfo$6(View anchorView, final ProcessInfo processInfo) {
            PopupMenu listItemMenu = new PopupMenu(this.activity, anchorView);
            if (Build.VERSION.SDK_INT >= 29) {
                listItemMenu.setForceShowIcon(true);
            }
            listItemMenu.inflate(R.menu.process_popup_menu);
            listItemMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() { // from class: com.winlator.winhandler.TaskManagerDialog$$ExternalSyntheticLambda3
                @Override // android.widget.PopupMenu.OnMenuItemClickListener
                public final boolean onMenuItemClick(MenuItem menuItem) {
                    boolean lambda$showListItemMenu$4;
                    lambda$showListItemMenu$4 = TaskManagerDialog.this.lambda$showListItemMenu$4(processInfo, menuItem);
                    return lambda$showListItemMenu$4;
                }
            });
            listItemMenu.show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ boolean lambda$showListItemMenu$4(final ProcessInfo processInfo, MenuItem menuItem) {
            int itemId = menuItem.getItemId();
            final WinHandler winHandler = this.activity.getWinHandler();
            switch (itemId) {
                case R.id.menu_item_bring_to_front /* 2131296687 */:
                    winHandler.bringToFront(processInfo.name);
                    dismiss();
                    break;
                case R.id.menu_item_end_process /* 2131296695 */:
                    ContentDialog.confirm(this.activity, R.string.do_you_want_to_end_this_process, new Runnable() { // from class: com.winlator.winhandler.TaskManagerDialog$$ExternalSyntheticLambda7
                        @Override // java.lang.Runnable
                        public final void run() {
                            TaskManagerDialog.lambda$showListItemMenu$3(WinHandler.this, processInfo);
                        }
                    });
                    break;
                case R.id.menu_item_process_affinity /* 2131296709 */:
                    showProcessorAffinityDialog(processInfo);
                    break;
            }
            return true;
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$showListItemMenu$3(WinHandler winHandler, ProcessInfo processInfo) {
            winHandler.killProcess(null, processInfo.pid);
        }
    
        private void showProcessorAffinityDialog(final ProcessInfo processInfo) {
            ContentDialog dialog = new ContentDialog(this.activity, R.layout.cpu_list_dialog);
            dialog.setTitle(processInfo.name);
            dialog.setIcon(R.drawable.icon_cpu);
            final CPUListView cpuListView = (CPUListView) dialog.findViewById(R.id.CPUListView);
            cpuListView.setCheckedCPUList(processInfo.getCPUList());
            dialog.setOnConfirmCallback(new Runnable() { // from class: com.winlator.winhandler.TaskManagerDialog$$ExternalSyntheticLambda6
                @Override // java.lang.Runnable
                public final void run() {
                    TaskManagerDialog.this.lambda$showProcessorAffinityDialog$5(processInfo, cpuListView);
                }
            });
            dialog.show();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$showProcessorAffinityDialog$5(ProcessInfo processInfo, CPUListView cpuListView) {
            WinHandler winHandler = this.activity.getWinHandler();
            winHandler.setProcessAffinity(processInfo.pid, ProcessHelper.getAffinityMask(cpuListView.getCheckedCPUList()));
            update();
        }
    
        public static File getIconDir(Context context) {
            File iconDir = new File(RootFS.find(context).getRootDir(), "home/xuser/.local/share/icons/taskmgr");
            if (!iconDir.isDirectory()) {
                iconDir.mkdirs();
            }
            return iconDir;
        }
    
        @Override // android.app.Dialog
        public void show() {
            update();
            this.activity.getWinHandler().setOnGetProcessInfoListener(this);
            Timer timer = new Timer();
            this.timer = timer;
            timer.schedule(new AnonymousClass2(), 0L, 1000L);
            super.show();
        }
    
        /* renamed from: com.winlator.winhandler.TaskManagerDialog$2, reason: invalid class name */
        class AnonymousClass2 extends TimerTask {
            AnonymousClass2() {
            }
    
            @Override // java.util.TimerTask, java.lang.Runnable
            public void run() {
                XServerDisplayActivity xServerDisplayActivity = TaskManagerDialog.this.activity;
                final TaskManagerDialog taskManagerDialog = TaskManagerDialog.this;
                xServerDisplayActivity.runOnUiThread(new Runnable() { // from class: com.winlator.winhandler.TaskManagerDialog$2$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        TaskManagerDialog.access$1000(TaskManagerDialog.this);
                    }
                });
            }
        }
    
        @Override // com.winlator.winhandler.OnGetProcessInfoListener
        public void onGetProcessInfo(final int index, final int numProcesses, final ProcessInfo processInfo) {
            this.activity.runOnUiThread(new Runnable() { // from class: com.winlator.winhandler.TaskManagerDialog$$ExternalSyntheticLambda5
                @Override // java.lang.Runnable
                public final void run() {
                    TaskManagerDialog.this.lambda$onGetProcessInfo$7(numProcesses, index, processInfo);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onGetProcessInfo$7(int numProcesses, int index, final ProcessInfo processInfo) {
            Bitmap icon;
            synchronized (this.lock) {
                LinearLayout container = (LinearLayout) findViewById(R.id.LLProcessList);
                setBottomBarText(this.activity.getString(R.string.processes) + ": " + numProcesses);
                if (numProcesses == 0) {
                    container.removeAllViews();
                    findViewById(R.id.TVEmptyText).setVisibility(0);
                    return;
                }
                findViewById(R.id.TVEmptyText).setVisibility(8);
                int childCount = container.getChildCount();
                View itemView = index < childCount ? container.getChildAt(index) : this.inflater.inflate(R.layout.process_info_list_item, (ViewGroup) container, false);
                TextView textView = (TextView) itemView.findViewById(R.id.TVName);
                StringBuilder sb = new StringBuilder();
                sb.append(processInfo.name);
                sb.append(processInfo.wow64Process ? " *32" : "");
                textView.setText(sb.toString());
                ((TextView) itemView.findViewById(R.id.TVPID)).setText(String.valueOf(processInfo.pid));
                ((TextView) itemView.findViewById(R.id.TVMemoryUsage)).setText(processInfo.getFormattedMemoryUsage());
                itemView.findViewById(R.id.BTMenu).setOnClickListener(new View.OnClickListener() { // from class: com.winlator.winhandler.TaskManagerDialog$$ExternalSyntheticLambda2
                    @Override // android.view.View.OnClickListener
                    public final void onClick(View view) {
                        TaskManagerDialog.this.lambda$onGetProcessInfo$6(processInfo, view);
                    }
                });
                XServer xServer = this.activity.getXServer();
                XLock xlock = xServer.lock(XServer.Lockable.WINDOW_MANAGER);
                try {
                    Window window = xServer.windowManager.findWindowWithProcessId(processInfo.pid);
                    if (xlock != null) {
                        xlock.close();
                    }
                    ImageView ivIcon = (ImageView) itemView.findViewById(R.id.IVIcon);
                    ivIcon.setImageResource(R.drawable.taskmgr_process);
                    if (window != null && (icon = xServer.pixmapManager.getWindowIcon(window)) != null) {
                        ivIcon.setImageBitmap(icon);
                    }
                    if (index >= childCount) {
                        container.addView(itemView);
                    }
                    if (index == numProcesses - 1 && childCount > numProcesses) {
                        for (int i = childCount - 1; i >= numProcesses; i--) {
                            container.removeViewAt(i);
                        }
                    }
                } finally {
                }
            }
        }
    
        private static String formatClockSpeed(int clockSpeed) {
            StringBuilder sb;
            String str;
            if (clockSpeed >= 1000) {
                sb = new StringBuilder();
                sb.append(String.format(Locale.ENGLISH, "%.2f", Float.valueOf(clockSpeed / 1000.0f)));
                str = " GHz";
            } else {
                sb = new StringBuilder();
                sb.append(clockSpeed);
                str = " MHz";
            }
            sb.append(str);
            return sb.toString();
        }
    
        private void updateCPUPanel() {
            short[] clockSpeeds = CPUStatus.getCurrentClockSpeeds();
            float totalClockSpeed = 0.0f;
            int maxClockSpeed = 0;
            int selectedClockSpeed = 0;
            ArrayList<String> popupMenuItems = new ArrayList<>();
            for (int i = 0; i < clockSpeeds.length; i++) {
                totalClockSpeed += clockSpeeds[i];
                int currentMaxClockSpeed = CPUStatus.getMaxClockSpeed(i);
                maxClockSpeed = Math.max(maxClockSpeed, currentMaxClockSpeed);
                selectedClockSpeed = Math.max(selectedClockSpeed, (int) clockSpeeds[i]);
                popupMenuItems.add("CPU" + i + ": " + formatClockSpeed(clockSpeeds[i]) + "/" + formatClockSpeed(currentMaxClockSpeed));
            }
            int i2 = clockSpeeds.length;
            float avgClockSpeed = totalClockSpeed / i2;
            byte cpuUsagePercent = (byte) ((avgClockSpeed / maxClockSpeed) * 100.0f);
            this.cpuPanel.setTitle("CPU (" + ((int) cpuUsagePercent) + "%)");
            this.cpuPanel.setTextAt(0, formatClockSpeed(selectedClockSpeed));
            this.cpuPanel.setTextAt(1, CPUStatus.getTemperature() + "ºC");
            this.cpuPanel.setPopupMenuItems(popupMenuItems);
        }
    
        private void updateMemoryPanel() {
            ActivityManager activityManager = (ActivityManager) this.activity.getSystemService("activity");
            ActivityManager.MemoryInfo memoryInfo = new ActivityManager.MemoryInfo();
            activityManager.getMemoryInfo(memoryInfo);
            long usedMem = memoryInfo.totalMem - memoryInfo.availMem;
            byte memUsagePercent = (byte) ((usedMem / r2) * 100.0d);
            this.memoryPanel.setTitle(this.activity.getString(R.string.memory) + " (" + ((int) memUsagePercent) + "%)");
            this.memoryPanel.setTextAt(0, StringUtils.formatBytes(usedMem, false) + "/" + StringUtils.formatBytes(memoryInfo.totalMem));
        }
    
        private void updateBatteryPanel() {
            int currentMicroamperes = BatteryUtils.getCurrentMicroamperes(this.activity);
            this.batteryPanel.setTitle(this.activity.getString(R.string.battery) + " (" + this.batteryInfo.level + "%)");
            Panel panel = this.batteryPanel;
            StringBuilder sb = new StringBuilder();
            Locale locale = Locale.ENGLISH;
            sb.append(String.format(locale, "%.2f", Float.valueOf(BatteryUtils.computePower(currentMicroamperes, this.batteryInfo.voltage))));
            sb.append(" W");
            panel.setTextAt(0, sb.toString());
            this.batteryPanel.setTextAt(1, this.batteryInfo.temperature + "ºC");
            ArrayList<String> popupMenuItems = new ArrayList<>();
            popupMenuItems.add(this.activity.getString(R.string.voltage) + ": " + String.format(locale, "%.2f", Float.valueOf(this.batteryInfo.voltage)) + " V");
            popupMenuItems.add(this.activity.getString(R.string.current) + ": " + (currentMicroamperes / 1000) + " mA");
            int capacity = BatteryUtils.getCapacity(this.activity);
            if (capacity > 0) {
                popupMenuItems.add(this.activity.getString(R.string.capacity) + ": " + capacity + " mAh");
            }
            this.batteryPanel.setPopupMenuItems(popupMenuItems);
        }
    }
  + app/src/main/java/com/winlator/winhandler/WinHandler.java
    package com.winlator.winhandler;
    
    import android.content.Intent;
    import android.net.Uri;
    import android.view.KeyEvent;
    import android.view.MotionEvent;
    import com.winlator.XServerDisplayActivity;
    import com.winlator.core.StringUtils;
    import com.winlator.inputcontrols.ControlsProfile;
    import com.winlator.inputcontrols.ExternalController;
    import com.winlator.xserver.XServer;
    import java.io.IOException;
    import java.net.DatagramPacket;
    import java.net.DatagramSocket;
    import java.net.InetAddress;
    import java.net.InetSocketAddress;
    import java.net.SocketAddress;
    import java.net.UnknownHostException;
    import java.nio.ByteBuffer;
    import java.nio.ByteOrder;
    import java.util.ArrayDeque;
    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.List;
    import java.util.concurrent.CopyOnWriteArrayList;
    import java.util.concurrent.Executors;
    
    /* loaded from: classes.dex */
    public class WinHandler {
        private final ArrayDeque<Runnable> actions;
        private final XServerDisplayActivity activity;
        private ExternalController currentController;
        private byte dinputMapperType;
        private final List<Integer> gamepadClients;
        private boolean initReceived;
        private InetAddress localhost;
        private OnGetProcessInfoListener onGetProcessInfoListener;
        private PreferredInputApi preferredInputApi;
        private final ByteBuffer receiveData;
        private final DatagramPacket receivePacket;
        private boolean running;
        private final ByteBuffer sendData;
        private final DatagramPacket sendPacket;
        private DatagramSocket socket;
        private final ArrayList<Integer> xinputProcesses;
    
        public enum PreferredInputApi {
            AUTO,
            DINPUT,
            XINPUT,
            BOTH
        }
    
        public WinHandler(XServerDisplayActivity activity) {
            ByteBuffer allocate = ByteBuffer.allocate(64);
            ByteOrder byteOrder = ByteOrder.LITTLE_ENDIAN;
            ByteBuffer order = allocate.order(byteOrder);
            this.sendData = order;
            ByteBuffer order2 = ByteBuffer.allocate(64).order(byteOrder);
            this.receiveData = order2;
            this.sendPacket = new DatagramPacket(order.array(), 64);
            this.receivePacket = new DatagramPacket(order2.array(), 64);
            this.actions = new ArrayDeque<>();
            this.initReceived = false;
            this.running = false;
            this.dinputMapperType = (byte) 1;
            this.preferredInputApi = PreferredInputApi.BOTH;
            this.gamepadClients = new CopyOnWriteArrayList();
            this.xinputProcesses = new ArrayList<>();
            this.activity = activity;
        }
    
        private boolean sendPacket(int port) {
            try {
                int size = this.sendData.position();
                if (size == 0) {
                    return false;
                }
                this.sendPacket.setAddress(this.localhost);
                this.sendPacket.setPort(port);
                this.socket.send(this.sendPacket);
                return true;
            } catch (IOException e) {
                return false;
            }
        }
    
        private boolean sendPacket(int port, byte[] data) {
            try {
                DatagramPacket sendPacket = new DatagramPacket(data, data.length);
                sendPacket.setAddress(this.localhost);
                sendPacket.setPort(port);
                this.socket.send(sendPacket);
                return true;
            } catch (IOException e) {
                return false;
            }
        }
    
        public void exec(String command) {
            String command2 = command.trim();
            if (command2.isEmpty()) {
                return;
            }
            String[] cmdList = command2.split(" ", 2);
            final String filename = cmdList[0];
            final String parameters = cmdList.length > 1 ? cmdList[1] : "";
            addAction(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda9
                @Override // java.lang.Runnable
                public final void run() {
                    WinHandler.this.lambda$exec$0(filename, parameters);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$exec$0(String filename, String parameters) {
            byte[] filenameBytes = filename.getBytes();
            byte[] parametersBytes = parameters.getBytes();
            this.sendData.rewind();
            this.sendData.put((byte) 2);
            this.sendData.putInt(filenameBytes.length + parametersBytes.length + 8);
            this.sendData.putInt(filenameBytes.length);
            this.sendData.putInt(parametersBytes.length);
            this.sendData.put(filenameBytes);
            this.sendData.put(parametersBytes);
            sendPacket(7946);
        }
    
        public void killProcess(String processName) {
            killProcess(processName, 0);
        }
    
        public void killProcess(final String processName, final int pid) {
            addAction(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda7
                @Override // java.lang.Runnable
                public final void run() {
                    WinHandler.this.lambda$killProcess$1(processName, pid);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$killProcess$1(String processName, int pid) {
            this.sendData.rewind();
            this.sendData.put((byte) 3);
            if (processName == null) {
                this.sendData.putInt(0);
            } else {
                byte[] bytes = processName.getBytes();
                int minLength = Math.min(bytes.length, 55);
                this.sendData.putInt(minLength);
                this.sendData.put(bytes, 0, minLength);
            }
            this.sendData.putInt(pid);
            sendPacket(7946);
        }
    
        public void listProcesses() {
            addAction(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    WinHandler.this.lambda$listProcesses$2();
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$listProcesses$2() {
            OnGetProcessInfoListener onGetProcessInfoListener;
            this.sendData.rewind();
            this.sendData.put((byte) 4);
            this.sendData.putInt(0);
            if (!sendPacket(7946) && (onGetProcessInfoListener = this.onGetProcessInfoListener) != null) {
                onGetProcessInfoListener.onGetProcessInfo(0, 0, null);
            }
        }
    
        public void setProcessAffinity(final String processName, final int affinityMask) {
            addAction(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda6
                @Override // java.lang.Runnable
                public final void run() {
                    WinHandler.this.lambda$setProcessAffinity$3(processName, affinityMask);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setProcessAffinity$3(String processName, int affinityMask) {
            byte[] bytes = processName.getBytes();
            this.sendData.rewind();
            this.sendData.put((byte) 6);
            this.sendData.putInt(bytes.length + 9);
            this.sendData.putInt(0);
            this.sendData.putInt(affinityMask);
            this.sendData.put((byte) bytes.length);
            this.sendData.put(bytes);
            sendPacket(7946);
        }
    
        public void setProcessAffinity(final int pid, final int affinityMask) {
            addAction(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda3
                @Override // java.lang.Runnable
                public final void run() {
                    WinHandler.this.lambda$setProcessAffinity$4(pid, affinityMask);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setProcessAffinity$4(int pid, int affinityMask) {
            this.sendData.rewind();
            this.sendData.put((byte) 6);
            this.sendData.putInt(9);
            this.sendData.putInt(pid);
            this.sendData.putInt(affinityMask);
            this.sendData.put((byte) 0);
            sendPacket(7946);
        }
    
        public void mouseEvent(final int flags, final int dx, final int dy, final int wheelDelta) {
            if (this.initReceived) {
                addAction(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda4
                    @Override // java.lang.Runnable
                    public final void run() {
                        WinHandler.this.lambda$mouseEvent$5(flags, dx, dy, wheelDelta);
                    }
                });
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$mouseEvent$5(int flags, int dx, int dy, int wheelDelta) {
            this.sendData.rewind();
            this.sendData.put((byte) 7);
            this.sendData.putInt(10);
            this.sendData.putInt(flags);
            this.sendData.putShort((short) dx);
            this.sendData.putShort((short) dy);
            this.sendData.putShort((short) wheelDelta);
            this.sendData.put((byte) ((flags & 1) != 0 ? 1 : 0));
            sendPacket(7946);
        }
    
        public void bringToFront(String processName) {
            bringToFront(processName, 0L);
        }
    
        public void bringToFront(final String processName, final long handle) {
            addAction(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda8
                @Override // java.lang.Runnable
                public final void run() {
                    WinHandler.this.lambda$bringToFront$7(processName, handle);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$bringToFront$7(String processName, long handle) {
            this.sendData.rewind();
            this.sendData.put((byte) 12);
            byte[] bytes = processName.getBytes();
            int minLength = Math.min(bytes.length, 51);
            this.sendData.putInt(minLength);
            this.sendData.put(bytes, 0, minLength);
            this.sendData.putLong(handle);
            sendPacket(7946);
        }
    
        public void setClipboardData(final String data) {
            addAction(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda5
                @Override // java.lang.Runnable
                public final void run() {
                    WinHandler.this.lambda$setClipboardData$8(data);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$setClipboardData$8(String data) {
            this.sendData.rewind();
            byte[] bytes = data.getBytes();
            this.sendData.put((byte) 14);
            this.sendData.putInt(bytes.length);
            if (sendPacket(7946)) {
                sendPacket(7946, bytes);
            }
        }
    
        private void addAction(Runnable action) {
            synchronized (this.actions) {
                this.actions.add(action);
                this.actions.notify();
            }
        }
    
        public void setOnGetProcessInfoListener(OnGetProcessInfoListener onGetProcessInfoListener) {
            synchronized (this.actions) {
                this.onGetProcessInfoListener = onGetProcessInfoListener;
            }
        }
    
        private void startSendThread() {
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    WinHandler.this.lambda$startSendThread$9();
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$startSendThread$9() {
            while (this.running) {
                synchronized (this.actions) {
                    while (this.initReceived && !this.actions.isEmpty()) {
                        this.actions.poll().run();
                    }
                    try {
                        this.actions.wait();
                    } catch (InterruptedException e) {
                    }
                }
            }
        }
    
        public void stop() {
            this.running = false;
            DatagramSocket datagramSocket = this.socket;
            if (datagramSocket != null) {
                datagramSocket.close();
                this.socket = null;
            }
            synchronized (this.actions) {
                this.actions.notify();
            }
        }
    
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        private void handleRequest(byte requestCode, final int port) throws IOException {
            boolean enabled;
            ExternalController externalController;
            switch (requestCode) {
                case 1:
                    this.initReceived = true;
                    synchronized (this.actions) {
                        this.actions.notify();
                    }
                    return;
                case 5:
                    if (this.onGetProcessInfoListener == null) {
                        return;
                    }
                    ByteBuffer byteBuffer = this.receiveData;
                    byteBuffer.position(byteBuffer.position() + 4);
                    int numProcesses = this.receiveData.getShort();
                    int index = this.receiveData.getShort();
                    int pid = this.receiveData.getInt();
                    long memoryUsage = this.receiveData.getLong();
                    int affinityMask = this.receiveData.getInt();
                    boolean wow64Process = this.receiveData.get() == 1;
                    byte[] bytes = new byte[32];
                    this.receiveData.get(bytes);
                    String name = StringUtils.fromANSIString(bytes);
                    this.onGetProcessInfoListener.onGetProcessInfo(index, numProcesses, new ProcessInfo(pid, name, memoryUsage, affinityMask, wow64Process));
                    return;
                case 8:
                    boolean isXInput = this.receiveData.get() == 1;
                    boolean notify = this.receiveData.get() == 1;
                    final ControlsProfile profile = this.activity.getInputControlsView().getProfile();
                    final boolean useVirtualGamepad = profile != null && profile.isVirtualGamepad();
                    int processId = this.receiveData.getInt();
                    if (!useVirtualGamepad && ((externalController = this.currentController) == null || !externalController.isConnected())) {
                        this.currentController = ExternalController.getController(0);
                    }
                    boolean enabled2 = this.currentController != null || useVirtualGamepad;
                    if (enabled2) {
                        switch (AnonymousClass1.$SwitchMap$com$winlator$winhandler$WinHandler$PreferredInputApi[this.preferredInputApi.ordinal()]) {
                            case 1:
                                boolean hasXInputProcess = this.xinputProcesses.contains(Integer.valueOf(processId));
                                if (isXInput) {
                                    if (!hasXInputProcess) {
                                        this.xinputProcesses.add(Integer.valueOf(processId));
                                        break;
                                    }
                                } else if (hasXInputProcess) {
                                    enabled = false;
                                    break;
                                }
                                break;
                            case 2:
                                if (isXInput) {
                                    enabled = false;
                                    break;
                                }
                                break;
                            case 3:
                                if (!isXInput) {
                                    enabled = false;
                                    break;
                                }
                                break;
                        }
                        if (!enabled && notify) {
                            if (!this.gamepadClients.contains(Integer.valueOf(port))) {
                                this.gamepadClients.add(Integer.valueOf(port));
                            }
                        } else {
                            this.gamepadClients.remove(Integer.valueOf(port));
                        }
                        final boolean finalEnabled = enabled;
                        addAction(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda12
                            @Override // java.lang.Runnable
                            public final void run() {
                                WinHandler.this.lambda$handleRequest$10(finalEnabled, useVirtualGamepad, profile, port);
                            }
                        });
                        return;
                    }
                    enabled = enabled2;
                    if (!enabled) {
                    }
                    this.gamepadClients.remove(Integer.valueOf(port));
                    final boolean finalEnabled2 = enabled;
                    addAction(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda12
                        @Override // java.lang.Runnable
                        public final void run() {
                            WinHandler.this.lambda$handleRequest$10(finalEnabled2, useVirtualGamepad, profile, port);
                        }
                    });
                    return;
                case 9:
                    final int gamepadId = this.receiveData.getInt();
                    final ControlsProfile profile2 = this.activity.getInputControlsView().getProfile();
                    final boolean useVirtualGamepad2 = profile2 != null && profile2.isVirtualGamepad();
                    ExternalController externalController2 = this.currentController;
                    final boolean enabled3 = externalController2 != null || useVirtualGamepad2;
                    if (externalController2 != null && externalController2.getDeviceId() != gamepadId) {
                        this.currentController = null;
                    }
                    addAction(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda10
                        @Override // java.lang.Runnable
                        public final void run() {
                            WinHandler.this.lambda$handleRequest$11(enabled3, gamepadId, useVirtualGamepad2, profile2, port);
                        }
                    });
                    return;
                case 10:
                    this.currentController = null;
                    this.gamepadClients.clear();
                    this.xinputProcesses.clear();
                    return;
                case 13:
                    short x = this.receiveData.getShort();
                    short y = this.receiveData.getShort();
                    XServer xServer = this.activity.getXServer();
                    xServer.pointer.setX(x);
                    xServer.pointer.setY(y);
                    this.activity.getXServerView().requestRender();
                    return;
                case 15:
                    int requestLength = this.receiveData.getInt();
                    byte[] data = new byte[requestLength];
                    this.socket.receive(new DatagramPacket(data, data.length));
                    Intent intent = new Intent("android.intent.action.VIEW", Uri.parse(new String(data)));
                    intent.addFlags(268439552);
                    this.activity.startActivity(intent);
                    return;
                default:
                    return;
            }
        }
    
        /* renamed from: com.winlator.winhandler.WinHandler$1, reason: invalid class name */
        static /* synthetic */ class AnonymousClass1 {
            static final /* synthetic */ int[] $SwitchMap$com$winlator$winhandler$WinHandler$PreferredInputApi;
    
            static {
                int[] iArr = new int[PreferredInputApi.values().length];
                $SwitchMap$com$winlator$winhandler$WinHandler$PreferredInputApi = iArr;
                try {
                    iArr[PreferredInputApi.AUTO.ordinal()] = 1;
                } catch (NoSuchFieldError e) {
                }
                try {
                    $SwitchMap$com$winlator$winhandler$WinHandler$PreferredInputApi[PreferredInputApi.DINPUT.ordinal()] = 2;
                } catch (NoSuchFieldError e2) {
                }
                try {
                    $SwitchMap$com$winlator$winhandler$WinHandler$PreferredInputApi[PreferredInputApi.XINPUT.ordinal()] = 3;
                } catch (NoSuchFieldError e3) {
                }
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$handleRequest$10(boolean finalEnabled, boolean useVirtualGamepad, ControlsProfile profile, int port) {
            this.sendData.rewind();
            this.sendData.put((byte) 8);
            if (finalEnabled) {
                this.sendData.putInt(!useVirtualGamepad ? this.currentController.getDeviceId() : profile.id);
                this.sendData.put(this.dinputMapperType);
                byte[] bytes = (useVirtualGamepad ? profile.getName() : this.currentController.getName()).getBytes();
                this.sendData.putInt(bytes.length);
                this.sendData.put(bytes);
            } else {
                this.sendData.putInt(0);
                this.sendData.put((byte) 0);
                this.sendData.putInt(0);
            }
            sendPacket(port);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$handleRequest$11(boolean z, int i, boolean z2, ControlsProfile controlsProfile, int i2) {
            this.sendData.rewind();
            this.sendData.put((byte) 9);
            this.sendData.put(z ? (byte) 1 : (byte) 0);
            if (z) {
                this.sendData.putInt(i);
                if (z2) {
                    controlsProfile.getGamepadState().writeTo(this.sendData);
                } else {
                    this.currentController.state.writeTo(this.sendData);
                }
            }
            sendPacket(i2);
        }
    
        public void start() {
            try {
                this.localhost = InetAddress.getLocalHost();
            } catch (UnknownHostException e) {
                try {
                    this.localhost = InetAddress.getByName("127.0.0.1");
                } catch (UnknownHostException e2) {
                }
            }
            this.running = true;
            startSendThread();
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    WinHandler.this.lambda$start$12();
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$start$12() {
            try {
                DatagramSocket datagramSocket = new DatagramSocket((SocketAddress) null);
                this.socket = datagramSocket;
                datagramSocket.setReuseAddress(true);
                this.socket.bind(new InetSocketAddress((InetAddress) null, 7947));
                while (this.running) {
                    this.socket.receive(this.receivePacket);
                    synchronized (this.actions) {
                        this.receiveData.rewind();
                        byte requestCode = this.receiveData.get();
                        handleRequest(requestCode, this.receivePacket.getPort());
                    }
                }
            } catch (IOException e) {
            }
        }
    
        public void sendGamepadState() {
            if (!this.initReceived || this.gamepadClients.isEmpty()) {
                return;
            }
            final ControlsProfile profile = this.activity.getInputControlsView().getProfile();
            final boolean useVirtualGamepad = profile != null && profile.isVirtualGamepad();
            final boolean enabled = this.currentController != null || useVirtualGamepad;
            Iterator<Integer> it = this.gamepadClients.iterator();
            while (it.hasNext()) {
                final int port = it.next().intValue();
                addAction(new Runnable() { // from class: com.winlator.winhandler.WinHandler$$ExternalSyntheticLambda11
                    @Override // java.lang.Runnable
                    public final void run() {
                        WinHandler.this.lambda$sendGamepadState$13(enabled, useVirtualGamepad, profile, port);
                    }
                });
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$sendGamepadState$13(boolean z, boolean z2, ControlsProfile controlsProfile, int i) {
            this.sendData.rewind();
            this.sendData.put((byte) 9);
            this.sendData.put(z ? (byte) 1 : (byte) 0);
            if (z) {
                this.sendData.putInt(!z2 ? this.currentController.getDeviceId() : controlsProfile.id);
                if (z2) {
                    controlsProfile.getGamepadState().writeTo(this.sendData);
                } else {
                    this.currentController.state.writeTo(this.sendData);
                }
            }
            sendPacket(i);
        }
    
        public boolean onGenericMotionEvent(MotionEvent event) {
            boolean handled = false;
            ExternalController externalController = this.currentController;
            if (externalController != null && externalController.getDeviceId() == event.getDeviceId() && (handled = this.currentController.updateStateFromMotionEvent(event))) {
                sendGamepadState();
            }
            return handled;
        }
    
        public boolean onKeyEvent(KeyEvent event) {
            boolean handled = false;
            ExternalController externalController = this.currentController;
            if (externalController != null && externalController.getDeviceId() == event.getDeviceId() && event.getRepeatCount() == 0) {
                int action = event.getAction();
                if (action == 0) {
                    handled = this.currentController.updateStateFromKeyEvent(event);
                } else if (action == 1) {
                    handled = this.currentController.updateStateFromKeyEvent(event);
                }
                if (handled) {
                    sendGamepadState();
                }
            }
            return handled;
        }
    
        public void setDInputMapperType(byte dinputMapperType) {
            this.dinputMapperType = dinputMapperType;
        }
    
        public void setPreferredInputApi(PreferredInputApi preferredInputApi) {
            this.preferredInputApi = preferredInputApi;
        }
    
        public ExternalController getCurrentController() {
            return this.currentController;
        }
    }
  + app/src/main/java/com/winlator/xconnector/Client.java
    package com.winlator.xconnector;
    
    import java.io.IOException;
    import java.nio.ByteBuffer;
    import java.nio.ByteOrder;
    
    /* loaded from: classes.dex */
    public class Client {
        public final ClientSocket clientSocket;
        protected boolean connected;
        private final XConnectorEpoll connector;
        private XInputStream inputStream;
        private XOutputStream outputStream;
        protected Thread pollThread;
        protected int shutdownFd;
        private Object tag;
    
        public Client(XConnectorEpoll connector, ClientSocket clientSocket) {
            this.connector = connector;
            this.clientSocket = clientSocket;
        }
    
        public void createIOStreams() {
            if (this.inputStream != null || this.outputStream != null) {
                return;
            }
            int initialInputBufferCapacity = this.connector.getInitialInputBufferCapacity();
            int initialOutputBufferCapacity = this.connector.getInitialOutputBufferCapacity();
            if (initialInputBufferCapacity > 0) {
                XInputStream xInputStream = new XInputStream(this.clientSocket, initialInputBufferCapacity);
                this.inputStream = xInputStream;
                xInputStream.setByteOrder(ByteOrder.LITTLE_ENDIAN);
            }
            if (initialOutputBufferCapacity > 0) {
                XOutputStream xOutputStream = new XOutputStream(this.clientSocket, initialOutputBufferCapacity);
                this.outputStream = xOutputStream;
                xOutputStream.setByteOrder(ByteOrder.LITTLE_ENDIAN);
            }
        }
    
        public XInputStream getInputStream() {
            return this.inputStream;
        }
    
        public XOutputStream getOutputStream() {
            return this.outputStream;
        }
    
        public Object getTag() {
            return this.tag;
        }
    
        public void setTag(Object tag) {
            this.tag = tag;
        }
    
        protected void requestShutdown() {
            try {
                ByteBuffer data = ByteBuffer.allocateDirect(8);
                data.asLongBuffer().put(1L);
                new ClientSocket(this.shutdownFd).write(data);
            } catch (IOException e) {
            }
        }
    }
  + app/src/main/java/com/winlator/xconnector/ClientSocket.java
    package com.winlator.xconnector;
    
    import androidx.annotation.Keep;
    import java.io.IOException;
    import java.nio.ByteBuffer;
    import java.util.ArrayDeque;
    
    /* loaded from: classes.dex */
    public class ClientSocket {
        private final ArrayDeque<Integer> ancillaryFds = new ArrayDeque<>();
        public final int fd;
    
        private native int read(int i, ByteBuffer byteBuffer, int i2, int i3);
    
        private native int recvAncillaryMsg(int i, ByteBuffer byteBuffer, int i2, int i3);
    
        private native int sendAncillaryMsg(int i, ByteBuffer byteBuffer, int i2, int i3);
    
        private native int write(int i, ByteBuffer byteBuffer, int i2);
    
        static {
            System.loadLibrary("winlator");
        }
    
        public ClientSocket(int fd) {
            this.fd = fd;
        }
    
        public boolean hasAncillaryFds() {
            return !this.ancillaryFds.isEmpty();
        }
    
        public int getAncillaryFd() {
            if (hasAncillaryFds()) {
                return this.ancillaryFds.poll().intValue();
            }
            return -1;
        }
    
        @Keep
        public void addAncillaryFd(int ancillaryFd) {
            this.ancillaryFds.add(Integer.valueOf(ancillaryFd));
        }
    
        public int read(ByteBuffer data) throws IOException {
            int position = data.position();
            int bytesRead = read(this.fd, data, position, data.remaining());
            if (bytesRead > 0) {
                data.position(position + bytesRead);
                return bytesRead;
            }
            if (bytesRead == 0) {
                return -1;
            }
            throw new IOException("Failed to read data.");
        }
    
        public void write(ByteBuffer data) throws IOException {
            int bytesWritten = write(this.fd, data, data.limit());
            if (bytesWritten >= 0) {
                data.position(bytesWritten);
                return;
            }
            throw new IOException("Failed to write data.");
        }
    
        public int recvAncillaryMsg(ByteBuffer data) throws IOException {
            int position = data.position();
            int bytesRead = recvAncillaryMsg(this.fd, data, position, data.remaining());
            if (bytesRead > 0) {
                data.position(position + bytesRead);
                return bytesRead;
            }
            if (bytesRead == 0) {
                return -1;
            }
            throw new IOException("Failed to receive ancillary messages.");
        }
    
        public void sendAncillaryMsg(ByteBuffer data, int ancillaryFd) throws IOException {
            int bytesSent = sendAncillaryMsg(this.fd, data, data.limit(), ancillaryFd);
            if (bytesSent >= 0) {
                data.position(bytesSent);
                return;
            }
            throw new IOException("Failed to send ancillary messages.");
        }
    }
  + app/src/main/java/com/winlator/xconnector/ConnectionHandler.java
    package com.winlator.xconnector;
    
    /* loaded from: classes.dex */
    public interface ConnectionHandler {
        void handleConnectionShutdown(Client client);
    
        void handleNewConnection(Client client);
    }
  + app/src/main/java/com/winlator/xconnector/RequestHandler.java
    package com.winlator.xconnector;
    
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public interface RequestHandler {
        boolean handleRequest(Client client) throws IOException;
    }
  + app/src/main/java/com/winlator/xconnector/UnixSocketConfig.java
    package com.winlator.xconnector;
    
    import com.winlator.core.FileUtils;
    import java.io.File;
    
    /* loaded from: classes.dex */
    public class UnixSocketConfig {
        public final String path;
    
        private UnixSocketConfig(String path) {
            this.path = path;
        }
    
        public static UnixSocketConfig create(String rootPath, String relativePath) {
            File socketFile = new File(rootPath, relativePath);
            String dirname = FileUtils.getDirname(relativePath);
            if (dirname.lastIndexOf("/") > 0) {
                File socketDir = new File(rootPath, FileUtils.getDirname(relativePath));
                FileUtils.delete(socketDir);
                socketDir.mkdirs();
            } else {
                socketFile.delete();
            }
            return new UnixSocketConfig(socketFile.getPath());
        }
    }
  + app/src/main/java/com/winlator/xconnector/XConnectorEpoll.java
    package com.winlator.xconnector;
    
    import android.util.SparseArray;
    import androidx.annotation.Keep;
    import java.io.IOException;
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public class XConnectorEpoll implements Runnable {
        private final ConnectionHandler connectionHandler;
        private final int epollFd;
        private Thread epollThread;
        private final RequestHandler requestHandler;
        private final int serverFd;
        private final int shutdownFd;
        private boolean running = false;
        private boolean multithreadedClients = false;
        private boolean canReceiveAncillaryMessages = false;
        private boolean monitorClients = true;
        private int initialInputBufferCapacity = 128;
        private int initialOutputBufferCapacity = 128;
        private final SparseArray<Client> connectedClients = new SparseArray<>();
    
        private native boolean addFdToEpoll(int i, int i2);
    
        public static native void closeFd(int i);
    
        private native int createAFUnixSocket(String str);
    
        private native int createEpollFd();
    
        private native int createEventFd();
    
        private native boolean doEpollIndefinitely(int i, int i2, boolean z);
    
        private native void removeFdFromEpoll(int i, int i2);
    
        private native boolean waitForSocketRead(int i, int i2);
    
        static {
            System.loadLibrary("winlator");
        }
    
        public XConnectorEpoll(UnixSocketConfig socketConfig, ConnectionHandler connectionHandler, RequestHandler requestHandler) {
            this.connectionHandler = connectionHandler;
            this.requestHandler = requestHandler;
            int createAFUnixSocket = createAFUnixSocket(socketConfig.path);
            this.serverFd = createAFUnixSocket;
            if (createAFUnixSocket < 0) {
                throw new RuntimeException("Failed to create an AF_UNIX socket.");
            }
            int createEpollFd = createEpollFd();
            this.epollFd = createEpollFd;
            if (createEpollFd < 0) {
                closeFd(createAFUnixSocket);
                throw new RuntimeException("Failed to create epoll fd.");
            }
            if (!addFdToEpoll(createEpollFd, createAFUnixSocket)) {
                closeFd(createAFUnixSocket);
                closeFd(createEpollFd);
                throw new RuntimeException("Failed to add server fd to epoll.");
            }
            int createEventFd = createEventFd();
            this.shutdownFd = createEventFd;
            if (!addFdToEpoll(createEpollFd, createEventFd)) {
                closeFd(createAFUnixSocket);
                closeFd(createEventFd);
                closeFd(createEpollFd);
                throw new RuntimeException("Failed to add shutdown fd to epoll.");
            }
            this.epollThread = new Thread(this);
        }
    
        public synchronized void start() {
            Thread thread;
            if (!this.running && (thread = this.epollThread) != null) {
                this.running = true;
                thread.start();
            }
        }
    
        public synchronized void stop() {
            if (this.running && this.epollThread != null) {
                this.running = false;
                requestShutdown();
                while (this.epollThread.isAlive()) {
                    try {
                        this.epollThread.join();
                    } catch (InterruptedException e) {
                    }
                }
                this.epollThread = null;
            }
        }
    
        @Override // java.lang.Runnable
        public void run() {
            while (this.running) {
                if (!doEpollIndefinitely(this.epollFd, this.serverFd, !this.multithreadedClients && this.monitorClients)) {
                    break;
                }
            }
            shutdown();
        }
    
        @Keep
        private void handleNewConnection(int fd) {
            final Client client = new Client(this, new ClientSocket(fd));
            client.connected = true;
            if (this.multithreadedClients) {
                client.shutdownFd = createEventFd();
                Thread thread = new Thread(new Runnable() { // from class: com.winlator.xconnector.XConnectorEpoll$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        XConnectorEpoll.this.lambda$handleNewConnection$0(client);
                    }
                });
                client.pollThread = thread;
                thread.start();
            } else {
                this.connectionHandler.handleNewConnection(client);
            }
            this.connectedClients.put(fd, client);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$handleNewConnection$0(Client client) {
            this.connectionHandler.handleNewConnection(client);
            while (client.connected && waitForSocketRead(client.clientSocket.fd, client.shutdownFd)) {
            }
        }
    
        @Keep
        private void handleExistingConnection(int fd) {
            Client client = this.connectedClients.get(fd);
            if (client == null) {
                return;
            }
            XInputStream inputStream = client.getInputStream();
            try {
                if (inputStream != null) {
                    if (inputStream.readMoreData(this.canReceiveAncillaryMessages) > 0) {
                        int activePosition = 0;
                        while (this.running && this.requestHandler.handleRequest(client)) {
                            activePosition = inputStream.getActivePosition();
                        }
                        inputStream.setActivePosition(activePosition);
                        return;
                    }
                    killConnection(client);
                    return;
                }
                this.requestHandler.handleRequest(client);
            } catch (IOException e) {
                killConnection(client);
            }
        }
    
        public Client getClient(int fd) {
            return this.connectedClients.get(fd);
        }
    
        public void killConnection(Client client) {
            client.connected = false;
            this.connectionHandler.handleConnectionShutdown(client);
            if (this.multithreadedClients) {
                if (Thread.currentThread() != client.pollThread) {
                    client.requestShutdown();
                    while (client.pollThread.isAlive()) {
                        try {
                            client.pollThread.join();
                        } catch (InterruptedException e) {
                        }
                    }
                    client.pollThread = null;
                }
                closeFd(client.shutdownFd);
            } else {
                removeFdFromEpoll(this.epollFd, client.clientSocket.fd);
            }
            closeFd(client.clientSocket.fd);
            this.connectedClients.remove(client.clientSocket.fd);
        }
    
        private void shutdown() {
            while (this.connectedClients.size() > 0) {
                Client client = this.connectedClients.valueAt(r0.size() - 1);
                killConnection(client);
            }
            removeFdFromEpoll(this.epollFd, this.serverFd);
            removeFdFromEpoll(this.epollFd, this.shutdownFd);
            closeFd(this.serverFd);
            closeFd(this.shutdownFd);
            closeFd(this.epollFd);
        }
    
        public int getInitialInputBufferCapacity() {
            return this.initialInputBufferCapacity;
        }
    
        public void setInitialInputBufferCapacity(int initialInputBufferCapacity) {
            this.initialInputBufferCapacity = initialInputBufferCapacity;
        }
    
        public int getInitialOutputBufferCapacity() {
            return this.initialOutputBufferCapacity;
        }
    
        public void setInitialOutputBufferCapacity(int initialOutputBufferCapacity) {
            this.initialOutputBufferCapacity = initialOutputBufferCapacity;
        }
    
        public void setMultithreadedClients(boolean multithreadedClients) {
            this.multithreadedClients = multithreadedClients;
        }
    
        public void setCanReceiveAncillaryMessages(boolean canReceiveAncillaryMessages) {
            this.canReceiveAncillaryMessages = canReceiveAncillaryMessages;
        }
    
        private void requestShutdown() {
            try {
                ByteBuffer data = ByteBuffer.allocateDirect(8);
                data.asLongBuffer().put(1L);
                new ClientSocket(this.shutdownFd).write(data);
            } catch (IOException e) {
            }
        }
    }
  + app/src/main/java/com/winlator/xconnector/XInputStream.java
    package com.winlator.xconnector;
    
    import com.winlator.xserver.XServer;
    import java.io.IOException;
    import java.nio.ByteBuffer;
    import java.nio.ByteOrder;
    
    /* loaded from: classes.dex */
    public class XInputStream {
        private ByteBuffer activeBuffer;
        private ByteBuffer buffer;
        public final ClientSocket clientSocket;
    
        public XInputStream(ClientSocket clientSocket, int initialCapacity) {
            this.clientSocket = clientSocket;
            this.buffer = ByteBuffer.allocateDirect(initialCapacity);
        }
    
        public int readMoreData(boolean canReceiveAncillaryMessages) throws IOException {
            ByteBuffer byteBuffer = this.activeBuffer;
            if (byteBuffer != null) {
                if (!byteBuffer.hasRemaining()) {
                    this.buffer.clear();
                } else if (this.activeBuffer.position() > 0) {
                    int newLimit = this.buffer.position();
                    this.buffer.position(this.activeBuffer.position()).limit(newLimit);
                    this.buffer.compact();
                }
                this.activeBuffer = null;
            }
            growInputBufferIfNecessary();
            ClientSocket clientSocket = this.clientSocket;
            ByteBuffer byteBuffer2 = this.buffer;
            int bytesRead = canReceiveAncillaryMessages ? clientSocket.recvAncillaryMsg(byteBuffer2) : clientSocket.read(byteBuffer2);
            if (bytesRead > 0) {
                int position = this.buffer.position();
                this.buffer.flip();
                this.activeBuffer = this.buffer.slice().order(this.buffer.order());
                ByteBuffer byteBuffer3 = this.buffer;
                byteBuffer3.limit(byteBuffer3.capacity()).position(position);
            }
            return bytesRead;
        }
    
        public int getAncillaryFd() {
            return this.clientSocket.getAncillaryFd();
        }
    
        private void growInputBufferIfNecessary() {
            if (this.buffer.position() == this.buffer.capacity()) {
                ByteBuffer newBuffer = ByteBuffer.allocateDirect(this.buffer.capacity() * 2).order(this.buffer.order());
                this.buffer.rewind();
                newBuffer.put(this.buffer);
                this.buffer = newBuffer;
            }
        }
    
        public void setByteOrder(ByteOrder byteOrder) {
            this.buffer.order(byteOrder);
            ByteBuffer byteBuffer = this.activeBuffer;
            if (byteBuffer != null) {
                byteBuffer.order(byteOrder);
            }
        }
    
        public int getActivePosition() {
            return this.activeBuffer.position();
        }
    
        public void setActivePosition(int activePosition) {
            this.activeBuffer.position(activePosition);
        }
    
        public int available() {
            return this.activeBuffer.remaining();
        }
    
        public byte readByte() {
            return this.activeBuffer.get();
        }
    
        public int readUnsignedByte() {
            return Byte.toUnsignedInt(this.activeBuffer.get());
        }
    
        public short readShort() {
            return this.activeBuffer.getShort();
        }
    
        public int readUnsignedShort() {
            return Short.toUnsignedInt(this.activeBuffer.getShort());
        }
    
        public int readInt() {
            return this.activeBuffer.getInt();
        }
    
        public long readUnsignedInt() {
            return Integer.toUnsignedLong(this.activeBuffer.getInt());
        }
    
        public void read(byte[] result) {
            this.activeBuffer.get(result);
        }
    
        public ByteBuffer readByteBuffer(int length) {
            ByteBuffer newBuffer = this.activeBuffer.slice().order(this.activeBuffer.order());
            newBuffer.limit(length);
            ByteBuffer byteBuffer = this.activeBuffer;
            byteBuffer.position(byteBuffer.position() + length);
            return newBuffer;
        }
    
        public String readString8(int length) {
            byte[] bytes = new byte[length];
            read(bytes);
            String str = new String(bytes, XServer.LATIN1_CHARSET);
            if (((-length) & 3) > 0) {
                skip((-length) & 3);
            }
            return str;
        }
    
        public void skip(int length) {
            ByteBuffer byteBuffer = this.activeBuffer;
            byteBuffer.position(byteBuffer.position() + length);
        }
    }
  + app/src/main/java/com/winlator/xconnector/XOutputStream.java
    package com.winlator.xconnector;
    
    import com.winlator.xserver.XServer;
    import java.io.IOException;
    import java.nio.ByteBuffer;
    import java.nio.ByteOrder;
    import java.util.concurrent.locks.ReentrantLock;
    
    /* loaded from: classes.dex */
    public class XOutputStream {
        private static final byte[] ZERO = new byte[64];
        private ByteBuffer buffer;
        public final ClientSocket clientSocket;
        private final ReentrantLock lock = new ReentrantLock();
        private int ancillaryFd = -1;
    
        public XOutputStream(ClientSocket clientSocket, int initialCapacity) {
            this.clientSocket = clientSocket;
            this.buffer = ByteBuffer.allocateDirect(initialCapacity);
        }
    
        public void setByteOrder(ByteOrder byteOrder) {
            this.buffer.order(byteOrder);
        }
    
        public void setAncillaryFd(int ancillaryFd) {
            this.ancillaryFd = ancillaryFd;
        }
    
        public void writeByte(byte value) {
            ensureSpaceIsAvailable(1);
            this.buffer.put(value);
        }
    
        public void writeShort(short value) {
            ensureSpaceIsAvailable(2);
            this.buffer.putShort(value);
        }
    
        public void writeInt(int value) {
            ensureSpaceIsAvailable(4);
            this.buffer.putInt(value);
        }
    
        public void writeLong(long value) {
            ensureSpaceIsAvailable(8);
            this.buffer.putLong(value);
        }
    
        public void writeString8(String str) {
            byte[] bytes = str.getBytes(XServer.LATIN1_CHARSET);
            int length = (-str.length()) & 3;
            ensureSpaceIsAvailable(bytes.length + length);
            this.buffer.put(bytes);
            if (length > 0) {
                writePad(length);
            }
        }
    
        public void write(byte[] data) {
            write(data, 0, data.length);
        }
    
        public void write(byte[] data, int offset, int length) {
            ensureSpaceIsAvailable(length);
            this.buffer.put(data, offset, length);
        }
    
        public void write(ByteBuffer data) {
            ensureSpaceIsAvailable(data.remaining());
            this.buffer.put(data);
        }
    
        public void writePad(int length) {
            write(ZERO, 0, length);
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void flush() throws IOException {
            if (this.buffer.position() != 0) {
                this.buffer.flip();
                int i = this.ancillaryFd;
                if (i != -1) {
                    this.clientSocket.sendAncillaryMsg(this.buffer, i);
                    this.ancillaryFd = -1;
                } else {
                    this.clientSocket.write(this.buffer);
                }
                this.buffer.clear();
            }
        }
    
        public XStreamLock lock() {
            return new OutputStreamLock();
        }
    
        private void ensureSpaceIsAvailable(int length) {
            int position = this.buffer.position();
            if (this.buffer.capacity() - position >= length) {
                return;
            }
            ByteBuffer newBuffer = ByteBuffer.allocateDirect(this.buffer.capacity() + length).order(this.buffer.order());
            this.buffer.rewind();
            newBuffer.put(this.buffer).position(position);
            this.buffer = newBuffer;
        }
    
        private class OutputStreamLock implements XStreamLock {
            public OutputStreamLock() {
                XOutputStream.this.lock.lock();
            }
    
            @Override // com.winlator.xconnector.XStreamLock, java.lang.AutoCloseable
            public void close() throws IOException {
                try {
                    XOutputStream.this.flush();
                } finally {
                    XOutputStream.this.lock.unlock();
                }
            }
        }
    }
  + app/src/main/java/com/winlator/xconnector/XStreamLock.java
    package com.winlator.xconnector;
    
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public interface XStreamLock extends AutoCloseable {
        @Override // java.lang.AutoCloseable
        void close() throws IOException;
    }
  + app/src/main/java/com/winlator/xenvironment/EnvironmentComponent.java
    package com.winlator.xenvironment;
    
    /* loaded from: classes.dex */
    public abstract class EnvironmentComponent {
        protected XEnvironment environment;
    
        public abstract void start();
    
        public abstract void stop();
    }
  + app/src/main/java/com/winlator/xenvironment/RootFS.java
    package com.winlator.xenvironment;
    
    import android.content.Context;
    import com.winlator.core.FileUtils;
    import java.io.File;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class RootFS {
        private final File rootDir;
        private String winePath = "/opt/wine";
    
        private RootFS(File rootDir) {
            this.rootDir = rootDir;
        }
    
        public static RootFS find(Context context) {
            File legacyDir = new File(context.getFilesDir(), "imagefs");
            File rootDir = new File(context.getFilesDir(), "rootfs");
            if (legacyDir.isDirectory()) {
                legacyDir.renameTo(rootDir);
            }
            return new RootFS(rootDir);
        }
    
        public File getRootDir() {
            return this.rootDir;
        }
    
        public boolean isValid() {
            return this.rootDir.isDirectory() && getRFSVersionFile().exists();
        }
    
        public int getVersion() {
            File rfsVersionFile = getRFSVersionFile();
            if (rfsVersionFile.exists()) {
                return Integer.parseInt(FileUtils.readLines(rfsVersionFile).get(0));
            }
            return 0;
        }
    
        public void createRFSVersionFile(int version) {
            getImageInfoDir().mkdirs();
            File file = getRFSVersionFile();
            try {
                file.createNewFile();
                FileUtils.writeString(file, String.valueOf(version));
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    
        public String getWinePath() {
            return this.winePath;
        }
    
        public void setWinePath(String winePath) {
            this.winePath = FileUtils.toRelativePath(this.rootDir.getPath(), winePath);
        }
    
        private File getImageInfoDir() {
            return new File(this.rootDir, ".winlator");
        }
    
        public File getRFSVersionFile() {
            return new File(getImageInfoDir(), ".rfs_version");
        }
    
        public File getInstalledWineDir() {
            return new File(this.rootDir, "/opt/installed-wine");
        }
    
        public File getTmpDir() {
            return new File(this.rootDir, "/tmp");
        }
    
        public File getLibDir() {
            return new File(this.rootDir, "/usr/lib");
        }
    
        public String toString() {
            return this.rootDir.getPath();
        }
    
        public static String getDosUserCachePath() {
            return "Z:" + "/home/xuser/.cache".replace("/", "\\");
        }
    
        public static String getDosUserConfigPath() {
            return "Z:" + "/home/xuser/.config".replace("/", "\\");
        }
    }
  + app/src/main/java/com/winlator/xenvironment/RootFSInstaller.java
    package com.winlator.xenvironment;
    
    import android.content.Context;
    import com.winlator.MainActivity;
    import com.winlator.R;
    import com.winlator.SettingsFragment;
    import com.winlator.container.Container;
    import com.winlator.container.ContainerManager;
    import com.winlator.core.AppUtils;
    import com.winlator.core.DownloadProgressDialog;
    import com.winlator.core.FileUtils;
    import com.winlator.core.TarCompressorUtils;
    import com.winlator.core.WineInfo;
    import java.io.File;
    import java.util.Iterator;
    import java.util.concurrent.Executors;
    import java.util.concurrent.atomic.AtomicLong;
    
    /* loaded from: classes.dex */
    public abstract class RootFSInstaller {
        private static void resetContainerRFSVersions(Context context) {
            ContainerManager manager = new ContainerManager(context);
            Iterator<Container> it = manager.getContainers().iterator();
            while (it.hasNext()) {
                Container container = it.next();
                String rfsVersion = container.getExtra("rfsVersion");
                String wineVersion = container.getWineVersion();
                if (!rfsVersion.isEmpty() && WineInfo.isMainWineVersion(wineVersion) && Short.parseShort(rfsVersion) <= 5) {
                    container.putExtra("wineprefixNeedsUpdate", "t");
                }
                container.putExtra("rfsVersion", null);
                container.saveData();
            }
        }
    
        public static void install(final MainActivity activity) {
            AppUtils.keepScreenOn(activity);
            final RootFS rootFS = RootFS.find(activity);
            final File rootDir = rootFS.getRootDir();
            SettingsFragment.resetBox64Version(activity);
            final DownloadProgressDialog dialog = new DownloadProgressDialog(activity);
            dialog.show(R.string.installing_system_files);
            Executors.newSingleThreadExecutor().execute(new Runnable() { // from class: com.winlator.xenvironment.RootFSInstaller$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    RootFSInstaller.lambda$install$2(rootDir, activity, dialog, rootFS);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$install$2(File rootDir, final MainActivity activity, final DownloadProgressDialog dialog, RootFS rootFS) {
            clearRootDir(rootDir);
            final long contentLength = (long) (FileUtils.getSize(activity, "rootfs.txz") * 7.142857f);
            final AtomicLong totalSizeRef = new AtomicLong();
            boolean success = TarCompressorUtils.extract(TarCompressorUtils.Type.XZ, activity, "rootfs.txz", rootDir, new TarCompressorUtils.OnExtractFileListener() { // from class: com.winlator.xenvironment.RootFSInstaller$$ExternalSyntheticLambda0
                @Override // com.winlator.core.TarCompressorUtils.OnExtractFileListener
                public final File onExtractFile(File file, long j) {
                    File lambda$install$1;
                    lambda$install$1 = RootFSInstaller.lambda$install$1(totalSizeRef, contentLength, activity, dialog, file, j);
                    return lambda$install$1;
                }
            });
            if (success) {
                rootFS.createRFSVersionFile(14);
                resetContainerRFSVersions(activity);
            } else {
                AppUtils.showToast(activity, R.string.unable_to_install_system_files);
            }
            dialog.closeOnUiThread();
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ File lambda$install$1(AtomicLong totalSizeRef, long contentLength, MainActivity activity, final DownloadProgressDialog dialog, File file, long size) {
            if (size > 0) {
                long totalSize = totalSizeRef.addAndGet(size);
                final int progress = (int) ((totalSize / contentLength) * 100.0f);
                activity.runOnUiThread(new Runnable() { // from class: com.winlator.xenvironment.RootFSInstaller$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        DownloadProgressDialog.this.setProgress(progress);
                    }
                });
            }
            return file;
        }
    
        public static void installIfNeeded(MainActivity activity) {
            RootFS rootFS = RootFS.find(activity);
            if (!rootFS.isValid() || rootFS.getVersion() < 14) {
                install(activity);
            }
        }
    
        private static void clearOptDir(File optDir) {
            File[] files = optDir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (!file.getName().equals("installed-wine")) {
                        FileUtils.delete(file);
                    }
                }
            }
        }
    
        private static void clearRootDir(File rootDir) {
            if (rootDir.isDirectory()) {
                File[] files = rootDir.listFiles();
                if (files != null) {
                    for (File file : files) {
                        if (file.isDirectory()) {
                            String name = file.getName();
                            if (name.equals("home") || name.equals("opt")) {
                                if (name.equals("opt")) {
                                    clearOptDir(file);
                                }
                            }
                        }
                        FileUtils.delete(file);
                    }
                    return;
                }
                return;
            }
            rootDir.mkdirs();
        }
    }
  + app/src/main/java/com/winlator/xenvironment/XEnvironment.java
    package com.winlator.xenvironment;
    
    import android.content.Context;
    import com.winlator.core.FileUtils;
    import com.winlator.xenvironment.components.GuestProgramLauncherComponent;
    import java.io.File;
    import java.util.ArrayList;
    import java.util.Iterator;
    
    /* loaded from: classes.dex */
    public class XEnvironment implements Iterable<EnvironmentComponent> {
        private final ArrayList<EnvironmentComponent> components = new ArrayList<>();
        private final Context context;
        private final RootFS rootFS;
    
        public XEnvironment(Context context, RootFS rootFS) {
            this.context = context;
            this.rootFS = rootFS;
        }
    
        public Context getContext() {
            return this.context;
        }
    
        public RootFS getRootFS() {
            return this.rootFS;
        }
    
        public void addComponent(EnvironmentComponent environmentComponent) {
            environmentComponent.environment = this;
            this.components.add(environmentComponent);
        }
    
        public <T extends EnvironmentComponent> T getComponent(Class<T> componentClass) {
            Iterator<EnvironmentComponent> it = this.components.iterator();
            while (it.hasNext()) {
                T t = (T) it.next();
                if (t.getClass() == componentClass) {
                    return t;
                }
            }
            return null;
        }
    
        @Override // java.lang.Iterable
        public Iterator<EnvironmentComponent> iterator() {
            return this.components.iterator();
        }
    
        public File getTmpDir() {
            File tmpDir = new File(this.context.getFilesDir(), "tmp");
            if (!tmpDir.isDirectory()) {
                tmpDir.mkdirs();
                FileUtils.chmod(tmpDir, 505);
            }
            return tmpDir;
        }
    
        public void startEnvironmentComponents() {
            FileUtils.clear(getTmpDir());
            Iterator<EnvironmentComponent> it = iterator();
            while (it.hasNext()) {
                EnvironmentComponent environmentComponent = it.next();
                environmentComponent.start();
            }
        }
    
        public void stopEnvironmentComponents() {
            Iterator<EnvironmentComponent> it = iterator();
            while (it.hasNext()) {
                EnvironmentComponent environmentComponent = it.next();
                environmentComponent.stop();
            }
        }
    
        public void onPause() {
            GuestProgramLauncherComponent guestProgramLauncherComponent = (GuestProgramLauncherComponent) getComponent(GuestProgramLauncherComponent.class);
            if (guestProgramLauncherComponent != null) {
                guestProgramLauncherComponent.suspendProcess();
            }
        }
    
        public void onResume() {
            GuestProgramLauncherComponent guestProgramLauncherComponent = (GuestProgramLauncherComponent) getComponent(GuestProgramLauncherComponent.class);
            if (guestProgramLauncherComponent != null) {
                guestProgramLauncherComponent.resumeProcess();
            }
        }
    }
  + app/src/main/java/com/winlator/xenvironment/components/ALSAServerComponent.java
    package com.winlator.xenvironment.components;
    
    import com.winlator.alsaserver.ALSAClient;
    import com.winlator.alsaserver.ALSAClientConnectionHandler;
    import com.winlator.alsaserver.ALSARequestHandler;
    import com.winlator.xconnector.UnixSocketConfig;
    import com.winlator.xconnector.XConnectorEpoll;
    import com.winlator.xenvironment.EnvironmentComponent;
    
    /* loaded from: classes.dex */
    public class ALSAServerComponent extends EnvironmentComponent {
        private XConnectorEpoll connector;
        private final ALSAClient.Options options;
        private final UnixSocketConfig socketConfig;
    
        public ALSAServerComponent(UnixSocketConfig socketConfig, ALSAClient.Options options) {
            this.socketConfig = socketConfig;
            this.options = options;
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void start() {
            if (this.connector != null) {
                return;
            }
            ALSAClient.assignFramesPerBuffer(this.environment.getContext());
            XConnectorEpoll xConnectorEpoll = new XConnectorEpoll(this.socketConfig, new ALSAClientConnectionHandler(this.options), new ALSARequestHandler());
            this.connector = xConnectorEpoll;
            xConnectorEpoll.setMultithreadedClients(true);
            this.connector.start();
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void stop() {
            XConnectorEpoll xConnectorEpoll = this.connector;
            if (xConnectorEpoll != null) {
                xConnectorEpoll.stop();
                this.connector = null;
            }
        }
    }
  + app/src/main/java/com/winlator/xenvironment/components/GuestProgramLauncherComponent.java
    package com.winlator.xenvironment.components;
    
    import android.content.Context;
    import android.content.SharedPreferences;
    import android.os.Process;
    import androidx.preference.PreferenceManager;
    import com.winlator.box64.Box64PresetManager;
    import com.winlator.core.Callback;
    import com.winlator.core.EnvVars;
    import com.winlator.core.FileUtils;
    import com.winlator.core.InstallableComponents;
    import com.winlator.core.ProcessHelper;
    import com.winlator.widget.LogView;
    import com.winlator.xenvironment.EnvironmentComponent;
    import com.winlator.xenvironment.RootFS;
    import java.io.File;
    
    /* loaded from: classes.dex */
    public class GuestProgramLauncherComponent extends EnvironmentComponent {
        private String box64Preset = "COMPATIBILITY";
        private EnvVars envVars;
        private String guestExecutable;
        private Callback<Integer> terminationCallback;
        private static int pid = -1;
        private static final Object lock = new Object();
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void start() {
            synchronized (lock) {
                stop();
                extractBox64File();
                pid = execGuestProgram();
            }
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void stop() {
            synchronized (lock) {
                int i = pid;
                if (i != -1) {
                    Process.killProcess(i);
                    pid = -1;
                }
            }
        }
    
        public void setTerminationCallback(Callback<Integer> terminationCallback) {
            this.terminationCallback = terminationCallback;
        }
    
        public void setGuestExecutable(String guestExecutable) {
            this.guestExecutable = guestExecutable;
        }
    
        public void setEnvVars(EnvVars envVars) {
            this.envVars = envVars;
        }
    
        public void setBox64Preset(String box64Preset) {
            this.box64Preset = box64Preset;
        }
    
        private int execGuestProgram() {
            RootFS rootFS = this.environment.getRootFS();
            File rootDir = rootFS.getRootDir();
            EnvVars envVars = new EnvVars();
            addBox64EnvVars(envVars);
            envVars.put("HOME", rootDir + "/home/xuser");
            envVars.put("USER", "xuser");
            envVars.put("TMPDIR", rootDir + "/tmp");
            envVars.put("LC_ALL", "en_US.utf8");
            envVars.put("DISPLAY", ":0");
            envVars.put("PATH", rootDir + rootFS.getWinePath() + "/bin:" + rootDir + "/usr/local/bin:" + rootDir + "/usr/bin");
            envVars.put("LD_LIBRARY_PATH", rootFS.getLibDir().getPath());
            StringBuilder sb = new StringBuilder();
            sb.append(rootDir);
            sb.append("/lib/x86_64-linux-gnu");
            envVars.put("BOX64_LD_LIBRARY_PATH", sb.toString());
            envVars.put("ANDROID_SYSVSHM_SERVER", rootDir + "/tmp/.sysvshm/SM0");
            EnvVars envVars2 = this.envVars;
            if (envVars2 != null) {
                envVars.putAll(envVars2);
            }
            File shmDir = new File(rootDir, "/tmp/shm");
            if (!shmDir.isDirectory()) {
                shmDir.mkdirs();
            }
            String command = rootDir + "/usr/local/bin/box64 " + this.guestExecutable;
            return ProcessHelper.exec(command, envVars, rootDir, new Callback() { // from class: com.winlator.xenvironment.components.GuestProgramLauncherComponent$$ExternalSyntheticLambda0
                @Override // com.winlator.core.Callback
                public final void call(Object obj) {
                    GuestProgramLauncherComponent.this.lambda$execGuestProgram$0((Integer) obj);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$execGuestProgram$0(Integer status) {
            synchronized (lock) {
                pid = -1;
            }
            Callback<Integer> callback = this.terminationCallback;
            if (callback != null) {
                callback.call(status);
            }
        }
    
        private void extractBox64File() {
            Context context = this.environment.getContext();
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
            String box64Version = preferences.getString("box64_version", "0.3.4");
            String currentBox64Version = preferences.getString("current_box64_version", "");
            if (!box64Version.equals(currentBox64Version)) {
                InstallableComponents.extractFile(InstallableComponents.Type.BOX64, context, box64Version, "0.3.4");
                preferences.edit().putString("current_box64_version", box64Version).apply();
            }
        }
    
        private void addBox64EnvVars(EnvVars envVars) {
            File parent;
            Context context = this.environment.getContext();
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
            int box64Logs = preferences.getInt("box64_logs", 0);
            boolean saveToFile = preferences.getBoolean("save_logs_to_file", false);
            envVars.put("BOX64_NOBANNER", box64Logs >= 1 ? "0" : "1");
            envVars.put("BOX64_DYNAREC", "1");
            envVars.put("BOX64_DYNAREC_NATIVEFLAGS", "0");
            envVars.put("BOX64_DYNAREC_WEAKBARRIER", "0");
            envVars.put("BOX64_UNITYPLAYER", "0");
            if (box64Logs >= 1) {
                envVars.put("BOX64_LOG", "1");
                envVars.put("BOX64_DYNAREC_MISSING", "1");
                if (box64Logs == 2) {
                    envVars.put("BOX64_SHOWSEGV", "1");
                    envVars.put("BOX64_DLSYM_ERROR", "1");
                    envVars.put("BOX64_TRACE_FILE", "stderr");
                    if (saveToFile && (parent = new File(preferences.getString("log_file", LogView.getLogFile().getPath())).getParentFile()) != null && parent.isDirectory()) {
                        File traceDir = new File(parent, "trace");
                        if (!traceDir.isDirectory()) {
                            traceDir.mkdirs();
                        }
                        FileUtils.clear(traceDir);
                        envVars.put("BOX64_TRACE_FILE", traceDir + "/box64-%pid.txt");
                    }
                }
            }
            envVars.putAll(Box64PresetManager.getEnvVars(context, this.box64Preset));
            envVars.put("BOX64_X11GLX", "1");
            envVars.put("BOX64_NORCFILES", "1");
        }
    
        public void suspendProcess() {
            synchronized (lock) {
                int i = pid;
                if (i != -1) {
                    ProcessHelper.suspendProcess(i);
                }
            }
        }
    
        public void resumeProcess() {
            synchronized (lock) {
                int i = pid;
                if (i != -1) {
                    ProcessHelper.resumeProcess(i);
                }
            }
        }
    }
  + app/src/main/java/com/winlator/xenvironment/components/NetworkInfoUpdateComponent.java
    package com.winlator.xenvironment.components;
    
    import android.content.BroadcastReceiver;
    import android.content.Context;
    import android.content.Intent;
    import android.content.IntentFilter;
    import android.net.ConnectivityManager;
    import android.net.NetworkInfo;
    import com.winlator.core.FileUtils;
    import com.winlator.core.NetworkHelper;
    import com.winlator.xenvironment.EnvironmentComponent;
    import java.io.File;
    
    /* loaded from: classes.dex */
    public class NetworkInfoUpdateComponent extends EnvironmentComponent {
        private BroadcastReceiver broadcastReceiver;
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void start() {
            Context context = this.environment.getContext();
            final ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService("connectivity");
            final NetworkHelper networkHelper = new NetworkHelper(context);
            updateAdapterInfoFile(0, 0, 0, false);
            updateEtcHostsFile(0);
            this.broadcastReceiver = new BroadcastReceiver() { // from class: com.winlator.xenvironment.components.NetworkInfoUpdateComponent.1
                @Override // android.content.BroadcastReceiver
                public void onReceive(Context context2, Intent intent) {
                    int ipAddress = 0;
                    int netmask = 0;
                    int gateway = 0;
                    NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
                    if (networkInfo != null && networkInfo.isAvailable() && networkInfo.isConnected() && networkInfo.getType() == 1) {
                        ipAddress = networkHelper.getIpAddress();
                        netmask = networkHelper.getNetmask();
                        gateway = networkHelper.getGateway();
                    }
                    NetworkInfoUpdateComponent.this.updateAdapterInfoFile(ipAddress, netmask, gateway, true);
                    NetworkInfoUpdateComponent.this.updateEtcHostsFile(ipAddress);
                }
            };
            IntentFilter filter = new IntentFilter();
            filter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
            context.registerReceiver(this.broadcastReceiver, filter);
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void stop() {
            if (this.broadcastReceiver != null) {
                this.environment.getContext().unregisterReceiver(this.broadcastReceiver);
                this.broadcastReceiver = null;
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void updateAdapterInfoFile(int ipAddress, int netmask, int gateway, boolean active) {
            File file = new File(this.environment.getRootFS().getTmpDir(), "adapterinfo");
            CharSequence[] charSequenceArr = new CharSequence[5];
            charSequenceArr[0] = "Android Wi-Fi Adapter";
            charSequenceArr[1] = NetworkHelper.formatIpAddress(ipAddress);
            charSequenceArr[2] = NetworkHelper.formatNetmask(netmask);
            charSequenceArr[3] = NetworkHelper.formatIpAddress(gateway);
            charSequenceArr[4] = active ? "1" : "0";
            FileUtils.writeString(file, String.join(",", charSequenceArr));
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public void updateEtcHostsFile(int ipAddress) {
            String ip = ipAddress != 0 ? NetworkHelper.formatIpAddress(ipAddress) : "127.0.0.1";
            File file = new File(this.environment.getRootFS().getRootDir(), "etc/hosts");
            FileUtils.writeString(file, ip + "\tlocalhost\n");
        }
    }
  + app/src/main/java/com/winlator/xenvironment/components/PulseAudioComponent.java
    package com.winlator.xenvironment.components;
    
    import android.content.Context;
    import android.os.Process;
    import com.winlator.core.EnvVars;
    import com.winlator.core.FileUtils;
    import com.winlator.core.ProcessHelper;
    import com.winlator.xconnector.UnixSocketConfig;
    import com.winlator.xenvironment.EnvironmentComponent;
    import java.io.File;
    
    /* loaded from: classes.dex */
    public class PulseAudioComponent extends EnvironmentComponent {
        private final UnixSocketConfig socketConfig;
        private static int pid = -1;
        private static final Object lock = new Object();
        private float volume = 1.0f;
        private byte performanceMode = 1;
    
        public PulseAudioComponent(UnixSocketConfig socketConfig) {
            this.socketConfig = socketConfig;
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void start() {
            synchronized (lock) {
                stop();
                pid = execPulseAudio();
            }
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void stop() {
            synchronized (lock) {
                int i = pid;
                if (i != -1) {
                    Process.killProcess(i);
                    pid = -1;
                }
            }
        }
    
        public void setVolume(float volume) {
            this.volume = volume;
        }
    
        public void setPerformanceMode(int performanceMode) {
            this.performanceMode = (byte) performanceMode;
        }
    
        private int execPulseAudio() {
            Context context = this.environment.getContext();
            String nativeLibraryDir = context.getApplicationInfo().nativeLibraryDir;
            File workingDir = new File(context.getFilesDir(), "/pulseaudio");
            if (!workingDir.isDirectory()) {
                workingDir.mkdirs();
                FileUtils.chmod(workingDir, 505);
            }
            File configFile = new File(workingDir, "default.pa");
            FileUtils.writeString(configFile, String.join("\n", "load-module module-native-protocol-unix auth-anonymous=1 auth-cookie-enabled=0 socket=\"" + this.socketConfig.path + "\"", "load-module module-aaudio-sink volume=" + this.volume + " performance_mode=" + ((int) this.performanceMode), "set-default-sink AAudioSink"));
            File modulesDir = new File(workingDir, "modules");
            EnvVars envVars = new EnvVars();
            envVars.put("LD_LIBRARY_PATH", "/system/lib64:" + nativeLibraryDir + ":" + modulesDir);
            envVars.put("HOME", workingDir);
            envVars.put("TMPDIR", this.environment.getTmpDir());
            String command = nativeLibraryDir + "/libpulseaudio.so";
            return ProcessHelper.exec(((((((command + " --system=false") + " --disable-shm=true") + " --fail=false") + " -n --file=default.pa") + " --daemonize=false") + " --use-pid-file=false") + " --exit-idle-time=-1", envVars, workingDir);
        }
    }
  + app/src/main/java/com/winlator/xenvironment/components/SysVSharedMemoryComponent.java
    package com.winlator.xenvironment.components;
    
    import com.winlator.sysvshm.SysVSHMConnectionHandler;
    import com.winlator.sysvshm.SysVSHMRequestHandler;
    import com.winlator.sysvshm.SysVSharedMemory;
    import com.winlator.xconnector.UnixSocketConfig;
    import com.winlator.xconnector.XConnectorEpoll;
    import com.winlator.xenvironment.EnvironmentComponent;
    import com.winlator.xserver.SHMSegmentManager;
    import com.winlator.xserver.XServer;
    
    /* loaded from: classes.dex */
    public class SysVSharedMemoryComponent extends EnvironmentComponent {
        private XConnectorEpoll connector;
        public final UnixSocketConfig socketConfig;
        private SysVSharedMemory sysVSharedMemory;
        private final XServer xServer;
    
        public SysVSharedMemoryComponent(XServer xServer, UnixSocketConfig socketConfig) {
            this.xServer = xServer;
            this.socketConfig = socketConfig;
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void start() {
            if (this.connector != null) {
                return;
            }
            this.sysVSharedMemory = new SysVSharedMemory();
            XConnectorEpoll xConnectorEpoll = new XConnectorEpoll(this.socketConfig, new SysVSHMConnectionHandler(this.sysVSharedMemory), new SysVSHMRequestHandler());
            this.connector = xConnectorEpoll;
            xConnectorEpoll.start();
            this.xServer.setSHMSegmentManager(new SHMSegmentManager(this.sysVSharedMemory));
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void stop() {
            XConnectorEpoll xConnectorEpoll = this.connector;
            if (xConnectorEpoll != null) {
                xConnectorEpoll.stop();
                this.connector = null;
            }
            this.sysVSharedMemory.deleteAll();
        }
    }
  + app/src/main/java/com/winlator/xenvironment/components/VirGLRendererComponent.java
    package com.winlator.xenvironment.components;
    
    import androidx.annotation.Keep;
    import com.winlator.renderer.GLRenderer;
    import com.winlator.renderer.Texture;
    import com.winlator.xconnector.Client;
    import com.winlator.xconnector.ConnectionHandler;
    import com.winlator.xconnector.RequestHandler;
    import com.winlator.xconnector.UnixSocketConfig;
    import com.winlator.xconnector.XConnectorEpoll;
    import com.winlator.xenvironment.EnvironmentComponent;
    import com.winlator.xserver.Drawable;
    import com.winlator.xserver.XServer;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class VirGLRendererComponent extends EnvironmentComponent implements ConnectionHandler, RequestHandler {
        private XConnectorEpoll connector;
        private long sharedEGLContextPtr;
        private final UnixSocketConfig socketConfig;
        private final XServer xServer;
    
        private native void destroyClient(long j);
    
        private native long getCurrentEGLContextPtr();
    
        private native long handleNewConnection(int i);
    
        private native void handleRequest(long j);
    
        static {
            System.loadLibrary("virglrenderer");
        }
    
        public VirGLRendererComponent(XServer xServer, UnixSocketConfig socketConfig) {
            this.xServer = xServer;
            this.socketConfig = socketConfig;
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void start() {
            if (this.connector != null) {
                return;
            }
            XConnectorEpoll xConnectorEpoll = new XConnectorEpoll(this.socketConfig, this, this);
            this.connector = xConnectorEpoll;
            xConnectorEpoll.start();
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void stop() {
            XConnectorEpoll xConnectorEpoll = this.connector;
            if (xConnectorEpoll != null) {
                xConnectorEpoll.stop();
                this.connector = null;
            }
        }
    
        @Keep
        private void killConnection(int fd) {
            XConnectorEpoll xConnectorEpoll = this.connector;
            xConnectorEpoll.killConnection(xConnectorEpoll.getClient(fd));
        }
    
        @Keep
        private long getSharedEGLContext() {
            long j = this.sharedEGLContextPtr;
            if (j != 0) {
                return j;
            }
            final Thread thread = Thread.currentThread();
            try {
                GLRenderer renderer = this.xServer.getRenderer();
                renderer.xServerView.queueEvent(new Runnable() { // from class: com.winlator.xenvironment.components.VirGLRendererComponent$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        VirGLRendererComponent.this.lambda$getSharedEGLContext$0(thread);
                    }
                });
                synchronized (thread) {
                    thread.wait();
                }
                return this.sharedEGLContextPtr;
            } catch (Exception e) {
                return 0L;
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$getSharedEGLContext$0(Thread thread) {
            this.sharedEGLContextPtr = getCurrentEGLContextPtr();
            synchronized (thread) {
                thread.notify();
            }
        }
    
        @Override // com.winlator.xconnector.ConnectionHandler
        public void handleConnectionShutdown(Client client) {
            long clientPtr = ((Long) client.getTag()).longValue();
            destroyClient(clientPtr);
        }
    
        @Override // com.winlator.xconnector.ConnectionHandler
        public void handleNewConnection(Client client) {
            getSharedEGLContext();
            long clientPtr = handleNewConnection(client.clientSocket.fd);
            client.setTag(Long.valueOf(clientPtr));
        }
    
        @Override // com.winlator.xconnector.RequestHandler
        public boolean handleRequest(Client client) throws IOException {
            long clientPtr = ((Long) client.getTag()).longValue();
            handleRequest(clientPtr);
            return true;
        }
    
        @Keep
        private void flushFrontbuffer(int drawableId, int framebuffer) {
            Drawable drawable = this.xServer.drawableManager.getDrawable(drawableId);
            if (drawable == null) {
                return;
            }
            synchronized (drawable.renderLock) {
                drawable.setData(null);
                Texture texture = drawable.getTexture();
                texture.copyFromFramebuffer(framebuffer, drawable.width, drawable.height);
            }
            Runnable onDrawListener = drawable.getOnDrawListener();
            if (onDrawListener != null) {
                onDrawListener.run();
            }
        }
    }
  + app/src/main/java/com/winlator/xenvironment/components/VortekRendererComponent$$ExternalSyntheticLambda0.java
    package com.winlator.xenvironment.components;
    
    import com.winlator.renderer.Texture;
    
    /* compiled from: R8$$SyntheticClass */
    /* loaded from: classes.dex */
    public final /* synthetic */ class VortekRendererComponent$$ExternalSyntheticLambda0 implements Runnable {
        public final /* synthetic */ Texture f$0;
    
        @Override // java.lang.Runnable
        public final void run() {
            this.f$0.destroy();
        }
    }
  + app/src/main/java/com/winlator/xenvironment/components/VortekRendererComponent.java
    package com.winlator.xenvironment.components;
    
    import androidx.annotation.Keep;
    import com.winlator.contentdialog.VortekConfigDialog;
    import com.winlator.core.GPUHelper;
    import com.winlator.core.KeyValueSet;
    import com.winlator.renderer.GPUImage;
    import com.winlator.renderer.Texture;
    import com.winlator.widget.XServerView;
    import com.winlator.xconnector.Client;
    import com.winlator.xconnector.ConnectionHandler;
    import com.winlator.xconnector.RequestHandler;
    import com.winlator.xconnector.UnixSocketConfig;
    import com.winlator.xconnector.XConnectorEpoll;
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xenvironment.EnvironmentComponent;
    import com.winlator.xserver.Drawable;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.XServer;
    import java.io.IOException;
    import java.util.Objects;
    
    /* loaded from: classes.dex */
    public class VortekRendererComponent extends EnvironmentComponent implements ConnectionHandler, RequestHandler {
        public static final int VK_MAX_VERSION = GPUHelper.vkMakeVersion(1, 3, 128);
        private XConnectorEpoll connector;
        private final Options options;
        private final UnixSocketConfig socketConfig;
        private final XServer xServer;
    
        private native long createVkContext(int i, Options options);
    
        private native void destroyVkContext(long j);
    
        static {
            System.loadLibrary("vortekrenderer");
        }
    
        public static class Options {
            public int vkMaxVersion = VortekRendererComponent.VK_MAX_VERSION;
            public int maxDeviceMemory = 4096;
            public String[] exposedDeviceExtensions = null;
    
            public static Options fromKeyValueSet(KeyValueSet config) {
                if (config == null || config.isEmpty()) {
                    return new Options();
                }
                Options options = new Options();
                String exposedDeviceExtensions = config.get("exposedDeviceExtensions", "all");
                if (!exposedDeviceExtensions.isEmpty() && !exposedDeviceExtensions.equals("all")) {
                    options.exposedDeviceExtensions = exposedDeviceExtensions.split("\\|");
                }
                String str = VortekConfigDialog.DEFAULT_VK_MAX_VERSION;
                String vkMaxVersion = config.get("vkMaxVersion", str);
                if (!vkMaxVersion.equals(str)) {
                    String[] parts = vkMaxVersion.split("\\.");
                    options.vkMaxVersion = GPUHelper.vkMakeVersion(Integer.parseInt(parts[0]), Integer.parseInt(parts[1]), 128);
                }
                options.maxDeviceMemory = config.getInt("maxDeviceMemory", 4096);
                return options;
            }
        }
    
        public VortekRendererComponent(XServer xServer, UnixSocketConfig socketConfig, Options options) {
            this.xServer = xServer;
            this.socketConfig = socketConfig;
            this.options = options;
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void start() {
            if (this.connector != null) {
                return;
            }
            XConnectorEpoll xConnectorEpoll = new XConnectorEpoll(this.socketConfig, this, this);
            this.connector = xConnectorEpoll;
            xConnectorEpoll.setInitialInputBufferCapacity(1);
            this.connector.setInitialOutputBufferCapacity(0);
            this.connector.start();
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void stop() {
            XConnectorEpoll xConnectorEpoll = this.connector;
            if (xConnectorEpoll != null) {
                xConnectorEpoll.stop();
                this.connector = null;
            }
        }
    
        @Keep
        private int getWindowWidth(int windowId) {
            Window window = this.xServer.windowManager.getWindow(windowId);
            if (window != null) {
                return window.getWidth();
            }
            return 0;
        }
    
        @Keep
        private int getWindowHeight(int windowId) {
            Window window = this.xServer.windowManager.getWindow(windowId);
            if (window != null) {
                return window.getHeight();
            }
            return 0;
        }
    
        @Keep
        private long getWindowHardwareBuffer(int windowId) {
            Window window = this.xServer.windowManager.getWindow(windowId);
            if (window != null) {
                Drawable drawable = window.getContent();
                Texture texture = drawable.getTexture();
                if (!(texture instanceof GPUImage)) {
                    XServerView xServerView = this.xServer.getRenderer().xServerView;
                    Objects.requireNonNull(texture);
                    xServerView.queueEvent(new VortekRendererComponent$$ExternalSyntheticLambda0(texture));
                    drawable.setTexture(new GPUImage(drawable.width, drawable.height, false, false));
                }
                return ((GPUImage) drawable.getTexture()).getHardwareBufferPtr();
            }
            return 0L;
        }
    
        @Keep
        private void updateWindowContent(int windowId) {
            Window window = this.xServer.windowManager.getWindow(windowId);
            if (window != null) {
                Drawable drawable = window.getContent();
                synchronized (drawable.renderLock) {
                    drawable.forceUpdate();
                }
            }
        }
    
        @Override // com.winlator.xconnector.ConnectionHandler
        public void handleConnectionShutdown(Client client) {
            if (client.getTag() != null) {
                long contextPtr = ((Long) client.getTag()).longValue();
                destroyVkContext(contextPtr);
            }
        }
    
        @Override // com.winlator.xconnector.ConnectionHandler
        public void handleNewConnection(Client client) {
            client.createIOStreams();
        }
    
        @Override // com.winlator.xconnector.RequestHandler
        public boolean handleRequest(Client client) throws IOException {
            XInputStream inputStream = client.getInputStream();
            if (inputStream.available() < 1) {
                return false;
            }
            byte requestCode = inputStream.readByte();
            if (requestCode == 1) {
                long contextPtr = createVkContext(client.clientSocket.fd, this.options);
                if (contextPtr > 0) {
                    client.setTag(Long.valueOf(contextPtr));
                } else {
                    this.connector.killConnection(client);
                }
            }
            return true;
        }
    }
  + app/src/main/java/com/winlator/xenvironment/components/XServerComponent.java
    package com.winlator.xenvironment.components;
    
    import com.winlator.xconnector.UnixSocketConfig;
    import com.winlator.xconnector.XConnectorEpoll;
    import com.winlator.xenvironment.EnvironmentComponent;
    import com.winlator.xserver.XClientConnectionHandler;
    import com.winlator.xserver.XClientRequestHandler;
    import com.winlator.xserver.XServer;
    
    /* loaded from: classes.dex */
    public class XServerComponent extends EnvironmentComponent {
        private XConnectorEpoll connector;
        private final UnixSocketConfig socketConfig;
        private final XServer xServer;
    
        public XServerComponent(XServer xServer, UnixSocketConfig socketConfig) {
            this.xServer = xServer;
            this.socketConfig = socketConfig;
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void start() {
            if (this.connector != null) {
                return;
            }
            XConnectorEpoll xConnectorEpoll = new XConnectorEpoll(this.socketConfig, new XClientConnectionHandler(this.xServer), new XClientRequestHandler());
            this.connector = xConnectorEpoll;
            xConnectorEpoll.setInitialInputBufferCapacity(262144);
            this.connector.setCanReceiveAncillaryMessages(true);
            this.connector.start();
        }
    
        @Override // com.winlator.xenvironment.EnvironmentComponent
        public void stop() {
            XConnectorEpoll xConnectorEpoll = this.connector;
            if (xConnectorEpoll != null) {
                xConnectorEpoll.stop();
                this.connector = null;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/Atom.java
    package com.winlator.xserver;
    
    import java.util.ArrayList;
    import java.util.Arrays;
    
    /* loaded from: classes.dex */
    public abstract class Atom {
        private static final ArrayList<String> atoms = new ArrayList<>(Arrays.asList(null, "PRIMARY", "SECONDARY", "ARC", "ATOM", "BITMAP", "CARDINAL", "COLORMAP", "CURSOR", "CUT_BUFFER0", "CUT_BUFFER1", "CUT_BUFFER2", "CUT_BUFFER3", "CUT_BUFFER4", "CUT_BUFFER5", "CUT_BUFFER6", "CUT_BUFFER7", "DRAWABLE", "FONT", "INTEGER", "PIXMAP", "POINT", "RECTANGLE", "RESOURCE_MANAGER", "RGB_COLOR_MAP", "RGB_BEST_MAP", "RGB_BLUE_MAP", "RGB_DEFAULT_MAP", "RGB_GRAY_MAP", "RGB_GREEN_MAP", "RGB_RED_MAP", "STRING", "VISUALID", "WINDOW", "WM_COMMAND", "WM_HINTS", "WM_CLIENT_MACHINE", "WM_ICON_NAME", "WM_ICON_SIZE", "WM_NAME", "WM_NORMAL_HINTS", "WM_SIZE_HINTS", "WM_ZOOM_HINTS", "MIN_SPACE", "NORM_SPACE", "MAX_SPACE", "END_SPACE", "SUPERSC.LPT_X", "SUPERSC.LPT_Y", "SUBSC.LPT_X", "SUBSC.LPT_Y", "UNDERLINE_POSITION", "UNDERLINE_THICKNESS", "STRIKEOUT_ASCENT", "STRIKEOUT_DESCENT", "ITALIC_ANGLE", "X_HEIGHT", "QUAD_WIDTH", "WEIGHT", "POINT_SIZE", "RESOLUTION", "COPYRIGHT", "NOTICE", "FONT_NAME", "FAMILY_NAME", "FULL_NAME", "CAP_HEIGHT", "WM_CLASS", "WM_TRANSIENT_FOR", "_MOTIF_WM_HINTS", "_NET_WM_PID", "_NET_WM_WINDOW_TYPE", "_NET_WM_HWND", "_NET_WM_WOW64", "_NET_WM_SURFACE"));
    
        public static synchronized String getName(int id) {
            String str;
            synchronized (Atom.class) {
                str = atoms.get(id);
            }
            return str;
        }
    
        public static synchronized int getId(String name) {
            synchronized (Atom.class) {
                if (name == null) {
                    return 0;
                }
                int i = 0;
                while (true) {
                    ArrayList<String> arrayList = atoms;
                    if (i >= arrayList.size()) {
                        return -1;
                    }
                    if (name.equals(arrayList.get(i))) {
                        return i;
                    }
                    i++;
                }
            }
        }
    
        public static synchronized int internAtom(String name) {
            int id;
            synchronized (Atom.class) {
                id = getId(name);
                if (id == -1) {
                    ArrayList<String> arrayList = atoms;
                    id = arrayList.size();
                    arrayList.add(name);
                }
            }
            return id;
        }
    
        public static synchronized boolean isValid(int id) {
            boolean z;
            synchronized (Atom.class) {
                if (id > 0) {
                    z = id < atoms.size();
                }
            }
            return z;
        }
    }
  + app/src/main/java/com/winlator/xserver/Bitmask.java
    package com.winlator.xserver;
    
    import java.util.Iterator;
    
    /* loaded from: classes.dex */
    public class Bitmask implements Iterable<Integer> {
        private int bits;
    
        public Bitmask() {
            this.bits = 0;
        }
    
        public Bitmask(int bits) {
            this.bits = 0;
            this.bits = bits;
        }
    
        public boolean isSet(int flag) {
            return (this.bits & flag) != 0;
        }
    
        public boolean intersects(Bitmask mask) {
            return (mask.bits & this.bits) != 0;
        }
    
        public void set(int flag) {
            this.bits |= flag;
        }
    
        public void set(int flag, boolean value) {
            if (value) {
                set(flag);
            } else {
                unset(flag);
            }
        }
    
        public void unset(int flag) {
            this.bits &= ~flag;
        }
    
        public boolean isEmpty() {
            return this.bits == 0;
        }
    
        public int getBits() {
            return this.bits;
        }
    
        public void join(Bitmask mask) {
            this.bits = mask.bits | this.bits;
        }
    
        @Override // java.lang.Iterable
        public Iterator<Integer> iterator() {
            final int[] bits = {this.bits};
            return new Iterator<Integer>() { // from class: com.winlator.xserver.Bitmask.1
                @Override // java.util.Iterator
                public boolean hasNext() {
                    return bits[0] != 0;
                }
    
                /* JADX WARN: Can't rename method to resolve collision */
                @Override // java.util.Iterator
                public Integer next() {
                    int index = Integer.lowestOneBit(bits[0]);
                    int[] iArr = bits;
                    iArr[0] = iArr[0] & (~index);
                    return Integer.valueOf(index);
                }
            };
        }
    
        public int hashCode() {
            return this.bits;
        }
    
        public String toString() {
            return String.valueOf(this.bits);
        }
    }
  + app/src/main/java/com/winlator/xserver/Cursor.java
    package com.winlator.xserver;
    
    /* loaded from: classes.dex */
    public class Cursor extends XResource {
        public final Drawable cursorImage;
        public final int hotSpotX;
        public final int hotSpotY;
        public final Drawable maskImage;
        public final Drawable sourceImage;
        private boolean visible;
    
        public Cursor(int id, int hotSpotX, int hotSpotY, Drawable cursorImage, Drawable sourceImage, Drawable maskImage) {
            super(id);
            this.visible = true;
            this.hotSpotX = hotSpotX;
            this.hotSpotY = hotSpotY;
            this.cursorImage = cursorImage;
            this.sourceImage = sourceImage;
            this.maskImage = maskImage;
        }
    
        public boolean isVisible() {
            return this.visible;
        }
    
        public void setVisible(boolean visible) {
            this.visible = visible;
        }
    }
  + app/src/main/java/com/winlator/xserver/CursorManager.java
    package com.winlator.xserver;
    
    import android.util.SparseArray;
    import java.nio.IntBuffer;
    
    /* loaded from: classes.dex */
    public class CursorManager extends XResourceManager {
        private final SparseArray<Cursor> cursors = new SparseArray<>();
        private final DrawableManager drawableManager;
    
        public CursorManager(DrawableManager drawableManager) {
            this.drawableManager = drawableManager;
        }
    
        public Cursor getCursor(int id) {
            return this.cursors.get(id);
        }
    
        public Cursor createCursor(int id, short x, short y, Pixmap sourcePixmap, Pixmap maskPixmap) {
            if (this.cursors.indexOfKey(id) >= 0) {
                return null;
            }
            DrawableManager drawableManager = this.drawableManager;
            Drawable drawable = sourcePixmap.drawable;
            Drawable drawable2 = drawableManager.createDrawable(0, drawable.width, drawable.height, drawable.visual);
            Cursor cursor = new Cursor(id, x, y, drawable2, sourcePixmap.drawable, maskPixmap != null ? maskPixmap.drawable : null);
            this.cursors.put(id, cursor);
            triggerOnCreateResourceListener(cursor);
            return cursor;
        }
    
        public void freeCursor(int id) {
            triggerOnFreeResourceListener(this.cursors.get(id));
            this.cursors.remove(id);
        }
    
        private static boolean isEmptyMaskImage(Drawable maskImage) {
            IntBuffer maskData = maskImage.getData().asIntBuffer();
            for (int i = 0; i < maskData.capacity(); i++) {
                if (maskData.get(i) != 0) {
                    return false;
                }
            }
            return true;
        }
    
        public void recolorCursor(Cursor cursor, byte foreRed, byte foreGreen, byte foreBlue, byte backRed, byte backGreen, byte backBlue) {
            Drawable drawable = cursor.maskImage;
            if (drawable != null) {
                boolean visible = !isEmptyMaskImage(drawable);
                cursor.setVisible(visible);
                if (visible) {
                    cursor.cursorImage.drawAlphaMaskedBitmap(foreRed, foreGreen, foreBlue, backRed, backGreen, backBlue, cursor.sourceImage, cursor.maskImage);
                }
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/Decoration.java
    package com.winlator.xserver;
    
    /* loaded from: classes.dex */
    public enum Decoration {
        ALL,
        BORDER,
        RESIZEH,
        TITLE,
        MENU,
        MINIMIZE,
        MAXIMIZE;
    
        public int flag() {
            return 1 << ordinal();
        }
    }
  + app/src/main/java/com/winlator/xserver/DesktopHelper.java
    package com.winlator.xserver;
    
    import androidx.collection.ArrayMap;
    import com.winlator.winhandler.WinHandler;
    import com.winlator.xserver.Pointer;
    import com.winlator.xserver.Property;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.WindowManager;
    import com.winlator.xserver.XServer;
    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.Map;
    
    /* loaded from: classes.dex */
    public abstract class DesktopHelper {
        public static void attachTo(final XServer xServer) {
            setupXResources(xServer);
            xServer.pointer.addOnPointerMotionListener(new Pointer.OnPointerMotionListener() { // from class: com.winlator.xserver.DesktopHelper.1
                @Override // com.winlator.xserver.Pointer.OnPointerMotionListener
                public void onPointerButtonPress(Pointer.Button button) {
                    DesktopHelper.updateFocusedWindow(XServer.this);
                }
            });
            xServer.windowManager.addOnWindowModificationListener(new WindowManager.OnWindowModificationListener() { // from class: com.winlator.xserver.DesktopHelper.2
                @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
                public void onMapWindow(Window window) {
                    DesktopHelper.setFocusedWindow(XServer.this, window);
                }
            });
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static void updateFocusedWindow(XServer xServer) {
            WindowManager windowManager;
            Window window;
            XLock lock = xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.INPUT_DEVICE);
            try {
                Window focusedWindow = xServer.windowManager.getFocusedWindow();
                Window child = xServer.windowManager.findPointWindow(xServer.pointer.getClampedX(), xServer.pointer.getClampedY());
                if (child == null && focusedWindow != (window = (windowManager = xServer.windowManager).rootWindow)) {
                    windowManager.setFocus(window, WindowManager.FocusRevertTo.NONE);
                } else if (child != null && child != focusedWindow) {
                    setFocusedWindow(xServer, child);
                }
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        /* JADX INFO: Access modifiers changed from: private */
        public static void setFocusedWindow(XServer xServer, Window window) {
            Window topWindow;
            WinHandler winHandler = xServer.getWinHandler();
            if (window.isApplicationWindow()) {
                Window parent = window.getParent();
                WindowManager windowManager = xServer.windowManager;
                boolean parentIsRoot = parent == windowManager.rootWindow;
                windowManager.setFocus(window, parentIsRoot ? WindowManager.FocusRevertTo.POINTER_ROOT : WindowManager.FocusRevertTo.PARENT);
                if (window.hasNoDecorations() || !window.hasDecoration(Decoration.MINIMIZE) || !window.hasDecoration(Decoration.MAXIMIZE)) {
                    ArrayList<Window> dialogWindows = xServer.windowManager.findDialogWindows(window.id);
                    if (!dialogWindows.isEmpty()) {
                        Iterator<Window> it = dialogWindows.iterator();
                        while (it.hasNext()) {
                            Window popupWindow = it.next();
                            winHandler.bringToFront(popupWindow.getClassName(), popupWindow.getHandle());
                        }
                        return;
                    }
                    winHandler.bringToFront(window.getClassName(), window.getHandle());
                    return;
                }
                return;
            }
            if (window.getType() != Window.Type.DIALOG || window.getTransientFor() <= 0 || (topWindow = xServer.windowManager.getWindow(window.getTransientFor())) == null) {
                return;
            }
            if (topWindow.hasNoDecorations() || !topWindow.hasDecoration(Decoration.MINIMIZE) || !topWindow.hasDecoration(Decoration.MAXIMIZE)) {
                winHandler.bringToFront(window.getClassName(), window.getHandle());
            }
        }
    
        private static void setupXResources(XServer xServer) {
            ArrayMap<String, String> values = new ArrayMap<>();
            values.put("size", "20");
            values.put("theme", "dmz");
            values.put("theme_core", "true");
            StringBuilder sb = new StringBuilder();
            for (Map.Entry<String, String> entry : values.entrySet()) {
                sb.append("Xcursor");
                sb.append('.');
                sb.append(entry.getKey());
                sb.append(':');
                sb.append('\t');
                sb.append(entry.getValue());
                sb.append('\n');
            }
            byte[] data = sb.toString().getBytes(XServer.LATIN1_CHARSET);
            xServer.windowManager.rootWindow.modifyProperty(23, 31, Property.Format.BYTE_ARRAY, Property.Mode.APPEND, data);
        }
    }
  + app/src/main/java/com/winlator/xserver/Drawable.java
    package com.winlator.xserver;
    
    import android.graphics.Bitmap;
    import com.winlator.core.Callback;
    import com.winlator.math.Mathf;
    import com.winlator.renderer.GPUImage;
    import com.winlator.renderer.Texture;
    import com.winlator.xserver.GraphicsContext;
    import java.nio.ByteBuffer;
    import java.nio.ByteOrder;
    
    /* loaded from: classes.dex */
    public class Drawable extends XResource {
        private boolean blank;
        private ByteBuffer data;
        public final short height;
        private Callback<Drawable> onDestroyListener;
        private Runnable onDrawListener;
        public final Object renderLock;
        private Texture texture;
        private boolean useSharedData;
        public final Visual visual;
        public final short width;
    
        private static native void copyArea(short s, short s2, short s3, short s4, short s5, short s6, short s7, short s8, ByteBuffer byteBuffer, ByteBuffer byteBuffer2);
    
        private static native void copyAreaOp(short s, short s2, short s3, short s4, short s5, short s6, short s7, short s8, ByteBuffer byteBuffer, ByteBuffer byteBuffer2, int i);
    
        private static native void drawAlphaMaskedBitmap(byte b, byte b2, byte b3, byte b4, byte b5, byte b6, ByteBuffer byteBuffer, ByteBuffer byteBuffer2, ByteBuffer byteBuffer3);
    
        private static native void drawBitmap(short s, short s2, ByteBuffer byteBuffer, ByteBuffer byteBuffer2);
    
        private static native void drawLine(short s, short s2, short s3, short s4, int i, short s5, short s6, ByteBuffer byteBuffer);
    
        private static native void fillRect(short s, short s2, short s3, short s4, int i, short s5, ByteBuffer byteBuffer);
    
        private static native void fromBitmap(Bitmap bitmap, ByteBuffer byteBuffer);
    
        static {
            System.loadLibrary("winlator");
        }
    
        public Drawable(int id, int width, int height, Visual visual) {
            super(id);
            this.texture = new Texture();
            this.blank = true;
            this.renderLock = new Object();
            this.width = (short) width;
            this.height = (short) height;
            this.visual = visual;
            this.data = ByteBuffer.allocateDirect(width * height * 4).order(ByteOrder.LITTLE_ENDIAN);
        }
    
        public static Drawable fromBitmap(Bitmap bitmap) {
            Drawable drawable = new Drawable(0, bitmap.getWidth(), bitmap.getHeight(), null);
            fromBitmap(bitmap, drawable.data);
            drawable.blank = false;
            return drawable;
        }
    
        public boolean isBlank() {
            return this.blank;
        }
    
        public Texture getTexture() {
            return this.texture;
        }
    
        public void setTexture(Texture texture) {
            if (texture instanceof GPUImage) {
                this.data = ((GPUImage) texture).getVirtualData();
            }
            this.texture = texture;
        }
    
        public ByteBuffer getData() {
            return this.data;
        }
    
        public void setData(ByteBuffer data) {
            this.data = data;
            this.blank = false;
        }
    
        private short getStride() {
            Texture texture = this.texture;
            return texture instanceof GPUImage ? ((GPUImage) texture).getStride() : this.width;
        }
    
        public Runnable getOnDrawListener() {
            return this.onDrawListener;
        }
    
        public void setOnDrawListener(Runnable onDrawListener) {
            this.onDrawListener = onDrawListener;
        }
    
        public Callback<Drawable> getOnDestroyListener() {
            return this.onDestroyListener;
        }
    
        public void setOnDestroyListener(Callback<Drawable> onDestroyListener) {
            this.onDestroyListener = onDestroyListener;
        }
    
        public void drawImage(short srcX, short srcY, short dstX, short dstY, short width, short height, byte depth, ByteBuffer data, short totalWidth, short totalHeight) {
            short width2 = width;
            short height2 = height;
            ByteBuffer byteBuffer = this.data;
            if (byteBuffer == null) {
                return;
            }
            if (depth == 1) {
                drawBitmap(width2, height2, data, byteBuffer);
            } else if (depth == 24 || depth == 32) {
                short dstX2 = (short) Mathf.clamp((int) dstX, 0, this.width - 1);
                short dstY2 = (short) Mathf.clamp((int) dstY, 0, this.height - 1);
                int i = dstX2 + width2;
                short s = this.width;
                if (i > s) {
                    width2 = (short) (s - dstX2);
                }
                int i2 = dstY2 + height2;
                short s2 = this.height;
                if (i2 > s2) {
                    height2 = (short) (s2 - dstY2);
                }
                copyArea(srcX, srcY, dstX2, dstY2, width2, height2, totalWidth, getStride(), data, this.data);
                this.data.rewind();
                data.rewind();
                forceUpdate();
            }
            this.data.rewind();
            data.rewind();
            forceUpdate();
        }
    
        public ByteBuffer getImage(short x, short y, short width, short height) {
            ByteBuffer dstData = ByteBuffer.allocateDirect(width * height * 4).order(ByteOrder.LITTLE_ENDIAN);
            if (this.data == null) {
                return dstData;
            }
            short x2 = (short) Mathf.clamp((int) x, 0, this.width - 1);
            short y2 = (short) Mathf.clamp((int) y, 0, this.height - 1);
            int i = x2 + width;
            short s = this.width;
            short width2 = i > s ? (short) (s - x2) : width;
            int i2 = y2 + height;
            short s2 = this.height;
            copyArea(x2, y2, (short) 0, (short) 0, width2, i2 > s2 ? (short) (s2 - y2) : height, getStride(), width2, this.data, dstData);
            this.data.rewind();
            dstData.rewind();
            return dstData;
        }
    
        public void copyArea(short srcX, short srcY, short dstX, short dstY, short width, short height, Drawable drawable) {
            copyArea(srcX, srcY, dstX, dstY, width, height, drawable, GraphicsContext.Function.COPY);
        }
    
        public void copyArea(short srcX, short srcY, short dstX, short dstY, short width, short height, Drawable drawable, GraphicsContext.Function gcFunction) {
            if (this.data != null && drawable.data != null) {
                short dstX2 = (short) Mathf.clamp((int) dstX, 0, this.width - 1);
                short dstY2 = (short) Mathf.clamp((int) dstY, 0, this.height - 1);
                int i = dstX2 + width;
                short s = this.width;
                short width2 = i > s ? (short) (s - dstX2) : width;
                int i2 = dstY2 + height;
                short s2 = this.height;
                short height2 = i2 > s2 ? (short) (s2 - dstY2) : height;
                if (gcFunction == GraphicsContext.Function.COPY) {
                    copyArea(srcX, srcY, dstX2, dstY2, width2, height2, drawable.getStride(), getStride(), drawable.data, this.data);
                } else {
                    copyAreaOp(srcX, srcY, dstX2, dstY2, width2, height2, drawable.getStride(), getStride(), drawable.data, this.data, gcFunction.ordinal());
                }
                this.data.rewind();
                drawable.data.rewind();
                forceUpdate();
            }
        }
    
        public void fillColor(int color) {
            fillRect(0, 0, this.width, this.height, color);
        }
    
        public void fillRect(int x, int y, int width, int height, int color) {
            if (this.data == null) {
                return;
            }
            int x2 = (short) Mathf.clamp(x, 0, this.width - 1);
            int y2 = (short) Mathf.clamp(y, 0, this.height - 1);
            int i = x2 + width;
            int i2 = this.width;
            if (i > i2) {
                width = (short) (i2 - x2);
            }
            int i3 = y2 + height;
            int i4 = this.height;
            if (i3 > i4) {
                height = (short) (i4 - y2);
            }
            fillRect((short) x2, (short) y2, (short) width, (short) height, color, getStride(), this.data);
            this.data.rewind();
            forceUpdate();
        }
    
        public void drawLines(int color, int lineWidth, short... points) {
            for (int i = 2; i < points.length; i += 2) {
                drawLine(points[i - 2], points[i - 1], points[i + 0], points[i + 1], color, (short) lineWidth);
            }
        }
    
        public void drawLine(int x0, int y0, int x1, int y1, int color, int lineWidth) {
            if (this.data == null) {
                return;
            }
            drawLine((short) Mathf.clamp(x0, 0, this.width - lineWidth), (short) Mathf.clamp(y0, 0, this.height - lineWidth), (short) Mathf.clamp(x1, 0, this.width - lineWidth), (short) Mathf.clamp(y1, 0, this.height - lineWidth), color, (short) lineWidth, getStride(), this.data);
            this.data.rewind();
            forceUpdate();
        }
    
        public void drawAlphaMaskedBitmap(byte foreRed, byte foreGreen, byte foreBlue, byte backRed, byte backGreen, byte backBlue, Drawable srcDrawable, Drawable maskDrawable) {
            ByteBuffer byteBuffer;
            ByteBuffer byteBuffer2 = this.data;
            if (byteBuffer2 != null && (byteBuffer = srcDrawable.data) != null) {
                ByteBuffer byteBuffer3 = maskDrawable.data;
                if (byteBuffer3 == null) {
                    return;
                }
                drawAlphaMaskedBitmap(foreRed, foreGreen, foreBlue, backRed, backGreen, backBlue, byteBuffer, byteBuffer3, byteBuffer2);
                this.data.rewind();
                forceUpdate();
            }
        }
    
        public void forceUpdate() {
            this.texture.setNeedsUpdate(true);
            this.blank = false;
            Runnable runnable = this.onDrawListener;
            if (runnable != null) {
                runnable.run();
            }
        }
    
        public boolean isUseSharedData() {
            return this.useSharedData;
        }
    
        public void setUseSharedData(boolean useSharedData) {
            this.useSharedData = useSharedData;
        }
    }
  + app/src/main/java/com/winlator/xserver/DrawableManager.java
    package com.winlator.xserver;
    
    import android.util.SparseArray;
    import com.winlator.core.Callback;
    import com.winlator.renderer.Texture;
    import com.winlator.widget.XServerView;
    import com.winlator.xenvironment.components.VortekRendererComponent$$ExternalSyntheticLambda0;
    import com.winlator.xserver.XResourceManager;
    import java.util.Objects;
    
    /* loaded from: classes.dex */
    public class DrawableManager extends XResourceManager implements XResourceManager.OnResourceLifecycleListener {
        private final SparseArray<Drawable> drawables = new SparseArray<>();
        private final XServer xServer;
    
        public DrawableManager(XServer xServer) {
            this.xServer = xServer;
            xServer.pixmapManager.addOnResourceLifecycleListener(this);
        }
    
        public Drawable getDrawable(int id) {
            return this.drawables.get(id);
        }
    
        public Drawable createDrawable(int id, short width, short height, byte depth) {
            return createDrawable(id, width, height, this.xServer.pixmapManager.getVisualForDepth(depth));
        }
    
        public Drawable createDrawable(int id, short width, short height, Visual visual) {
            if (id == 0) {
                return new Drawable(id, width, height, visual);
            }
            if (this.drawables.indexOfKey(id) >= 0) {
                return null;
            }
            Drawable drawable = new Drawable(id, width, height, visual);
            this.drawables.put(id, drawable);
            return drawable;
        }
    
        public void removeDrawable(int id) {
            Drawable drawable = this.drawables.get(id);
            Texture texture = drawable.getTexture();
            if (texture != null) {
                XServerView xServerView = this.xServer.getRenderer().xServerView;
                Objects.requireNonNull(texture);
                xServerView.queueEvent(new VortekRendererComponent$$ExternalSyntheticLambda0(texture));
            }
            Callback<Drawable> onDestroyListener = drawable.getOnDestroyListener();
            if (onDestroyListener != null) {
                onDestroyListener.call(drawable);
            }
            drawable.setOnDrawListener(null);
            this.drawables.remove(id);
        }
    
        @Override // com.winlator.xserver.XResourceManager.OnResourceLifecycleListener
        public void onFreeResource(XResource resource) {
            if (resource instanceof Pixmap) {
                removeDrawable(((Pixmap) resource).drawable.id);
            }
        }
    
        public Visual getVisual() {
            return this.xServer.pixmapManager.visual;
        }
    }
  + app/src/main/java/com/winlator/xserver/EventListener.java
    package com.winlator.xserver;
    
    import com.winlator.xserver.events.Event;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class EventListener {
        public final XClient client;
        public final Bitmask eventMask;
    
        public EventListener(XClient client, Bitmask eventMask) {
            this.client = client;
            this.eventMask = eventMask;
        }
    
        public boolean isInterestedIn(int eventId) {
            return this.eventMask.isSet(eventId);
        }
    
        public boolean isInterestedIn(Bitmask mask) {
            return this.eventMask.intersects(mask);
        }
    
        public void sendEvent(Event event) {
            try {
                event.send(this.client.getSequenceNumber(), this.client.getOutputStream());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/GrabManager.java
    package com.winlator.xserver;
    
    import com.winlator.xserver.Window;
    import com.winlator.xserver.WindowManager;
    import com.winlator.xserver.events.PointerWindowEvent;
    
    /* loaded from: classes.dex */
    public class GrabManager implements WindowManager.OnWindowModificationListener {
        private EventListener eventListener;
        private boolean ownerEvents;
        private boolean releaseWithButtons;
        private Window window;
        private final XServer xServer;
    
        public GrabManager(XServer xServer) {
            this.xServer = xServer;
            xServer.windowManager.addOnWindowModificationListener(this);
        }
    
        @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
        public void onUnmapWindow(Window window) {
            if (window != null && window.getMapState() != Window.MapState.VIEWABLE) {
                deactivatePointerGrab();
            }
        }
    
        public Window getWindow() {
            return this.window;
        }
    
        public boolean isOwnerEvents() {
            return this.ownerEvents;
        }
    
        public boolean isReleaseWithButtons() {
            return this.releaseWithButtons;
        }
    
        public EventListener getEventListener() {
            return this.eventListener;
        }
    
        public XClient getClient() {
            EventListener eventListener = this.eventListener;
            if (eventListener != null) {
                return eventListener.client;
            }
            return null;
        }
    
        public void deactivatePointerGrab() {
            Window window = this.window;
            if (window != null) {
                InputDeviceManager inputDeviceManager = this.xServer.inputDeviceManager;
                inputDeviceManager.sendEnterLeaveNotify(window, inputDeviceManager.getPointWindow(), PointerWindowEvent.Mode.UNGRAB);
                this.window = null;
                this.eventListener = null;
            }
        }
    
        private void activatePointerGrab(Window window, EventListener eventListener, boolean ownerEvents, boolean releaseWithButtons) {
            if (this.window == null) {
                InputDeviceManager inputDeviceManager = this.xServer.inputDeviceManager;
                inputDeviceManager.sendEnterLeaveNotify(inputDeviceManager.getPointWindow(), window, PointerWindowEvent.Mode.GRAB);
            }
            this.window = window;
            this.releaseWithButtons = releaseWithButtons;
            this.ownerEvents = ownerEvents;
            this.eventListener = eventListener;
        }
    
        public void activatePointerGrab(Window window, boolean ownerEvents, Bitmask eventMask, XClient client) {
            activatePointerGrab(window, new EventListener(client, eventMask), ownerEvents, false);
        }
    
        public void activatePointerGrab(Window window) {
            EventListener eventListener = window.getButtonPressListener();
            activatePointerGrab(window, eventListener, eventListener.isInterestedIn(16777216), true);
        }
    }
  + app/src/main/java/com/winlator/xserver/GraphicsContext.java
    package com.winlator.xserver;
    
    /* loaded from: classes.dex */
    public class GraphicsContext extends XResource {
        private int background;
        public final Drawable drawable;
        private int foreground;
        private Function function;
        private int lineWidth;
        private int planeMask;
        private SubwindowMode subwindowMode;
    
        public enum Function {
            CLEAR,
            AND,
            AND_REVERSE,
            COPY,
            AND_INVERTED,
            NO_OP,
            XOR,
            OR,
            NOR,
            EQUIV,
            INVERT,
            OR_REVERSE,
            COPY_INVERTED,
            OR_INVERTED,
            NAND,
            SET
        }
    
        public enum SubwindowMode {
            CLIP_BY_CHILDREN,
            INCLUDE_INFERIORS
        }
    
        public GraphicsContext(int id, Drawable drawable) {
            super(id);
            this.function = Function.COPY;
            this.background = 16777215;
            this.foreground = 0;
            this.lineWidth = 1;
            this.planeMask = -1;
            this.subwindowMode = SubwindowMode.CLIP_BY_CHILDREN;
            this.drawable = drawable;
        }
    
        public int getForeground() {
            return this.foreground;
        }
    
        public void setForeground(int foreground) {
            this.foreground = foreground;
        }
    
        public int getBackground() {
            return this.background;
        }
    
        public void setBackground(int background) {
            this.background = background;
        }
    
        public int getLineWidth() {
            return this.lineWidth;
        }
    
        public void setLineWidth(int lineWidth) {
            this.lineWidth = lineWidth;
        }
    
        public void setPlaneMask(int planeMask) {
            this.planeMask = planeMask;
        }
    
        public Function getFunction() {
            return this.function;
        }
    
        public void setFunction(Function function) {
            this.function = function;
        }
    
        public void setSubwindowMode(SubwindowMode subwindowMode) {
            this.subwindowMode = subwindowMode;
        }
    }
  + app/src/main/java/com/winlator/xserver/GraphicsContextManager.java
    package com.winlator.xserver;
    
    import android.util.SparseArray;
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xserver.GraphicsContext;
    import java.util.Iterator;
    
    /* loaded from: classes.dex */
    public class GraphicsContextManager extends XResourceManager {
        private final SparseArray<GraphicsContext> graphicsContexts = new SparseArray<>();
    
        public GraphicsContext getGraphicsContext(int id) {
            return this.graphicsContexts.get(id);
        }
    
        public GraphicsContext createGraphicsContext(int id, Drawable drawable) {
            if (this.graphicsContexts.indexOfKey(id) >= 0) {
                return null;
            }
            GraphicsContext graphicsContext = new GraphicsContext(id, drawable);
            this.graphicsContexts.put(id, graphicsContext);
            triggerOnCreateResourceListener(graphicsContext);
            return graphicsContext;
        }
    
        public void freeGraphicsContext(int id) {
            triggerOnFreeResourceListener(this.graphicsContexts.get(id));
            this.graphicsContexts.remove(id);
        }
    
        public void updateGraphicsContext(GraphicsContext graphicsContext, Bitmask valueMask, XInputStream inputStream) {
            Iterator<Integer> it = valueMask.iterator();
            while (it.hasNext()) {
                int index = it.next().intValue();
                switch (index) {
                    case 1:
                        graphicsContext.setFunction(GraphicsContext.Function.values()[inputStream.readInt()]);
                        break;
                    case 2:
                        graphicsContext.setPlaneMask(inputStream.readInt());
                        break;
                    case 4:
                        graphicsContext.setForeground(inputStream.readInt());
                        break;
                    case 8:
                        graphicsContext.setBackground(inputStream.readInt());
                        break;
                    case 16:
                        graphicsContext.setLineWidth(inputStream.readInt());
                        break;
                    case 32:
                    case 64:
                    case 128:
                    case 256:
                    case 512:
                    case 1024:
                    case 2048:
                    case 4096:
                    case 8192:
                    case 16384:
                    case 65536:
                    case 131072:
                    case 262144:
                    case 524288:
                    case 1048576:
                    case 2097152:
                    case 4194304:
                        inputStream.skip(4);
                        break;
                    case 32768:
                        graphicsContext.setSubwindowMode(GraphicsContext.SubwindowMode.values()[inputStream.readInt()]);
                        break;
                }
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/IDGenerator.java
    package com.winlator.xserver;
    
    /* loaded from: classes.dex */
    public abstract class IDGenerator {
        private static int id = 0;
    
        public static int generate() {
            int i = id + 1;
            id = i;
            return i;
        }
    }
  + app/src/main/java/com/winlator/xserver/InputDeviceManager.java
    package com.winlator.xserver;
    
    import androidx.appcompat.R$styleable;
    import com.winlator.renderer.FullscreenTransformation;
    import com.winlator.winhandler.MouseEventFlags;
    import com.winlator.winhandler.WinHandler;
    import com.winlator.xserver.Keyboard;
    import com.winlator.xserver.Pointer;
    import com.winlator.xserver.WindowManager;
    import com.winlator.xserver.XResourceManager;
    import com.winlator.xserver.events.ButtonPress;
    import com.winlator.xserver.events.ButtonRelease;
    import com.winlator.xserver.events.EnterNotify;
    import com.winlator.xserver.events.Event;
    import com.winlator.xserver.events.KeyPress;
    import com.winlator.xserver.events.KeyRelease;
    import com.winlator.xserver.events.LeaveNotify;
    import com.winlator.xserver.events.MappingNotify;
    import com.winlator.xserver.events.MotionNotify;
    import com.winlator.xserver.events.PointerWindowEvent;
    
    /* loaded from: classes.dex */
    public class InputDeviceManager implements Pointer.OnPointerMotionListener, Keyboard.OnKeyboardListener, WindowManager.OnWindowModificationListener, XResourceManager.OnResourceLifecycleListener {
        private Window pointWindow;
        private final XServer xServer;
    
        public InputDeviceManager(XServer xServer) {
            this.xServer = xServer;
            WindowManager windowManager = xServer.windowManager;
            this.pointWindow = windowManager.rootWindow;
            windowManager.addOnWindowModificationListener(this);
            xServer.windowManager.addOnResourceLifecycleListener(this);
            xServer.pointer.addOnPointerMotionListener(this);
            xServer.keyboard.addOnKeyboardListener(this);
        }
    
        @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
        public void onMapWindow(Window window) {
            updatePointWindow();
        }
    
        @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
        public void onUnmapWindow(Window window) {
            updatePointWindow();
        }
    
        @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
        public void onChangeWindowZOrder(Window window) {
            updatePointWindow();
        }
    
        @Override // com.winlator.xserver.WindowManager.OnWindowModificationListener
        public void onUpdateWindowGeometry(Window window, boolean resized) {
            updatePointWindow();
        }
    
        @Override // com.winlator.xserver.XResourceManager.OnResourceLifecycleListener
        public void onCreateResource(XResource resource) {
            updatePointWindow();
        }
    
        @Override // com.winlator.xserver.XResourceManager.OnResourceLifecycleListener
        public void onFreeResource(XResource resource) {
            updatePointWindow();
        }
    
        private void updatePointWindow() {
            XServer xServer = this.xServer;
            Window pointWindow = xServer.windowManager.findPointWindow(xServer.pointer.getClampedX(), this.xServer.pointer.getClampedY(), true);
            this.pointWindow = pointWindow != null ? pointWindow : this.xServer.windowManager.rootWindow;
        }
    
        public Window getPointWindow() {
            return this.pointWindow;
        }
    
        private void sendEvent(Window window, int eventId, Event event) {
            Window grabWindow = this.xServer.grabManager.getWindow();
            if (grabWindow != null && grabWindow.attributes.isEnabled()) {
                EventListener eventListener = this.xServer.grabManager.getEventListener();
                if (this.xServer.grabManager.isOwnerEvents() && window != null) {
                    window.sendEvent(eventId, event, this.xServer.grabManager.getClient());
                    return;
                } else {
                    if (eventListener.isInterestedIn(eventId)) {
                        eventListener.sendEvent(event);
                        return;
                    }
                    return;
                }
            }
            if (window != null && window.attributes.isEnabled()) {
                window.sendEvent(eventId, event);
            }
        }
    
        private void sendEvent(Window window, Bitmask eventMask, Event event) {
            Window grabWindow = this.xServer.grabManager.getWindow();
            if (grabWindow != null && grabWindow.attributes.isEnabled()) {
                EventListener eventListener = this.xServer.grabManager.getEventListener();
                if (this.xServer.grabManager.isOwnerEvents() && window != null) {
                    window.sendEvent(eventMask, event, eventListener.client);
                    return;
                } else {
                    if (eventListener.isInterestedIn(eventMask)) {
                        eventListener.sendEvent(event);
                        return;
                    }
                    return;
                }
            }
            if (window != null && window.attributes.isEnabled()) {
                window.sendEvent(eventMask, event);
            }
        }
    
        public void sendEnterLeaveNotify(Window windowA, Window windowB, PointerWindowEvent.Mode mode) {
            PointerWindowEvent.Detail detailA;
            PointerWindowEvent.Detail detailB;
            short xA;
            short yA;
            short xB;
            short yB;
            if (windowA == windowB) {
                return;
            }
            boolean sameScreenAndFocus = windowB.isAncestorOf(this.xServer.windowManager.getFocusedWindow());
            PointerWindowEvent.Detail detailA2 = PointerWindowEvent.Detail.NONLINEAR;
            PointerWindowEvent.Detail detailB2 = PointerWindowEvent.Detail.NONLINEAR;
            if (windowA.isAncestorOf(windowB)) {
                PointerWindowEvent.Detail detailA3 = PointerWindowEvent.Detail.ANCESTOR;
                PointerWindowEvent.Detail detailB3 = PointerWindowEvent.Detail.INFERIOR;
                detailA = detailA3;
                detailB = detailB3;
            } else if (!windowB.isAncestorOf(windowA)) {
                detailA = detailA2;
                detailB = detailB2;
            } else {
                PointerWindowEvent.Detail detailB4 = PointerWindowEvent.Detail.ANCESTOR;
                PointerWindowEvent.Detail detailA4 = PointerWindowEvent.Detail.INFERIOR;
                detailA = detailA4;
                detailB = detailB4;
            }
            Bitmask keyButMask = getKeyButMask();
            short xA2 = this.xServer.pointer.getX();
            short yA2 = this.xServer.pointer.getY();
            FullscreenTransformation fullscreenTransformationB = windowB.getFullscreenTransformation();
            if (fullscreenTransformationB == null) {
                xA = xA2;
                yA = yA2;
            } else {
                short[] transformedPoint = fullscreenTransformationB.transformPointerCoords(xA2, yA2);
                xA = transformedPoint[0];
                yA = transformedPoint[1];
            }
            short[] localPointA = windowA.rootPointToLocal(xA, yA);
            short xB2 = this.xServer.pointer.getX();
            short yB2 = this.xServer.pointer.getY();
            FullscreenTransformation fullscreenTransformationA = windowA.getFullscreenTransformation();
            if (fullscreenTransformationA == null) {
                xB = xB2;
                yB = yB2;
            } else {
                short[] transformedPoint2 = fullscreenTransformationA.transformPointerCoords(xB2, yB2);
                xB = transformedPoint2[0];
                yB = transformedPoint2[1];
            }
            short[] localPointB = windowB.rootPointToLocal(xB, yB);
            short yB3 = yB;
            sendEvent(windowA, 32, new LeaveNotify(detailA, this.xServer.windowManager.rootWindow, windowA, null, xA, yA, localPointA[0], localPointA[1], keyButMask, mode, sameScreenAndFocus));
            PointerWindowEvent.Detail detail = detailB;
            sendEvent(windowB, 16, new EnterNotify(detail, this.xServer.windowManager.rootWindow, windowB, null, xB, yB3, localPointB[0], localPointB[1], keyButMask, mode, sameScreenAndFocus));
        }
    
        @Override // com.winlator.xserver.Pointer.OnPointerMotionListener
        public void onPointerButtonPress(Pointer.Button button) {
            short x;
            short y;
            if (this.xServer.isRelativeMouseMovement()) {
                WinHandler winHandler = this.xServer.getWinHandler();
                int wheelDelta = button == Pointer.Button.BUTTON_SCROLL_UP ? R$styleable.AppCompatTheme_windowFixedWidthMajor : button == Pointer.Button.BUTTON_SCROLL_DOWN ? -120 : 0;
                winHandler.mouseEvent(MouseEventFlags.getFlagFor(button, true), 0, 0, wheelDelta);
                return;
            }
            Window grabWindow = this.xServer.grabManager.getWindow();
            if (grabWindow == null && (grabWindow = this.pointWindow.getAncestorWithEventId(4)) != null) {
                this.xServer.grabManager.activatePointerGrab(grabWindow);
            }
            if (grabWindow != null && grabWindow.attributes.isEnabled()) {
                Bitmask eventMask = createPointerEventMask();
                eventMask.unset(button.flag());
                short x2 = this.xServer.pointer.getX();
                short y2 = this.xServer.pointer.getY();
                FullscreenTransformation fullscreenTransformation = grabWindow.getFullscreenTransformation();
                if (fullscreenTransformation == null) {
                    x = x2;
                    y = y2;
                } else {
                    short[] transformedPoint = fullscreenTransformation.transformPointerCoords(x2, y2);
                    x = transformedPoint[0];
                    y = transformedPoint[1];
                }
                short[] localPoint = grabWindow.rootPointToLocal(x, y);
                Window child = grabWindow.isAncestorOf(this.pointWindow) ? this.pointWindow : null;
                grabWindow.sendEvent(4, new ButtonPress(button.code(), this.xServer.windowManager.rootWindow, grabWindow, child, x, y, localPoint[0], localPoint[1], eventMask));
            }
        }
    
        @Override // com.winlator.xserver.Pointer.OnPointerMotionListener
        public void onPointerButtonRelease(Pointer.Button button) {
            Window ancestorWithEventMask;
            short x;
            short y;
            if (this.xServer.isRelativeMouseMovement()) {
                WinHandler winHandler = this.xServer.getWinHandler();
                winHandler.mouseEvent(MouseEventFlags.getFlagFor(button, false), 0, 0, 0);
                return;
            }
            Bitmask eventMask = createPointerEventMask();
            Window grabWindow = this.xServer.grabManager.getWindow();
            Window window = null;
            if (grabWindow == null || this.xServer.grabManager.isOwnerEvents()) {
                ancestorWithEventMask = this.pointWindow.getAncestorWithEventMask(eventMask);
            } else {
                ancestorWithEventMask = null;
            }
            Window window2 = ancestorWithEventMask;
            if (grabWindow != null || window2 != null) {
                Window eventWindow = window2 != null ? window2 : grabWindow;
                short x2 = this.xServer.pointer.getX();
                short y2 = this.xServer.pointer.getY();
                FullscreenTransformation fullscreenTransformation = eventWindow.getFullscreenTransformation();
                if (fullscreenTransformation == null) {
                    x = x2;
                    y = y2;
                } else {
                    short[] transformedPoint = fullscreenTransformation.transformPointerCoords(x2, y2);
                    x = transformedPoint[0];
                    y = transformedPoint[1];
                }
                short[] localPoint = eventWindow.rootPointToLocal(x, y);
                if (eventWindow.isAncestorOf(this.pointWindow)) {
                    window = this.pointWindow;
                }
                Window child = window;
                ButtonRelease buttonRelease = new ButtonRelease(button.code(), this.xServer.windowManager.rootWindow, eventWindow, child, x, y, localPoint[0], localPoint[1], eventMask);
                sendEvent(window2, eventMask, buttonRelease);
            }
            if (this.xServer.pointer.getButtonMask().isEmpty() && this.xServer.grabManager.isReleaseWithButtons()) {
                this.xServer.grabManager.deactivatePointerGrab();
            }
        }
    
        @Override // com.winlator.xserver.Pointer.OnPointerMotionListener
        public void onPointerMove(short x, short y) {
            Window window;
            short x2;
            short y2;
            updatePointWindow();
            Bitmask eventMask = createPointerEventMask();
            Window grabWindow = this.xServer.grabManager.getWindow();
            Window window2 = null;
            if (grabWindow == null || this.xServer.grabManager.isOwnerEvents()) {
                window = this.pointWindow.getAncestorWithEventMask(eventMask);
            } else {
                window = null;
            }
            if (grabWindow != null || window != null) {
                Window eventWindow = window != null ? window : grabWindow;
                FullscreenTransformation fullscreenTransformation = eventWindow.getFullscreenTransformation();
                if (fullscreenTransformation == null) {
                    x2 = x;
                    y2 = y;
                } else {
                    short[] transformedPoint = fullscreenTransformation.transformPointerCoords(x, y);
                    x2 = transformedPoint[0];
                    y2 = transformedPoint[1];
                }
                short[] localPoint = eventWindow.rootPointToLocal(x2, y2);
                if (eventWindow.isAncestorOf(this.pointWindow)) {
                    window2 = this.pointWindow;
                }
                Window child = window2;
                sendEvent(window, eventMask, new MotionNotify(false, this.xServer.windowManager.rootWindow, eventWindow, child, x2, y2, localPoint[0], localPoint[1], getKeyButMask()));
            }
        }
    
        @Override // com.winlator.xserver.Keyboard.OnKeyboardListener
        public void onKeyPress(byte keycode, int keysym) {
            Window child;
            Window eventWindow;
            short x;
            short y;
            Window focusedWindow = this.xServer.windowManager.getFocusedWindow();
            if (focusedWindow == null) {
                return;
            }
            updatePointWindow();
            Window eventWindow2 = null;
            if (!focusedWindow.isAncestorOf(this.pointWindow)) {
                child = null;
            } else {
                eventWindow2 = this.pointWindow.getAncestorWithEventId(1, focusedWindow);
                Window child2 = eventWindow2.isAncestorOf(this.pointWindow) ? this.pointWindow : null;
                child = child2;
            }
            if (eventWindow2 != null) {
                eventWindow = eventWindow2;
            } else if (!focusedWindow.hasEventListenerFor(1)) {
                return;
            } else {
                eventWindow = focusedWindow;
            }
            if (eventWindow.attributes.isEnabled()) {
                Bitmask keyButMask = getKeyButMask();
                short x2 = this.xServer.pointer.getX();
                short y2 = this.xServer.pointer.getY();
                FullscreenTransformation fullscreenTransformation = eventWindow.getFullscreenTransformation();
                if (fullscreenTransformation == null) {
                    x = x2;
                    y = y2;
                } else {
                    short[] transformedPoint = fullscreenTransformation.transformPointerCoords(x2, y2);
                    x = transformedPoint[0];
                    y = transformedPoint[1];
                }
                short[] localPoint = eventWindow.rootPointToLocal(x, y);
                if (keysym != 0 && !this.xServer.keyboard.hasKeysym(keycode, keysym)) {
                    this.xServer.keyboard.setKeysyms(keycode, keysym, keysym);
                    eventWindow.sendEvent(new MappingNotify(MappingNotify.Request.KEYBOARD, keycode, 1));
                }
                eventWindow.sendEvent(1, new KeyPress(keycode, this.xServer.windowManager.rootWindow, eventWindow, child, x, y, localPoint[0], localPoint[1], keyButMask));
            }
        }
    
        @Override // com.winlator.xserver.Keyboard.OnKeyboardListener
        public void onKeyRelease(byte keycode) {
            short x;
            short y;
            Window focusedWindow = this.xServer.windowManager.getFocusedWindow();
            if (focusedWindow == null) {
                return;
            }
            updatePointWindow();
            Window eventWindow = null;
            Window child = null;
            if (focusedWindow.isAncestorOf(this.pointWindow)) {
                eventWindow = this.pointWindow.getAncestorWithEventId(2, focusedWindow);
                child = eventWindow.isAncestorOf(this.pointWindow) ? this.pointWindow : null;
            }
            if (eventWindow == null) {
                if (!focusedWindow.hasEventListenerFor(2)) {
                    return;
                } else {
                    eventWindow = focusedWindow;
                }
            }
            if (eventWindow.attributes.isEnabled()) {
                Bitmask keyButMask = getKeyButMask();
                short x2 = this.xServer.pointer.getX();
                short y2 = this.xServer.pointer.getY();
                FullscreenTransformation fullscreenTransformation = eventWindow.getFullscreenTransformation();
                if (fullscreenTransformation == null) {
                    x = x2;
                    y = y2;
                } else {
                    short[] transformedPoint = fullscreenTransformation.transformPointerCoords(x2, y2);
                    x = transformedPoint[0];
                    y = transformedPoint[1];
                }
                short[] localPoint = eventWindow.rootPointToLocal(x, y);
                eventWindow.sendEvent(2, new KeyRelease(keycode, this.xServer.windowManager.rootWindow, eventWindow, child, x, y, localPoint[0], localPoint[1], keyButMask));
            }
        }
    
        private Bitmask createPointerEventMask() {
            Bitmask eventMask = new Bitmask();
            eventMask.set(64);
            Bitmask buttonMask = this.xServer.pointer.getButtonMask();
            if (!buttonMask.isEmpty()) {
                eventMask.set(8192);
                if (buttonMask.isSet(Pointer.Button.BUTTON_LEFT.flag())) {
                    eventMask.set(256);
                }
                if (buttonMask.isSet(Pointer.Button.BUTTON_MIDDLE.flag())) {
                    eventMask.set(512);
                }
                if (buttonMask.isSet(Pointer.Button.BUTTON_RIGHT.flag())) {
                    eventMask.set(1024);
                }
                if (buttonMask.isSet(Pointer.Button.BUTTON_SCROLL_UP.flag())) {
                    eventMask.set(2048);
                }
                if (buttonMask.isSet(Pointer.Button.BUTTON_SCROLL_DOWN.flag())) {
                    eventMask.set(4096);
                }
            }
            return eventMask;
        }
    
        public Bitmask getKeyButMask() {
            Bitmask keyButMask = new Bitmask();
            keyButMask.join(this.xServer.pointer.getButtonMask());
            keyButMask.join(this.xServer.keyboard.getModifiersMask());
            return keyButMask;
        }
    }
  + app/src/main/java/com/winlator/xserver/Keyboard.java
    package com.winlator.xserver;
    
    import android.view.KeyEvent;
    import androidx.collection.ArraySet;
    import androidx.constraintlayout.widget.R$styleable;
    import com.winlator.inputcontrols.ExternalController;
    import java.util.ArrayList;
    
    /* loaded from: classes.dex */
    public class Keyboard {
        private final XServer xServer;
        public final int[] keysyms = new int[248];
        private final Bitmask modifiersMask = new Bitmask();
        private final XKeycode[] keycodeMap = createKeycodeMap();
        private final ArraySet<Byte> pressedKeys = new ArraySet<>();
        private final ArrayList<OnKeyboardListener> onKeyboardListeners = new ArrayList<>();
    
        public interface OnKeyboardListener {
            void onKeyPress(byte b, int i);
    
            void onKeyRelease(byte b);
        }
    
        public Keyboard(XServer xServer) {
            this.xServer = xServer;
        }
    
        public Bitmask getModifiersMask() {
            return this.modifiersMask;
        }
    
        public void setKeysyms(byte keycode, int minKeysym, int majKeysym) {
            int index = keycode - 8;
            int[] iArr = this.keysyms;
            iArr[(index * 2) + 0] = minKeysym;
            iArr[(index * 2) + 1] = majKeysym;
        }
    
        public boolean hasKeysym(byte keycode, int keysym) {
            int index = keycode - 8;
            int[] iArr = this.keysyms;
            return iArr[(index * 2) + 0] == keysym || iArr[(index * 2) + 1] == keysym;
        }
    
        public void setKeyPress(byte keycode, int keysym) {
            if (isModifierSticky(keycode)) {
                if (this.pressedKeys.contains(Byte.valueOf(keycode))) {
                    this.pressedKeys.remove(Byte.valueOf(keycode));
                    this.modifiersMask.unset(getModifierFlag(keycode));
                    triggerOnKeyRelease(keycode);
                    return;
                } else {
                    this.pressedKeys.add(Byte.valueOf(keycode));
                    this.modifiersMask.set(getModifierFlag(keycode));
                    triggerOnKeyPress(keycode, keysym);
                    return;
                }
            }
            if (!this.pressedKeys.contains(Byte.valueOf(keycode))) {
                this.pressedKeys.add(Byte.valueOf(keycode));
                if (isModifier(keycode)) {
                    this.modifiersMask.set(getModifierFlag(keycode));
                }
                triggerOnKeyPress(keycode, keysym);
            }
        }
    
        public void setKeyRelease(byte keycode) {
            if (!isModifierSticky(keycode) && this.pressedKeys.contains(Byte.valueOf(keycode))) {
                this.pressedKeys.remove(Byte.valueOf(keycode));
                if (isModifier(keycode)) {
                    this.modifiersMask.unset(getModifierFlag(keycode));
                }
                triggerOnKeyRelease(keycode);
            }
        }
    
        public void addOnKeyboardListener(OnKeyboardListener onKeyboardListener) {
            this.onKeyboardListeners.add(onKeyboardListener);
        }
    
        private void triggerOnKeyPress(byte keycode, int keysym) {
            for (int i = this.onKeyboardListeners.size() - 1; i >= 0; i--) {
                this.onKeyboardListeners.get(i).onKeyPress(keycode, keysym);
            }
        }
    
        private void triggerOnKeyRelease(byte keycode) {
            for (int i = this.onKeyboardListeners.size() - 1; i >= 0; i--) {
                this.onKeyboardListeners.get(i).onKeyRelease(keycode);
            }
        }
    
        public boolean onKeyEvent(KeyEvent event) {
            if (ExternalController.isGameController(event.getDevice())) {
                return false;
            }
            int action = event.getAction();
            if (action == 0 || action == 1) {
                int keyCode = event.getKeyCode();
                XKeycode xKeycode = this.keycodeMap[keyCode];
                if (xKeycode == null) {
                    return false;
                }
                if (action == 0) {
                    boolean shiftPressed = event.isShiftPressed() || keyCode == 77 || keyCode == 17 || keyCode == 18 || keyCode == 81;
                    if (shiftPressed) {
                        this.xServer.injectKeyPress(XKeycode.KEY_SHIFT_L);
                    }
                    this.xServer.injectKeyPress(xKeycode, xKeycode != XKeycode.KEY_ENTER ? event.getUnicodeChar() : 0);
                } else if (action == 1) {
                    this.xServer.injectKeyRelease(XKeycode.KEY_SHIFT_L);
                    this.xServer.injectKeyRelease(xKeycode);
                }
            }
            return true;
        }
    
        private static XKeycode[] createKeycodeMap() {
            XKeycode[] keycodeMap = new XKeycode[KeyEvent.getMaxKeyCode() + 1];
            keycodeMap[66] = XKeycode.KEY_ENTER;
            keycodeMap[21] = XKeycode.KEY_LEFT;
            keycodeMap[22] = XKeycode.KEY_RIGHT;
            keycodeMap[19] = XKeycode.KEY_UP;
            keycodeMap[20] = XKeycode.KEY_DOWN;
            keycodeMap[67] = XKeycode.KEY_BKSP;
            keycodeMap[124] = XKeycode.KEY_INSERT;
            keycodeMap[112] = XKeycode.KEY_DEL;
            keycodeMap[122] = XKeycode.KEY_HOME;
            keycodeMap[123] = XKeycode.KEY_END;
            keycodeMap[92] = XKeycode.KEY_PRIOR;
            keycodeMap[93] = XKeycode.KEY_NEXT;
            keycodeMap[59] = XKeycode.KEY_SHIFT_L;
            keycodeMap[60] = XKeycode.KEY_SHIFT_R;
            keycodeMap[113] = XKeycode.KEY_CTRL_L;
            keycodeMap[114] = XKeycode.KEY_CTRL_R;
            keycodeMap[57] = XKeycode.KEY_ALT_L;
            keycodeMap[58] = XKeycode.KEY_ALT_R;
            keycodeMap[61] = XKeycode.KEY_TAB;
            keycodeMap[62] = XKeycode.KEY_SPACE;
            keycodeMap[29] = XKeycode.KEY_A;
            keycodeMap[30] = XKeycode.KEY_B;
            keycodeMap[31] = XKeycode.KEY_C;
            keycodeMap[32] = XKeycode.KEY_D;
            keycodeMap[33] = XKeycode.KEY_E;
            keycodeMap[34] = XKeycode.KEY_F;
            keycodeMap[35] = XKeycode.KEY_G;
            keycodeMap[36] = XKeycode.KEY_H;
            keycodeMap[37] = XKeycode.KEY_I;
            keycodeMap[38] = XKeycode.KEY_J;
            keycodeMap[39] = XKeycode.KEY_K;
            keycodeMap[40] = XKeycode.KEY_L;
            keycodeMap[41] = XKeycode.KEY_M;
            keycodeMap[42] = XKeycode.KEY_N;
            keycodeMap[43] = XKeycode.KEY_O;
            keycodeMap[44] = XKeycode.KEY_P;
            keycodeMap[45] = XKeycode.KEY_Q;
            keycodeMap[46] = XKeycode.KEY_R;
            keycodeMap[47] = XKeycode.KEY_S;
            keycodeMap[48] = XKeycode.KEY_T;
            keycodeMap[49] = XKeycode.KEY_U;
            keycodeMap[50] = XKeycode.KEY_V;
            keycodeMap[51] = XKeycode.KEY_W;
            keycodeMap[52] = XKeycode.KEY_X;
            keycodeMap[53] = XKeycode.KEY_Y;
            keycodeMap[54] = XKeycode.KEY_Z;
            keycodeMap[7] = XKeycode.KEY_0;
            keycodeMap[8] = XKeycode.KEY_1;
            XKeycode xKeycode = XKeycode.KEY_2;
            keycodeMap[9] = xKeycode;
            XKeycode xKeycode2 = XKeycode.KEY_3;
            keycodeMap[10] = xKeycode2;
            keycodeMap[11] = XKeycode.KEY_4;
            keycodeMap[12] = XKeycode.KEY_5;
            keycodeMap[13] = XKeycode.KEY_6;
            keycodeMap[14] = XKeycode.KEY_7;
            XKeycode xKeycode3 = XKeycode.KEY_8;
            keycodeMap[15] = xKeycode3;
            keycodeMap[16] = XKeycode.KEY_9;
            keycodeMap[17] = xKeycode3;
            keycodeMap[18] = xKeycode2;
            keycodeMap[55] = XKeycode.KEY_COMMA;
            keycodeMap[56] = XKeycode.KEY_PERIOD;
            keycodeMap[74] = XKeycode.KEY_SEMICOLON;
            keycodeMap[75] = XKeycode.KEY_APOSTROPHE;
            keycodeMap[71] = XKeycode.KEY_BRACKET_LEFT;
            keycodeMap[72] = XKeycode.KEY_BRACKET_RIGHT;
            keycodeMap[68] = XKeycode.KEY_GRAVE;
            keycodeMap[69] = XKeycode.KEY_MINUS;
            XKeycode xKeycode4 = XKeycode.KEY_EQUAL;
            keycodeMap[81] = xKeycode4;
            keycodeMap[70] = xKeycode4;
            keycodeMap[76] = XKeycode.KEY_SLASH;
            keycodeMap[77] = xKeycode;
            keycodeMap[73] = XKeycode.KEY_BACKSLASH;
            keycodeMap[154] = XKeycode.KEY_KP_DIVIDE;
            keycodeMap[155] = XKeycode.KEY_KP_MULTIPLY;
            keycodeMap[156] = XKeycode.KEY_KP_SUBTRACT;
            keycodeMap[157] = XKeycode.KEY_KP_ADD;
            keycodeMap[158] = XKeycode.KEY_KP_DEL;
            keycodeMap[144] = XKeycode.KEY_KP_0;
            keycodeMap[145] = XKeycode.KEY_KP_1;
            keycodeMap[146] = XKeycode.KEY_KP_2;
            keycodeMap[147] = XKeycode.KEY_KP_3;
            keycodeMap[148] = XKeycode.KEY_KP_4;
            keycodeMap[149] = XKeycode.KEY_KP_5;
            keycodeMap[150] = XKeycode.KEY_KP_6;
            keycodeMap[151] = XKeycode.KEY_KP_7;
            keycodeMap[152] = XKeycode.KEY_KP_8;
            keycodeMap[153] = XKeycode.KEY_KP_9;
            keycodeMap[131] = XKeycode.KEY_F1;
            keycodeMap[132] = XKeycode.KEY_F2;
            keycodeMap[133] = XKeycode.KEY_F3;
            keycodeMap[134] = XKeycode.KEY_F4;
            keycodeMap[135] = XKeycode.KEY_F5;
            keycodeMap[136] = XKeycode.KEY_F6;
            keycodeMap[137] = XKeycode.KEY_F7;
            keycodeMap[138] = XKeycode.KEY_F8;
            keycodeMap[139] = XKeycode.KEY_F9;
            keycodeMap[140] = XKeycode.KEY_F10;
            keycodeMap[141] = XKeycode.KEY_F11;
            keycodeMap[142] = XKeycode.KEY_F12;
            keycodeMap[143] = XKeycode.KEY_NUM_LOCK;
            keycodeMap[115] = XKeycode.KEY_CAPS_LOCK;
            return keycodeMap;
        }
    
        public static Keyboard createKeyboard(XServer xServer) {
            Keyboard keyboard = new Keyboard(xServer);
            keyboard.setKeysyms(XKeycode.KEY_ESC.id, 65307, 0);
            keyboard.setKeysyms(XKeycode.KEY_ENTER.id, 65293, 0);
            keyboard.setKeysyms(XKeycode.KEY_RIGHT.id, 65363, 0);
            keyboard.setKeysyms(XKeycode.KEY_UP.id, 65362, 0);
            keyboard.setKeysyms(XKeycode.KEY_LEFT.id, 65361, 0);
            keyboard.setKeysyms(XKeycode.KEY_DOWN.id, 65364, 0);
            keyboard.setKeysyms(XKeycode.KEY_DEL.id, 65535, 0);
            keyboard.setKeysyms(XKeycode.KEY_BKSP.id, 65288, 0);
            keyboard.setKeysyms(XKeycode.KEY_INSERT.id, 65379, 0);
            keyboard.setKeysyms(XKeycode.KEY_PRIOR.id, 65365, 0);
            keyboard.setKeysyms(XKeycode.KEY_NEXT.id, 65366, 0);
            keyboard.setKeysyms(XKeycode.KEY_HOME.id, 65360, 0);
            keyboard.setKeysyms(XKeycode.KEY_END.id, 65367, 0);
            keyboard.setKeysyms(XKeycode.KEY_SHIFT_L.id, 65505, 0);
            keyboard.setKeysyms(XKeycode.KEY_SHIFT_R.id, 65506, 0);
            keyboard.setKeysyms(XKeycode.KEY_CTRL_L.id, 65507, 0);
            keyboard.setKeysyms(XKeycode.KEY_CTRL_R.id, 65508, 0);
            keyboard.setKeysyms(XKeycode.KEY_ALT_L.id, 65511, 0);
            keyboard.setKeysyms(XKeycode.KEY_ALT_R.id, 65512, 0);
            keyboard.setKeysyms(XKeycode.KEY_TAB.id, 65289, 0);
            keyboard.setKeysyms(XKeycode.KEY_SPACE.id, 32, 32);
            keyboard.setKeysyms(XKeycode.KEY_A.id, 97, 65);
            keyboard.setKeysyms(XKeycode.KEY_B.id, 98, 66);
            keyboard.setKeysyms(XKeycode.KEY_C.id, 99, 67);
            keyboard.setKeysyms(XKeycode.KEY_D.id, 100, 68);
            keyboard.setKeysyms(XKeycode.KEY_E.id, R$styleable.Constraint_layout_goneMarginTop, 69);
            keyboard.setKeysyms(XKeycode.KEY_F.id, R$styleable.Constraint_motionProgress, 70);
            keyboard.setKeysyms(XKeycode.KEY_G.id, R$styleable.Constraint_motionStagger, 71);
            keyboard.setKeysyms(XKeycode.KEY_H.id, R$styleable.Constraint_pathMotionArc, 72);
            keyboard.setKeysyms(XKeycode.KEY_I.id, 105, 73);
            keyboard.setKeysyms(XKeycode.KEY_J.id, R$styleable.Constraint_transitionEasing, 74);
            keyboard.setKeysyms(XKeycode.KEY_K.id, R$styleable.Constraint_transitionPathRotate, 75);
            keyboard.setKeysyms(XKeycode.KEY_L.id, R$styleable.Constraint_visibilityMode, 76);
            keyboard.setKeysyms(XKeycode.KEY_M.id, 109, 77);
            keyboard.setKeysyms(XKeycode.KEY_N.id, 110, 78);
            keyboard.setKeysyms(XKeycode.KEY_O.id, 111, 79);
            keyboard.setKeysyms(XKeycode.KEY_P.id, 112, 80);
            keyboard.setKeysyms(XKeycode.KEY_Q.id, 113, 81);
            keyboard.setKeysyms(XKeycode.KEY_R.id, androidx.appcompat.R$styleable.AppCompatTheme_viewInflaterClass, 82);
            keyboard.setKeysyms(XKeycode.KEY_S.id, androidx.appcompat.R$styleable.AppCompatTheme_windowActionBar, 83);
            keyboard.setKeysyms(XKeycode.KEY_T.id, androidx.appcompat.R$styleable.AppCompatTheme_windowActionBarOverlay, 84);
            keyboard.setKeysyms(XKeycode.KEY_U.id, androidx.appcompat.R$styleable.AppCompatTheme_windowActionModeOverlay, 85);
            keyboard.setKeysyms(XKeycode.KEY_V.id, androidx.appcompat.R$styleable.AppCompatTheme_windowFixedHeightMajor, 86);
            keyboard.setKeysyms(XKeycode.KEY_W.id, androidx.appcompat.R$styleable.AppCompatTheme_windowFixedHeightMinor, 87);
            keyboard.setKeysyms(XKeycode.KEY_X.id, androidx.appcompat.R$styleable.AppCompatTheme_windowFixedWidthMajor, 88);
            keyboard.setKeysyms(XKeycode.KEY_Y.id, androidx.appcompat.R$styleable.AppCompatTheme_windowFixedWidthMinor, 89);
            keyboard.setKeysyms(XKeycode.KEY_Z.id, androidx.appcompat.R$styleable.AppCompatTheme_windowMinWidthMajor, 90);
            keyboard.setKeysyms(XKeycode.KEY_1.id, 49, 33);
            keyboard.setKeysyms(XKeycode.KEY_2.id, 50, 64);
            keyboard.setKeysyms(XKeycode.KEY_3.id, 51, 35);
            keyboard.setKeysyms(XKeycode.KEY_4.id, 52, 36);
            keyboard.setKeysyms(XKeycode.KEY_5.id, 53, 37);
            keyboard.setKeysyms(XKeycode.KEY_6.id, 54, 94);
            keyboard.setKeysyms(XKeycode.KEY_7.id, 55, 38);
            keyboard.setKeysyms(XKeycode.KEY_8.id, 56, 42);
            keyboard.setKeysyms(XKeycode.KEY_9.id, 57, 40);
            keyboard.setKeysyms(XKeycode.KEY_0.id, 48, 41);
            keyboard.setKeysyms(XKeycode.KEY_COMMA.id, 44, 60);
            keyboard.setKeysyms(XKeycode.KEY_PERIOD.id, 46, 62);
            keyboard.setKeysyms(XKeycode.KEY_SEMICOLON.id, 59, 58);
            keyboard.setKeysyms(XKeycode.KEY_APOSTROPHE.id, 39, 34);
            keyboard.setKeysyms(XKeycode.KEY_BRACKET_LEFT.id, 91, androidx.appcompat.R$styleable.AppCompatTheme_windowMinWidthMinor);
            keyboard.setKeysyms(XKeycode.KEY_BRACKET_RIGHT.id, 93, 125);
            keyboard.setKeysyms(XKeycode.KEY_GRAVE.id, 96, 126);
            keyboard.setKeysyms(XKeycode.KEY_MINUS.id, 45, 95);
            keyboard.setKeysyms(XKeycode.KEY_EQUAL.id, 61, 43);
            keyboard.setKeysyms(XKeycode.KEY_SLASH.id, 47, 63);
            keyboard.setKeysyms(XKeycode.KEY_BACKSLASH.id, 92, androidx.appcompat.R$styleable.AppCompatTheme_windowNoTitle);
            keyboard.setKeysyms(XKeycode.KEY_KP_DIVIDE.id, 65455, 65455);
            keyboard.setKeysyms(XKeycode.KEY_KP_MULTIPLY.id, 65450, 65450);
            keyboard.setKeysyms(XKeycode.KEY_KP_SUBTRACT.id, 65453, 65453);
            keyboard.setKeysyms(XKeycode.KEY_KP_ADD.id, 65451, 65451);
            keyboard.setKeysyms(XKeycode.KEY_KP_0.id, 65456, 65438);
            keyboard.setKeysyms(XKeycode.KEY_KP_1.id, 65457, 65436);
            keyboard.setKeysyms(XKeycode.KEY_KP_2.id, 65458, 65433);
            keyboard.setKeysyms(XKeycode.KEY_KP_3.id, 65459, 65459);
            keyboard.setKeysyms(XKeycode.KEY_KP_4.id, 65460, 65430);
            keyboard.setKeysyms(XKeycode.KEY_KP_5.id, 65461, 65461);
            keyboard.setKeysyms(XKeycode.KEY_KP_6.id, 65462, 65432);
            keyboard.setKeysyms(XKeycode.KEY_KP_7.id, 65463, 65429);
            keyboard.setKeysyms(XKeycode.KEY_KP_8.id, 65464, 65431);
            keyboard.setKeysyms(XKeycode.KEY_KP_9.id, 65465, 65465);
            keyboard.setKeysyms(XKeycode.KEY_KP_DEL.id, 65439, 0);
            keyboard.setKeysyms(XKeycode.KEY_F1.id, 65470, 0);
            keyboard.setKeysyms(XKeycode.KEY_F2.id, 65471, 0);
            keyboard.setKeysyms(XKeycode.KEY_F3.id, 65472, 0);
            keyboard.setKeysyms(XKeycode.KEY_F4.id, 65473, 0);
            keyboard.setKeysyms(XKeycode.KEY_F5.id, 65474, 0);
            keyboard.setKeysyms(XKeycode.KEY_F6.id, 65475, 0);
            keyboard.setKeysyms(XKeycode.KEY_F7.id, 65476, 0);
            keyboard.setKeysyms(XKeycode.KEY_F8.id, 65477, 0);
            keyboard.setKeysyms(XKeycode.KEY_F9.id, 65478, 0);
            keyboard.setKeysyms(XKeycode.KEY_F10.id, 65479, 0);
            keyboard.setKeysyms(XKeycode.KEY_F11.id, 65480, 0);
            keyboard.setKeysyms(XKeycode.KEY_F12.id, 65481, 0);
            return keyboard;
        }
    
        public static boolean isModifier(byte keycode) {
            return keycode == XKeycode.KEY_SHIFT_L.id || keycode == XKeycode.KEY_SHIFT_R.id || keycode == XKeycode.KEY_CTRL_L.id || keycode == XKeycode.KEY_CTRL_R.id || keycode == XKeycode.KEY_ALT_L.id || keycode == XKeycode.KEY_ALT_R.id || keycode == XKeycode.KEY_CAPS_LOCK.id || keycode == XKeycode.KEY_NUM_LOCK.id;
        }
    
        public static int getModifierFlag(byte keycode) {
            if (keycode == XKeycode.KEY_SHIFT_L.id || keycode == XKeycode.KEY_SHIFT_R.id) {
                return 1;
            }
            if (keycode == XKeycode.KEY_CAPS_LOCK.id) {
                return 2;
            }
            if (keycode == XKeycode.KEY_CTRL_L.id || keycode == XKeycode.KEY_CTRL_R.id) {
                return 4;
            }
            if (keycode == XKeycode.KEY_ALT_L.id || keycode == XKeycode.KEY_ALT_R.id) {
                return 8;
            }
            if (keycode == XKeycode.KEY_NUM_LOCK.id) {
                return 16;
            }
            return 0;
        }
    
        public static boolean isModifierSticky(byte keycode) {
            return keycode == XKeycode.KEY_CAPS_LOCK.id || keycode == XKeycode.KEY_NUM_LOCK.id;
        }
    }
  + app/src/main/java/com/winlator/xserver/Pixmap.java
    package com.winlator.xserver;
    
    import android.graphics.Bitmap;
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public class Pixmap extends XResource {
        public final Drawable drawable;
    
        private static native void toBitmap(ByteBuffer byteBuffer, ByteBuffer byteBuffer2, Bitmap bitmap);
    
        public Pixmap(Drawable drawable) {
            super(drawable.id);
            this.drawable = drawable;
        }
    
        public Bitmap toBitmap(Pixmap maskPixmap) {
            ByteBuffer maskData = maskPixmap != null ? maskPixmap.drawable.getData() : null;
            Drawable drawable = this.drawable;
            Bitmap bitmap = Bitmap.createBitmap(drawable.width, drawable.height, Bitmap.Config.ARGB_8888);
            toBitmap(this.drawable.getData(), maskData, bitmap);
            return bitmap;
        }
    }
  + app/src/main/java/com/winlator/xserver/PixmapFormat.java
    package com.winlator.xserver;
    
    /* loaded from: classes.dex */
    public class PixmapFormat {
        public final byte bitsPerPixel;
        public final byte depth;
        public final byte scanlinePad;
    
        public PixmapFormat(int depth, int bitsPerPixel, int scanlinePad) {
            this.depth = (byte) depth;
            this.bitsPerPixel = (byte) bitsPerPixel;
            this.scanlinePad = (byte) scanlinePad;
        }
    }
  + app/src/main/java/com/winlator/xserver/PixmapManager.java
    package com.winlator.xserver;
    
    import android.graphics.Bitmap;
    import android.util.SparseArray;
    import com.winlator.xserver.Window;
    
    /* loaded from: classes.dex */
    public class PixmapManager extends XResourceManager {
        private final SparseArray<Pixmap> pixmaps = new SparseArray<>();
        public final PixmapFormat[] supportedPixmapFormats;
        public final Visual[] supportedVisuals;
        public final Visual visual;
    
        public PixmapManager() {
            Visual visual = new Visual(IDGenerator.generate(), true, 32, 24, 16711680, 65280, 255);
            this.visual = visual;
            this.supportedVisuals = new Visual[]{visual, new Visual(IDGenerator.generate(), false, 1, 1, 0, 0, 0)};
            this.supportedPixmapFormats = new PixmapFormat[]{new PixmapFormat(1, 1, 32), new PixmapFormat(24, 32, 32), new PixmapFormat(32, 32, 32)};
        }
    
        public Pixmap getPixmap(int id) {
            return this.pixmaps.get(id);
        }
    
        public Pixmap createPixmap(Drawable drawable) {
            if (this.pixmaps.indexOfKey(drawable.id) >= 0) {
                return null;
            }
            Pixmap pixmap = new Pixmap(drawable);
            this.pixmaps.put(drawable.id, pixmap);
            triggerOnCreateResourceListener(pixmap);
            return pixmap;
        }
    
        public void freePixmap(int id) {
            triggerOnFreeResourceListener(this.pixmaps.get(id));
            this.pixmaps.remove(id);
        }
    
        public Visual getVisualForDepth(byte depth) {
            Visual visual = this.visual;
            if (depth == visual.depth) {
                return visual;
            }
            for (Visual visual2 : this.supportedVisuals) {
                if (depth == visual2.depth) {
                    return visual2;
                }
            }
            return null;
        }
    
        public Visual getVisual(int id) {
            Visual visual = this.visual;
            if (id == visual.id) {
                return visual;
            }
            for (Visual visual2 : this.supportedVisuals) {
                if (id == visual2.id && visual2.displayable) {
                    return visual2;
                }
            }
            return null;
        }
    
        public Bitmap getWindowIcon(Window window) {
            int colorPixmapId = window.getWMHintsValue(Window.WMHints.ICON_PIXMAP);
            int maskPixmapId = window.getWMHintsValue(Window.WMHints.ICON_MASK);
            Pixmap colorPixmap = colorPixmapId != 0 ? getPixmap(colorPixmapId) : null;
            Pixmap maskPixmap = maskPixmapId != 0 ? getPixmap(maskPixmapId) : null;
            if (colorPixmap != null) {
                return colorPixmap.toBitmap(maskPixmap);
            }
            return null;
        }
    }
  + app/src/main/java/com/winlator/xserver/Pointer.java
    package com.winlator.xserver;
    
    import com.winlator.math.Mathf;
    import java.util.ArrayList;
    
    /* loaded from: classes.dex */
    public class Pointer {
        private short x;
        private final XServer xServer;
        private short y;
        private final ArrayList<OnPointerMotionListener> onPointerMotionListeners = new ArrayList<>();
        private final Bitmask buttonMask = new Bitmask();
    
        public enum Button {
            BUTTON_LEFT,
            BUTTON_MIDDLE,
            BUTTON_RIGHT,
            BUTTON_SCROLL_UP,
            BUTTON_SCROLL_DOWN,
            BUTTON_SCROLL_CLICK_LEFT,
            BUTTON_SCROLL_CLICK_RIGHT;
    
            public byte code() {
                return (byte) (ordinal() + 1);
            }
    
            public int flag() {
                return 1 << (code() + 7);
            }
        }
    
        public interface OnPointerMotionListener {
            default void onPointerButtonPress(Button button) {
            }
    
            default void onPointerButtonRelease(Button button) {
            }
    
            default void onPointerMove(short x, short y) {
            }
        }
    
        public Pointer(XServer xServer) {
            this.xServer = xServer;
        }
    
        public void setX(int x) {
            this.x = (short) x;
        }
    
        public void setY(int y) {
            this.y = (short) y;
        }
    
        public short getX() {
            return this.x;
        }
    
        public short getY() {
            return this.y;
        }
    
        public short getClampedX() {
            return (short) Mathf.clamp((int) this.x, 0, this.xServer.screenInfo.width - 1);
        }
    
        public short getClampedY() {
            return (short) Mathf.clamp((int) this.y, 0, this.xServer.screenInfo.height - 1);
        }
    
        public void setPosition(int x, int y) {
            setX(x);
            setY(y);
            triggerOnPointerMove(this.x, this.y);
        }
    
        public Bitmask getButtonMask() {
            return this.buttonMask;
        }
    
        public void setButton(Button button, boolean pressed) {
            boolean oldPressed = isButtonPressed(button);
            this.buttonMask.set(button.flag(), pressed);
            if (oldPressed != pressed) {
                if (pressed) {
                    triggerOnPointerButtonPress(button);
                } else {
                    triggerOnPointerButtonRelease(button);
                }
            }
        }
    
        public boolean isButtonPressed(Button button) {
            return this.buttonMask.isSet(button.flag());
        }
    
        public void addOnPointerMotionListener(OnPointerMotionListener onPointerMotionListener) {
            this.onPointerMotionListeners.add(onPointerMotionListener);
        }
    
        private void triggerOnPointerButtonPress(Button button) {
            for (int i = this.onPointerMotionListeners.size() - 1; i >= 0; i--) {
                this.onPointerMotionListeners.get(i).onPointerButtonPress(button);
            }
        }
    
        private void triggerOnPointerButtonRelease(Button button) {
            for (int i = this.onPointerMotionListeners.size() - 1; i >= 0; i--) {
                this.onPointerMotionListeners.get(i).onPointerButtonRelease(button);
            }
        }
    
        private void triggerOnPointerMove(short x, short y) {
            for (int i = this.onPointerMotionListeners.size() - 1; i >= 0; i--) {
                this.onPointerMotionListeners.get(i).onPointerMove(x, y);
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/Property.java
    package com.winlator.xserver;
    
    import com.winlator.core.ArrayUtils;
    import com.winlator.core.StringUtils;
    import java.nio.ByteBuffer;
    import java.nio.ByteOrder;
    import java.nio.charset.StandardCharsets;
    
    /* loaded from: classes.dex */
    public class Property {
        private String cachedString;
        public ByteBuffer data;
        public final Format format;
        public final int name;
        public final int type;
    
        public enum Mode {
            REPLACE,
            PREPEND,
            APPEND
        }
    
        public enum Format {
            BYTE_ARRAY(8),
            SHORT_ARRAY(16),
            INT_ARRAY(32);
    
            public final byte value;
    
            Format(int value) {
                this.value = (byte) value;
            }
    
            public static Format valueOf(int format) {
                switch (format) {
                    case 8:
                        return BYTE_ARRAY;
                    case 16:
                        return SHORT_ARRAY;
                    case 32:
                        return INT_ARRAY;
                    default:
                        return null;
                }
            }
        }
    
        public Property(int name, int type, Format format, byte[] data) {
            this.name = name;
            this.type = type;
            this.format = format;
            replace(data);
        }
    
        public void replace(byte[] data) {
            this.cachedString = null;
            this.data = ByteBuffer.wrap(data != null ? data : new byte[0]).order(ByteOrder.LITTLE_ENDIAN);
        }
    
        public void prepend(byte[] values) {
            this.cachedString = null;
            replace(ArrayUtils.concat(values, this.data.array()));
        }
    
        public void append(byte[] values) {
            this.cachedString = null;
            replace(ArrayUtils.concat(this.data.array(), values));
        }
    
        /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
        public String toString() {
            char c;
            String type = Atom.getName(this.type);
            this.data.rewind();
            switch (type.hashCode()) {
                case -1838656495:
                    if (type.equals("STRING")) {
                        c = 1;
                        break;
                    }
                    c = 65535;
                    break;
                case 2019665:
                    if (type.equals("ATOM")) {
                        c = 2;
                        break;
                    }
                    c = 65535;
                    break;
                case 265876607:
                    if (type.equals("UTF8_STRING")) {
                        c = 0;
                        break;
                    }
                    c = 65535;
                    break;
                default:
                    c = 65535;
                    break;
            }
            switch (c) {
                case 0:
                    String str = this.cachedString;
                    if (str != null) {
                        return str;
                    }
                    String fromANSIString = StringUtils.fromANSIString(this.data.array(), StandardCharsets.UTF_8);
                    this.cachedString = fromANSIString;
                    return fromANSIString;
                case 1:
                    String str2 = this.cachedString;
                    if (str2 != null) {
                        return str2;
                    }
                    String fromANSIString2 = StringUtils.fromANSIString(this.data.array(), XServer.LATIN1_CHARSET);
                    this.cachedString = fromANSIString2;
                    return fromANSIString2;
                case 2:
                    return Atom.getName(this.data.getInt(0));
                default:
                    StringBuilder sb = new StringBuilder();
                    int size = this.data.capacity() / (this.format.value >> 3);
                    for (int i = 0; i < size; i++) {
                        if (i > 0) {
                            sb.append(",");
                        }
                        switch (AnonymousClass1.$SwitchMap$com$winlator$xserver$Property$Format[this.format.ordinal()]) {
                            case 1:
                                sb.append((int) this.data.get());
                                break;
                            case 2:
                                sb.append((int) this.data.getShort());
                                break;
                            case 3:
                                sb.append(this.data.getInt());
                                break;
                        }
                    }
                    this.data.rewind();
                    return sb.toString();
            }
        }
    
        /* renamed from: com.winlator.xserver.Property$1, reason: invalid class name */
        static /* synthetic */ class AnonymousClass1 {
            static final /* synthetic */ int[] $SwitchMap$com$winlator$xserver$Property$Format;
    
            static {
                int[] iArr = new int[Format.values().length];
                $SwitchMap$com$winlator$xserver$Property$Format = iArr;
                try {
                    iArr[Format.BYTE_ARRAY.ordinal()] = 1;
                } catch (NoSuchFieldError e) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$Property$Format[Format.SHORT_ARRAY.ordinal()] = 2;
                } catch (NoSuchFieldError e2) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$Property$Format[Format.INT_ARRAY.ordinal()] = 3;
                } catch (NoSuchFieldError e3) {
                }
            }
        }
    
        public int getInt(int index) {
            return this.data.getInt(index * 4);
        }
    
        public long getLong(int index) {
            return this.data.getLong(index * 8);
        }
    }
  + app/src/main/java/com/winlator/xserver/ResourceIDs.java
    package com.winlator.xserver;
    
    import androidx.collection.ArraySet;
    import java.util.Iterator;
    
    /* loaded from: classes.dex */
    public class ResourceIDs {
        private final ArraySet<Integer> idBases = new ArraySet<>();
        public final int idMask;
    
        public ResourceIDs(int maxClients) {
            int clientsBits = 32 - Integer.numberOfLeadingZeros(maxClients);
            int base = 29 - (Integer.bitCount(maxClients) == 1 ? clientsBits - 1 : clientsBits);
            this.idMask = (1 << base) - 1;
            for (int i = 1; i < maxClients; i++) {
                this.idBases.add(Integer.valueOf(i << base));
            }
        }
    
        public synchronized Integer get() {
            if (this.idBases.isEmpty()) {
                return -1;
            }
            Iterator<Integer> iter = this.idBases.iterator();
            int idBase = iter.next().intValue();
            iter.remove();
            return Integer.valueOf(idBase);
        }
    
        public boolean isInInterval(int value, int idBase) {
            int i = this.idMask;
            return (value | i) == (i | idBase);
        }
    
        public synchronized void free(Integer idBase) {
            this.idBases.add(idBase);
        }
    }
  + app/src/main/java/com/winlator/xserver/SHMSegmentManager.java
    package com.winlator.xserver;
    
    import android.util.SparseArray;
    import com.winlator.sysvshm.SysVSharedMemory;
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public class SHMSegmentManager {
        private final SparseArray<ByteBuffer> shmSegments = new SparseArray<>();
        private final SysVSharedMemory sysVSharedMemory;
    
        public SHMSegmentManager(SysVSharedMemory sysVSharedMemory) {
            this.sysVSharedMemory = sysVSharedMemory;
        }
    
        public void attach(int xid, int shmid) {
            if (this.shmSegments.indexOfKey(xid) >= 0) {
                detach(xid);
            }
            ByteBuffer data = this.sysVSharedMemory.attach(shmid);
            if (data != null) {
                this.shmSegments.put(xid, data);
            }
        }
    
        public void detach(int xid) {
            ByteBuffer data = this.shmSegments.get(xid);
            if (data != null) {
                this.sysVSharedMemory.detach(data);
                this.shmSegments.remove(xid);
            }
        }
    
        public ByteBuffer getData(int xid) {
            return this.shmSegments.get(xid);
        }
    }
  + app/src/main/java/com/winlator/xserver/ScreenInfo.java
    package com.winlator.xserver;
    
    /* loaded from: classes.dex */
    public class ScreenInfo {
        public final short height;
        public final short width;
    
        public ScreenInfo(String value) {
            String[] parts = value.split("x");
            this.width = Short.parseShort(parts[0]);
            this.height = Short.parseShort(parts[1]);
        }
    
        public short getWidthInMillimeters() {
            return (short) (this.width / 10);
        }
    
        public short getHeightInMillimeters() {
            return (short) (this.height / 10);
        }
    
        public String toString() {
            return ((int) this.width) + "x" + ((int) this.height);
        }
    }
  + app/src/main/java/com/winlator/xserver/SelectionManager.java
    package com.winlator.xserver;
    
    import android.util.SparseArray;
    import com.winlator.xserver.XResourceManager;
    import com.winlator.xserver.events.SelectionClear;
    
    /* loaded from: classes.dex */
    public class SelectionManager implements XResourceManager.OnResourceLifecycleListener {
        private final SparseArray<Selection> selections = new SparseArray<>();
    
        public SelectionManager(WindowManager windowManager) {
            windowManager.addOnResourceLifecycleListener(this);
        }
    
        public static class Selection {
            private XClient client;
            public Window owner;
        }
    
        public void setSelection(int atom, Window owner, XClient client, int timestamp) {
            Selection selection = getSelection(atom);
            if (selection.owner != null && (owner == null || selection.client != client)) {
                selection.client.sendEvent(new SelectionClear(timestamp, owner, atom));
            }
            selection.owner = owner;
            selection.client = client;
        }
    
        public Selection getSelection(int atom) {
            Selection selection = this.selections.get(atom);
            if (selection != null) {
                return selection;
            }
            Selection selection2 = new Selection();
            this.selections.put(atom, selection2);
            return selection2;
        }
    
        @Override // com.winlator.xserver.XResourceManager.OnResourceLifecycleListener
        public void onFreeResource(XResource resource) {
            for (int i = 0; i < this.selections.size(); i++) {
                Selection selection = this.selections.valueAt(i);
                if (selection.owner == resource) {
                    selection.owner = null;
                }
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/Visual.java
    package com.winlator.xserver;
    
    /* loaded from: classes.dex */
    public class Visual {
        public final byte bitsPerRGBValue;
        public final int blueMask;
        public final byte depth;
        public final boolean displayable;
        public final int greenMask;
        public final int id;
        public final int redMask;
        public final Type type = Type.TRUE_COLOR;
        public final short colormapEntries = 256;
    
        public enum Type {
            STATIC_GRAY,
            GRAYSCALE,
            STATIC_COLOR,
            PSEUDO_COLOR,
            TRUE_COLOR,
            DIRECT_COLOR
        }
    
        public Visual(int id, boolean displayable, int depth, int bitsPerRGBValue, int redMask, int greenMask, int blueMask) {
            this.id = id;
            this.displayable = displayable;
            this.depth = (byte) depth;
            this.bitsPerRGBValue = (byte) bitsPerRGBValue;
            this.redMask = redMask;
            this.greenMask = greenMask;
            this.blueMask = blueMask;
        }
    }
  + app/src/main/java/com/winlator/xserver/Window.java
    package com.winlator.xserver;
    
    import android.util.SparseArray;
    import com.winlator.renderer.FullscreenTransformation;
    import com.winlator.xserver.Property;
    import com.winlator.xserver.events.Event;
    import com.winlator.xserver.events.PropertyNotify;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.Iterator;
    import java.util.List;
    import java.util.Stack;
    
    /* loaded from: classes.dex */
    public class Window extends XResource {
        public final WindowAttributes attributes;
        private short borderWidth;
        private final ArrayList<Window> children;
        private Drawable content;
        private final ArrayList<EventListener> eventListeners;
        private FullscreenTransformation fullscreenTransformation;
        private short height;
        private final List<Window> immutableChildren;
        public final XClient originClient;
        private Window parent;
        private final SparseArray<Property> properties;
        private short width;
        private short x;
        private short y;
    
        public enum MapState {
            UNMAPPED,
            UNVIEWABLE,
            VIEWABLE
        }
    
        public enum StackMode {
            ABOVE,
            BELOW,
            TOP_IF,
            BOTTOM_IF,
            OPPOSITE
        }
    
        public enum Type {
            NORMAL,
            DIALOG
        }
    
        public enum WMHints {
            FLAGS,
            INPUT,
            INITIAL_STATE,
            ICON_PIXMAP,
            ICON_WINDOW,
            ICON_X,
            ICON_Y,
            ICON_MASK,
            WINDOW_GROUP
        }
    
        public Window(int id, Drawable content, int x, int y, int width, int height, XClient originClient) {
            super(id);
            this.attributes = new WindowAttributes(this);
            this.properties = new SparseArray<>();
            ArrayList<Window> arrayList = new ArrayList<>();
            this.children = arrayList;
            this.immutableChildren = Collections.unmodifiableList(arrayList);
            this.eventListeners = new ArrayList<>();
            this.content = content;
            this.x = (short) x;
            this.y = (short) y;
            this.width = (short) width;
            this.height = (short) height;
            this.originClient = originClient;
        }
    
        public short getX() {
            return this.x;
        }
    
        public void setX(short x) {
            this.x = x;
        }
    
        public short getY() {
            return this.y;
        }
    
        public void setY(short y) {
            this.y = y;
        }
    
        public short getWidth() {
            return this.width;
        }
    
        public void setWidth(short width) {
            this.width = width;
        }
    
        public short getHeight() {
            return this.height;
        }
    
        public void setHeight(short height) {
            this.height = height;
        }
    
        public short getBorderWidth() {
            return this.borderWidth;
        }
    
        public void setBorderWidth(short borderWidth) {
            this.borderWidth = borderWidth;
        }
    
        public Drawable getContent() {
            return this.content;
        }
    
        public void setContent(Drawable content) {
            this.content = content;
        }
    
        public Window getParent() {
            return this.parent;
        }
    
        public Property getProperty(int id) {
            return this.properties.get(id);
        }
    
        public void addProperty(Property property) {
            this.properties.put(property.name, property);
        }
    
        public void removeProperty(int id) {
            this.properties.remove(id);
            sendEvent(4194304, new PropertyNotify(this, id, true));
        }
    
        public Property modifyProperty(int atom, int type, Property.Format format, Property.Mode mode, byte[] data) {
            Property property = getProperty(atom);
            boolean modified = false;
            if (property == null) {
                Property property2 = new Property(atom, type, format, data);
                property = property2;
                addProperty(property2);
                modified = true;
            } else if (mode == Property.Mode.REPLACE) {
                if (property.format == format) {
                    property.replace(data);
                } else {
                    this.properties.put(atom, new Property(atom, type, format, data));
                }
                modified = true;
            } else if (property.format == format && property.type == type) {
                if (mode == Property.Mode.PREPEND) {
                    property.prepend(data);
                } else if (mode == Property.Mode.APPEND) {
                    property.append(data);
                }
                modified = true;
            }
            if (modified) {
                sendEvent(4194304, new PropertyNotify(this, atom, false));
                return property;
            }
            return null;
        }
    
        public String getName() {
            Property property = getProperty(39);
            return property != null ? property.toString() : "";
        }
    
        public String getClassName() {
            Property property = getProperty(67);
            return property != null ? property.toString() : "";
        }
    
        public int getWMHintsValue(WMHints wmHints) {
            Property property = getProperty(35);
            if (property != null) {
                return property.getInt(wmHints.ordinal());
            }
            return 0;
        }
    
        public int getProcessId() {
            Property property = getProperty(70);
            if (property != null) {
                return property.getInt(0);
            }
            return 0;
        }
    
        public int getTransientFor() {
            Property property = getProperty(68);
            if (property != null) {
                return property.getInt(0);
            }
            return 0;
        }
    
        public boolean isWoW64() {
            Property property = getProperty(73);
            return property != null && property.data.get(0) == 1;
        }
    
        public boolean isSurface() {
            Property property = getProperty(74);
            return property != null && property.data.get(0) == 1;
        }
    
        public Bitmask getDecorations() {
            Property property = getProperty(69);
            return new Bitmask(property != null ? property.getInt(2) : 0);
        }
    
        public boolean hasNoDecorations() {
            return getDecorations().isEmpty();
        }
    
        public boolean hasDecoration(Decoration decoration) {
            return getDecorations().isSet(decoration.flag());
        }
    
        public Type getType() {
            Property property = getProperty(71);
            return (property == null || !property.toString().equals("_NET_WM_WINDOW_TYPE_DIALOG")) ? Type.NORMAL : Type.DIALOG;
        }
    
        public long getHandle() {
            Property property = getProperty(72);
            if (property != null) {
                return property.getLong(0);
            }
            return 0L;
        }
    
        public boolean isApplicationWindow() {
            int windowGroup = getWMHintsValue(WMHints.WINDOW_GROUP);
            return isRenderable() && !getName().isEmpty() && windowGroup == this.id;
        }
    
        public boolean isInputOutput() {
            return this.content != null;
        }
    
        public void addChild(Window child) {
            if (child == null || child.parent == this) {
                return;
            }
            child.parent = this;
            this.children.add(child);
        }
    
        public void removeChild(Window child) {
            if (child == null || child.parent != this) {
                return;
            }
            child.parent = null;
            this.children.remove(child);
        }
    
        public Window previousSibling() {
            int index;
            Window window = this.parent;
            if (window != null && (index = window.children.indexOf(this)) > 0) {
                return this.parent.children.get(index - 1);
            }
            return null;
        }
    
        public void moveChildAbove(Window child, Window sibling) {
            this.children.remove(child);
            if (sibling != null && this.children.contains(sibling)) {
                ArrayList<Window> arrayList = this.children;
                arrayList.add(arrayList.indexOf(sibling) + 1, child);
            } else {
                this.children.add(child);
            }
        }
    
        public void moveChildBelow(Window child, Window sibling) {
            this.children.remove(child);
            if (sibling != null && this.children.contains(sibling)) {
                ArrayList<Window> arrayList = this.children;
                arrayList.add(arrayList.indexOf(sibling), child);
            } else {
                this.children.add(0, child);
            }
        }
    
        public List<Window> getChildren() {
            return this.immutableChildren;
        }
    
        public int getChildCount() {
            return this.children.size();
        }
    
        public void addEventListener(EventListener eventListener) {
            this.eventListeners.add(eventListener);
        }
    
        public void removeEventListener(EventListener eventListener) {
            this.eventListeners.remove(eventListener);
        }
    
        public boolean hasEventListenerFor(int eventId) {
            Iterator<EventListener> it = this.eventListeners.iterator();
            while (it.hasNext()) {
                EventListener eventListener = it.next();
                if (eventListener.isInterestedIn(eventId)) {
                    return true;
                }
            }
            return false;
        }
    
        public boolean hasEventListenerFor(Bitmask mask) {
            Iterator<EventListener> it = this.eventListeners.iterator();
            while (it.hasNext()) {
                EventListener eventListener = it.next();
                if (eventListener.isInterestedIn(mask)) {
                    return true;
                }
            }
            return false;
        }
    
        public void sendEvent(int eventId, Event event) {
            Iterator<EventListener> it = this.eventListeners.iterator();
            while (it.hasNext()) {
                EventListener eventListener = it.next();
                if (eventListener.isInterestedIn(eventId)) {
                    eventListener.sendEvent(event);
                }
            }
        }
    
        public void sendEvent(Bitmask eventMask, Event event) {
            Iterator<EventListener> it = this.eventListeners.iterator();
            while (it.hasNext()) {
                EventListener eventListener = it.next();
                if (eventListener.isInterestedIn(eventMask)) {
                    eventListener.sendEvent(event);
                }
            }
        }
    
        public void sendEvent(int eventId, Event event, XClient client) {
            Iterator<EventListener> it = this.eventListeners.iterator();
            while (it.hasNext()) {
                EventListener eventListener = it.next();
                if (eventListener.isInterestedIn(eventId) && eventListener.client == client) {
                    eventListener.sendEvent(event);
                }
            }
        }
    
        public void sendEvent(Bitmask eventMask, Event event, XClient client) {
            Iterator<EventListener> it = this.eventListeners.iterator();
            while (it.hasNext()) {
                EventListener eventListener = it.next();
                if (eventListener.isInterestedIn(eventMask) && eventListener.client == client) {
                    eventListener.sendEvent(event);
                }
            }
        }
    
        public void sendEvent(Event event) {
            Iterator<EventListener> it = this.eventListeners.iterator();
            while (it.hasNext()) {
                EventListener eventListener = it.next();
                eventListener.sendEvent(event);
            }
        }
    
        public boolean isRenderable() {
            return this.attributes.isMapped() && this.width > 1 && this.height > 1;
        }
    
        public boolean containsPoint(short rootX, short rootY, boolean useFullscreenTransformation) {
            short[] localPoint = rootPointToLocal(rootX, rootY, useFullscreenTransformation);
            FullscreenTransformation fullscreenTransformation = this.fullscreenTransformation;
            short width = (fullscreenTransformation == null || !useFullscreenTransformation) ? this.width : fullscreenTransformation.width;
            short height = (fullscreenTransformation == null || !useFullscreenTransformation) ? this.height : fullscreenTransformation.height;
            return localPoint[0] >= 0 && localPoint[1] >= 0 && localPoint[0] <= width && localPoint[1] <= height;
        }
    
        public short[] rootPointToLocal(short x, short y) {
            return rootPointToLocal(x, y, false);
        }
    
        public short[] rootPointToLocal(short x, short y, boolean useFullscreenTransformation) {
            for (Window window = this; window != null; window = window.parent) {
                FullscreenTransformation fullscreenTransformation = window.fullscreenTransformation;
                x = (short) (x - ((fullscreenTransformation == null || !useFullscreenTransformation) ? window.x : fullscreenTransformation.x));
                y = (short) (y - ((fullscreenTransformation == null || !useFullscreenTransformation) ? window.y : fullscreenTransformation.y));
            }
            return new short[]{x, y};
        }
    
        public short[] localPointToRoot(short x, short y) {
            return localPointToRoot(x, y, false);
        }
    
        public short[] localPointToRoot(short x, short y, boolean useFullscreenTransformation) {
            for (Window window = this; window != null; window = window.parent) {
                FullscreenTransformation fullscreenTransformation = window.fullscreenTransformation;
                x = (short) (((fullscreenTransformation == null || !useFullscreenTransformation) ? window.x : fullscreenTransformation.x) + x);
                y = (short) (((fullscreenTransformation == null || !useFullscreenTransformation) ? window.y : fullscreenTransformation.y) + y);
            }
            return new short[]{x, y};
        }
    
        public short getRootX() {
            return getRootX(false);
        }
    
        public short getRootX(boolean useFullscreenTransformation) {
            FullscreenTransformation fullscreenTransformation = this.fullscreenTransformation;
            short rootX = (fullscreenTransformation == null || !useFullscreenTransformation) ? this.x : fullscreenTransformation.x;
            for (Window window = this.parent; window != null; window = window.parent) {
                FullscreenTransformation fullscreenTransformation2 = window.fullscreenTransformation;
                rootX = (short) (((fullscreenTransformation2 == null || !useFullscreenTransformation) ? window.x : fullscreenTransformation2.x) + rootX);
            }
            return rootX;
        }
    
        public short getRootY() {
            return getRootY(false);
        }
    
        public short getRootY(boolean useFullscreenTransformation) {
            FullscreenTransformation fullscreenTransformation = this.fullscreenTransformation;
            short rootY = (fullscreenTransformation == null || !useFullscreenTransformation) ? this.y : fullscreenTransformation.y;
            for (Window window = this.parent; window != null; window = window.parent) {
                FullscreenTransformation fullscreenTransformation2 = window.fullscreenTransformation;
                rootY = (short) (((fullscreenTransformation2 == null || !useFullscreenTransformation) ? window.y : fullscreenTransformation2.y) + rootY);
            }
            return rootY;
        }
    
        public Window getAncestorWithEventMask(Bitmask eventMask) {
            for (Window window = this; window != null; window = window.parent) {
                if (window.hasEventListenerFor(eventMask)) {
                    return window;
                }
                if (window.attributes.getDoNotPropagateMask().intersects(eventMask)) {
                    return null;
                }
            }
            return null;
        }
    
        public Window getAncestorWithEventId(int eventId) {
            return getAncestorWithEventId(eventId, null);
        }
    
        public Window getAncestorWithEventId(int eventId, Window endWindow) {
            for (Window window = this; window != null; window = window.parent) {
                if (window.hasEventListenerFor(eventId)) {
                    return window;
                }
                if (window == endWindow || window.attributes.getDoNotPropagateMask().isSet(eventId)) {
                    return null;
                }
            }
            return null;
        }
    
        public boolean isAncestorOf(Window window) {
            if (window == this) {
                return false;
            }
            while (window != null) {
                if (window == this) {
                    return true;
                }
                window = window.parent;
            }
            return false;
        }
    
        public Window getChildByCoords(short x, short y) {
            return getChildByCoords(x, y, false);
        }
    
        public Window getChildByCoords(short x, short y, boolean useFullscreenTransformation) {
            for (int i = this.children.size() - 1; i >= 0; i--) {
                Window child = this.children.get(i);
                if (child.attributes.isMapped() && child.containsPoint(x, y, useFullscreenTransformation)) {
                    return child;
                }
            }
            return null;
        }
    
        public MapState getMapState() {
            if (!this.attributes.isMapped()) {
                return MapState.UNMAPPED;
            }
            Window window = this;
            do {
                window = window.parent;
                if (window == null) {
                    return MapState.VIEWABLE;
                }
            } while (window.attributes.isMapped());
            return MapState.UNVIEWABLE;
        }
    
        public Bitmask getAllEventMasks() {
            Bitmask eventMask = new Bitmask();
            Iterator<EventListener> it = this.eventListeners.iterator();
            while (it.hasNext()) {
                EventListener eventListener = it.next();
                eventMask.join(eventListener.eventMask);
            }
            return eventMask;
        }
    
        public EventListener getButtonPressListener() {
            Iterator<EventListener> it = this.eventListeners.iterator();
            while (it.hasNext()) {
                EventListener eventListener = it.next();
                if (eventListener.isInterestedIn(4)) {
                    return eventListener;
                }
            }
            return null;
        }
    
        public void disableAllDescendants() {
            Stack<Window> stack = new Stack<>();
            stack.push(this);
            while (!stack.isEmpty()) {
                Window window = stack.pop();
                window.attributes.setEnabled(false);
                stack.addAll(window.children);
            }
        }
    
        public FullscreenTransformation getFullscreenTransformation() {
            return this.fullscreenTransformation;
        }
    
        public void setFullscreenTransformation(FullscreenTransformation fullscreenTransformation) {
            this.fullscreenTransformation = fullscreenTransformation;
        }
    }
  + app/src/main/java/com/winlator/xserver/WindowAttributes.java
    package com.winlator.xserver;
    
    import com.winlator.xconnector.XInputStream;
    import java.util.Iterator;
    
    /* loaded from: classes.dex */
    public class WindowAttributes {
        private Cursor cursor;
        public final Window window;
        private int backingPixel = 0;
        private int backingPlanes = 1;
        private BackingStore backingStore = BackingStore.NOT_USEFUL;
        private BitGravity bitGravity = BitGravity.CENTER;
        private Bitmask doNotPropagateMask = new Bitmask(0);
        private Bitmask eventMask = new Bitmask(0);
        private boolean mapped = false;
        private boolean overrideRedirect = false;
        private boolean saveUnder = false;
        private boolean enabled = true;
        private WinGravity winGravity = WinGravity.CENTER;
        private WindowClass windowClass = WindowClass.INPUT_OUTPUT;
        private boolean transparent = false;
    
        public enum BackingStore {
            NOT_USEFUL,
            WHEN_MAPPED,
            ALWAYS
        }
    
        public enum BitGravity {
            FORGET,
            NORTH_WEST,
            NORTH,
            NORTH_EAST,
            WEST,
            CENTER,
            EAST,
            SOUTH_WEST,
            SOUTH,
            SOUTH_EAST,
            STATIC
        }
    
        public enum WinGravity {
            UNMAP,
            NORTH_WEST,
            NORTH,
            NORTH_EAST,
            WEST,
            CENTER,
            EAST,
            SOUTH_WEST,
            SOUTH,
            SOUTH_EAST,
            STATIC
        }
    
        public enum WindowClass {
            COPY_FROM_PARENT,
            INPUT_OUTPUT,
            INPUT_ONLY
        }
    
        public WindowAttributes(Window window) {
            this.window = window;
        }
    
        public int getBackingPixel() {
            return this.backingPixel;
        }
    
        public int getBackingPlanes() {
            return this.backingPlanes;
        }
    
        public BackingStore getBackingStore() {
            return this.backingStore;
        }
    
        public BitGravity getBitGravity() {
            return this.bitGravity;
        }
    
        public Cursor getCursor() {
            Window parent = this.window.getParent();
            Cursor cursor = this.cursor;
            return (cursor != null || parent == null) ? cursor : parent.attributes.getCursor();
        }
    
        public Bitmask getEventMask() {
            return this.eventMask;
        }
    
        public Bitmask getDoNotPropagateMask() {
            return this.doNotPropagateMask;
        }
    
        public boolean isMapped() {
            return this.mapped;
        }
    
        public void setMapped(boolean mapped) {
            this.mapped = mapped;
        }
    
        public boolean isOverrideRedirect() {
            return this.overrideRedirect;
        }
    
        public boolean isSaveUnder() {
            return this.saveUnder;
        }
    
        public WinGravity getWinGravity() {
            return this.winGravity;
        }
    
        public WindowClass getWindowClass() {
            return this.windowClass;
        }
    
        public void setWindowClass(WindowClass windowClass) {
            this.windowClass = windowClass;
        }
    
        public boolean isEnabled() {
            return this.enabled;
        }
    
        public void setEnabled(boolean enabled) {
            this.enabled = enabled;
        }
    
        public void update(Bitmask valueMask, XInputStream inputStream, XClient client) {
            Iterator<Integer> it = valueMask.iterator();
            while (it.hasNext()) {
                int index = it.next().intValue();
                switch (index) {
                    case 1:
                    case 4:
                    case 8:
                    case 8192:
                        inputStream.skip(4);
                        break;
                    case 2:
                        this.window.getContent().fillColor(inputStream.readInt());
                        break;
                    case 16:
                        this.bitGravity = BitGravity.values()[inputStream.readInt()];
                        break;
                    case 32:
                        this.winGravity = WinGravity.values()[inputStream.readInt()];
                        break;
                    case 64:
                        this.backingStore = BackingStore.values()[inputStream.readInt()];
                        break;
                    case 128:
                        this.backingPlanes = inputStream.readInt();
                        break;
                    case 256:
                        this.backingPixel = inputStream.readInt();
                        break;
                    case 512:
                        this.overrideRedirect = inputStream.readInt() == 1;
                        break;
                    case 1024:
                        this.saveUnder = inputStream.readInt() == 1;
                        break;
                    case 2048:
                        this.eventMask = new Bitmask(inputStream.readInt());
                        break;
                    case 4096:
                        this.doNotPropagateMask = new Bitmask(inputStream.readInt());
                        break;
                    case 16384:
                        this.cursor = client.xServer.cursorManager.getCursor(inputStream.readInt());
                        break;
                }
            }
            client.xServer.windowManager.triggerOnUpdateWindowAttributes(this.window, valueMask);
        }
    
        public boolean isTransparent() {
            return this.transparent;
        }
    
        public void setTransparent(boolean transparent) {
            this.transparent = transparent;
        }
    }
  + app/src/main/java/com/winlator/xserver/WindowManager.java
    package com.winlator.xserver;
    
    import android.util.SparseArray;
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.WindowAttributes;
    import com.winlator.xserver.errors.BadIdChoice;
    import com.winlator.xserver.errors.BadMatch;
    import com.winlator.xserver.errors.XRequestError;
    import com.winlator.xserver.events.ConfigureNotify;
    import com.winlator.xserver.events.ConfigureRequest;
    import com.winlator.xserver.events.DestroyNotify;
    import com.winlator.xserver.events.Expose;
    import com.winlator.xserver.events.MapNotify;
    import com.winlator.xserver.events.MapRequest;
    import com.winlator.xserver.events.ResizeRequest;
    import com.winlator.xserver.events.UnmapNotify;
    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.List;
    
    /* loaded from: classes.dex */
    public class WindowManager extends XResourceManager {
        public final DrawableManager drawableManager;
        private FocusRevertTo focusRevertTo;
        private Window focusedWindow;
        private final ArrayList<OnWindowModificationListener> onWindowModificationListeners;
        public final Window rootWindow;
        private final SparseArray<Window> windows;
    
        public enum FocusRevertTo {
            NONE,
            POINTER_ROOT,
            PARENT
        }
    
        public interface OnWindowModificationListener {
            default void onMapWindow(Window window) {
            }
    
            default void onUnmapWindow(Window window) {
            }
    
            default void onChangeWindowZOrder(Window window) {
            }
    
            default void onUpdateWindowContent(Window window) {
            }
    
            default void onUpdateWindowGeometry(Window window, boolean resized) {
            }
    
            default void onUpdateWindowAttributes(Window window, Bitmask mask) {
            }
    
            default void onModifyWindowProperty(Window window, Property property) {
            }
        }
    
        public WindowManager(ScreenInfo screenInfo, DrawableManager drawableManager) {
            SparseArray<Window> sparseArray = new SparseArray<>();
            this.windows = sparseArray;
            this.focusRevertTo = FocusRevertTo.NONE;
            this.onWindowModificationListeners = new ArrayList<>();
            this.drawableManager = drawableManager;
            int id = IDGenerator.generate();
            Drawable drawable = drawableManager.createDrawable(id, screenInfo.width, screenInfo.height, drawableManager.getVisual());
            Window window = new Window(id, drawable, 0, 0, screenInfo.width, screenInfo.height, null);
            this.rootWindow = window;
            window.attributes.setMapped(true);
            sparseArray.put(id, window);
        }
    
        public Window getWindow(int id) {
            return this.windows.get(id);
        }
    
        public ArrayList<Window> findDialogWindows(int id) {
            ArrayList<Window> result = new ArrayList<>();
            for (int i = 0; i < this.windows.size(); i++) {
                Window window = this.windows.valueAt(i);
                if (window != null && window.getTransientFor() == id) {
                    result.add(window);
                }
            }
            return result;
        }
    
        public Window findWindowWithProcessId(int processId) {
            for (int i = 0; i < this.windows.size(); i++) {
                Window window = this.windows.valueAt(i);
                if (window != null && window.getProcessId() == processId) {
                    return window;
                }
            }
            return null;
        }
    
        public void destroyWindow(int id) {
            Window window = getWindow(id);
            if (window != null && this.rootWindow.id != id) {
                unmapWindow(window);
                removeAllSubwindowsAndWindow(window);
            }
        }
    
        private void removeAllSubwindowsAndWindow(Window window) {
            List<Window> children = new ArrayList<>(window.getChildren());
            for (Window child : children) {
                removeAllSubwindowsAndWindow(child);
            }
            Window parent = window.getParent();
            window.sendEvent(131072, new DestroyNotify(window, window));
            parent.sendEvent(524288, new DestroyNotify(parent, window));
            this.windows.remove(window.id);
            if (window.isInputOutput()) {
                this.drawableManager.removeDrawable(window.getContent().id);
            }
            triggerOnFreeResourceListener(window);
            if (window == this.focusedWindow) {
                revertFocus();
            }
            parent.removeChild(window);
        }
    
        public void mapWindow(Window window) {
            if (!window.attributes.isMapped()) {
                Window parent = window.getParent();
                if (parent.hasEventListenerFor(1048576) && !window.attributes.isOverrideRedirect()) {
                    parent.sendEvent(1048576, new MapRequest(parent, window));
                    return;
                }
                window.attributes.setMapped(true);
                window.sendEvent(131072, new MapNotify(window, window));
                parent.sendEvent(524288, new MapNotify(parent, window));
                window.sendEvent(32768, new Expose(window));
                triggerOnMapWindow(window);
            }
        }
    
        public void unmapWindow(Window window) {
            if (this.rootWindow.id != window.id && window.attributes.isMapped()) {
                window.attributes.setMapped(false);
                Window parent = window.getParent();
                window.sendEvent(131072, new UnmapNotify(window, window));
                parent.sendEvent(524288, new UnmapNotify(parent, window));
                if (window == this.focusedWindow) {
                    revertFocus();
                }
                triggerOnUnmapWindow(window);
            }
        }
    
        public void mapSubWindows(Window window) {
            for (Window child : window.getChildren()) {
                mapSubWindows(child);
            }
            mapWindow(window);
        }
    
        public Window getFocusedWindow() {
            return this.focusedWindow;
        }
    
        public void revertFocus() {
            switch (AnonymousClass1.$SwitchMap$com$winlator$xserver$WindowManager$FocusRevertTo[this.focusRevertTo.ordinal()]) {
                case 1:
                    this.focusedWindow = null;
                    break;
                case 2:
                    this.focusedWindow = this.rootWindow;
                    break;
                case 3:
                    if (this.focusedWindow.getParent() != null) {
                        this.focusedWindow = this.focusedWindow.getParent();
                        break;
                    }
                    break;
            }
        }
    
        public void setFocus(Window focusedWindow, FocusRevertTo focusRevertTo) {
            this.focusedWindow = focusedWindow;
            this.focusRevertTo = focusRevertTo;
        }
    
        public FocusRevertTo getFocusRevertTo() {
            return this.focusRevertTo;
        }
    
        public Window createWindow(int id, Window parent, short x, short y, short width, short height, WindowAttributes.WindowClass windowClass, Visual visual, byte depth, XClient client) throws XRequestError {
            boolean isInputOutput;
            byte depth2;
            Visual visual2;
            Drawable drawable;
            if (this.windows.indexOfKey(id) >= 0) {
                throw new BadIdChoice(id);
            }
            switch (AnonymousClass1.$SwitchMap$com$winlator$xserver$WindowAttributes$WindowClass[windowClass.ordinal()]) {
                case 1:
                    byte depth3 = (depth == 0 && parent.isInputOutput()) ? parent.getContent().visual.depth : depth;
                    boolean isInputOutput2 = parent.isInputOutput();
                    isInputOutput = isInputOutput2;
                    depth2 = depth3;
                    break;
                case 2:
                    if (parent.isInputOutput()) {
                        isInputOutput = true;
                        depth2 = depth == 0 ? parent.getContent().visual.depth : depth;
                        break;
                    } else {
                        throw new BadMatch();
                    }
                case 3:
                    depth2 = depth;
                    isInputOutput = false;
                    break;
                default:
                    depth2 = depth;
                    isInputOutput = false;
                    break;
            }
            if (!isInputOutput) {
                visual2 = visual;
            } else {
                Visual visual3 = visual == null ? parent.getContent().visual : visual;
                if (depth2 != visual3.depth) {
                    throw new BadMatch();
                }
                visual2 = visual3;
            }
            if (!isInputOutput) {
                drawable = null;
            } else {
                Drawable drawable2 = this.drawableManager.createDrawable(id, width, height, visual2);
                if (drawable2 == null) {
                    throw new BadIdChoice(id);
                }
                drawable = drawable2;
            }
            final Window window = new Window(id, drawable, x, y, width, height, client);
            window.attributes.setWindowClass(windowClass);
            if (drawable != null) {
                drawable.setOnDrawListener(new Runnable() { // from class: com.winlator.xserver.WindowManager$$ExternalSyntheticLambda0
                    @Override // java.lang.Runnable
                    public final void run() {
                        WindowManager.this.lambda$createWindow$0(window);
                    }
                });
            }
            this.windows.put(id, window);
            parent.addChild(window);
            triggerOnCreateResourceListener(window);
            return window;
        }
    
        private void changeWindowGeometry(final Window window, short x, short y, short width, short height) {
            boolean resized = (window.getWidth() == width && window.getHeight() == height) ? false : true;
            if (resized && window.hasEventListenerFor(262144)) {
                window.sendEvent(1048576, new ResizeRequest(window, width, height));
                width = window.getWidth();
                height = window.getHeight();
                resized = false;
            }
            if (resized && window.isInputOutput()) {
                Drawable oldContent = window.getContent();
                this.drawableManager.removeDrawable(oldContent.id);
                Drawable newContent = this.drawableManager.createDrawable(oldContent.id, width, height, oldContent.visual);
                newContent.setOnDrawListener(new Runnable() { // from class: com.winlator.xserver.WindowManager$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        WindowManager.this.lambda$changeWindowGeometry$1(window);
                    }
                });
                window.setContent(newContent);
            }
            if (resized || window.getX() != x || window.getY() != y) {
                window.setX(x);
                window.setY(y);
                window.setWidth(width);
                window.setHeight(height);
                triggerOnUpdateWindowGeometry(window, resized);
            }
            if (resized && window.isInputOutput() && window.attributes.isMapped()) {
                window.sendEvent(new Expose(window));
            }
        }
    
        /* renamed from: com.winlator.xserver.WindowManager$1, reason: invalid class name */
        static /* synthetic */ class AnonymousClass1 {
            static final /* synthetic */ int[] $SwitchMap$com$winlator$xserver$Window$StackMode;
            static final /* synthetic */ int[] $SwitchMap$com$winlator$xserver$WindowAttributes$WindowClass;
            static final /* synthetic */ int[] $SwitchMap$com$winlator$xserver$WindowManager$FocusRevertTo;
    
            static {
                int[] iArr = new int[Window.StackMode.values().length];
                $SwitchMap$com$winlator$xserver$Window$StackMode = iArr;
                try {
                    iArr[Window.StackMode.ABOVE.ordinal()] = 1;
                } catch (NoSuchFieldError e) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$Window$StackMode[Window.StackMode.BELOW.ordinal()] = 2;
                } catch (NoSuchFieldError e2) {
                }
                int[] iArr2 = new int[WindowAttributes.WindowClass.values().length];
                $SwitchMap$com$winlator$xserver$WindowAttributes$WindowClass = iArr2;
                try {
                    iArr2[WindowAttributes.WindowClass.COPY_FROM_PARENT.ordinal()] = 1;
                } catch (NoSuchFieldError e3) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$WindowAttributes$WindowClass[WindowAttributes.WindowClass.INPUT_OUTPUT.ordinal()] = 2;
                } catch (NoSuchFieldError e4) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$WindowAttributes$WindowClass[WindowAttributes.WindowClass.INPUT_ONLY.ordinal()] = 3;
                } catch (NoSuchFieldError e5) {
                }
                int[] iArr3 = new int[FocusRevertTo.values().length];
                $SwitchMap$com$winlator$xserver$WindowManager$FocusRevertTo = iArr3;
                try {
                    iArr3[FocusRevertTo.NONE.ordinal()] = 1;
                } catch (NoSuchFieldError e6) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$WindowManager$FocusRevertTo[FocusRevertTo.POINTER_ROOT.ordinal()] = 2;
                } catch (NoSuchFieldError e7) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$WindowManager$FocusRevertTo[FocusRevertTo.PARENT.ordinal()] = 3;
                } catch (NoSuchFieldError e8) {
                }
            }
        }
    
        private void changeWindowZOrder(Window.StackMode stackMode, Window window, Window sibling) {
            Window parent = window.getParent();
            switch (AnonymousClass1.$SwitchMap$com$winlator$xserver$Window$StackMode[stackMode.ordinal()]) {
                case 1:
                    parent.moveChildAbove(window, sibling);
                    break;
                case 2:
                    parent.moveChildBelow(window, sibling);
                    break;
            }
            triggerOnChangeWindowZOrder(window);
        }
    
        public void configureWindow(Window window, Bitmask valueMask, XInputStream inputStream) {
            Window sibling;
            short x = window.getX();
            short y = window.getY();
            short width = window.getWidth();
            short height = window.getHeight();
            short borderWidth = window.getBorderWidth();
            Iterator<Integer> it = valueMask.iterator();
            short x2 = x;
            short y2 = y;
            short width2 = width;
            short height2 = height;
            Window sibling2 = null;
            Window.StackMode stackMode = null;
            while (it.hasNext()) {
                int index = it.next().intValue();
                switch (index) {
                    case 1:
                        short x3 = (short) inputStream.readInt();
                        x2 = x3;
                        break;
                    case 2:
                        short y3 = (short) inputStream.readInt();
                        y2 = y3;
                        break;
                    case 4:
                        short width3 = (short) inputStream.readInt();
                        width2 = width3;
                        break;
                    case 8:
                        short height3 = (short) inputStream.readInt();
                        height2 = height3;
                        break;
                    case 16:
                        short borderWidth2 = (short) inputStream.readInt();
                        borderWidth = borderWidth2;
                        break;
                    case 32:
                        Window sibling3 = getWindow(inputStream.readInt());
                        sibling2 = sibling3;
                        break;
                    case 64:
                        stackMode = Window.StackMode.values()[inputStream.readInt()];
                        break;
                }
            }
            Window parent = window.getParent();
            boolean overrideRedirect = window.attributes.isOverrideRedirect();
            if (!parent.hasEventListenerFor(1048576)) {
                sibling = sibling2;
            } else {
                if (!overrideRedirect) {
                    parent.sendEvent(1048576, new ConfigureRequest(parent, window, window.previousSibling(), x2, y2, width2, height2, borderWidth, stackMode, valueMask));
                    return;
                }
                sibling = sibling2;
            }
            Window.StackMode stackMode2 = stackMode;
            Window sibling4 = sibling;
            short borderWidth3 = borderWidth;
            short borderWidth4 = width2;
            changeWindowGeometry(window, x2, y2, borderWidth4, height2);
            window.setBorderWidth(borderWidth3);
            if (stackMode2 != null) {
                changeWindowZOrder(stackMode2, window, sibling4);
            }
            Window previousSibling = window.previousSibling();
            short s = x2;
            short borderWidth5 = y2;
            short s2 = width2;
            short s3 = height2;
            window.sendEvent(131072, new ConfigureNotify(window, window, previousSibling, s, borderWidth5, s2, s3, borderWidth3, overrideRedirect));
            parent.sendEvent(524288, new ConfigureNotify(parent, window, previousSibling, s, borderWidth5, s2, s3, borderWidth3, overrideRedirect));
        }
    
        public void reparentWindow(Window window, Window newParent) {
            Window oldParent = window.getParent();
            if (oldParent != null) {
                oldParent.removeChild(window);
            }
            newParent.addChild(window);
        }
    
        public Window findPointWindow(short rootX, short rootY) {
            return findPointWindow(this.rootWindow, rootX, rootY, false);
        }
    
        public Window findPointWindow(short rootX, short rootY, boolean useFullscreenTransformation) {
            return findPointWindow(this.rootWindow, rootX, rootY, useFullscreenTransformation);
        }
    
        private Window findPointWindow(Window window, short rootX, short rootY, boolean useFullscreenTransformation) {
            if (!window.attributes.isMapped() || !window.containsPoint(rootX, rootY, useFullscreenTransformation)) {
                return null;
            }
            Window child = window.getChildByCoords(rootX, rootY, useFullscreenTransformation);
            return child != null ? findPointWindow(child, rootX, rootY, useFullscreenTransformation) : window;
        }
    
        public void addOnWindowModificationListener(OnWindowModificationListener onWindowModificationListener) {
            this.onWindowModificationListeners.add(onWindowModificationListener);
        }
    
        private void triggerOnMapWindow(Window window) {
            for (int i = this.onWindowModificationListeners.size() - 1; i >= 0; i--) {
                this.onWindowModificationListeners.get(i).onMapWindow(window);
            }
        }
    
        private void triggerOnUnmapWindow(Window window) {
            for (int i = this.onWindowModificationListeners.size() - 1; i >= 0; i--) {
                this.onWindowModificationListeners.get(i).onUnmapWindow(window);
            }
        }
    
        private void triggerOnChangeWindowZOrder(Window window) {
            for (int i = this.onWindowModificationListeners.size() - 1; i >= 0; i--) {
                this.onWindowModificationListeners.get(i).onChangeWindowZOrder(window);
            }
        }
    
        /* JADX INFO: Access modifiers changed from: protected */
        /* renamed from: triggerOnUpdateWindowContent, reason: merged with bridge method [inline-methods] and merged with bridge method [inline-methods] */
        public void lambda$createWindow$0(Window window) {
            for (int i = this.onWindowModificationListeners.size() - 1; i >= 0; i--) {
                this.onWindowModificationListeners.get(i).onUpdateWindowContent(window);
            }
        }
    
        protected void triggerOnUpdateWindowGeometry(Window window, boolean resized) {
            for (int i = this.onWindowModificationListeners.size() - 1; i >= 0; i--) {
                this.onWindowModificationListeners.get(i).onUpdateWindowGeometry(window, resized);
            }
        }
    
        public void triggerOnUpdateWindowAttributes(Window window, Bitmask mask) {
            for (int i = this.onWindowModificationListeners.size() - 1; i >= 0; i--) {
                this.onWindowModificationListeners.get(i).onUpdateWindowAttributes(window, mask);
            }
        }
    
        public void triggerOnModifyWindowProperty(Window window, Property property) {
            for (int i = this.onWindowModificationListeners.size() - 1; i >= 0; i--) {
                this.onWindowModificationListeners.get(i).onModifyWindowProperty(window, property);
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/XClient.java
    package com.winlator.xserver;
    
    import androidx.collection.ArrayMap;
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xserver.XResourceManager;
    import com.winlator.xserver.events.Event;
    import java.io.IOException;
    import java.util.ArrayList;
    
    /* loaded from: classes.dex */
    public class XClient implements XResourceManager.OnResourceLifecycleListener {
        private int initialLength;
        private final XInputStream inputStream;
        private final XOutputStream outputStream;
        private byte requestData;
        private int requestLength;
        public final Integer resourceIDBase;
        public final XServer xServer;
        private boolean authenticated = false;
        private short sequenceNumber = 0;
        private final ArrayMap<Window, EventListener> eventListeners = new ArrayMap<>();
        private final ArrayList<XResource> resources = new ArrayList<>();
    
        public XClient(XServer xServer, XInputStream inputStream, XOutputStream outputStream) {
            this.xServer = xServer;
            this.inputStream = inputStream;
            this.outputStream = outputStream;
            XLock lock = xServer.lockAll();
            try {
                this.resourceIDBase = xServer.resourceIDs.get();
                xServer.windowManager.addOnResourceLifecycleListener(this);
                xServer.pixmapManager.addOnResourceLifecycleListener(this);
                xServer.graphicsContextManager.addOnResourceLifecycleListener(this);
                xServer.cursorManager.addOnResourceLifecycleListener(this);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public void registerAsOwnerOfResource(XResource resource) {
            this.resources.add(resource);
        }
    
        public void setEventListenerForWindow(Window window, Bitmask eventMask) {
            EventListener eventListener = this.eventListeners.get(window);
            if (eventListener != null) {
                window.removeEventListener(eventListener);
            }
            if (eventMask.isEmpty()) {
                return;
            }
            EventListener eventListener2 = new EventListener(this, eventMask);
            this.eventListeners.put(window, eventListener2);
            window.addEventListener(eventListener2);
        }
    
        public void sendEvent(Event event) {
            try {
                event.send(this.sequenceNumber, this.outputStream);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    
        public boolean isInterestedIn(int eventId, Window window) {
            EventListener eventListener = this.eventListeners.get(window);
            return eventListener != null && eventListener.isInterestedIn(eventId);
        }
    
        public boolean isAuthenticated() {
            return this.authenticated;
        }
    
        public void setAuthenticated(boolean authenticated) {
            this.authenticated = authenticated;
        }
    
        public void freeResources() {
            XLock lock = this.xServer.lockAll();
            while (!this.resources.isEmpty()) {
                try {
                    XResource resource = this.resources.remove(r1.size() - 1);
                    if (resource instanceof Window) {
                        this.xServer.windowManager.destroyWindow(resource.id);
                    } else if (resource instanceof Pixmap) {
                        this.xServer.pixmapManager.freePixmap(resource.id);
                    } else if (resource instanceof GraphicsContext) {
                        this.xServer.graphicsContextManager.freeGraphicsContext(resource.id);
                    } else if (resource instanceof Cursor) {
                        this.xServer.cursorManager.freeCursor(resource.id);
                    }
                } catch (Throwable th) {
                    if (lock != null) {
                        try {
                            lock.close();
                        } catch (Throwable th2) {
                            th.addSuppressed(th2);
                        }
                    }
                    throw th;
                }
            }
            while (!this.eventListeners.isEmpty()) {
                int i = this.eventListeners.size() - 1;
                this.eventListeners.keyAt(i).removeEventListener(this.eventListeners.removeAt(i));
            }
            this.xServer.windowManager.removeOnResourceLifecycleListener(this);
            this.xServer.pixmapManager.removeOnResourceLifecycleListener(this);
            this.xServer.graphicsContextManager.removeOnResourceLifecycleListener(this);
            this.xServer.cursorManager.removeOnResourceLifecycleListener(this);
            this.xServer.resourceIDs.free(this.resourceIDBase);
            if (lock != null) {
                lock.close();
            }
        }
    
        public void generateSequenceNumber() {
            this.sequenceNumber = (short) (this.sequenceNumber + 1);
        }
    
        public short getSequenceNumber() {
            return this.sequenceNumber;
        }
    
        public void setRequestLength(int requestLength) {
            this.requestLength = requestLength;
            this.initialLength = this.inputStream.available();
        }
    
        public byte getRequestData() {
            return this.requestData;
        }
    
        public void setRequestData(byte requestData) {
            this.requestData = requestData;
        }
    
        public int getRemainingRequestLength() {
            int actualLength = this.initialLength - this.inputStream.available();
            return this.requestLength - actualLength;
        }
    
        public void skipRequest() {
            this.inputStream.skip(getRemainingRequestLength());
        }
    
        public XOutputStream getOutputStream() {
            return this.outputStream;
        }
    
        public Bitmask getEventMaskForWindow(Window window) {
            EventListener eventListener = this.eventListeners.get(window);
            return eventListener != null ? eventListener.eventMask : new Bitmask();
        }
    
        @Override // com.winlator.xserver.XResourceManager.OnResourceLifecycleListener
        public void onFreeResource(XResource resource) {
            if (resource instanceof Window) {
                this.eventListeners.remove(resource);
            }
            this.resources.remove(resource);
        }
    
        public boolean isValidResourceId(int id) {
            return this.xServer.resourceIDs.isInInterval(id, this.resourceIDBase.intValue());
        }
    }
  + app/src/main/java/com/winlator/xserver/XClientConnectionHandler.java
    package com.winlator.xserver;
    
    import com.winlator.xconnector.Client;
    import com.winlator.xconnector.ConnectionHandler;
    
    /* loaded from: classes.dex */
    public class XClientConnectionHandler implements ConnectionHandler {
        private final XServer xServer;
    
        public XClientConnectionHandler(XServer xServer) {
            this.xServer = xServer;
        }
    
        @Override // com.winlator.xconnector.ConnectionHandler
        public void handleNewConnection(Client client) {
            client.createIOStreams();
            client.setTag(new XClient(this.xServer, client.getInputStream(), client.getOutputStream()));
        }
    
        @Override // com.winlator.xconnector.ConnectionHandler
        public void handleConnectionShutdown(Client client) {
            ((XClient) client.getTag()).freeResources();
        }
    }
  + app/src/main/java/com/winlator/xserver/XClientRequestHandler.java
    package com.winlator.xserver;
    
    import androidx.constraintlayout.widget.R$styleable;
    import com.winlator.xconnector.Client;
    import com.winlator.xconnector.RequestHandler;
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.XServer;
    import com.winlator.xserver.errors.XRequestError;
    import com.winlator.xserver.extensions.Extension;
    import com.winlator.xserver.requests.AtomRequests;
    import com.winlator.xserver.requests.CursorRequests;
    import com.winlator.xserver.requests.DrawRequests;
    import com.winlator.xserver.requests.ExtensionRequests;
    import com.winlator.xserver.requests.FontRequests;
    import com.winlator.xserver.requests.GrabRequests;
    import com.winlator.xserver.requests.GraphicsContextRequests;
    import com.winlator.xserver.requests.KeyboardRequests;
    import com.winlator.xserver.requests.PixmapRequests;
    import com.winlator.xserver.requests.SelectionRequests;
    import com.winlator.xserver.requests.WindowRequests;
    import java.io.IOException;
    import java.nio.ByteOrder;
    import java.util.Objects;
    
    /* loaded from: classes.dex */
    public class XClientRequestHandler implements RequestHandler {
        @Override // com.winlator.xconnector.RequestHandler
        public boolean handleRequest(Client client) throws IOException {
            XClient xClient = (XClient) client.getTag();
            XInputStream inputStream = client.getInputStream();
            XOutputStream outputStream = client.getOutputStream();
            if (xClient.isAuthenticated()) {
                return handleNormalRequest(xClient, inputStream, outputStream);
            }
            return handleAuthRequest(xClient, inputStream, outputStream);
        }
    
        private void sendServerInformation(XClient client, XOutputStream outputStream) throws IOException {
            int i;
            short vendorNameLength = (short) "Elbrus Technologies, LLC".length();
            PixmapManager pixmapManager = client.xServer.pixmapManager;
            byte pixmapFormatCount = (byte) pixmapManager.supportedPixmapFormats.length;
            short additionalDataLength = (short) ((pixmapFormatCount * 2) + 8 + ((vendorNameLength + 3) / 4) + (((((pixmapManager.supportedVisuals.length * 8) + 40) + 24) + 3) / 4));
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort((short) 11);
                outputStream.writeShort((short) 0);
                outputStream.writeShort(additionalDataLength);
                outputStream.writeInt(1);
                outputStream.writeInt(client.resourceIDBase.intValue());
                outputStream.writeInt(client.xServer.resourceIDs.idMask);
                outputStream.writeInt(256);
                outputStream.writeShort(vendorNameLength);
                outputStream.writeShort((short) -1);
                outputStream.writeByte((byte) 1);
                outputStream.writeByte(pixmapFormatCount);
                outputStream.writeByte((byte) 0);
                outputStream.writeByte((byte) 0);
                outputStream.writeByte((byte) 32);
                outputStream.writeByte((byte) 32);
                outputStream.writeByte((byte) 8);
                outputStream.writeByte((byte) -1);
                outputStream.writeInt(0);
                outputStream.writeString8("Elbrus Technologies, LLC");
                for (PixmapFormat pixmapFormat : client.xServer.pixmapManager.supportedPixmapFormats) {
                    outputStream.writeByte(pixmapFormat.depth);
                    outputStream.writeByte(pixmapFormat.bitsPerPixel);
                    outputStream.writeByte(pixmapFormat.scanlinePad);
                    outputStream.writePad(5);
                }
                Visual rootVisual = client.xServer.windowManager.rootWindow.getContent().visual;
                outputStream.writeInt(client.xServer.windowManager.rootWindow.id);
                outputStream.writeInt(0);
                outputStream.writeInt(16777215);
                outputStream.writeInt(0);
                outputStream.writeInt(client.xServer.windowManager.rootWindow.getAllEventMasks().getBits());
                outputStream.writeShort(client.xServer.screenInfo.width);
                outputStream.writeShort(client.xServer.screenInfo.height);
                outputStream.writeShort(client.xServer.screenInfo.getWidthInMillimeters());
                outputStream.writeShort(client.xServer.screenInfo.getHeightInMillimeters());
                outputStream.writeShort((short) 1);
                outputStream.writeShort((short) 1);
                outputStream.writeInt(rootVisual.id);
                outputStream.writeByte((byte) 0);
                outputStream.writeByte((byte) 0);
                outputStream.writeByte(rootVisual.depth);
                outputStream.writeByte((byte) client.xServer.pixmapManager.supportedVisuals.length);
                for (Visual visual : client.xServer.pixmapManager.supportedVisuals) {
                    outputStream.writeByte(visual.depth);
                    outputStream.writeByte((byte) 0);
                    if (visual.displayable) {
                        i = 1;
                    } else {
                        i = 0;
                    }
                    outputStream.writeShort((short) i);
                    outputStream.writeInt(0);
                    if (visual.displayable) {
                        outputStream.writeInt(visual.id);
                        outputStream.writeByte((byte) visual.type.ordinal());
                        outputStream.writeByte(visual.bitsPerRGBValue);
                        Objects.requireNonNull(visual);
                        outputStream.writeShort((short) 256);
                        outputStream.writeInt(visual.redMask);
                        outputStream.writeInt(visual.greenMask);
                        outputStream.writeInt(visual.blueMask);
                        outputStream.writeInt(0);
                    }
                }
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        private boolean handleAuthRequest(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException {
            if (inputStream.available() < 12) {
                return false;
            }
            byte byteOrder = inputStream.readByte();
            if (byteOrder == 66) {
                ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
                inputStream.setByteOrder(byteOrder2);
                outputStream.setByteOrder(byteOrder2);
            } else if (byteOrder == 108) {
                ByteOrder byteOrder3 = ByteOrder.LITTLE_ENDIAN;
                inputStream.setByteOrder(byteOrder3);
                outputStream.setByteOrder(byteOrder3);
            }
            inputStream.skip(1);
            short majorVersion = inputStream.readShort();
            if (majorVersion != 11) {
                throw new UnsupportedOperationException("Unsupported major X protocol version " + ((int) majorVersion) + ".");
            }
            inputStream.skip(2);
            int nameLength = inputStream.readShort();
            int dataLength = inputStream.readShort();
            inputStream.skip(2);
            if (nameLength > 0) {
                inputStream.readString8(nameLength);
            }
            if (dataLength > 0) {
                inputStream.readString8(dataLength);
            }
            XLock lock = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER);
            try {
                sendServerInformation(client, outputStream);
                if (lock != null) {
                    lock.close();
                }
                client.setAuthenticated(true);
                return true;
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        private boolean handleNormalRequest(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException {
            int requestLength;
            XLock lock;
            XLock lock2;
            if (inputStream.available() < 4) {
                return false;
            }
            byte opcode = inputStream.readByte();
            byte requestData = inputStream.readByte();
            int requestLength2 = inputStream.readUnsignedShort();
            if (requestLength2 != 0) {
                requestLength = (requestLength2 * 4) - 4;
            } else {
                if (inputStream.available() < 4) {
                    return false;
                }
                requestLength = (inputStream.readInt() * 4) - 8;
            }
            if (inputStream.available() < requestLength) {
                return false;
            }
            client.generateSequenceNumber();
            client.setRequestData(requestData);
            client.setRequestLength(requestLength);
            try {
                if (opcode < 0) {
                    Extension extension = client.xServer.extensions.get(opcode);
                    if (extension != null) {
                        extension.handleRequest(client, inputStream, outputStream);
                    }
                } else {
                    switch (opcode) {
                        case 1:
                            XLock lock3 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.DRAWABLE_MANAGER, XServer.Lockable.INPUT_DEVICE, XServer.Lockable.CURSOR_MANAGER);
                            try {
                                WindowRequests.createWindow(client, inputStream, outputStream);
                                if (lock3 != null) {
                                    lock3.close();
                                    break;
                                }
                            } finally {
                                if (lock3 != null) {
                                    try {
                                        lock3.close();
                                    } catch (Throwable th) {
                                        th.addSuppressed(th);
                                    }
                                }
                            }
                            break;
                        case 2:
                            XLock lock4 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.CURSOR_MANAGER);
                            try {
                                WindowRequests.changeWindowAttributes(client, inputStream, outputStream);
                                if (lock4 != null) {
                                    lock4.close();
                                    break;
                                }
                            } finally {
                                if (lock4 != null) {
                                    try {
                                        lock4.close();
                                    } catch (Throwable th2) {
                                        th.addSuppressed(th2);
                                    }
                                }
                            }
                            break;
                        case 3:
                            XLock lock5 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER);
                            try {
                                WindowRequests.getWindowAttributes(client, inputStream, outputStream);
                                if (lock5 != null) {
                                    lock5.close();
                                    break;
                                }
                            } finally {
                                if (lock5 != null) {
                                    try {
                                        lock5.close();
                                    } catch (Throwable th3) {
                                        th.addSuppressed(th3);
                                    }
                                }
                            }
                            break;
                        case 4:
                            lock = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.DRAWABLE_MANAGER, XServer.Lockable.INPUT_DEVICE);
                            try {
                                WindowRequests.destroyWindow(client, inputStream, outputStream);
                                if (lock != null) {
                                    lock.close();
                                    break;
                                }
                            } finally {
                                if (lock != null) {
                                    try {
                                        lock.close();
                                    } catch (Throwable th4) {
                                        th.addSuppressed(th4);
                                    }
                                }
                            }
                            break;
                        case 5:
                            XLock lock6 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.DRAWABLE_MANAGER, XServer.Lockable.INPUT_DEVICE);
                            try {
                                WindowRequests.destroySubWindows(client, inputStream, outputStream);
                                if (lock6 != null) {
                                    lock6.close();
                                    break;
                                }
                            } finally {
                                if (lock6 != null) {
                                    try {
                                        lock6.close();
                                    } catch (Throwable th5) {
                                        th.addSuppressed(th5);
                                    }
                                }
                            }
                            break;
                        case 7:
                            XLock lock7 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER);
                            try {
                                WindowRequests.reparentWindow(client, inputStream, outputStream);
                                if (lock7 != null) {
                                    lock7.close();
                                    break;
                                }
                            } finally {
                                if (lock7 != null) {
                                    try {
                                        lock7.close();
                                    } catch (Throwable th6) {
                                        th.addSuppressed(th6);
                                    }
                                }
                            }
                            break;
                        case 8:
                            XLock lock8 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.INPUT_DEVICE);
                            try {
                                WindowRequests.mapWindow(client, inputStream, outputStream);
                                if (lock8 != null) {
                                    lock8.close();
                                    break;
                                }
                            } finally {
                                if (lock8 != null) {
                                    try {
                                        lock8.close();
                                    } catch (Throwable th7) {
                                        th.addSuppressed(th7);
                                    }
                                }
                            }
                            break;
                        case 9:
                            XLock lock9 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.INPUT_DEVICE);
                            try {
                                WindowRequests.mapSubWindows(client, inputStream, outputStream);
                                if (lock9 != null) {
                                    lock9.close();
                                    break;
                                }
                            } finally {
                                if (lock9 != null) {
                                    try {
                                        lock9.close();
                                    } catch (Throwable th8) {
                                        th.addSuppressed(th8);
                                    }
                                }
                            }
                            break;
                        case 10:
                            XLock lock10 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.INPUT_DEVICE);
                            try {
                                WindowRequests.unmapWindow(client, inputStream, outputStream);
                                if (lock10 != null) {
                                    lock10.close();
                                    break;
                                }
                            } finally {
                                if (lock10 != null) {
                                    try {
                                        lock10.close();
                                    } catch (Throwable th9) {
                                        th.addSuppressed(th9);
                                    }
                                }
                            }
                            break;
                        case 12:
                            XLock lock11 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.INPUT_DEVICE);
                            try {
                                WindowRequests.configureWindow(client, inputStream, outputStream);
                                if (lock11 != null) {
                                    lock11.close();
                                    break;
                                }
                            } finally {
                                if (lock11 != null) {
                                    try {
                                        lock11.close();
                                    } catch (Throwable th10) {
                                        th.addSuppressed(th10);
                                    }
                                }
                            }
                            break;
                        case 14:
                            XLock lock12 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.DRAWABLE_MANAGER);
                            try {
                                WindowRequests.getGeometry(client, inputStream, outputStream);
                                if (lock12 != null) {
                                    lock12.close();
                                    break;
                                }
                            } finally {
                                if (lock12 != null) {
                                    try {
                                        lock12.close();
                                    } catch (Throwable th11) {
                                        th.addSuppressed(th11);
                                    }
                                }
                            }
                            break;
                        case 15:
                            XLock lock13 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER);
                            try {
                                WindowRequests.queryTree(client, inputStream, outputStream);
                                if (lock13 != null) {
                                    lock13.close();
                                    break;
                                }
                            } finally {
                                if (lock13 != null) {
                                    try {
                                        lock13.close();
                                    } catch (Throwable th12) {
                                        th.addSuppressed(th12);
                                    }
                                }
                            }
                            break;
                        case 16:
                            AtomRequests.internAtom(client, inputStream, outputStream);
                            break;
                        case 18:
                            XLock lock14 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER);
                            try {
                                WindowRequests.changeProperty(client, inputStream, outputStream);
                                if (lock14 != null) {
                                    lock14.close();
                                    break;
                                }
                            } finally {
                                if (lock14 != null) {
                                    try {
                                        lock14.close();
                                    } catch (Throwable th13) {
                                        th.addSuppressed(th13);
                                    }
                                }
                            }
                            break;
                        case 19:
                            XLock lock15 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER);
                            try {
                                WindowRequests.deleteProperty(client, inputStream, outputStream);
                                if (lock15 != null) {
                                    lock15.close();
                                    break;
                                }
                            } finally {
                                if (lock15 != null) {
                                    try {
                                        lock15.close();
                                    } catch (Throwable th14) {
                                        th.addSuppressed(th14);
                                    }
                                }
                            }
                            break;
                        case 20:
                            XLock lock16 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER);
                            try {
                                WindowRequests.getProperty(client, inputStream, outputStream);
                                if (lock16 != null) {
                                    lock16.close();
                                    break;
                                }
                            } finally {
                                if (lock16 != null) {
                                    try {
                                        lock16.close();
                                    } catch (Throwable th15) {
                                        th.addSuppressed(th15);
                                    }
                                }
                            }
                            break;
                        case 22:
                            XLock lock17 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER);
                            try {
                                SelectionRequests.setSelectionOwner(client, inputStream, outputStream);
                                if (lock17 != null) {
                                    lock17.close();
                                    break;
                                }
                            } finally {
                                if (lock17 != null) {
                                    try {
                                        lock17.close();
                                    } catch (Throwable th16) {
                                        th.addSuppressed(th16);
                                    }
                                }
                            }
                            break;
                        case 23:
                            XLock lock18 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER);
                            try {
                                SelectionRequests.getSelectionOwner(client, inputStream, outputStream);
                                if (lock18 != null) {
                                    lock18.close();
                                    break;
                                }
                            } finally {
                                if (lock18 != null) {
                                    try {
                                        lock18.close();
                                    } catch (Throwable th17) {
                                        th.addSuppressed(th17);
                                    }
                                }
                            }
                            break;
                        case 25:
                            XLock lock19 = client.xServer.lockAll();
                            try {
                                WindowRequests.sendEvent(client, inputStream, outputStream);
                                if (lock19 != null) {
                                    lock19.close();
                                    break;
                                }
                            } finally {
                                if (lock19 != null) {
                                    try {
                                        lock19.close();
                                    } catch (Throwable th18) {
                                        th.addSuppressed(th18);
                                    }
                                }
                            }
                            break;
                        case 26:
                            XLock lock20 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.INPUT_DEVICE, XServer.Lockable.CURSOR_MANAGER);
                            try {
                                GrabRequests.grabPointer(client, inputStream, outputStream);
                                if (lock20 != null) {
                                    lock20.close();
                                    break;
                                }
                            } finally {
                                if (lock20 != null) {
                                    try {
                                        lock20.close();
                                    } catch (Throwable th19) {
                                        th.addSuppressed(th19);
                                    }
                                }
                            }
                            break;
                        case 27:
                            XLock lock21 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.INPUT_DEVICE);
                            try {
                                GrabRequests.ungrabPointer(client, inputStream, outputStream);
                                if (lock21 != null) {
                                    lock21.close();
                                    break;
                                }
                            } finally {
                                if (lock21 != null) {
                                    try {
                                        lock21.close();
                                    } catch (Throwable th20) {
                                        th.addSuppressed(th20);
                                    }
                                }
                            }
                            break;
                        case 38:
                            XLock lock22 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.INPUT_DEVICE);
                            try {
                                WindowRequests.queryPointer(client, inputStream, outputStream);
                                if (lock22 != null) {
                                    lock22.close();
                                    break;
                                }
                            } finally {
                                if (lock22 != null) {
                                    try {
                                        lock22.close();
                                    } catch (Throwable th21) {
                                        th.addSuppressed(th21);
                                    }
                                }
                            }
                            break;
                        case 40:
                            XLock lock23 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER);
                            try {
                                WindowRequests.translateCoordinates(client, inputStream, outputStream);
                                if (lock23 != null) {
                                    lock23.close();
                                    break;
                                }
                            } finally {
                                if (lock23 != null) {
                                    try {
                                        lock23.close();
                                    } catch (Throwable th22) {
                                        th.addSuppressed(th22);
                                    }
                                }
                            }
                            break;
                        case 41:
                            XLock lock24 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.INPUT_DEVICE);
                            try {
                                WindowRequests.warpPointer(client, inputStream, outputStream);
                                if (lock24 != null) {
                                    lock24.close();
                                    break;
                                }
                            } finally {
                                if (lock24 != null) {
                                    try {
                                        lock24.close();
                                    } catch (Throwable th23) {
                                        th.addSuppressed(th23);
                                    }
                                }
                            }
                            break;
                        case 42:
                            XLock lock25 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER);
                            try {
                                WindowRequests.setInputFocus(client, inputStream, outputStream);
                                if (lock25 != null) {
                                    lock25.close();
                                    break;
                                }
                            } finally {
                                if (lock25 != null) {
                                    try {
                                        lock25.close();
                                    } catch (Throwable th24) {
                                        th.addSuppressed(th24);
                                    }
                                }
                            }
                            break;
                        case 43:
                            XLock lock26 = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER);
                            try {
                                WindowRequests.getInputFocus(client, inputStream, outputStream);
                                if (lock26 != null) {
                                    lock26.close();
                                    break;
                                }
                            } finally {
                                if (lock26 != null) {
                                    try {
                                        lock26.close();
                                    } catch (Throwable th25) {
                                        th.addSuppressed(th25);
                                    }
                                }
                            }
                            break;
                        case 45:
                            FontRequests.openFont(client, inputStream, outputStream);
                            break;
                        case 49:
                            FontRequests.listFonts(client, inputStream, outputStream);
                            break;
                        case 53:
                            XLock lock27 = client.xServer.lock(XServer.Lockable.PIXMAP_MANAGER, XServer.Lockable.DRAWABLE_MANAGER);
                            try {
                                PixmapRequests.createPixmap(client, inputStream, outputStream);
                                if (lock27 != null) {
                                    lock27.close();
                                    break;
                                }
                            } finally {
                                if (lock27 != null) {
                                    try {
                                        lock27.close();
                                    } catch (Throwable th26) {
                                        th.addSuppressed(th26);
                                    }
                                }
                            }
                            break;
                        case 54:
                            XLock lock28 = client.xServer.lock(XServer.Lockable.PIXMAP_MANAGER, XServer.Lockable.DRAWABLE_MANAGER);
                            try {
                                PixmapRequests.freePixmap(client, inputStream, outputStream);
                                if (lock28 != null) {
                                    lock28.close();
                                    break;
                                }
                            } finally {
                                if (lock28 != null) {
                                    try {
                                        lock28.close();
                                    } catch (Throwable th27) {
                                        th.addSuppressed(th27);
                                    }
                                }
                            }
                            break;
                        case 55:
                            XLock lock29 = client.xServer.lock(XServer.Lockable.PIXMAP_MANAGER, XServer.Lockable.DRAWABLE_MANAGER, XServer.Lockable.GRAPHIC_CONTEXT_MANAGER);
                            try {
                                GraphicsContextRequests.createGC(client, inputStream, outputStream);
                                if (lock29 != null) {
                                    lock29.close();
                                    break;
                                }
                            } finally {
                                if (lock29 != null) {
                                    try {
                                        lock29.close();
                                    } catch (Throwable th28) {
                                        th.addSuppressed(th28);
                                    }
                                }
                            }
                            break;
                        case 56:
                            XLock lock30 = client.xServer.lock(XServer.Lockable.PIXMAP_MANAGER, XServer.Lockable.DRAWABLE_MANAGER, XServer.Lockable.GRAPHIC_CONTEXT_MANAGER);
                            try {
                                GraphicsContextRequests.changeGC(client, inputStream, outputStream);
                                if (lock30 != null) {
                                    lock30.close();
                                    break;
                                }
                            } finally {
                                if (lock30 != null) {
                                    try {
                                        lock30.close();
                                    } catch (Throwable th29) {
                                        th.addSuppressed(th29);
                                    }
                                }
                            }
                            break;
                        case 58:
                            client.skipRequest();
                            break;
                        case 59:
                            client.skipRequest();
                            break;
                        case 60:
                            XLock lock31 = client.xServer.lock(XServer.Lockable.GRAPHIC_CONTEXT_MANAGER);
                            try {
                                GraphicsContextRequests.freeGC(client, inputStream, outputStream);
                                if (lock31 != null) {
                                    lock31.close();
                                    break;
                                }
                            } finally {
                                if (lock31 != null) {
                                    try {
                                        lock31.close();
                                    } catch (Throwable th30) {
                                        th.addSuppressed(th30);
                                    }
                                }
                            }
                            break;
                        case 62:
                            XLock lock32 = client.xServer.lock(XServer.Lockable.DRAWABLE_MANAGER, XServer.Lockable.GRAPHIC_CONTEXT_MANAGER);
                            try {
                                DrawRequests.copyArea(client, inputStream, outputStream);
                                if (lock32 != null) {
                                    lock32.close();
                                    break;
                                }
                            } finally {
                                if (lock32 != null) {
                                    try {
                                        lock32.close();
                                    } catch (Throwable th31) {
                                        th.addSuppressed(th31);
                                    }
                                }
                            }
                            break;
                        case 65:
                            XLock lock33 = client.xServer.lock(XServer.Lockable.DRAWABLE_MANAGER, XServer.Lockable.GRAPHIC_CONTEXT_MANAGER);
                            try {
                                DrawRequests.polyLine(client, inputStream, outputStream);
                                if (lock33 != null) {
                                    lock33.close();
                                    break;
                                }
                            } finally {
                                if (lock33 != null) {
                                    try {
                                        lock33.close();
                                    } catch (Throwable th32) {
                                        th.addSuppressed(th32);
                                    }
                                }
                            }
                            break;
                        case 66:
                            client.skipRequest();
                            break;
                        case 67:
                            client.skipRequest();
                            break;
                        case 70:
                            XLock lock34 = client.xServer.lock(XServer.Lockable.DRAWABLE_MANAGER, XServer.Lockable.GRAPHIC_CONTEXT_MANAGER);
                            try {
                                DrawRequests.polyFillRectangle(client, inputStream, outputStream);
                                if (lock34 != null) {
                                    lock34.close();
                                    break;
                                }
                            } finally {
                                if (lock34 != null) {
                                    try {
                                        lock34.close();
                                    } catch (Throwable th33) {
                                        th.addSuppressed(th33);
                                    }
                                }
                            }
                            break;
                        case 72:
                            XLock lock35 = client.xServer.lock(XServer.Lockable.DRAWABLE_MANAGER, XServer.Lockable.GRAPHIC_CONTEXT_MANAGER);
                            try {
                                DrawRequests.putImage(client, inputStream, outputStream);
                                if (lock35 != null) {
                                    lock35.close();
                                    break;
                                }
                            } finally {
                                if (lock35 != null) {
                                    try {
                                        lock35.close();
                                    } catch (Throwable th34) {
                                        th.addSuppressed(th34);
                                    }
                                }
                            }
                            break;
                        case 73:
                            lock2 = client.xServer.lock(XServer.Lockable.PIXMAP_MANAGER, XServer.Lockable.DRAWABLE_MANAGER);
                            try {
                                DrawRequests.getImage(client, inputStream, outputStream);
                                if (lock2 != null) {
                                    lock2.close();
                                    break;
                                }
                            } finally {
                                if (lock2 != null) {
                                    try {
                                        lock2.close();
                                    } catch (Throwable th35) {
                                        th.addSuppressed(th35);
                                    }
                                }
                            }
                            break;
                        case 78:
                            client.skipRequest();
                            break;
                        case 79:
                            client.skipRequest();
                            break;
                        case R$styleable.Constraint_layout_constraintWidth_percent /* 93 */:
                            XLock lock36 = client.xServer.lock(XServer.Lockable.PIXMAP_MANAGER, XServer.Lockable.DRAWABLE_MANAGER, XServer.Lockable.CURSOR_MANAGER);
                            try {
                                CursorRequests.createCursor(client, inputStream, outputStream);
                                if (lock36 != null) {
                                    lock36.close();
                                    break;
                                }
                            } finally {
                                if (lock36 != null) {
                                    try {
                                        lock36.close();
                                    } catch (Throwable th36) {
                                        th.addSuppressed(th36);
                                    }
                                }
                            }
                            break;
                        case R$styleable.Constraint_layout_editor_absoluteX /* 94 */:
                            client.skipRequest();
                            break;
                        case R$styleable.Constraint_layout_editor_absoluteY /* 95 */:
                            lock = client.xServer.lock(XServer.Lockable.PIXMAP_MANAGER, XServer.Lockable.DRAWABLE_MANAGER, XServer.Lockable.CURSOR_MANAGER);
                            try {
                                CursorRequests.freeCursor(client, inputStream, outputStream);
                                if (lock != null) {
                                    lock.close();
                                    break;
                                }
                            } finally {
                            }
                            break;
                        case R$styleable.Constraint_layout_goneMarginLeft /* 98 */:
                            ExtensionRequests.queryExtension(client, inputStream, outputStream);
                            break;
                        case R$styleable.Constraint_layout_goneMarginTop /* 101 */:
                            lock2 = client.xServer.lock(XServer.Lockable.INPUT_DEVICE);
                            try {
                                KeyboardRequests.getKeyboardMapping(client, inputStream, outputStream);
                                if (lock2 != null) {
                                    lock2.close();
                                    break;
                                }
                            } finally {
                            }
                            break;
                        case R$styleable.Constraint_pathMotionArc /* 104 */:
                            client.skipRequest();
                            break;
                        case R$styleable.Constraint_transitionPathRotate /* 107 */:
                            client.skipRequest();
                            break;
                        case R$styleable.Constraint_visibilityMode /* 108 */:
                            WindowRequests.getScreenSaver(client, inputStream, outputStream);
                            break;
                        case androidx.appcompat.R$styleable.AppCompatTheme_windowActionBar /* 115 */:
                            client.skipRequest();
                            break;
                        case androidx.appcompat.R$styleable.AppCompatTheme_windowActionModeOverlay /* 117 */:
                            CursorRequests.getPointerMapping(client, inputStream, outputStream);
                            break;
                        case androidx.appcompat.R$styleable.AppCompatTheme_windowFixedHeightMinor /* 119 */:
                            KeyboardRequests.getModifierMapping(client, inputStream, outputStream);
                            break;
                        case Byte.MAX_VALUE:
                            client.skipRequest();
                            break;
                        default:
                            throw new UnsupportedOperationException("Unsupported opcode " + ((int) opcode) + ".");
                    }
                }
            } catch (XRequestError e) {
                client.skipRequest();
                e.sendError(client, opcode);
            }
            return true;
        }
    }
  + app/src/main/java/com/winlator/xserver/XKeycode.java
    package com.winlator.xserver;
    
    import androidx.constraintlayout.widget.R$styleable;
    
    /* JADX WARN: Enum visitor error
    jadx.core.utils.exceptions.JadxRuntimeException: Init of enum field 'KEY_MAX' uses external variables
    	at jadx.core.dex.visitors.EnumVisitor.createEnumFieldByConstructor(EnumVisitor.java:451)
    	at jadx.core.dex.visitors.EnumVisitor.processEnumFieldByField(EnumVisitor.java:372)
    	at jadx.core.dex.visitors.EnumVisitor.processEnumFieldByWrappedInsn(EnumVisitor.java:337)
    	at jadx.core.dex.visitors.EnumVisitor.extractEnumFieldsFromFilledArray(EnumVisitor.java:322)
    	at jadx.core.dex.visitors.EnumVisitor.extractEnumFieldsFromInsn(EnumVisitor.java:262)
    	at jadx.core.dex.visitors.EnumVisitor.extractEnumFieldsFromInvoke(EnumVisitor.java:293)
    	at jadx.core.dex.visitors.EnumVisitor.extractEnumFieldsFromInsn(EnumVisitor.java:266)
    	at jadx.core.dex.visitors.EnumVisitor.convertToEnum(EnumVisitor.java:151)
    	at jadx.core.dex.visitors.EnumVisitor.visit(EnumVisitor.java:100)
     */
    /* JADX WARN: Failed to restore enum class, 'enum' modifier and super class removed */
    /* loaded from: classes.dex */
    public final class XKeycode {
        private static final /* synthetic */ XKeycode[] $VALUES;
        public static final XKeycode KEY_DEL;
        public static final XKeycode KEY_MAX;
        public final byte id;
        public static final XKeycode KEY_NONE = new XKeycode("KEY_NONE", 0, 0);
        public static final XKeycode KEY_ESC = new XKeycode("KEY_ESC", 1, 9);
        public static final XKeycode KEY_1 = new XKeycode("KEY_1", 2, 10);
        public static final XKeycode KEY_2 = new XKeycode("KEY_2", 3, 11);
        public static final XKeycode KEY_3 = new XKeycode("KEY_3", 4, 12);
        public static final XKeycode KEY_4 = new XKeycode("KEY_4", 5, 13);
        public static final XKeycode KEY_5 = new XKeycode("KEY_5", 6, 14);
        public static final XKeycode KEY_6 = new XKeycode("KEY_6", 7, 15);
        public static final XKeycode KEY_7 = new XKeycode("KEY_7", 8, 16);
        public static final XKeycode KEY_8 = new XKeycode("KEY_8", 9, 17);
        public static final XKeycode KEY_9 = new XKeycode("KEY_9", 10, 18);
        public static final XKeycode KEY_0 = new XKeycode("KEY_0", 11, 19);
        public static final XKeycode KEY_MINUS = new XKeycode("KEY_MINUS", 12, 20);
        public static final XKeycode KEY_EQUAL = new XKeycode("KEY_EQUAL", 13, 21);
        public static final XKeycode KEY_BKSP = new XKeycode("KEY_BKSP", 14, 22);
        public static final XKeycode KEY_TAB = new XKeycode("KEY_TAB", 15, 23);
        public static final XKeycode KEY_Q = new XKeycode("KEY_Q", 16, 24);
        public static final XKeycode KEY_W = new XKeycode("KEY_W", 17, 25);
        public static final XKeycode KEY_E = new XKeycode("KEY_E", 18, 26);
        public static final XKeycode KEY_R = new XKeycode("KEY_R", 19, 27);
        public static final XKeycode KEY_T = new XKeycode("KEY_T", 20, 28);
        public static final XKeycode KEY_Y = new XKeycode("KEY_Y", 21, 29);
        public static final XKeycode KEY_U = new XKeycode("KEY_U", 22, 30);
        public static final XKeycode KEY_I = new XKeycode("KEY_I", 23, 31);
        public static final XKeycode KEY_O = new XKeycode("KEY_O", 24, 32);
        public static final XKeycode KEY_P = new XKeycode("KEY_P", 25, 33);
        public static final XKeycode KEY_BRACKET_LEFT = new XKeycode("KEY_BRACKET_LEFT", 26, 34);
        public static final XKeycode KEY_BRACKET_RIGHT = new XKeycode("KEY_BRACKET_RIGHT", 27, 35);
        public static final XKeycode KEY_ENTER = new XKeycode("KEY_ENTER", 28, 36);
        public static final XKeycode KEY_CTRL_L = new XKeycode("KEY_CTRL_L", 29, 37);
        public static final XKeycode KEY_A = new XKeycode("KEY_A", 30, 38);
        public static final XKeycode KEY_S = new XKeycode("KEY_S", 31, 39);
        public static final XKeycode KEY_D = new XKeycode("KEY_D", 32, 40);
        public static final XKeycode KEY_F = new XKeycode("KEY_F", 33, 41);
        public static final XKeycode KEY_G = new XKeycode("KEY_G", 34, 42);
        public static final XKeycode KEY_H = new XKeycode("KEY_H", 35, 43);
        public static final XKeycode KEY_J = new XKeycode("KEY_J", 36, 44);
        public static final XKeycode KEY_K = new XKeycode("KEY_K", 37, 45);
        public static final XKeycode KEY_L = new XKeycode("KEY_L", 38, 46);
        public static final XKeycode KEY_SEMICOLON = new XKeycode("KEY_SEMICOLON", 39, 47);
        public static final XKeycode KEY_APOSTROPHE = new XKeycode("KEY_APOSTROPHE", 40, 48);
        public static final XKeycode KEY_GRAVE = new XKeycode("KEY_GRAVE", 41, 49);
        public static final XKeycode KEY_SHIFT_L = new XKeycode("KEY_SHIFT_L", 42, 50);
        public static final XKeycode KEY_BACKSLASH = new XKeycode("KEY_BACKSLASH", 43, 51);
        public static final XKeycode KEY_Z = new XKeycode("KEY_Z", 44, 52);
        public static final XKeycode KEY_X = new XKeycode("KEY_X", 45, 53);
        public static final XKeycode KEY_C = new XKeycode("KEY_C", 46, 54);
        public static final XKeycode KEY_V = new XKeycode("KEY_V", 47, 55);
        public static final XKeycode KEY_B = new XKeycode("KEY_B", 48, 56);
        public static final XKeycode KEY_N = new XKeycode("KEY_N", 49, 57);
        public static final XKeycode KEY_M = new XKeycode("KEY_M", 50, 58);
        public static final XKeycode KEY_COMMA = new XKeycode("KEY_COMMA", 51, 59);
        public static final XKeycode KEY_PERIOD = new XKeycode("KEY_PERIOD", 52, 60);
        public static final XKeycode KEY_SLASH = new XKeycode("KEY_SLASH", 53, 61);
        public static final XKeycode KEY_SHIFT_R = new XKeycode("KEY_SHIFT_R", 54, 62);
        public static final XKeycode KEY_KP_MULTIPLY = new XKeycode("KEY_KP_MULTIPLY", 55, 63);
        public static final XKeycode KEY_ALT_L = new XKeycode("KEY_ALT_L", 56, 64);
        public static final XKeycode KEY_SPACE = new XKeycode("KEY_SPACE", 57, 65);
        public static final XKeycode KEY_CAPS_LOCK = new XKeycode("KEY_CAPS_LOCK", 58, 66);
        public static final XKeycode KEY_F1 = new XKeycode("KEY_F1", 59, 67);
        public static final XKeycode KEY_F2 = new XKeycode("KEY_F2", 60, 68);
        public static final XKeycode KEY_F3 = new XKeycode("KEY_F3", 61, 69);
        public static final XKeycode KEY_F4 = new XKeycode("KEY_F4", 62, 70);
        public static final XKeycode KEY_F5 = new XKeycode("KEY_F5", 63, 71);
        public static final XKeycode KEY_F6 = new XKeycode("KEY_F6", 64, 72);
        public static final XKeycode KEY_F7 = new XKeycode("KEY_F7", 65, 73);
        public static final XKeycode KEY_F8 = new XKeycode("KEY_F8", 66, 74);
        public static final XKeycode KEY_F9 = new XKeycode("KEY_F9", 67, 75);
        public static final XKeycode KEY_F10 = new XKeycode("KEY_F10", 68, 76);
        public static final XKeycode KEY_NUM_LOCK = new XKeycode("KEY_NUM_LOCK", 69, 77);
        public static final XKeycode KEY_SCROLL_LOCK = new XKeycode("KEY_SCROLL_LOCK", 70, 78);
        public static final XKeycode KEY_KP_7 = new XKeycode("KEY_KP_7", 71, 79);
        public static final XKeycode KEY_KP_8 = new XKeycode("KEY_KP_8", 72, 80);
        public static final XKeycode KEY_KP_9 = new XKeycode("KEY_KP_9", 73, 81);
        public static final XKeycode KEY_KP_SUBTRACT = new XKeycode("KEY_KP_SUBTRACT", 74, 82);
        public static final XKeycode KEY_KP_4 = new XKeycode("KEY_KP_4", 75, 83);
        public static final XKeycode KEY_KP_5 = new XKeycode("KEY_KP_5", 76, 84);
        public static final XKeycode KEY_KP_6 = new XKeycode("KEY_KP_6", 77, 85);
        public static final XKeycode KEY_KP_ADD = new XKeycode("KEY_KP_ADD", 78, 86);
        public static final XKeycode KEY_KP_1 = new XKeycode("KEY_KP_1", 79, 87);
        public static final XKeycode KEY_KP_2 = new XKeycode("KEY_KP_2", 80, 88);
        public static final XKeycode KEY_KP_3 = new XKeycode("KEY_KP_3", 81, 89);
        public static final XKeycode KEY_KP_0 = new XKeycode("KEY_KP_0", 82, 90);
        public static final XKeycode KEY_KP_DEL = new XKeycode("KEY_KP_DEL", 83, 91);
        public static final XKeycode KEY_F11 = new XKeycode("KEY_F11", 84, 95);
        public static final XKeycode KEY_F12 = new XKeycode("KEY_F12", 85, 96);
        public static final XKeycode KEY_KP_ENTER = new XKeycode("KEY_KP_ENTER", 86, R$styleable.Constraint_pathMotionArc);
        public static final XKeycode KEY_CTRL_R = new XKeycode("KEY_CTRL_R", 87, 105);
        public static final XKeycode KEY_KP_DIVIDE = new XKeycode("KEY_KP_DIVIDE", 88, R$styleable.Constraint_transitionEasing);
        public static final XKeycode KEY_PRTSCN = new XKeycode("KEY_PRTSCN", 89, R$styleable.Constraint_transitionPathRotate);
        public static final XKeycode KEY_ALT_R = new XKeycode("KEY_ALT_R", 90, R$styleable.Constraint_visibilityMode);
        public static final XKeycode KEY_HOME = new XKeycode("KEY_HOME", 91, 110);
        public static final XKeycode KEY_UP = new XKeycode("KEY_UP", 92, 111);
        public static final XKeycode KEY_PRIOR = new XKeycode("KEY_PRIOR", 93, 112);
        public static final XKeycode KEY_LEFT = new XKeycode("KEY_LEFT", 94, 113);
        public static final XKeycode KEY_RIGHT = new XKeycode("KEY_RIGHT", 95, androidx.appcompat.R$styleable.AppCompatTheme_viewInflaterClass);
        public static final XKeycode KEY_END = new XKeycode("KEY_END", 96, androidx.appcompat.R$styleable.AppCompatTheme_windowActionBar);
        public static final XKeycode KEY_DOWN = new XKeycode("KEY_DOWN", 97, androidx.appcompat.R$styleable.AppCompatTheme_windowActionBarOverlay);
        public static final XKeycode KEY_NEXT = new XKeycode("KEY_NEXT", 98, androidx.appcompat.R$styleable.AppCompatTheme_windowActionModeOverlay);
        public static final XKeycode KEY_INSERT = new XKeycode("KEY_INSERT", 99, androidx.appcompat.R$styleable.AppCompatTheme_windowFixedHeightMajor);
    
        private static /* synthetic */ XKeycode[] $values() {
            return new XKeycode[]{KEY_NONE, KEY_ESC, KEY_1, KEY_2, KEY_3, KEY_4, KEY_5, KEY_6, KEY_7, KEY_8, KEY_9, KEY_0, KEY_MINUS, KEY_EQUAL, KEY_BKSP, KEY_TAB, KEY_Q, KEY_W, KEY_E, KEY_R, KEY_T, KEY_Y, KEY_U, KEY_I, KEY_O, KEY_P, KEY_BRACKET_LEFT, KEY_BRACKET_RIGHT, KEY_ENTER, KEY_CTRL_L, KEY_A, KEY_S, KEY_D, KEY_F, KEY_G, KEY_H, KEY_J, KEY_K, KEY_L, KEY_SEMICOLON, KEY_APOSTROPHE, KEY_GRAVE, KEY_SHIFT_L, KEY_BACKSLASH, KEY_Z, KEY_X, KEY_C, KEY_V, KEY_B, KEY_N, KEY_M, KEY_COMMA, KEY_PERIOD, KEY_SLASH, KEY_SHIFT_R, KEY_KP_MULTIPLY, KEY_ALT_L, KEY_SPACE, KEY_CAPS_LOCK, KEY_F1, KEY_F2, KEY_F3, KEY_F4, KEY_F5, KEY_F6, KEY_F7, KEY_F8, KEY_F9, KEY_F10, KEY_NUM_LOCK, KEY_SCROLL_LOCK, KEY_KP_7, KEY_KP_8, KEY_KP_9, KEY_KP_SUBTRACT, KEY_KP_4, KEY_KP_5, KEY_KP_6, KEY_KP_ADD, KEY_KP_1, KEY_KP_2, KEY_KP_3, KEY_KP_0, KEY_KP_DEL, KEY_F11, KEY_F12, KEY_KP_ENTER, KEY_CTRL_R, KEY_KP_DIVIDE, KEY_PRTSCN, KEY_ALT_R, KEY_HOME, KEY_UP, KEY_PRIOR, KEY_LEFT, KEY_RIGHT, KEY_END, KEY_DOWN, KEY_NEXT, KEY_INSERT, KEY_DEL, KEY_MAX};
        }
    
        public static XKeycode valueOf(String name) {
            return (XKeycode) Enum.valueOf(XKeycode.class, name);
        }
    
        public static XKeycode[] values() {
            return (XKeycode[]) $VALUES.clone();
        }
    
        static {
            XKeycode xKeycode = new XKeycode("KEY_DEL", 100, androidx.appcompat.R$styleable.AppCompatTheme_windowFixedHeightMinor);
            KEY_DEL = xKeycode;
            KEY_MAX = new XKeycode("KEY_MAX", R$styleable.Constraint_layout_goneMarginTop, xKeycode.id);
            $VALUES = $values();
        }
    
        private XKeycode(String str, int i, int id) {
            this.id = (byte) id;
        }
    }
  + app/src/main/java/com/winlator/xserver/XLock.java
    package com.winlator.xserver;
    
    /* loaded from: classes.dex */
    public interface XLock extends AutoCloseable {
        @Override // java.lang.AutoCloseable
        void close();
    }
  + app/src/main/java/com/winlator/xserver/XResource.java
    package com.winlator.xserver;
    
    /* loaded from: classes.dex */
    public abstract class XResource {
        public final int id;
    
        public XResource(int id) {
            this.id = id;
        }
    
        public int hashCode() {
            return this.id;
        }
    }
  + app/src/main/java/com/winlator/xserver/XResourceManager.java
    package com.winlator.xserver;
    
    import java.util.ArrayList;
    
    /* loaded from: classes.dex */
    public abstract class XResourceManager {
        private final ArrayList<OnResourceLifecycleListener> onResourceLifecycleListeners = new ArrayList<>();
    
        public interface OnResourceLifecycleListener {
            default void onCreateResource(XResource resource) {
            }
    
            default void onFreeResource(XResource resource) {
            }
        }
    
        public void addOnResourceLifecycleListener(OnResourceLifecycleListener OnResourceLifecycleListener2) {
            this.onResourceLifecycleListeners.add(OnResourceLifecycleListener2);
        }
    
        public void removeOnResourceLifecycleListener(OnResourceLifecycleListener OnResourceLifecycleListener2) {
            this.onResourceLifecycleListeners.remove(OnResourceLifecycleListener2);
        }
    
        public void triggerOnCreateResourceListener(XResource resource) {
            for (int i = this.onResourceLifecycleListeners.size() - 1; i >= 0; i--) {
                this.onResourceLifecycleListeners.get(i).onCreateResource(resource);
            }
        }
    
        public void triggerOnFreeResourceListener(XResource resource) {
            for (int i = this.onResourceLifecycleListeners.size() - 1; i >= 0; i--) {
                this.onResourceLifecycleListeners.get(i).onFreeResource(resource);
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/XServer.java
    package com.winlator.xserver;
    
    import android.util.SparseArray;
    import com.winlator.XServerDisplayActivity;
    import com.winlator.contentdialog.DebugDialog;
    import com.winlator.core.CursorLocker;
    import com.winlator.renderer.GLRenderer;
    import com.winlator.winhandler.WinHandler;
    import com.winlator.xserver.Pointer;
    import com.winlator.xserver.extensions.BigReqExtension;
    import com.winlator.xserver.extensions.DRI3Extension;
    import com.winlator.xserver.extensions.Extension;
    import com.winlator.xserver.extensions.MITSHMExtension;
    import com.winlator.xserver.extensions.PresentExtension;
    import com.winlator.xserver.extensions.SyncExtension;
    import java.nio.charset.Charset;
    import java.util.EnumMap;
    import java.util.concurrent.locks.ReentrantLock;
    
    /* loaded from: classes.dex */
    public class XServer {
        public static final Charset LATIN1_CHARSET = Charset.forName("latin1");
        public final XServerDisplayActivity activity;
        public final CursorManager cursorManager;
        public final DrawableManager drawableManager;
        public final GrabManager grabManager;
        public final InputDeviceManager inputDeviceManager;
        public final PixmapManager pixmapManager;
        private GLRenderer renderer;
        public final ScreenInfo screenInfo;
        public final SelectionManager selectionManager;
        private SHMSegmentManager shmSegmentManager;
        private WinHandler winHandler;
        public final WindowManager windowManager;
        public final SparseArray<Extension> extensions = new SparseArray<>();
        public final ResourceIDs resourceIDs = new ResourceIDs(128);
        public final GraphicsContextManager graphicsContextManager = new GraphicsContextManager();
        public final Keyboard keyboard = Keyboard.createKeyboard(this);
        public final Pointer pointer = new Pointer(this);
        private final EnumMap<Lockable, ReentrantLock> locks = new EnumMap<>(Lockable.class);
        private boolean relativeMouseMovement = false;
        public final CursorLocker cursorLocker = new CursorLocker(this);
    
        public enum Lockable {
            WINDOW_MANAGER,
            PIXMAP_MANAGER,
            DRAWABLE_MANAGER,
            GRAPHIC_CONTEXT_MANAGER,
            INPUT_DEVICE,
            CURSOR_MANAGER,
            SHMSEGMENT_MANAGER
        }
    
        public XServer(XServerDisplayActivity activity, ScreenInfo screenInfo) {
            this.activity = activity;
            this.screenInfo = screenInfo;
            for (Lockable lockable : Lockable.values()) {
                this.locks.put((EnumMap<Lockable, ReentrantLock>) lockable, (Lockable) new ReentrantLock());
            }
            this.pixmapManager = new PixmapManager();
            DrawableManager drawableManager = new DrawableManager(this);
            this.drawableManager = drawableManager;
            this.cursorManager = new CursorManager(drawableManager);
            WindowManager windowManager = new WindowManager(screenInfo, drawableManager);
            this.windowManager = windowManager;
            this.selectionManager = new SelectionManager(windowManager);
            this.inputDeviceManager = new InputDeviceManager(this);
            this.grabManager = new GrabManager(this);
            DesktopHelper.attachTo(this);
            setupExtensions();
        }
    
        public boolean isRelativeMouseMovement() {
            return this.relativeMouseMovement;
        }
    
        public void setRelativeMouseMovement(boolean relativeMouseMovement) {
            this.cursorLocker.setEnabled(!relativeMouseMovement);
            this.relativeMouseMovement = relativeMouseMovement;
        }
    
        public GLRenderer getRenderer() {
            return this.renderer;
        }
    
        public void setRenderer(GLRenderer renderer) {
            this.renderer = renderer;
        }
    
        public WinHandler getWinHandler() {
            return this.winHandler;
        }
    
        public void setWinHandler(WinHandler winHandler) {
            this.winHandler = winHandler;
        }
    
        public SHMSegmentManager getSHMSegmentManager() {
            return this.shmSegmentManager;
        }
    
        public void setSHMSegmentManager(SHMSegmentManager shmSegmentManager) {
            this.shmSegmentManager = shmSegmentManager;
        }
    
        private class SingleXLock implements XLock {
            private final ReentrantLock lock;
    
            private SingleXLock(Lockable lockable) {
                ReentrantLock reentrantLock = (ReentrantLock) XServer.this.locks.get(lockable);
                this.lock = reentrantLock;
                reentrantLock.lock();
            }
    
            @Override // com.winlator.xserver.XLock, java.lang.AutoCloseable
            public void close() {
                this.lock.unlock();
            }
        }
    
        private class MultiXLock implements XLock {
            private final Lockable[] lockables;
    
            private MultiXLock(Lockable[] lockables) {
                this.lockables = lockables;
                for (Lockable lockable : lockables) {
                    ((ReentrantLock) XServer.this.locks.get(lockable)).lock();
                }
            }
    
            @Override // com.winlator.xserver.XLock, java.lang.AutoCloseable
            public void close() {
                for (int i = this.lockables.length - 1; i >= 0; i--) {
                    ((ReentrantLock) XServer.this.locks.get(this.lockables[i])).unlock();
                }
            }
        }
    
        public XLock lock(Lockable lockable) {
            return new SingleXLock(lockable);
        }
    
        public XLock lock(Lockable... lockables) {
            return new MultiXLock(lockables);
        }
    
        public XLock lockAll() {
            return new MultiXLock(Lockable.values());
        }
    
        public Extension getExtensionByName(String name) {
            for (int i = 0; i < this.extensions.size(); i++) {
                Extension extension = this.extensions.valueAt(i);
                if (extension.getName().equals(name)) {
                    return extension;
                }
            }
            return null;
        }
    
        public void injectPointerMove(int x, int y) {
            XLock lock = lock(Lockable.WINDOW_MANAGER, Lockable.INPUT_DEVICE);
            try {
                this.pointer.setPosition(x, y);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public void injectPointerMoveDelta(int dx, int dy) {
            XLock lock = lock(Lockable.WINDOW_MANAGER, Lockable.INPUT_DEVICE);
            try {
                Pointer pointer = this.pointer;
                pointer.setPosition(pointer.getX() + dx, this.pointer.getY() + dy);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public void injectPointerButtonPress(Pointer.Button buttonCode) {
            XLock lock = lock(Lockable.WINDOW_MANAGER, Lockable.INPUT_DEVICE);
            try {
                this.pointer.setButton(buttonCode, true);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public void injectPointerButtonRelease(Pointer.Button buttonCode) {
            XLock lock = lock(Lockable.WINDOW_MANAGER, Lockable.INPUT_DEVICE);
            try {
                this.pointer.setButton(buttonCode, false);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public void injectKeyPress(XKeycode xKeycode) {
            injectKeyPress(xKeycode, 0);
        }
    
        public void injectKeyPress(XKeycode xKeycode, int keysym) {
            XLock lock = lock(Lockable.WINDOW_MANAGER, Lockable.INPUT_DEVICE);
            try {
                this.keyboard.setKeyPress(xKeycode.id, keysym);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public void injectKeyRelease(XKeycode xKeycode) {
            XLock lock = lock(Lockable.WINDOW_MANAGER, Lockable.INPUT_DEVICE);
            try {
                this.keyboard.setKeyRelease(xKeycode.id);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        private void setupExtensions() {
            this.extensions.put(-100, new BigReqExtension());
            this.extensions.put(-101, new MITSHMExtension());
            this.extensions.put(-102, new DRI3Extension());
            this.extensions.put(-103, new PresentExtension());
            this.extensions.put(-104, new SyncExtension());
        }
    
        public <T extends Extension> T getExtension(int opcode) {
            return (T) this.extensions.get(opcode);
        }
    
        public void debugPrint(String line) {
            DebugDialog debugDialog = this.activity.getDebugDialog();
            if (debugDialog != null) {
                debugDialog.call("xserver:" + line);
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/BadAccess.java
    package com.winlator.xserver.errors;
    
    /* loaded from: classes.dex */
    public class BadAccess extends XRequestError {
        public BadAccess() {
            super(10, 0);
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/BadAlloc.java
    package com.winlator.xserver.errors;
    
    /* loaded from: classes.dex */
    public class BadAlloc extends XRequestError {
        public BadAlloc() {
            super(11, 0);
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/BadAtom.java
    package com.winlator.xserver.errors;
    
    /* loaded from: classes.dex */
    public class BadAtom extends XRequestError {
        public BadAtom(int id) {
            super(5, id);
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/BadDrawable.java
    package com.winlator.xserver.errors;
    
    /* loaded from: classes.dex */
    public class BadDrawable extends XRequestError {
        public BadDrawable(int id) {
            super(9, id);
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/BadFence.java
    package com.winlator.xserver.errors;
    
    /* loaded from: classes.dex */
    public class BadFence extends XRequestError {
        public BadFence(int id) {
            super(-126, id);
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/BadGraphicsContext.java
    package com.winlator.xserver.errors;
    
    /* loaded from: classes.dex */
    public class BadGraphicsContext extends XRequestError {
        public BadGraphicsContext(int id) {
            super(13, id);
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/BadIdChoice.java
    package com.winlator.xserver.errors;
    
    /* loaded from: classes.dex */
    public class BadIdChoice extends XRequestError {
        public BadIdChoice(int id) {
            super(14, id);
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/BadImplementation.java
    package com.winlator.xserver.errors;
    
    /* loaded from: classes.dex */
    public class BadImplementation extends XRequestError {
        public BadImplementation() {
            super(17, 0);
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/BadMatch.java
    package com.winlator.xserver.errors;
    
    /* loaded from: classes.dex */
    public class BadMatch extends XRequestError {
        public BadMatch() {
            super(8, 0);
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/BadPixmap.java
    package com.winlator.xserver.errors;
    
    /* loaded from: classes.dex */
    public class BadPixmap extends XRequestError {
        public BadPixmap(int id) {
            super(4, id);
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/BadSHMSegment.java
    package com.winlator.xserver.errors;
    
    /* loaded from: classes.dex */
    public class BadSHMSegment extends XRequestError {
        public BadSHMSegment(int id) {
            super(-128, id);
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/BadValue.java
    package com.winlator.xserver.errors;
    
    /* loaded from: classes.dex */
    public class BadValue extends XRequestError {
        public BadValue(int data) {
            super(2, data);
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/BadWindow.java
    package com.winlator.xserver.errors;
    
    /* loaded from: classes.dex */
    public class BadWindow extends XRequestError {
        public BadWindow(int id) {
            super(3, id);
        }
    }
  + app/src/main/java/com/winlator/xserver/errors/XRequestError.java
    package com.winlator.xserver.errors;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.XClient;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class XRequestError extends Exception {
        private final byte code;
        private final int data;
    
        public XRequestError(int code, int data) {
            this.code = (byte) code;
            this.data = data;
        }
    
        public void sendError(XClient client, byte opcode) throws IOException {
            XOutputStream outputStream = client.getOutputStream();
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 0);
                outputStream.writeByte(this.code);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(this.data);
                outputStream.writeShort(client.getRequestData());
                outputStream.writeByte(opcode);
                outputStream.writePad(21);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/ButtonPress.java
    package com.winlator.xserver.events;
    
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Window;
    
    /* loaded from: classes.dex */
    public class ButtonPress extends InputDeviceEvent {
        public ButtonPress(byte detail, Window root, Window event, Window child, short rootX, short rootY, short eventX, short eventY, Bitmask state) {
            super(4, detail, root, event, child, rootX, rootY, eventX, eventY, state);
        }
    }
  + app/src/main/java/com/winlator/xserver/events/ButtonRelease.java
    package com.winlator.xserver.events;
    
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Window;
    
    /* loaded from: classes.dex */
    public class ButtonRelease extends InputDeviceEvent {
        public ButtonRelease(byte detail, Window root, Window event, Window child, short rootX, short rootY, short eventX, short eventY, Bitmask state) {
            super(5, detail, root, event, child, rootX, rootY, eventX, eventY, state);
        }
    }
  + app/src/main/java/com/winlator/xserver/events/ConfigureNotify.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class ConfigureNotify extends Event {
        private final Window aboveSibling;
        private final short borderWidth;
        private final Window event;
        private final short height;
        private final boolean overrideRedirect;
        private final short width;
        private final Window window;
        private final short x;
        private final short y;
    
        public ConfigureNotify(Window event, Window window, Window aboveSibling, int x, int y, int width, int height, int borderWidth, boolean overrideRedirect) {
            super(22);
            this.event = event;
            this.window = window;
            this.aboveSibling = aboveSibling;
            this.x = (short) x;
            this.y = (short) y;
            this.width = (short) width;
            this.height = (short) height;
            this.borderWidth = (short) borderWidth;
            this.overrideRedirect = overrideRedirect;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(this.event.id);
                outputStream.writeInt(this.window.id);
                Window window = this.aboveSibling;
                outputStream.writeInt(window != null ? window.id : 0);
                outputStream.writeShort(this.x);
                outputStream.writeShort(this.y);
                outputStream.writeShort(this.width);
                outputStream.writeShort(this.height);
                outputStream.writeShort(this.borderWidth);
                outputStream.writeByte((byte) (this.overrideRedirect ? 1 : 0));
                outputStream.writePad(5);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/ConfigureRequest.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class ConfigureRequest extends Event {
        private final short borderWidth;
        private final short height;
        private final Window parent;
        private final Window sibling;
        private final Window.StackMode stackMode;
        private final Bitmask valueMask;
        private final short width;
        private final Window window;
        private final short x;
        private final short y;
    
        public ConfigureRequest(Window parent, Window window, Window sibling, short x, short y, short width, short height, short borderWidth, Window.StackMode stackMode, Bitmask valueMask) {
            super(23);
            this.parent = parent;
            this.window = window;
            this.sibling = sibling;
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.borderWidth = borderWidth;
            this.stackMode = stackMode != null ? stackMode : Window.StackMode.ABOVE;
            this.valueMask = valueMask;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) this.stackMode.ordinal());
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(this.parent.id);
                outputStream.writeInt(this.window.id);
                Window window = this.sibling;
                outputStream.writeInt(window != null ? window.id : 0);
                outputStream.writeShort(this.x);
                outputStream.writeShort(this.y);
                outputStream.writeShort(this.width);
                outputStream.writeShort(this.height);
                outputStream.writeShort(this.borderWidth);
                outputStream.writeShort((short) this.valueMask.getBits());
                outputStream.writePad(4);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/CreateNotify.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class CreateNotify extends Event {
        private final Window parent;
        private final Window window;
    
        public CreateNotify(Window parent, Window window) {
            super(16);
            this.parent = parent;
            this.window = window;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(this.parent.id);
                outputStream.writeInt(this.window.id);
                outputStream.writeShort(this.window.getX());
                outputStream.writeShort(this.window.getY());
                outputStream.writeShort(this.window.getWidth());
                outputStream.writeShort(this.window.getHeight());
                outputStream.writeShort(this.window.getBorderWidth());
                outputStream.writeByte((byte) (this.window.attributes.isOverrideRedirect() ? 1 : 0));
                outputStream.writePad(9);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/DestroyNotify.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class DestroyNotify extends Event {
        private final Window event;
        private final Window window;
    
        public DestroyNotify(Window event, Window window) {
            super(17);
            this.event = event;
            this.window = window;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(this.event.id);
                outputStream.writeInt(this.window.id);
                outputStream.writePad(20);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/EnterNotify.java
    package com.winlator.xserver.events;
    
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.events.PointerWindowEvent;
    
    /* loaded from: classes.dex */
    public class EnterNotify extends PointerWindowEvent {
        public EnterNotify(PointerWindowEvent.Detail detail, Window root, Window event, Window child, short rootX, short rootY, short eventX, short eventY, Bitmask state, PointerWindowEvent.Mode mode, boolean sameScreenAndFocus) {
            super(7, detail, root, event, child, rootX, rootY, eventX, eventY, state, mode, sameScreenAndFocus);
        }
    }
  + app/src/main/java/com/winlator/xserver/events/Event.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public abstract class Event {
        protected final byte code;
    
        public abstract void send(short s, XOutputStream xOutputStream) throws IOException;
    
        public Event(int code) {
            this.code = (byte) code;
        }
    }
  + app/src/main/java/com/winlator/xserver/events/Expose.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class Expose extends Event {
        private final short height;
        private final short width;
        private final Window window;
        private final short x;
        private final short y;
    
        public Expose(Window window) {
            super(12);
            this.window = window;
            this.y = (short) 0;
            this.x = (short) 0;
            this.width = window.getWidth();
            this.height = window.getHeight();
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(this.window.id);
                outputStream.writeShort(this.x);
                outputStream.writeShort(this.y);
                outputStream.writeShort(this.width);
                outputStream.writeShort(this.height);
                outputStream.writeShort((short) 0);
                outputStream.writePad(14);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/InputDeviceEvent.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class InputDeviceEvent extends Event {
        private final Window child;
        private final byte detail;
        private final Window event;
        private final short eventX;
        private final short eventY;
        private final Window root;
        private final short rootX;
        private final short rootY;
        private final Bitmask state;
        private final int timestamp;
    
        public InputDeviceEvent(int code, byte detail, Window root, Window event, Window child, short rootX, short rootY, short eventX, short eventY, Bitmask state) {
            super(code);
            this.detail = detail;
            this.timestamp = (int) System.currentTimeMillis();
            this.root = root;
            this.event = event;
            this.child = child;
            this.rootX = rootX;
            this.rootY = rootY;
            this.eventX = eventX;
            this.eventY = eventY;
            this.state = state;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte(this.detail);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(this.timestamp);
                outputStream.writeInt(this.root.id);
                outputStream.writeInt(this.event.id);
                Window window = this.child;
                outputStream.writeInt(window != null ? window.id : 0);
                outputStream.writeShort(this.rootX);
                outputStream.writeShort(this.rootY);
                outputStream.writeShort(this.eventX);
                outputStream.writeShort(this.eventY);
                outputStream.writeShort((short) this.state.getBits());
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 0);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/KeyPress.java
    package com.winlator.xserver.events;
    
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Window;
    
    /* loaded from: classes.dex */
    public class KeyPress extends InputDeviceEvent {
        public KeyPress(byte keycode, Window root, Window event, Window child, short rootX, short rootY, short eventX, short eventY, Bitmask state) {
            super(2, keycode, root, event, child, rootX, rootY, eventX, eventY, state);
        }
    }
  + app/src/main/java/com/winlator/xserver/events/KeyRelease.java
    package com.winlator.xserver.events;
    
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Window;
    
    /* loaded from: classes.dex */
    public class KeyRelease extends InputDeviceEvent {
        public KeyRelease(byte keycode, Window root, Window event, Window child, short rootX, short rootY, short eventX, short eventY, Bitmask state) {
            super(3, keycode, root, event, child, rootX, rootY, eventX, eventY, state);
        }
    }
  + app/src/main/java/com/winlator/xserver/events/LeaveNotify.java
    package com.winlator.xserver.events;
    
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.events.PointerWindowEvent;
    
    /* loaded from: classes.dex */
    public class LeaveNotify extends PointerWindowEvent {
        public LeaveNotify(PointerWindowEvent.Detail detail, Window root, Window event, Window child, short rootX, short rootY, short eventX, short eventY, Bitmask state, PointerWindowEvent.Mode mode, boolean sameScreenAndFocus) {
            super(8, detail, root, event, child, rootX, rootY, eventX, eventY, state, mode, sameScreenAndFocus);
        }
    }
  + app/src/main/java/com/winlator/xserver/events/MapNotify.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class MapNotify extends Event {
        private final Window event;
        private final Window window;
    
        public MapNotify(Window event, Window window) {
            super(19);
            this.event = event;
            this.window = window;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(this.event.id);
                outputStream.writeInt(this.window.id);
                outputStream.writeByte((byte) (this.window.attributes.isOverrideRedirect() ? 1 : 0));
                outputStream.writePad(19);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/MapRequest.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class MapRequest extends Event {
        private final Window parent;
        private final Window window;
    
        public MapRequest(Window parent, Window window) {
            super(20);
            this.parent = parent;
            this.window = window;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(this.parent.id);
                outputStream.writeInt(this.window.id);
                outputStream.writePad(20);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/MappingNotify.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class MappingNotify extends Event {
        private final byte count;
        private final byte firstKeycode;
        private final Request request;
    
        public enum Request {
            MODIFIER,
            KEYBOARD,
            POINTER
        }
    
        public MappingNotify(Request request, byte firstKeycode, int count) {
            super(34);
            this.request = request;
            this.firstKeycode = firstKeycode;
            this.count = (byte) count;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeByte((byte) this.request.ordinal());
                outputStream.writeByte(this.firstKeycode);
                outputStream.writeByte(this.count);
                outputStream.writePad(25);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/MotionNotify.java
    package com.winlator.xserver.events;
    
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Window;
    
    /* loaded from: classes.dex */
    public class MotionNotify extends InputDeviceEvent {
        public MotionNotify(boolean z, Window window, Window window2, Window window3, short s, short s2, short s3, short s4, Bitmask bitmask) {
            super(6, z ? (byte) 1 : (byte) 0, window, window2, window3, s, s2, s3, s4, bitmask);
        }
    }
  + app/src/main/java/com/winlator/xserver/events/PointerWindowEvent.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public abstract class PointerWindowEvent extends Event {
        private final Window child;
        private final Detail detail;
        private final Window event;
        private final short eventX;
        private final short eventY;
        private final Mode mode;
        private final Window root;
        private final short rootX;
        private final short rootY;
        private final boolean sameScreenAndFocus;
        private final Bitmask state;
        private final int timestamp;
    
        public enum Detail {
            ANCESTOR,
            VIRTUAL,
            INFERIOR,
            NONLINEAR,
            NONLINEAR_VIRTUAL
        }
    
        public enum Mode {
            NORMAL,
            GRAB,
            UNGRAB
        }
    
        public PointerWindowEvent(int code, Detail detail, Window root, Window event, Window child, short rootX, short rootY, short eventX, short eventY, Bitmask state, Mode mode, boolean sameScreenAndFocus) {
            super(code);
            this.detail = detail;
            this.timestamp = (int) System.currentTimeMillis();
            this.root = root;
            this.event = event;
            this.child = child;
            this.rootX = rootX;
            this.rootY = rootY;
            this.eventX = eventX;
            this.eventY = eventY;
            this.state = state;
            this.mode = mode;
            this.sameScreenAndFocus = sameScreenAndFocus;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) this.detail.ordinal());
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(this.timestamp);
                outputStream.writeInt(this.root.id);
                outputStream.writeInt(this.event.id);
                Window window = this.child;
                outputStream.writeInt(window != null ? window.id : 0);
                outputStream.writeShort(this.rootX);
                outputStream.writeShort(this.rootY);
                outputStream.writeShort(this.eventX);
                outputStream.writeShort(this.eventY);
                outputStream.writeShort((short) this.state.getBits());
                outputStream.writeByte((byte) this.mode.ordinal());
                outputStream.writeByte((byte) (this.sameScreenAndFocus ? 1 : 0));
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/PresentCompleteNotify.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.extensions.PresentExtension;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class PresentCompleteNotify extends Event {
        private final int eventId;
        private final PresentExtension.Kind kind;
        private final PresentExtension.Mode mode;
        private final long msc;
        private final int serial;
        private final long ust;
        private final Window window;
    
        public PresentCompleteNotify(int eventId, Window window, int serial, PresentExtension.Kind kind, PresentExtension.Mode mode, long ust, long msc) {
            super(35);
            this.eventId = eventId;
            this.window = window;
            this.serial = serial;
            this.kind = kind;
            this.mode = mode;
            this.ust = ust;
            this.msc = msc;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) -103);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(2);
                outputStream.writeShort(getEventType());
                outputStream.writeByte((byte) this.kind.ordinal());
                outputStream.writeByte((byte) this.mode.ordinal());
                outputStream.writeInt(this.eventId);
                outputStream.writeInt(this.window.id);
                outputStream.writeInt(this.serial);
                outputStream.writeLong(this.ust);
                outputStream.writeLong(this.msc);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public static short getEventType() {
            return (short) 1;
        }
    
        public static int getEventMask() {
            return 1 << getEventType();
        }
    }
  + app/src/main/java/com/winlator/xserver/events/PresentIdleNotify.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Pixmap;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class PresentIdleNotify extends Event {
        private final int eventId;
        private final int idleFence;
        private final Pixmap pixmap;
        private final int serial;
        private final Window window;
    
        public PresentIdleNotify(int eventId, Window window, Pixmap pixmap, int serial, int idleFence) {
            super(35);
            this.eventId = eventId;
            this.window = window;
            this.serial = serial;
            this.pixmap = pixmap;
            this.idleFence = idleFence;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) -103);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(0);
                outputStream.writeShort(getEventType());
                outputStream.writeShort((short) 0);
                outputStream.writeInt(this.eventId);
                outputStream.writeInt(this.window.id);
                outputStream.writeInt(this.serial);
                outputStream.writeInt(this.pixmap.id);
                outputStream.writeInt(this.idleFence);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public static short getEventType() {
            return (short) 2;
        }
    
        public static int getEventMask() {
            return 1 << getEventType();
        }
    }
  + app/src/main/java/com/winlator/xserver/events/PropertyNotify.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class PropertyNotify extends Event {
        private final int atom;
        private final boolean deleted;
        private final int timestamp;
        private final Window window;
    
        public PropertyNotify(Window window, int atom, boolean deleted) {
            super(28);
            this.window = window;
            this.atom = atom;
            this.timestamp = (int) System.currentTimeMillis();
            this.deleted = deleted;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(this.window.id);
                outputStream.writeInt(this.atom);
                outputStream.writeInt(this.timestamp);
                outputStream.writeByte((byte) (this.deleted ? 1 : 0));
                outputStream.writePad(15);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/RawEvent.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class RawEvent extends Event {
        private final byte[] data;
    
        public RawEvent(byte[] data) {
            super(data[0]);
            this.data = data;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.write(this.data);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/ResizeRequest.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class ResizeRequest extends Event {
        private final short height;
        private final short width;
        private final Window window;
    
        public ResizeRequest(Window window, short width, short height) {
            super(25);
            this.window = window;
            this.width = width;
            this.height = height;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(this.window.id);
                outputStream.writeShort(this.width);
                outputStream.writeShort(this.height);
                outputStream.writePad(20);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/SelectionClear.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class SelectionClear extends Event {
        private final Window owner;
        private final int selection;
        private final int timestamp;
    
        public SelectionClear(int timestamp, Window owner, int selection) {
            super(29);
            this.timestamp = timestamp;
            this.owner = owner;
            this.selection = selection;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(this.timestamp);
                outputStream.writeInt(this.owner.id);
                outputStream.writeInt(this.selection);
                outputStream.writePad(16);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/events/UnmapNotify.java
    package com.winlator.xserver.events;
    
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Window;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class UnmapNotify extends Event {
        private final Window event;
        private final Window window;
    
        public UnmapNotify(Window event, Window window) {
            super(18);
            this.event = event;
            this.window = window;
        }
    
        @Override // com.winlator.xserver.events.Event
        public void send(short sequenceNumber, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte(this.code);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(sequenceNumber);
                outputStream.writeInt(this.event.id);
                outputStream.writeInt(this.window.id);
                outputStream.writeByte((byte) 0);
                outputStream.writePad(19);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/extensions/BigReqExtension.java
    package com.winlator.xserver.extensions;
    
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.XClient;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class BigReqExtension implements Extension {
        @Override // com.winlator.xserver.extensions.Extension
        public String getName() {
            return "BIG-REQUESTS";
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getMajorOpcode() {
            return (byte) -100;
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getFirstErrorId() {
            return (byte) 0;
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getFirstEventId() {
            return (byte) 0;
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public void handleRequest(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writeInt(4194303);
                outputStream.writePad(20);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/extensions/DRI3Extension.java
    package com.winlator.xserver.extensions;
    
    import com.winlator.core.Callback;
    import com.winlator.renderer.GPUImage;
    import com.winlator.renderer.Texture;
    import com.winlator.sysvshm.SysVSharedMemory;
    import com.winlator.widget.XServerView;
    import com.winlator.xconnector.XConnectorEpoll;
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xenvironment.components.VortekRendererComponent$$ExternalSyntheticLambda0;
    import com.winlator.xserver.Drawable;
    import com.winlator.xserver.Pixmap;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.XLock;
    import com.winlator.xserver.XServer;
    import com.winlator.xserver.errors.BadAlloc;
    import com.winlator.xserver.errors.BadDrawable;
    import com.winlator.xserver.errors.BadIdChoice;
    import com.winlator.xserver.errors.BadImplementation;
    import com.winlator.xserver.errors.BadPixmap;
    import com.winlator.xserver.errors.BadWindow;
    import com.winlator.xserver.errors.XRequestError;
    import java.io.IOException;
    import java.nio.ByteBuffer;
    import java.util.Objects;
    
    /* loaded from: classes.dex */
    public class DRI3Extension implements Extension {
        private final Callback<Drawable> onDestroyDrawableListener = new Callback() { // from class: com.winlator.xserver.extensions.DRI3Extension$$ExternalSyntheticLambda0
            @Override // com.winlator.core.Callback
            public final void call(Object obj) {
                DRI3Extension.lambda$new$0((Drawable) obj);
            }
        };
    
        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$new$0(Drawable drawable) {
            ByteBuffer data = drawable.getData();
            SysVSharedMemory.unmapSHMSegment(data, data.capacity());
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public String getName() {
            return "DRI3";
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getMajorOpcode() {
            return (byte) -102;
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getFirstErrorId() {
            return (byte) 0;
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getFirstEventId() {
            return (byte) 0;
        }
    
        private void queryVersion(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            inputStream.skip(8);
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writeInt(1);
                outputStream.writeInt(0);
                outputStream.writePad(16);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        private void open(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int drawableId = inputStream.readInt();
            inputStream.skip(4);
            Drawable drawable = client.xServer.drawableManager.getDrawable(drawableId);
            if (drawable == null) {
                throw new BadDrawable(drawableId);
            }
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writePad(24);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        private void pixmapFromBuffer(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int pixmapId = inputStream.readInt();
            int windowId = inputStream.readInt();
            int size = inputStream.readInt();
            short width = inputStream.readShort();
            short height = inputStream.readShort();
            short stride = inputStream.readShort();
            byte depth = inputStream.readByte();
            inputStream.skip(1);
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            Pixmap pixmap = client.xServer.pixmapManager.getPixmap(pixmapId);
            if (pixmap != null) {
                throw new BadIdChoice(pixmapId);
            }
            int fd = inputStream.getAncillaryFd();
            pixmapFromFd(client, pixmapId, width, height, stride, 0, depth, fd, size);
        }
    
        private void bufferFromPixmap(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int windowId = inputStream.readInt();
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null || !GPUImage.isSupported()) {
                throw new BadPixmap(windowId);
            }
            Drawable content = window.getContent();
            if (content.width % 2 > 0 || content.height % 2 > 0) {
                throw new BadPixmap(windowId);
            }
            Texture texture = content.getTexture();
            if (!(texture instanceof GPUImage)) {
                XServerView xServerView = client.xServer.getRenderer().xServerView;
                Objects.requireNonNull(texture);
                xServerView.queueEvent(new VortekRendererComponent$$ExternalSyntheticLambda0(texture));
                content.setTexture(new GPUImage(content.width, content.height, false));
            }
            GPUImage gpuImage = (GPUImage) content.getTexture();
            short stride = gpuImage.getStride();
            int nativeHandle = gpuImage.getNativeHandle();
            client.xServer.debugPrint("bufferFromPixmap handle " + nativeHandle + ", width " + ((int) content.width) + ", height " + ((int) content.height) + ", stride " + ((int) stride));
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 1);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writeInt(content.height * stride * 4);
                outputStream.writeShort(content.width);
                outputStream.writeShort(content.height);
                outputStream.writeShort(stride);
                outputStream.writeByte((byte) 32);
                outputStream.writeByte((byte) 32);
                outputStream.writePad(12);
                outputStream.setAncillaryFd(nativeHandle);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        private void pixmapFromBuffers(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int pixmapId = inputStream.readInt();
            int windowId = inputStream.readInt();
            inputStream.skip(4);
            short width = inputStream.readShort();
            short height = inputStream.readShort();
            int stride = inputStream.readInt();
            int offset = inputStream.readInt();
            inputStream.skip(24);
            byte depth = inputStream.readByte();
            inputStream.skip(11);
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            Pixmap pixmap = client.xServer.pixmapManager.getPixmap(pixmapId);
            if (pixmap != null) {
                throw new BadIdChoice(pixmapId);
            }
            int fd = inputStream.getAncillaryFd();
            long size = stride * height;
            pixmapFromFd(client, pixmapId, width, height, stride, offset, depth, fd, size);
        }
    
        private void pixmapFromFd(XClient client, int pixmapId, short width, short height, int stride, int offset, byte depth, int fd, long size) throws IOException, XRequestError {
            try {
                ByteBuffer buffer = SysVSharedMemory.mapSHMSegment(fd, size, offset, true);
                if (buffer == null) {
                    throw new BadAlloc();
                }
                short totalWidth = (short) (stride / 4);
                Drawable drawable = client.xServer.drawableManager.createDrawable(pixmapId, totalWidth, height, depth);
                drawable.setData(buffer);
                drawable.setTexture(null);
                drawable.setOnDestroyListener(this.onDestroyDrawableListener);
                client.xServer.pixmapManager.createPixmap(drawable);
            } finally {
                XConnectorEpoll.closeFd(fd);
            }
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public void handleRequest(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            XLock lock;
            int opcode = client.getRequestData();
            switch (opcode) {
                case 0:
                    queryVersion(client, inputStream, outputStream);
                    return;
                case 1:
                    XLock lock2 = client.xServer.lock(XServer.Lockable.DRAWABLE_MANAGER);
                    try {
                        open(client, inputStream, outputStream);
                        if (lock2 != null) {
                            lock2.close();
                            return;
                        }
                        return;
                    } finally {
                        if (lock2 != null) {
                            try {
                                lock2.close();
                            } catch (Throwable th) {
                                th.addSuppressed(th);
                            }
                        }
                    }
                case 2:
                    lock = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.PIXMAP_MANAGER, XServer.Lockable.DRAWABLE_MANAGER);
                    try {
                        pixmapFromBuffer(client, inputStream, outputStream);
                        if (lock != null) {
                            lock.close();
                            return;
                        }
                        return;
                    } finally {
                        if (lock != null) {
                            try {
                                lock.close();
                            } catch (Throwable th2) {
                                th.addSuppressed(th2);
                            }
                        }
                    }
                case 3:
                    lock = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.DRAWABLE_MANAGER);
                    try {
                        bufferFromPixmap(client, inputStream, outputStream);
                        if (lock != null) {
                            lock.close();
                            return;
                        }
                        return;
                    } finally {
                    }
                case 4:
                case 5:
                case 6:
                default:
                    throw new BadImplementation();
                case 7:
                    lock = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.PIXMAP_MANAGER, XServer.Lockable.DRAWABLE_MANAGER);
                    try {
                        pixmapFromBuffers(client, inputStream, outputStream);
                        if (lock != null) {
                            lock.close();
                            return;
                        }
                        return;
                    } finally {
                    }
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/extensions/Extension.java
    package com.winlator.xserver.extensions;
    
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.errors.XRequestError;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public interface Extension {
        byte getFirstErrorId();
    
        byte getFirstEventId();
    
        byte getMajorOpcode();
    
        String getName();
    
        void handleRequest(XClient xClient, XInputStream xInputStream, XOutputStream xOutputStream) throws IOException, XRequestError;
    }
  + app/src/main/java/com/winlator/xserver/extensions/MITSHMExtension.java
    package com.winlator.xserver.extensions;
    
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Drawable;
    import com.winlator.xserver.GraphicsContext;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.XLock;
    import com.winlator.xserver.XServer;
    import com.winlator.xserver.errors.BadDrawable;
    import com.winlator.xserver.errors.BadGraphicsContext;
    import com.winlator.xserver.errors.BadImplementation;
    import com.winlator.xserver.errors.BadSHMSegment;
    import com.winlator.xserver.errors.XRequestError;
    import java.io.IOException;
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public class MITSHMExtension implements Extension {
        @Override // com.winlator.xserver.extensions.Extension
        public String getName() {
            return "MIT-SHM";
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getMajorOpcode() {
            return (byte) -101;
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getFirstErrorId() {
            return Byte.MIN_VALUE;
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getFirstEventId() {
            return (byte) 64;
        }
    
        private static void queryVersion(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writeShort((short) 1);
                outputStream.writeShort((short) 1);
                outputStream.writeShort((short) 0);
                outputStream.writeShort((short) 0);
                outputStream.writeByte((byte) 0);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        private static void attach(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int xid = inputStream.readInt();
            int shmid = inputStream.readInt();
            inputStream.skip(4);
            client.xServer.getSHMSegmentManager().attach(xid, shmid);
        }
    
        private static void detach(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            client.xServer.getSHMSegmentManager().detach(inputStream.readInt());
        }
    
        private static void putImage(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int drawableId = inputStream.readInt();
            int gcId = inputStream.readInt();
            short totalWidth = inputStream.readShort();
            short totalHeight = inputStream.readShort();
            short srcX = inputStream.readShort();
            short srcY = inputStream.readShort();
            short srcWidth = inputStream.readShort();
            short srcHeight = inputStream.readShort();
            short dstX = inputStream.readShort();
            short dstY = inputStream.readShort();
            byte depth = inputStream.readByte();
            inputStream.skip(3);
            int shmseg = inputStream.readInt();
            inputStream.skip(4);
            Drawable drawable = client.xServer.drawableManager.getDrawable(drawableId);
            if (drawable == null) {
                throw new BadDrawable(drawableId);
            }
            GraphicsContext graphicsContext = client.xServer.graphicsContextManager.getGraphicsContext(gcId);
            if (graphicsContext == null) {
                throw new BadGraphicsContext(gcId);
            }
            ByteBuffer data = client.xServer.getSHMSegmentManager().getData(shmseg);
            if (data == null) {
                throw new BadSHMSegment(shmseg);
            }
            if (graphicsContext.getFunction() != GraphicsContext.Function.COPY) {
                throw new UnsupportedOperationException("GC Function other than COPY is not supported.");
            }
            if (drawable.isUseSharedData()) {
                synchronized (drawable.renderLock) {
                    if (drawable.getData() != data) {
                        drawable.setData(data);
                    }
                    drawable.forceUpdate();
                }
                return;
            }
            drawable.drawImage(srcX, srcY, dstX, dstY, srcWidth, srcHeight, depth, data, totalWidth, totalHeight);
        }
    
        private static void createPixmap(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            inputStream.skip(4);
            int drawableId = inputStream.readInt();
            short width = inputStream.readShort();
            inputStream.skip(14);
            Drawable drawable = client.xServer.drawableManager.getDrawable(drawableId);
            if (drawable == null) {
                throw new BadDrawable(drawableId);
            }
            drawable.setUseSharedData(width == drawable.width);
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public void handleRequest(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            XLock lock;
            int opcode = client.getRequestData();
            switch (opcode) {
                case 0:
                    queryVersion(client, inputStream, outputStream);
                    return;
                case 1:
                    XLock lock2 = client.xServer.lock(XServer.Lockable.SHMSEGMENT_MANAGER);
                    try {
                        attach(client, inputStream, outputStream);
                        if (lock2 != null) {
                            lock2.close();
                            return;
                        }
                        return;
                    } finally {
                        if (lock2 != null) {
                            try {
                                lock2.close();
                            } catch (Throwable th) {
                                th.addSuppressed(th);
                            }
                        }
                    }
                case 2:
                    XLock lock3 = client.xServer.lock(XServer.Lockable.SHMSEGMENT_MANAGER);
                    try {
                        detach(client, inputStream, outputStream);
                        if (lock3 != null) {
                            lock3.close();
                            return;
                        }
                        return;
                    } finally {
                        if (lock3 != null) {
                            try {
                                lock3.close();
                            } catch (Throwable th2) {
                                th.addSuppressed(th2);
                            }
                        }
                    }
                case 3:
                    lock = client.xServer.lock(XServer.Lockable.SHMSEGMENT_MANAGER, XServer.Lockable.DRAWABLE_MANAGER, XServer.Lockable.GRAPHIC_CONTEXT_MANAGER);
                    try {
                        putImage(client, inputStream, outputStream);
                        if (lock != null) {
                            lock.close();
                            return;
                        }
                        return;
                    } finally {
                    }
                case 4:
                default:
                    throw new BadImplementation();
                case 5:
                    lock = client.xServer.lock(XServer.Lockable.DRAWABLE_MANAGER);
                    try {
                        createPixmap(client, inputStream, outputStream);
                        if (lock != null) {
                            lock.close();
                            return;
                        }
                        return;
                    } finally {
                    }
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/extensions/PresentExtension.java
    package com.winlator.xserver.extensions;
    
    import android.util.SparseArray;
    import com.winlator.renderer.GPUImage;
    import com.winlator.renderer.Texture;
    import com.winlator.widget.XServerView;
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xenvironment.components.VortekRendererComponent$$ExternalSyntheticLambda0;
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Drawable;
    import com.winlator.xserver.Pixmap;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.XLock;
    import com.winlator.xserver.XServer;
    import com.winlator.xserver.errors.BadImplementation;
    import com.winlator.xserver.errors.BadMatch;
    import com.winlator.xserver.errors.BadWindow;
    import com.winlator.xserver.errors.XRequestError;
    import com.winlator.xserver.events.PresentCompleteNotify;
    import com.winlator.xserver.events.PresentIdleNotify;
    import java.io.IOException;
    import java.util.Objects;
    
    /* loaded from: classes.dex */
    public class PresentExtension implements Extension {
        private final SparseArray<Event> events = new SparseArray<>();
        private SyncExtension syncExtension;
    
        public enum Kind {
            PIXMAP,
            MSC_NOTIFY
        }
    
        public enum Mode {
            COPY,
            FLIP,
            SKIP
        }
    
        private static class Event {
            private XClient client;
            private int id;
            private Bitmask mask;
            private Window window;
    
            private Event() {
            }
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public String getName() {
            return "Present";
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getMajorOpcode() {
            return (byte) -103;
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getFirstErrorId() {
            return (byte) 0;
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getFirstEventId() {
            return (byte) 0;
        }
    
        private void sendIdleNotify(Window window, Pixmap pixmap, int serial, int idleFence) {
            if (idleFence != 0) {
                this.syncExtension.setTriggered(idleFence);
            }
            if (this.events.size() == 0) {
                return;
            }
            synchronized (this.events) {
                for (int i = 0; i < this.events.size(); i++) {
                    Event event = this.events.valueAt(i);
                    if (event.window == window && event.mask.isSet(PresentIdleNotify.getEventMask())) {
                        event.client.sendEvent(new PresentIdleNotify(event.id, window, pixmap, serial, idleFence));
                    }
                }
            }
        }
    
        private void sendCompleteNotify(Window window, int serial, Kind kind, Mode mode, long ust, long msc) {
            long ust2;
            long msc2;
            SparseArray<Event> sparseArray;
            int i;
            PresentExtension presentExtension = this;
            if (presentExtension.events.size() == 0) {
                return;
            }
            if (ust == 0 && msc == 0) {
                ust2 = System.nanoTime() / 1000;
                msc2 = ust2 / 16666;
            } else {
                ust2 = ust;
                msc2 = msc;
            }
            SparseArray<Event> sparseArray2 = presentExtension.events;
            synchronized (sparseArray2) {
                int i2 = 0;
                while (i2 < presentExtension.events.size()) {
                    try {
                        Event event = presentExtension.events.valueAt(i2);
                        if (event.window == window && event.mask.isSet(PresentCompleteNotify.getEventMask())) {
                            i = i2;
                            sparseArray = sparseArray2;
                            try {
                                event.client.sendEvent(new PresentCompleteNotify(event.id, window, serial, kind, mode, ust2, msc2));
                            } catch (Throwable th) {
                                th = th;
                                throw th;
                            }
                        } else {
                            i = i2;
                            sparseArray = sparseArray2;
                        }
                        i2 = i + 1;
                        presentExtension = this;
                        sparseArray2 = sparseArray;
                    } catch (Throwable th2) {
                        th = th2;
                        sparseArray = sparseArray2;
                    }
                }
            }
        }
    
        private static void queryVersion(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            inputStream.skip(8);
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writeInt(1);
                outputStream.writeInt(0);
                outputStream.writePad(16);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        private void presentPixmap(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            Object obj;
            Pixmap pixmap;
            Window window;
            int windowId = inputStream.readInt();
            int pixmapId = inputStream.readInt();
            int serial = inputStream.readInt();
            inputStream.skip(8);
            short xOff = inputStream.readShort();
            short yOff = inputStream.readShort();
            inputStream.skip(8);
            int idleFence = inputStream.readInt();
            inputStream.skip(client.getRemainingRequestLength());
            Window window2 = client.xServer.windowManager.getWindow(windowId);
            if (window2 == null) {
                throw new BadWindow(windowId);
            }
            Pixmap pixmap2 = client.xServer.pixmapManager.getPixmap(pixmapId);
            Drawable content = window2.getContent();
            if (pixmap2 != null && content.visual.depth != pixmap2.drawable.visual.depth) {
                throw new BadMatch();
            }
            Object obj2 = content.renderLock;
            synchronized (obj2) {
                try {
                    if (pixmap2 != null) {
                        try {
                            Drawable drawable = pixmap2.drawable;
                            obj = obj2;
                            window = window2;
                            try {
                                content.copyArea((short) 0, (short) 0, xOff, yOff, drawable.width, drawable.height, drawable);
                                pixmap = pixmap2;
                                try {
                                    sendIdleNotify(window, pixmap, serial, idleFence);
                                } catch (Throwable th) {
                                    th = th;
                                    throw th;
                                }
                            } catch (Throwable th2) {
                                th = th2;
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            obj = obj2;
                        }
                    } else {
                        obj = obj2;
                        pixmap = pixmap2;
                        window = window2;
                        try {
                            content.forceUpdate();
                        } catch (Throwable th4) {
                            th = th4;
                            throw th;
                        }
                    }
                    sendCompleteNotify(window, serial, Kind.PIXMAP, Mode.COPY, 0L, 0L);
                } catch (Throwable th5) {
                    th = th5;
                }
            }
        }
    
        private void selectInput(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int eventId = inputStream.readInt();
            int windowId = inputStream.readInt();
            Bitmask mask = new Bitmask(inputStream.readInt());
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            Drawable content = window.getContent();
            Texture texture = content.getTexture();
            if (GPUImage.isSupported() && !(texture instanceof GPUImage)) {
                XServerView xServerView = client.xServer.getRenderer().xServerView;
                Objects.requireNonNull(texture);
                xServerView.queueEvent(new VortekRendererComponent$$ExternalSyntheticLambda0(texture));
                content.setTexture(new GPUImage(content.width, content.height));
            }
            if (eventId > 0) {
                synchronized (this.events) {
                    Event event = this.events.get(eventId);
                    if (event != null) {
                        if (event.window != window || event.client != client) {
                            throw new BadMatch();
                        }
                        if (!mask.isEmpty()) {
                            event.mask = mask;
                        } else {
                            this.events.remove(eventId);
                        }
                    } else {
                        Event event2 = new Event();
                        event2.id = eventId;
                        event2.window = window;
                        event2.client = client;
                        event2.mask = mask;
                        this.events.put(eventId, event2);
                    }
                }
            }
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public void handleRequest(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            XLock lock;
            int opcode = client.getRequestData();
            if (this.syncExtension == null) {
                this.syncExtension = (SyncExtension) client.xServer.getExtension(-104);
            }
            switch (opcode) {
                case 0:
                    queryVersion(client, inputStream, outputStream);
                    return;
                case 1:
                    lock = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER, XServer.Lockable.PIXMAP_MANAGER);
                    try {
                        presentPixmap(client, inputStream, outputStream);
                        if (lock != null) {
                            lock.close();
                            return;
                        }
                        return;
                    } finally {
                    }
                case 2:
                default:
                    throw new BadImplementation();
                case 3:
                    lock = client.xServer.lock(XServer.Lockable.WINDOW_MANAGER);
                    try {
                        selectInput(client, inputStream, outputStream);
                        if (lock != null) {
                            lock.close();
                            return;
                        }
                        return;
                    } finally {
                    }
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/extensions/SyncExtension.java
    package com.winlator.xserver.extensions;
    
    import android.util.SparseBooleanArray;
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.errors.BadFence;
    import com.winlator.xserver.errors.BadIdChoice;
    import com.winlator.xserver.errors.BadImplementation;
    import com.winlator.xserver.errors.BadMatch;
    import com.winlator.xserver.errors.XRequestError;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public class SyncExtension implements Extension {
        private final SparseBooleanArray fences = new SparseBooleanArray();
    
        @Override // com.winlator.xserver.extensions.Extension
        public String getName() {
            return "SYNC";
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getMajorOpcode() {
            return (byte) -104;
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getFirstErrorId() {
            return Byte.MIN_VALUE;
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public byte getFirstEventId() {
            return (byte) 0;
        }
    
        public void setTriggered(int id) {
            synchronized (this.fences) {
                if (this.fences.indexOfKey(id) >= 0) {
                    this.fences.put(id, true);
                }
            }
        }
    
        private void createFence(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            synchronized (this.fences) {
                inputStream.skip(4);
                int id = inputStream.readInt();
                if (this.fences.indexOfKey(id) >= 0) {
                    throw new BadIdChoice(id);
                }
                boolean z = true;
                if (inputStream.readByte() != 1) {
                    z = false;
                }
                boolean initiallyTriggered = z;
                inputStream.skip(3);
                this.fences.put(id, initiallyTriggered);
            }
        }
    
        private void triggerFence(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            synchronized (this.fences) {
                int id = inputStream.readInt();
                if (this.fences.indexOfKey(id) < 0) {
                    throw new BadFence(id);
                }
                this.fences.put(id, true);
            }
        }
    
        private void resetFence(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            synchronized (this.fences) {
                int id = inputStream.readInt();
                if (this.fences.indexOfKey(id) < 0) {
                    throw new BadFence(id);
                }
                boolean triggered = this.fences.get(id);
                if (!triggered) {
                    throw new BadMatch();
                }
                this.fences.put(id, false);
            }
        }
    
        private void destroyFence(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            synchronized (this.fences) {
                int id = inputStream.readInt();
                if (this.fences.indexOfKey(id) < 0) {
                    throw new BadFence(id);
                }
                this.fences.delete(id);
            }
        }
    
        private void awaitFence(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            synchronized (this.fences) {
                int length = client.getRemainingRequestLength();
                int[] ids = new int[length / 4];
                int i = 0;
                while (length != 0) {
                    ids[i] = inputStream.readInt();
                    length -= 4;
                    i++;
                }
                boolean anyTriggered = false;
                do {
                    for (int id : ids) {
                        if (this.fences.indexOfKey(id) < 0) {
                            throw new BadFence(id);
                        }
                        anyTriggered = this.fences.get(id);
                        if (anyTriggered) {
                            break;
                        }
                    }
                } while (!anyTriggered);
            }
        }
    
        @Override // com.winlator.xserver.extensions.Extension
        public void handleRequest(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int opcode = client.getRequestData();
            switch (opcode) {
                case 14:
                    createFence(client, inputStream, outputStream);
                    return;
                case 15:
                    triggerFence(client, inputStream, outputStream);
                    return;
                case 16:
                    resetFence(client, inputStream, outputStream);
                    return;
                case 17:
                    destroyFence(client, inputStream, outputStream);
                    return;
                case 18:
                default:
                    throw new BadImplementation();
                case 19:
                    awaitFence(client, inputStream, outputStream);
                    return;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/requests/AtomRequests.java
    package com.winlator.xserver.requests;
    
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Atom;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.errors.BadAtom;
    import com.winlator.xserver.errors.XRequestError;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public abstract class AtomRequests {
        public static void internAtom(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            boolean onlyIfExists = client.getRequestData() == 1;
            short length = inputStream.readShort();
            inputStream.skip(2);
            String name = inputStream.readString8(length);
            int id = onlyIfExists ? Atom.getId(name) : Atom.internAtom(name);
            if (id < 0) {
                throw new BadAtom(id);
            }
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writeInt(id);
                outputStream.writePad(20);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/requests/CursorRequests.java
    package com.winlator.xserver.requests;
    
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.errors.XRequestError;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public abstract class CursorRequests {
        /* JADX WARN: Code restructure failed: missing block: B:12:0x003d, code lost:
    
            if (r1.height == r3.height) goto L17;
         */
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct add '--show-bad-code' argument
        */
        public static void createCursor(com.winlator.xserver.XClient r24, com.winlator.xconnector.XInputStream r25, com.winlator.xconnector.XOutputStream r26) throws com.winlator.xserver.errors.XRequestError {
            /*
                r0 = r24
                int r7 = r25.readInt()
                int r8 = r25.readInt()
                int r9 = r25.readInt()
                boolean r1 = r0.isValidResourceId(r7)
                if (r1 == 0) goto La8
                com.winlator.xserver.XServer r1 = r0.xServer
                com.winlator.xserver.PixmapManager r1 = r1.pixmapManager
                com.winlator.xserver.Pixmap r10 = r1.getPixmap(r8)
                if (r10 == 0) goto La2
                com.winlator.xserver.XServer r1 = r0.xServer
                com.winlator.xserver.PixmapManager r1 = r1.pixmapManager
                com.winlator.xserver.Pixmap r11 = r1.getPixmap(r9)
                if (r11 == 0) goto L46
                com.winlator.xserver.Drawable r1 = r11.drawable
                com.winlator.xserver.Visual r2 = r1.visual
                byte r2 = r2.depth
                r3 = 1
                if (r2 != r3) goto L40
                short r2 = r1.width
                com.winlator.xserver.Drawable r3 = r10.drawable
                short r4 = r3.width
                if (r2 != r4) goto L40
                short r1 = r1.height
                short r2 = r3.height
                if (r1 != r2) goto L40
                goto L46
            L40:
                com.winlator.xserver.errors.BadMatch r1 = new com.winlator.xserver.errors.BadMatch
                r1.<init>()
                throw r1
            L46:
                short r1 = r25.readShort()
                byte r15 = (byte) r1
                short r1 = r25.readShort()
                byte r14 = (byte) r1
                short r1 = r25.readShort()
                byte r13 = (byte) r1
                short r1 = r25.readShort()
                byte r12 = (byte) r1
                short r1 = r25.readShort()
                byte r6 = (byte) r1
                short r1 = r25.readShort()
                byte r5 = (byte) r1
                short r20 = r25.readShort()
                short r21 = r25.readShort()
                com.winlator.xserver.XServer r1 = r0.xServer
                com.winlator.xserver.CursorManager r1 = r1.cursorManager
                r2 = r7
                r3 = r20
                r4 = r21
                r22 = r5
                r5 = r10
                r23 = r6
                r6 = r11
                com.winlator.xserver.Cursor r1 = r1.createCursor(r2, r3, r4, r5, r6)
                if (r1 == 0) goto L9c
                com.winlator.xserver.XServer r2 = r0.xServer
                com.winlator.xserver.CursorManager r2 = r2.cursorManager
                r3 = r12
                r12 = r2
                r2 = r13
                r13 = r1
                r4 = r14
                r14 = r15
                r5 = r15
                r15 = r4
                r16 = r2
                r17 = r3
                r18 = r23
                r19 = r22
                r12.recolorCursor(r13, r14, r15, r16, r17, r18, r19)
                r0.registerAsOwnerOfResource(r1)
                return
            L9c:
                com.winlator.xserver.errors.BadIdChoice r6 = new com.winlator.xserver.errors.BadIdChoice
                r6.<init>(r7)
                throw r6
            La2:
                com.winlator.xserver.errors.BadPixmap r1 = new com.winlator.xserver.errors.BadPixmap
                r1.<init>(r8)
                throw r1
            La8:
                com.winlator.xserver.errors.BadIdChoice r1 = new com.winlator.xserver.errors.BadIdChoice
                r1.<init>(r7)
                throw r1
            */
            throw new UnsupportedOperationException("Method not decompiled: com.winlator.xserver.requests.CursorRequests.createCursor(com.winlator.xserver.XClient, com.winlator.xconnector.XInputStream, com.winlator.xconnector.XOutputStream):void");
        }
    
        public static void freeCursor(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            client.xServer.cursorManager.freeCursor(inputStream.readInt());
        }
    
        public static void getPointerMapping(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            XStreamLock lock = outputStream.lock();
            try {
                byte[] buttonsMap = {1, 2, 3};
                byte length = (byte) buttonsMap.length;
                outputStream.writeByte((byte) 1);
                outputStream.writeByte(length);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt((length + 3) / 4);
                outputStream.writePad(24);
                outputStream.write(buttonsMap);
                outputStream.writePad(3 & (-length));
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/requests/DrawRequests.java
    package com.winlator.xserver.requests;
    
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Drawable;
    import com.winlator.xserver.GraphicsContext;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.errors.BadDrawable;
    import com.winlator.xserver.errors.BadGraphicsContext;
    import com.winlator.xserver.errors.BadMatch;
    import com.winlator.xserver.errors.XRequestError;
    import java.io.IOException;
    import java.nio.ByteBuffer;
    
    /* loaded from: classes.dex */
    public abstract class DrawRequests {
    
        private enum CoordinateMode {
            ORIGIN,
            PREVIOUS
        }
    
        public enum Format {
            BITMAP,
            XY_PIXMAP,
            Z_PIXMAP
        }
    
        public static void putImage(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            Format format = Format.values()[client.getRequestData()];
            int drawableId = inputStream.readInt();
            int gcId = inputStream.readInt();
            short width = inputStream.readShort();
            short height = inputStream.readShort();
            short dstX = inputStream.readShort();
            short dstY = inputStream.readShort();
            byte leftPad = inputStream.readByte();
            byte depth = inputStream.readByte();
            inputStream.skip(2);
            int length = client.getRemainingRequestLength();
            ByteBuffer data = inputStream.readByteBuffer(length);
            Drawable drawable = client.xServer.drawableManager.getDrawable(drawableId);
            if (drawable == null) {
                throw new BadDrawable(drawableId);
            }
            GraphicsContext graphicsContext = client.xServer.graphicsContextManager.getGraphicsContext(gcId);
            if (graphicsContext == null) {
                throw new BadGraphicsContext(gcId);
            }
            if (graphicsContext.getFunction() != GraphicsContext.Function.COPY && format != Format.Z_PIXMAP) {
                throw new UnsupportedOperationException("GC Function other than COPY is not supported.");
            }
            switch (AnonymousClass1.$SwitchMap$com$winlator$xserver$requests$DrawRequests$Format[format.ordinal()]) {
                case 1:
                    if (leftPad != 0) {
                        throw new UnsupportedOperationException("PutImage.leftPad cannot be != 0.");
                    }
                    if (depth == 1) {
                        drawable.drawImage((short) 0, (short) 0, dstX, dstY, width, height, (byte) 1, data, width, height);
                        return;
                    }
                    throw new BadMatch();
                case 2:
                    if (drawable.visual.depth != depth) {
                        throw new BadMatch();
                    }
                    return;
                case 3:
                    if (leftPad == 0) {
                        drawable.drawImage((short) 0, (short) 0, dstX, dstY, width, height, depth, data, width, height);
                        return;
                    }
                    throw new BadMatch();
                default:
                    return;
            }
        }
    
        /* renamed from: com.winlator.xserver.requests.DrawRequests$1, reason: invalid class name */
        static /* synthetic */ class AnonymousClass1 {
            static final /* synthetic */ int[] $SwitchMap$com$winlator$xserver$requests$DrawRequests$Format;
    
            static {
                int[] iArr = new int[Format.values().length];
                $SwitchMap$com$winlator$xserver$requests$DrawRequests$Format = iArr;
                try {
                    iArr[Format.BITMAP.ordinal()] = 1;
                } catch (NoSuchFieldError e) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$requests$DrawRequests$Format[Format.XY_PIXMAP.ordinal()] = 2;
                } catch (NoSuchFieldError e2) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$requests$DrawRequests$Format[Format.Z_PIXMAP.ordinal()] = 3;
                } catch (NoSuchFieldError e3) {
                }
            }
        }
    
        public static void getImage(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            Format format = Format.values()[client.getRequestData()];
            int drawableId = inputStream.readInt();
            short x = inputStream.readShort();
            short y = inputStream.readShort();
            short width = inputStream.readShort();
            short height = inputStream.readShort();
            inputStream.skip(4);
            if (format != Format.Z_PIXMAP) {
                throw new UnsupportedOperationException("Only Z_PIXMAP is supported.");
            }
            Drawable drawable = client.xServer.drawableManager.getDrawable(drawableId);
            if (drawable == null) {
                throw new BadDrawable(drawableId);
            }
            int visualId = client.xServer.pixmapManager.getPixmap(drawableId) == null ? drawable.visual.id : 0;
            ByteBuffer data = drawable.getImage(x, y, width, height);
            int length = data.limit();
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte(drawable.visual.depth);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt((length + 3) / 4);
                outputStream.writeInt(visualId);
                outputStream.writePad(20);
                outputStream.write(data);
                if (((-length) & 3) > 0) {
                    outputStream.writePad((-length) & 3);
                }
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public static void copyArea(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            int srcDrawableId = inputStream.readInt();
            int dstDrawableId = inputStream.readInt();
            int gcId = inputStream.readInt();
            short srcX = inputStream.readShort();
            short srcY = inputStream.readShort();
            short dstX = inputStream.readShort();
            short dstY = inputStream.readShort();
            short width = inputStream.readShort();
            short height = inputStream.readShort();
            Drawable srcDrawable = client.xServer.drawableManager.getDrawable(srcDrawableId);
            if (srcDrawable == null) {
                throw new BadDrawable(srcDrawableId);
            }
            Drawable dstDrawable = client.xServer.drawableManager.getDrawable(dstDrawableId);
            if (dstDrawable == null) {
                throw new BadDrawable(dstDrawableId);
            }
            GraphicsContext graphicsContext = client.xServer.graphicsContextManager.getGraphicsContext(gcId);
            if (graphicsContext == null) {
                throw new BadGraphicsContext(gcId);
            }
            if (srcDrawable.visual.depth != dstDrawable.visual.depth) {
                throw new BadMatch();
            }
            dstDrawable.copyArea(srcX, srcY, dstX, dstY, width, height, srcDrawable, graphicsContext.getFunction());
        }
    
        public static void polyLine(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            CoordinateMode coordinateMode = CoordinateMode.values()[client.getRequestData()];
            int drawableId = inputStream.readInt();
            int gcId = inputStream.readInt();
            Drawable drawable = client.xServer.drawableManager.getDrawable(drawableId);
            if (drawable == null) {
                throw new BadDrawable(drawableId);
            }
            GraphicsContext graphicsContext = client.xServer.graphicsContextManager.getGraphicsContext(gcId);
            if (graphicsContext == null) {
                throw new BadGraphicsContext(gcId);
            }
            int length = client.getRemainingRequestLength();
            short[] points = new short[length / 2];
            int i = 0;
            while (length != 0) {
                int i2 = i + 1;
                points[i] = inputStream.readShort();
                i = i2 + 1;
                points[i2] = inputStream.readShort();
                length -= 4;
            }
            if (coordinateMode == CoordinateMode.ORIGIN && graphicsContext.getLineWidth() > 0) {
                drawable.drawLines(graphicsContext.getForeground(), graphicsContext.getLineWidth(), points);
            }
        }
    
        public static void polyFillRectangle(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            int drawableId = inputStream.readInt();
            int gcId = inputStream.readInt();
            Drawable drawable = client.xServer.drawableManager.getDrawable(drawableId);
            if (drawable == null) {
                throw new BadDrawable(drawableId);
            }
            GraphicsContext graphicsContext = client.xServer.graphicsContextManager.getGraphicsContext(gcId);
            if (graphicsContext == null) {
                throw new BadGraphicsContext(gcId);
            }
            for (int length = client.getRemainingRequestLength(); length != 0; length -= 8) {
                short x = inputStream.readShort();
                short y = inputStream.readShort();
                short width = inputStream.readShort();
                short height = inputStream.readShort();
                drawable.fillRect(x, y, width, height, graphicsContext.getBackground());
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/requests/ExtensionRequests.java
    package com.winlator.xserver.requests;
    
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.errors.XRequestError;
    import com.winlator.xserver.extensions.Extension;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public abstract class ExtensionRequests {
        public static void queryExtension(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            short length = inputStream.readShort();
            inputStream.skip(2);
            String name = inputStream.readString8(length);
            Extension extension = client.xServer.getExtensionByName(name);
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                if (extension != null) {
                    outputStream.writeByte((byte) 1);
                    outputStream.writeByte(extension.getMajorOpcode());
                    outputStream.writeByte(extension.getFirstEventId());
                    outputStream.writeByte(extension.getFirstErrorId());
                    outputStream.writePad(20);
                } else {
                    outputStream.writeByte((byte) 0);
                    outputStream.writePad(23);
                }
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/requests/FontRequests.java
    package com.winlator.xserver.requests;
    
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.errors.XRequestError;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public abstract class FontRequests {
        public static void openFont(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            inputStream.skip(4);
            int length = inputStream.readShort();
            inputStream.skip(2);
            String name = inputStream.readString8(length);
            if (!name.equals("cursor")) {
                throw new UnsupportedOperationException("OpenFont supports only name: cursor.");
            }
        }
    
        public static void listFonts(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            inputStream.skip(2);
            short patternLength = inputStream.readShort();
            inputStream.readString8(patternLength);
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writeShort((short) 0);
                outputStream.writePad(22);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/requests/GrabRequests.java
    package com.winlator.xserver.requests;
    
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.errors.BadWindow;
    import com.winlator.xserver.errors.XRequestError;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public abstract class GrabRequests {
    
        private enum Status {
            SUCCESS,
            ALREADY_GRABBED,
            INVALID_TIME,
            NOT_VIEWABLE,
            FROZEN
        }
    
        public static void grabPointer(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            Status status;
            XStreamLock lock;
            if (client.xServer.isRelativeMouseMovement()) {
                client.skipRequest();
                lock = outputStream.lock();
                try {
                    outputStream.writeByte((byte) 1);
                    outputStream.writeByte((byte) Status.ALREADY_GRABBED.ordinal());
                    outputStream.writeShort(client.getSequenceNumber());
                    outputStream.writeInt(0);
                    outputStream.writePad(24);
                    if (lock != null) {
                        lock.close();
                        return;
                    }
                    return;
                } finally {
                }
            }
            boolean ownerEvents = client.getRequestData() == 1;
            int windowId = inputStream.readInt();
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            Bitmask eventMask = new Bitmask(inputStream.readShort());
            inputStream.skip(14);
            if (client.xServer.grabManager.getWindow() != null && client.xServer.grabManager.getClient() != client) {
                status = Status.ALREADY_GRABBED;
            } else if (window.getMapState() != Window.MapState.VIEWABLE) {
                status = Status.NOT_VIEWABLE;
            } else {
                status = Status.SUCCESS;
                client.xServer.grabManager.activatePointerGrab(window, ownerEvents, eventMask, client);
            }
            lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) status.ordinal());
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writePad(24);
                if (lock != null) {
                    lock.close();
                }
            } finally {
            }
        }
    
        public static void ungrabPointer(XClient client, XInputStream inputStream, XOutputStream outputStream) {
            inputStream.skip(4);
            client.xServer.grabManager.deactivatePointerGrab();
        }
    }
  + app/src/main/java/com/winlator/xserver/requests/GraphicsContextRequests.java
    package com.winlator.xserver.requests;
    
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Drawable;
    import com.winlator.xserver.GraphicsContext;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.errors.BadDrawable;
    import com.winlator.xserver.errors.BadGraphicsContext;
    import com.winlator.xserver.errors.BadIdChoice;
    import com.winlator.xserver.errors.XRequestError;
    
    /* loaded from: classes.dex */
    public abstract class GraphicsContextRequests {
        public static void createGC(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            int gcId = inputStream.readInt();
            int drawableId = inputStream.readInt();
            Bitmask valueMask = new Bitmask(inputStream.readInt());
            if (!client.isValidResourceId(gcId)) {
                throw new BadIdChoice(gcId);
            }
            Drawable drawable = client.xServer.drawableManager.getDrawable(drawableId);
            if (drawable == null) {
                throw new BadDrawable(drawableId);
            }
            GraphicsContext graphicsContext = client.xServer.graphicsContextManager.createGraphicsContext(gcId, drawable);
            if (graphicsContext == null) {
                throw new BadIdChoice(gcId);
            }
            client.registerAsOwnerOfResource(graphicsContext);
            if (!valueMask.isEmpty()) {
                client.xServer.graphicsContextManager.updateGraphicsContext(graphicsContext, valueMask, inputStream);
            }
        }
    
        public static void changeGC(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            int gcId = inputStream.readInt();
            Bitmask valueMask = new Bitmask(inputStream.readInt());
            GraphicsContext graphicsContext = client.xServer.graphicsContextManager.getGraphicsContext(gcId);
            if (graphicsContext == null) {
                throw new BadGraphicsContext(gcId);
            }
            if (!valueMask.isEmpty()) {
                client.xServer.graphicsContextManager.updateGraphicsContext(graphicsContext, valueMask, inputStream);
            }
        }
    
        public static void freeGC(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            client.xServer.graphicsContextManager.freeGraphicsContext(inputStream.readInt());
        }
    }
  + app/src/main/java/com/winlator/xserver/requests/KeyboardRequests.java
    package com.winlator.xserver.requests;
    
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.errors.XRequestError;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public abstract class KeyboardRequests {
        public static void getKeyboardMapping(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            byte firstKeycode = inputStream.readByte();
            int count = inputStream.readUnsignedByte();
            inputStream.skip(2);
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 2);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(count);
                outputStream.writePad(24);
                int i = firstKeycode - 8;
                while (count != 0) {
                    outputStream.writeInt(client.xServer.keyboard.keysyms[i]);
                    count--;
                    i++;
                }
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public static void getModifierMapping(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 1);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(2);
                outputStream.writePad(24);
                outputStream.writePad(8);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/requests/PixmapRequests.java
    package com.winlator.xserver.requests;
    
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xserver.Drawable;
    import com.winlator.xserver.Pixmap;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.errors.BadDrawable;
    import com.winlator.xserver.errors.BadIdChoice;
    import com.winlator.xserver.errors.XRequestError;
    
    /* loaded from: classes.dex */
    public abstract class PixmapRequests {
        public static void createPixmap(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            byte depth = client.getRequestData();
            int pixmapId = inputStream.readInt();
            int drawableId = inputStream.readInt();
            short width = inputStream.readShort();
            short height = inputStream.readShort();
            if (!client.isValidResourceId(pixmapId)) {
                throw new BadIdChoice(pixmapId);
            }
            Drawable drawable = client.xServer.drawableManager.getDrawable(drawableId);
            if (drawable == null) {
                throw new BadDrawable(drawableId);
            }
            Drawable backingStore = client.xServer.drawableManager.createDrawable(pixmapId, width, height, depth);
            if (backingStore == null) {
                throw new BadIdChoice(pixmapId);
            }
            Pixmap pixmap = client.xServer.pixmapManager.createPixmap(backingStore);
            if (pixmap == null) {
                throw new BadIdChoice(pixmapId);
            }
            client.registerAsOwnerOfResource(pixmap);
        }
    
        public static void freePixmap(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            client.xServer.pixmapManager.freePixmap(inputStream.readInt());
        }
    }
  + app/src/main/java/com/winlator/xserver/requests/SelectionRequests.java
    package com.winlator.xserver.requests;
    
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Atom;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.errors.BadAtom;
    import com.winlator.xserver.errors.BadWindow;
    import com.winlator.xserver.errors.XRequestError;
    import java.io.IOException;
    
    /* loaded from: classes.dex */
    public abstract class SelectionRequests {
        public static void setSelectionOwner(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int windowId = inputStream.readInt();
            int atom = inputStream.readInt();
            int timestamp = inputStream.readInt();
            Window owner = client.xServer.windowManager.getWindow(windowId);
            if (owner == null) {
                throw new BadWindow(windowId);
            }
            if (!Atom.isValid(atom)) {
                throw new BadAtom(atom);
            }
            client.xServer.selectionManager.setSelection(atom, owner, client, timestamp);
        }
    
        public static void getSelectionOwner(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int atom = inputStream.readInt();
            if (!Atom.isValid(atom)) {
                throw new BadAtom(atom);
            }
            Window owner = client.xServer.selectionManager.getSelection(atom).owner;
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writeInt(owner != null ? owner.id : 0);
                outputStream.writePad(20);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/com/winlator/xserver/requests/WindowRequests.java
    package com.winlator.xserver.requests;
    
    import com.winlator.renderer.FullscreenTransformation;
    import com.winlator.xconnector.XInputStream;
    import com.winlator.xconnector.XOutputStream;
    import com.winlator.xconnector.XStreamLock;
    import com.winlator.xserver.Bitmask;
    import com.winlator.xserver.Drawable;
    import com.winlator.xserver.Pointer;
    import com.winlator.xserver.Property;
    import com.winlator.xserver.Visual;
    import com.winlator.xserver.Window;
    import com.winlator.xserver.WindowAttributes;
    import com.winlator.xserver.WindowManager;
    import com.winlator.xserver.XClient;
    import com.winlator.xserver.errors.BadAccess;
    import com.winlator.xserver.errors.BadDrawable;
    import com.winlator.xserver.errors.BadIdChoice;
    import com.winlator.xserver.errors.BadMatch;
    import com.winlator.xserver.errors.BadValue;
    import com.winlator.xserver.errors.BadWindow;
    import com.winlator.xserver.errors.XRequestError;
    import com.winlator.xserver.events.CreateNotify;
    import com.winlator.xserver.events.Event;
    import com.winlator.xserver.events.RawEvent;
    import java.io.IOException;
    import java.util.List;
    
    /* loaded from: classes.dex */
    public abstract class WindowRequests {
        public static void createWindow(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            byte depth = client.getRequestData();
            int windowId = inputStream.readInt();
            int parentId = inputStream.readInt();
            if (!client.isValidResourceId(windowId)) {
                throw new BadIdChoice(windowId);
            }
            Window parent = client.xServer.windowManager.getWindow(parentId);
            if (parent == null) {
                throw new BadWindow(parentId);
            }
            short x = inputStream.readShort();
            short y = inputStream.readShort();
            short width = inputStream.readShort();
            short height = inputStream.readShort();
            short borderWidth = inputStream.readShort();
            WindowAttributes.WindowClass windowClass = WindowAttributes.WindowClass.values()[(byte) inputStream.readShort()];
            Visual visual = client.xServer.pixmapManager.getVisual(inputStream.readInt());
            Bitmask valueMask = new Bitmask(inputStream.readInt());
            Window window = client.xServer.windowManager.createWindow(windowId, parent, x, y, width, height, windowClass, visual, depth, client);
            window.setBorderWidth(borderWidth);
            if (!valueMask.isEmpty()) {
                window.attributes.update(valueMask, inputStream, client);
            }
            client.setEventListenerForWindow(window, window.attributes.getEventMask());
            client.registerAsOwnerOfResource(window);
            parent.sendEvent(524288, new CreateNotify(parent, window));
        }
    
        public static void getWindowAttributes(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int windowId = inputStream.readInt();
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            XStreamLock lock = outputStream.lock();
            int i = 1;
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) window.attributes.getBackingStore().ordinal());
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(3);
                outputStream.writeInt(window.isInputOutput() ? window.getContent().visual.id : 0);
                outputStream.writeShort((short) window.attributes.getWindowClass().ordinal());
                outputStream.writeByte((byte) window.attributes.getBitGravity().ordinal());
                outputStream.writeByte((byte) window.attributes.getWinGravity().ordinal());
                outputStream.writeInt(window.attributes.getBackingPlanes());
                outputStream.writeInt(window.attributes.getBackingPixel());
                outputStream.writeByte((byte) (window.attributes.isSaveUnder() ? 1 : 0));
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) window.getMapState().ordinal());
                if (!window.attributes.isOverrideRedirect()) {
                    i = 0;
                }
                outputStream.writeByte((byte) i);
                outputStream.writeInt(0);
                outputStream.writeInt(window.getAllEventMasks().getBits());
                outputStream.writeInt(client.getEventMaskForWindow(window).getBits());
                outputStream.writeShort((short) window.attributes.getDoNotPropagateMask().getBits());
                outputStream.writeShort((short) 0);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public static void changeWindowAttributes(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            int windowId = inputStream.readInt();
            Bitmask valueMask = new Bitmask(inputStream.readInt());
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            if (!valueMask.isEmpty()) {
                window.attributes.update(valueMask, inputStream, client);
                if (valueMask.isSet(2048)) {
                    if (isClientCanSelectFor(1048576, window, client) && isClientCanSelectFor(262144, window, client) && isClientCanSelectFor(4, window, client)) {
                        client.setEventListenerForWindow(window, window.attributes.getEventMask());
                        return;
                    }
                    throw new BadAccess();
                }
            }
        }
    
        private static boolean isClientCanSelectFor(int eventId, Window window, XClient client) {
            return (window.attributes.getEventMask().isSet(eventId) && window.hasEventListenerFor(eventId) && !client.isInterestedIn(eventId, window)) ? false : true;
        }
    
        public static void destroyWindow(XClient client, XInputStream inputStream, XOutputStream outputStream) {
            client.xServer.windowManager.destroyWindow(inputStream.readInt());
        }
    
        public static void destroySubWindows(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            int windowId = inputStream.readInt();
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            for (Window child : window.getChildren()) {
                client.xServer.windowManager.destroyWindow(child.id);
            }
        }
    
        public static void reparentWindow(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            int windowId = inputStream.readInt();
            int parentId = inputStream.readInt();
            inputStream.skip(4);
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            Window parent = client.xServer.windowManager.getWindow(parentId);
            if (parent == null) {
                throw new BadWindow(parentId);
            }
            client.xServer.windowManager.reparentWindow(window, parent);
        }
    
        public static void mapWindow(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            int windowId = inputStream.readInt();
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            client.xServer.windowManager.mapWindow(window);
        }
    
        public static void mapSubWindows(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            int windowId = inputStream.readInt();
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            client.xServer.windowManager.mapSubWindows(window);
        }
    
        public static void unmapWindow(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            int windowId = inputStream.readInt();
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            client.xServer.windowManager.unmapWindow(window);
        }
    
        public static void changeProperty(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            byte[] data;
            Property.Mode mode = Property.Mode.values()[client.getRequestData()];
            int windowId = inputStream.readInt();
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            int atom = inputStream.readInt();
            int type = inputStream.readInt();
            byte format = inputStream.readByte();
            inputStream.skip(3);
            int length = inputStream.readInt();
            int totalSize = length * (format >> 3);
            if (totalSize <= 0) {
                data = null;
            } else {
                byte[] data2 = new byte[totalSize];
                inputStream.read(data2);
                inputStream.skip(3 & (-totalSize));
                data = data2;
            }
            Property property = window.modifyProperty(atom, type, Property.Format.valueOf(format), mode, data);
            if (property == null) {
                throw new BadMatch();
            }
            client.xServer.windowManager.triggerOnModifyWindowProperty(window, property);
        }
    
        public static void deleteProperty(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            int windowId = inputStream.readInt();
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            window.removeProperty(inputStream.readInt());
        }
    
        public static void getProperty(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            boolean delete = client.getRequestData() == 1;
            short sequenceNumber = client.getSequenceNumber();
            int windowId = inputStream.readInt();
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            int atom = inputStream.readInt();
            int type = inputStream.readInt();
            int longOffset = inputStream.readInt();
            int longLength = inputStream.readInt();
            Property property = window.getProperty(atom);
            int bytesAfter = 0;
            XStreamLock lock = outputStream.lock();
            try {
                if (property == null) {
                    outputStream.writeByte((byte) 1);
                    outputStream.writeByte((byte) 0);
                    outputStream.writeShort(sequenceNumber);
                    outputStream.writeInt(0);
                    outputStream.writeInt(0);
                    outputStream.writeInt(0);
                    outputStream.writeInt(0);
                    outputStream.writePad(12);
                } else if (property.type != type && type != 0) {
                    outputStream.writeByte((byte) 1);
                    outputStream.writeByte(property.format.value);
                    outputStream.writeShort(sequenceNumber);
                    outputStream.writeInt(0);
                    outputStream.writeInt(property.type);
                    outputStream.writeInt(0);
                    outputStream.writeInt(0);
                    outputStream.writePad(12);
                } else {
                    byte[] data = property.data.array();
                    int offset = longOffset * 4;
                    int length = Math.min(data.length - offset, longLength * 4);
                    if (length < 0) {
                        throw new BadValue(longOffset);
                    }
                    bytesAfter = data.length - (offset + length);
                    outputStream.writeByte((byte) 1);
                    outputStream.writeByte(property.format.value);
                    outputStream.writeShort(sequenceNumber);
                    outputStream.writeInt((length + 3) / 4);
                    outputStream.writeInt(property.type);
                    outputStream.writeInt(bytesAfter);
                    outputStream.writeInt(length / (property.format.value / 8));
                    outputStream.writePad(12);
                    outputStream.write(data, offset, length);
                    if (((-length) & 3) > 0) {
                        outputStream.writePad((-length) & 3);
                    }
                }
                if (lock != null) {
                    lock.close();
                }
                if (delete && property != null && bytesAfter == 0) {
                    window.removeProperty(atom);
                }
            } finally {
            }
        }
    
        public static void queryPointer(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int i;
            FullscreenTransformation fullscreenTransformation;
            int windowId = inputStream.readInt();
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            short rootX = client.xServer.pointer.getClampedX();
            short rootY = client.xServer.pointer.getClampedY();
            Window child = window.getChildByCoords(rootX, rootY, true);
            short[] localPoint = window.rootPointToLocal(rootX, rootY);
            if (child != null && (fullscreenTransformation = child.getFullscreenTransformation()) != null) {
                short[] transformedPoint = fullscreenTransformation.transformPointerCoords(rootX, rootY);
                rootX = transformedPoint[0];
                rootY = transformedPoint[1];
                localPoint = child.rootPointToLocal(rootX, rootY);
            }
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                if (!client.xServer.isRelativeMouseMovement()) {
                    i = 1;
                } else {
                    i = 0;
                }
                outputStream.writeByte((byte) i);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writeInt(client.xServer.windowManager.rootWindow.id);
                outputStream.writeInt(child != null ? child.id : 0);
                outputStream.writeShort(rootX);
                outputStream.writeShort(rootY);
                outputStream.writeShort(localPoint[0]);
                outputStream.writeShort(localPoint[1]);
                outputStream.writeShort((short) client.xServer.inputDeviceManager.getKeyButMask().getBits());
                outputStream.writePad(6);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public static void translateCoordinates(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int srcWindowId = inputStream.readInt();
            int dstWindowId = inputStream.readInt();
            short srcX = inputStream.readShort();
            short srcY = inputStream.readShort();
            Window srcWindow = client.xServer.windowManager.getWindow(srcWindowId);
            Window dstWindow = client.xServer.windowManager.getWindow(dstWindowId);
            if (srcWindow == null) {
                throw new BadWindow(srcWindowId);
            }
            if (dstWindow == null) {
                throw new BadWindow(dstWindowId);
            }
            short[] rootPoint = srcWindow.localPointToRoot(srcX, srcY);
            short[] localPoint = dstWindow.rootPointToLocal(rootPoint[0], rootPoint[1]);
            Window child = dstWindow.getChildByCoords(rootPoint[0], rootPoint[1]);
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 1);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writeInt(child != null ? child.id : 0);
                outputStream.writeShort(localPoint[0]);
                outputStream.writeShort(localPoint[1]);
                outputStream.writePad(16);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public static void warpPointer(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            if (client.xServer.isRelativeMouseMovement()) {
                client.skipRequest();
                return;
            }
            Window srcWindow = client.xServer.windowManager.getWindow(inputStream.readInt());
            Window dstWindow = client.xServer.windowManager.getWindow(inputStream.readInt());
            short srcX = inputStream.readShort();
            short srcY = inputStream.readShort();
            short srcWidth = inputStream.readShort();
            short srcHeight = inputStream.readShort();
            short dstX = inputStream.readShort();
            short dstY = inputStream.readShort();
            if (srcWindow != null) {
                if (srcWidth == 0) {
                    srcWidth = (short) (srcWindow.getWidth() - srcX);
                }
                if (srcHeight == 0) {
                    srcHeight = (short) (srcWindow.getHeight() - srcY);
                }
                short[] localPoint = srcWindow.rootPointToLocal(client.xServer.pointer.getX(), client.xServer.pointer.getY());
                boolean isContained = localPoint[0] >= srcX && localPoint[1] >= srcY && localPoint[0] < srcX + srcWidth && localPoint[1] < srcY + srcHeight;
                if (!isContained) {
                    return;
                }
            }
            if (dstWindow == null) {
                Pointer pointer = client.xServer.pointer;
                pointer.setX(pointer.getX() + dstX);
                Pointer pointer2 = client.xServer.pointer;
                pointer2.setY(pointer2.getY() + dstY);
                return;
            }
            short[] localPoint2 = dstWindow.localPointToRoot(dstX, dstY);
            client.xServer.pointer.setX(localPoint2[0]);
            client.xServer.pointer.setY(localPoint2[1]);
        }
    
        public static void setInputFocus(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            WindowManager.FocusRevertTo focusRevertTo = WindowManager.FocusRevertTo.values()[client.getRequestData()];
            int windowId = inputStream.readInt();
            inputStream.skip(4);
            switch (AnonymousClass1.$SwitchMap$com$winlator$xserver$WindowManager$FocusRevertTo[focusRevertTo.ordinal()]) {
                case 1:
                    client.xServer.windowManager.setFocus(null, focusRevertTo);
                    return;
                case 2:
                    WindowManager windowManager = client.xServer.windowManager;
                    windowManager.setFocus(windowManager.rootWindow, focusRevertTo);
                    return;
                case 3:
                    Window window = client.xServer.windowManager.getWindow(windowId);
                    if (window == null) {
                        throw new BadWindow(windowId);
                    }
                    client.xServer.windowManager.setFocus(window, focusRevertTo);
                    return;
                default:
                    return;
            }
        }
    
        /* renamed from: com.winlator.xserver.requests.WindowRequests$1, reason: invalid class name */
        static /* synthetic */ class AnonymousClass1 {
            static final /* synthetic */ int[] $SwitchMap$com$winlator$xserver$WindowManager$FocusRevertTo;
    
            static {
                int[] iArr = new int[WindowManager.FocusRevertTo.values().length];
                $SwitchMap$com$winlator$xserver$WindowManager$FocusRevertTo = iArr;
                try {
                    iArr[WindowManager.FocusRevertTo.NONE.ordinal()] = 1;
                } catch (NoSuchFieldError e) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$WindowManager$FocusRevertTo[WindowManager.FocusRevertTo.POINTER_ROOT.ordinal()] = 2;
                } catch (NoSuchFieldError e2) {
                }
                try {
                    $SwitchMap$com$winlator$xserver$WindowManager$FocusRevertTo[WindowManager.FocusRevertTo.PARENT.ordinal()] = 3;
                } catch (NoSuchFieldError e3) {
                }
            }
        }
    
        public static void getInputFocus(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            Window focusedWindow = client.xServer.windowManager.getFocusedWindow();
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) client.xServer.windowManager.getFocusRevertTo().ordinal());
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writeInt(focusedWindow != null ? focusedWindow.id : 0);
                outputStream.writePad(20);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public static void configureWindow(XClient client, XInputStream inputStream, XOutputStream outputStream) throws XRequestError {
            int windowId = inputStream.readInt();
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            Bitmask valueMask = new Bitmask(inputStream.readShort());
            inputStream.skip(2);
            if (!valueMask.isEmpty()) {
                client.xServer.windowManager.configureWindow(window, valueMask, inputStream);
            }
        }
    
        public static void getGeometry(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int drawableId = inputStream.readInt();
            Drawable drawable = client.xServer.drawableManager.getDrawable(drawableId);
            if (drawable == null) {
                throw new BadDrawable(drawableId);
            }
            Window window = client.xServer.windowManager.getWindow(drawableId);
            short x = window != null ? window.getX() : (short) 0;
            short y = window != null ? window.getY() : (short) 0;
            short borderWidth = window != null ? window.getBorderWidth() : (short) 0;
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte(drawable.visual.depth);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writeInt(client.xServer.windowManager.rootWindow.id);
                outputStream.writeShort(x);
                outputStream.writeShort(y);
                outputStream.writeShort(drawable.width);
                outputStream.writeShort(drawable.height);
                outputStream.writeShort(borderWidth);
                outputStream.writePad(10);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public static void queryTree(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int windowId = inputStream.readInt();
            Window window = client.xServer.windowManager.getWindow(windowId);
            if (window == null) {
                throw new BadWindow(windowId);
            }
            Window parent = window.getParent();
            List<Window> children = window.getChildren();
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(children.size());
                outputStream.writeInt(client.xServer.windowManager.rootWindow.id);
                outputStream.writeInt(parent != null ? parent.id : 0);
                outputStream.writeShort((short) children.size());
                outputStream.writePad(14);
                for (int i = children.size() - 1; i >= 0; i--) {
                    outputStream.writeInt(children.get(i).id);
                }
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    
        public static void sendEvent(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            int windowId = inputStream.readInt();
            if (windowId == 0 || windowId == 1) {
                client.skipRequest();
                return;
            }
            Window destination = client.xServer.windowManager.getWindow(windowId);
            if (destination == null) {
                throw new BadWindow(windowId);
            }
            Bitmask eventMask = new Bitmask(inputStream.readInt());
            byte[] data = new byte[32];
            inputStream.read(data);
            Event event = new RawEvent(data);
            if (eventMask.isEmpty()) {
                destination.originClient.sendEvent(event);
            } else {
                destination.sendEvent(eventMask, event);
            }
        }
    
        public static void getScreenSaver(XClient client, XInputStream inputStream, XOutputStream outputStream) throws IOException, XRequestError {
            XStreamLock lock = outputStream.lock();
            try {
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 0);
                outputStream.writeShort(client.getSequenceNumber());
                outputStream.writeInt(0);
                outputStream.writeShort((short) 600);
                outputStream.writeShort((short) 600);
                outputStream.writeByte((byte) 1);
                outputStream.writeByte((byte) 1);
                outputStream.writePad(18);
                if (lock != null) {
                    lock.close();
                }
            } catch (Throwable th) {
                if (lock != null) {
                    try {
                        lock.close();
                    } catch (Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
    }
  + app/src/main/java/org/apache/commons/compress/MemoryLimitException.java
  + app/src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java
  + app/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java
  + app/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java
  + app/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java
  + app/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
  + app/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
  + app/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java
  + app/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.java
  + app/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
  + app/src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java
  + app/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncoding.java
  + app/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java
  + app/src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java
  + app/src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java
  + app/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java
  + app/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java
  + app/src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream.java
  + app/src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream.java
  + app/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
  + app/src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java
  + app/src/main/java/org/apache/commons/compress/utils/CountingInputStream.java
  + app/src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java
  + app/src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java
  + app/src/main/java/org/apache/commons/compress/utils/IOUtils.java
  + app/src/main/java/org/tukaani/xz/ArrayCache.java
  + app/src/main/java/org/tukaani/xz/BCJCoder.java
  + app/src/main/java/org/tukaani/xz/BCJDecoder.java
  + app/src/main/java/org/tukaani/xz/BlockInputStream.java
  + app/src/main/java/org/tukaani/xz/BlockOutputStream.java
  + app/src/main/java/org/tukaani/xz/CloseIgnoringInputStream.java
  + app/src/main/java/org/tukaani/xz/CorruptedInputException.java
  + app/src/main/java/org/tukaani/xz/CountingInputStream.java
  + app/src/main/java/org/tukaani/xz/CountingOutputStream.java
  + app/src/main/java/org/tukaani/xz/DeltaCoder.java
  + app/src/main/java/org/tukaani/xz/DeltaDecoder.java
  + app/src/main/java/org/tukaani/xz/DeltaInputStream.java
  + app/src/main/java/org/tukaani/xz/FilterCoder.java
  + app/src/main/java/org/tukaani/xz/FilterDecoder.java
  + app/src/main/java/org/tukaani/xz/FilterEncoder.java
  + app/src/main/java/org/tukaani/xz/FilterOptions.java
  + app/src/main/java/org/tukaani/xz/FinishableOutputStream.java
  + app/src/main/java/org/tukaani/xz/IndexIndicatorException.java
  + app/src/main/java/org/tukaani/xz/LZMA2Coder.java
  + app/src/main/java/org/tukaani/xz/LZMA2Decoder.java
  + app/src/main/java/org/tukaani/xz/LZMA2Encoder.java
  + app/src/main/java/org/tukaani/xz/LZMA2InputStream.java
  + app/src/main/java/org/tukaani/xz/LZMA2Options.java
  + app/src/main/java/org/tukaani/xz/LZMA2OutputStream.java
  + app/src/main/java/org/tukaani/xz/MemoryLimitException.java
  + app/src/main/java/org/tukaani/xz/RawCoder.java
  + app/src/main/java/org/tukaani/xz/SimpleInputStream.java
  + app/src/main/java/org/tukaani/xz/SingleXZInputStream.java
  + app/src/main/java/org/tukaani/xz/UncompressedLZMA2OutputStream.java
  + app/src/main/java/org/tukaani/xz/UnsupportedOptionsException.java
  + app/src/main/java/org/tukaani/xz/XZ.java
  + app/src/main/java/org/tukaani/xz/XZFormatException.java
  + app/src/main/java/org/tukaani/xz/XZIOException.java
  + app/src/main/java/org/tukaani/xz/XZInputStream.java
  + app/src/main/java/org/tukaani/xz/XZOutputStream.java
  + app/src/main/java/org/tukaani/xz/check/CRC32.java
  + app/src/main/java/org/tukaani/xz/check/CRC64.java
  + app/src/main/java/org/tukaani/xz/check/Check.java
  + app/src/main/java/org/tukaani/xz/check/None.java
  + app/src/main/java/org/tukaani/xz/check/SHA256.java
  + app/src/main/java/org/tukaani/xz/common/DecoderUtil.java
  + app/src/main/java/org/tukaani/xz/common/EncoderUtil.java
  + app/src/main/java/org/tukaani/xz/common/StreamFlags.java
  + app/src/main/java/org/tukaani/xz/common/Util.java
  + app/src/main/java/org/tukaani/xz/delta/DeltaCoder.java
  + app/src/main/java/org/tukaani/xz/delta/DeltaDecoder.java
  + app/src/main/java/org/tukaani/xz/index/IndexBase.java
  + app/src/main/java/org/tukaani/xz/index/IndexEncoder.java
  + app/src/main/java/org/tukaani/xz/index/IndexHash.java
  + app/src/main/java/org/tukaani/xz/index/IndexRecord.java
  + app/src/main/java/org/tukaani/xz/lz/BT4.java
  + app/src/main/java/org/tukaani/xz/lz/CRC32Hash.java
  + app/src/main/java/org/tukaani/xz/lz/HC4.java
  + app/src/main/java/org/tukaani/xz/lz/Hash234.java
  + app/src/main/java/org/tukaani/xz/lz/LZDecoder.java
  + app/src/main/java/org/tukaani/xz/lz/LZEncoder.java
  + app/src/main/java/org/tukaani/xz/lz/Matches.java
  + app/src/main/java/org/tukaani/xz/lzma/LZMACoder.java
  + app/src/main/java/org/tukaani/xz/lzma/LZMADecoder.java
  + app/src/main/java/org/tukaani/xz/lzma/LZMAEncoder.java
  + app/src/main/java/org/tukaani/xz/lzma/LZMAEncoderFast.java
  + app/src/main/java/org/tukaani/xz/lzma/LZMAEncoderNormal.java
  + app/src/main/java/org/tukaani/xz/lzma/Optimum.java
  + app/src/main/java/org/tukaani/xz/lzma/State.java
  + app/src/main/java/org/tukaani/xz/rangecoder/RangeCoder.java
  + app/src/main/java/org/tukaani/xz/rangecoder/RangeDecoder.java
  + app/src/main/java/org/tukaani/xz/rangecoder/RangeDecoderFromBuffer.java
  + app/src/main/java/org/tukaani/xz/rangecoder/RangeEncoder.java
  + app/src/main/java/org/tukaani/xz/rangecoder/RangeEncoderToBuffer.java
  + app/src/main/java/org/tukaani/xz/simple/ARM.java
  + app/src/main/java/org/tukaani/xz/simple/ARMThumb.java
  + app/src/main/java/org/tukaani/xz/simple/IA64.java
  + app/src/main/java/org/tukaani/xz/simple/PowerPC.java
  + app/src/main/java/org/tukaani/xz/simple/SPARC.java
  + app/src/main/java/org/tukaani/xz/simple/SimpleFilter.java
  + app/src/main/java/org/tukaani/xz/simple/X86.java
  + app/src/main/lib/arm64-v8a/libltdl.so
    0000000000009060 A __bss_end__
    0000000000009060 A _bss_end__
    000000000000900c A __bss_start
    000000000000900c A __bss_start__
    000000000000624c T dlopen_LTX_get_vtable
    000000000000900c A _edata
    0000000000009060 A __end__
    0000000000009060 A _end
    0000000000009000 D lt__alloc_die
    0000000000002c6c T lt__alloc_die_callback
    0000000000005cb0 T lt__argz_append
    0000000000005dac T lt__argz_create_sep
    0000000000005efc T lt__argz_insert
    00000000000060b0 T lt__argz_next
    0000000000006184 T lt__argz_stringify
    0000000000002af0 T lt_dladderror
    0000000000004a84 T lt_dladdsearchdir
    0000000000003130 T lt_dladvise_destroy
    0000000000003160 T lt_dladvise_ext
    0000000000003244 T lt_dladvise_global
    00000000000030fc T lt_dladvise_init
    00000000000031f8 T lt_dladvise_local
    0000000000003290 T lt_dladvise_preload
    00000000000031ac T lt_dladvise_resident
    00000000000050dc T lt_dlcaller_get_data
    0000000000004fe4 T lt_dlcaller_set_data
    0000000000002f90 T lt_dlclose
    0000000000004a58 T lt_dlerror
    0000000000002e10 T lt_dlexit
    00000000000042c0 T lt_dlforeachfile
    0000000000005110 T lt_dlgetinfo
    0000000000004edc T lt_dlgetsearchpath
    00000000000051b8 T lt_dlhandle_fetch
    000000000000513c T lt_dlhandle_iterate
    0000000000005254 T lt_dlhandle_map
    0000000000002c84 T lt_dlinit
    0000000000004cb8 T lt_dlinsertsearchdir
    0000000000004fbc T lt_dlinterface_free
    0000000000004f5c T lt_dlinterface_register
    0000000000004f28 T lt_dlisresident
    0000000000002840 T lt_dlloader_add
    0000000000002a68 T lt_dlloader_find
    0000000000002930 T lt_dlloader_get
    0000000000002918 T lt_dlloader_next
    000000000000293c T lt_dlloader_remove
    0000000000004ee8 T lt_dlmakeresident
    00000000000032dc T lt_dlopen
    0000000000003320 T lt_dlopenadvise
    0000000000003488 T lt_dlopenext
    00000000000024c0 T lt_dlpreload
    00000000000024b0 T lt_dlpreload_default
    0000000000002574 T lt_dlpreload_open
    0000000000002b78 T lt_dlseterror
    0000000000004d58 T lt_dlsetsearchpath
    0000000000004858 T lt_dlsym
    0000000000002bf4 T lt__error_string
    0000000000002c60 T lt__get_last_error
    0000000000008bb0 D lt_libltdl_LTX_preloaded_symbols
    00000000000026bc T lt__malloc
    000000000000277c T lt__memdup
    0000000000002744 T lt__realloc
    0000000000002be8 T lt__set_last_error
    0000000000005c54 T lt__slist_box
    00000000000059dc T lt__slist_concat
    0000000000005a00 T lt__slist_cons
    0000000000005874 T lt__slist_delete
    000000000000596c T lt__slist_find
    0000000000005ac4 T lt__slist_foreach
    0000000000005a7c T lt__slist_length
    0000000000005a58 T lt__slist_nth
    00000000000058cc T lt__slist_remove
    0000000000005a98 T lt__slist_reverse
    0000000000005b40 T lt__slist_sort
    0000000000005a4c T lt__slist_tail
    0000000000005c80 T lt__slist_unbox
    00000000000027dc T lt__strdup
    00000000000026f4 T lt__zalloc
    0000000000002208 T preopen_LTX_get_vtable
  + app/src/main/lib/arm64-v8a/libpulse.so
    0000000000031630 T pa_ascii_filter@@PULSE_0
    0000000000031754 T pa_ascii_valid@@PULSE_0
    000000000002604c T pa_bytes_per_second@@PULSE_0
    00000000000266c8 T pa_bytes_snprint@@PULSE_0
    000000000002612c T pa_bytes_to_usec@@PULSE_0
    000000000000dbd0 T pa_channel_map_can_balance@@PULSE_0
    000000000000ddcc T pa_channel_map_can_fade@@PULSE_0
    000000000000dfc0 T pa_channel_map_can_lfe_balance@@PULSE_0
    000000000000d504 T pa_channel_map_compatible@@PULSE_0
    000000000000cbec T pa_channel_map_equal@@PULSE_0
    000000000000e6f4 T pa_channel_map_has_position@@PULSE_0
    000000000000c3f8 T pa_channel_map_init@@PULSE_0
    000000000000c5a0 T pa_channel_map_init_auto@@PULSE_0
    000000000000c960 T pa_channel_map_init_extend@@PULSE_0
    000000000000c47c T pa_channel_map_init_mono@@PULSE_0
    000000000000c508 T pa_channel_map_init_stereo@@PULSE_0
    000000000000da50 T pa_channel_map_mask@@PULSE_0
    000000000000d1b4 T pa_channel_map_parse@@PULSE_0
    000000000000ce7c T pa_channel_map_snprint@@PULSE_0
    000000000000d688 T pa_channel_map_superset@@PULSE_0
    000000000000e1a8 T pa_channel_map_to_name@@PULSE_0
    000000000000e44c T pa_channel_map_to_pretty_name@@PULSE_0
    000000000000cdd4 T pa_channel_map_valid@@PULSE_0
    000000000000d0a8 T pa_channel_position_from_string@@PULSE_0
    000000000000cbb0 T pa_channel_position_to_pretty_string@@PULSE_0
    000000000000cb90 T pa_channel_position_to_string@@PULSE_0
    000000000002638c T pa_channels_valid@@PULSE_0
    000000000001f83c T pa_context_add_autoload@@PULSE_0
    000000000000f33c T pa_context_connect@@PULSE_0
    000000000000fc68 T pa_context_disconnect@@PULSE_0
    0000000000010148 T pa_context_drain@@PULSE_0
    000000000000fdf0 T pa_context_errno@@PULSE_0
    0000000000010854 T pa_context_exit_daemon@@PULSE_0
    000000000001f6dc T pa_context_get_autoload_info_by_index@@PULSE_0
    000000000001f62c T pa_context_get_autoload_info_by_name@@PULSE_0
    000000000001f78c T pa_context_get_autoload_info_list@@PULSE_0
    000000000001b56c T pa_context_get_card_info_by_index@@PULSE_0
    000000000001be00 T pa_context_get_card_info_by_name@@PULSE_0
    000000000001bfd8 T pa_context_get_card_info_list@@PULSE_0
    000000000001b16c T pa_context_get_client_info@@PULSE_0
    000000000001b554 T pa_context_get_client_info_list@@PULSE_0
    0000000000011304 T pa_context_get_index@@PULSE_0
    000000000001c390 T pa_context_get_module_info@@PULSE_0
    000000000001c79c T pa_context_get_module_info_list@@PULSE_0
    0000000000011210 T pa_context_get_protocol_version@@PULSE_0
    000000000001ed94 T pa_context_get_sample_info_by_index@@PULSE_0
    000000000001e904 T pa_context_get_sample_info_by_name@@PULSE_0
    000000000001ef54 T pa_context_get_sample_info_list@@PULSE_0
    0000000000011108 T pa_context_get_server@@PULSE_0
    0000000000019224 T pa_context_get_server_info@@PULSE_0
    0000000000011218 T pa_context_get_server_protocol_version@@PULSE_0
    0000000000019c1c T pa_context_get_sink_info_by_index@@PULSE_0
    0000000000019dcc T pa_context_get_sink_info_by_name@@PULSE_0
    0000000000019498 T pa_context_get_sink_info_list@@PULSE_0
    000000000001c7b4 T pa_context_get_sink_input_info@@PULSE_0
    000000000001cd58 T pa_context_get_sink_input_info_list@@PULSE_0
    000000000001aa84 T pa_context_get_source_info_by_index@@PULSE_0
    000000000001ac34 T pa_context_get_source_info_by_name@@PULSE_0
    000000000001a304 T pa_context_get_source_info_list@@PULSE_0
    000000000001cd70 T pa_context_get_source_output_info@@PULSE_0
    000000000001d2f0 T pa_context_get_source_output_info_list@@PULSE_0
    000000000000fd48 T pa_context_get_state@@PULSE_0
    0000000000011e8c T pa_context_get_tile_size@@PULSE_0
    0000000000010c2c T pa_context_is_local@@PULSE_0
    0000000000010024 T pa_context_is_pending@@PULSE_0
    000000000001ef6c T pa_context_kill_client@@PULSE_0
    000000000001f10c T pa_context_kill_sink_input@@PULSE_0
    000000000001f120 T pa_context_kill_source_output@@PULSE_0
    0000000000011fa4 T pa_context_load_cookie_from_file@@PULSE_0
    000000000001f134 T pa_context_load_module@@PULSE_0
    000000000001fc10 T pa_context_move_sink_input_by_index@@PULSE_0
    000000000001fa4c T pa_context_move_sink_input_by_name@@PULSE_0
    000000000001ff94 T pa_context_move_source_output_by_index@@PULSE_0
    000000000001fdd0 T pa_context_move_source_output_by_name@@PULSE_0
    000000000000e850 T pa_context_new@@PULSE_0
    000000000000e858 T pa_context_new_with_proplist@@PULSE_0
    0000000000027014 T pa_context_play_sample@@PULSE_0
    00000000000273d0 T pa_context_play_sample_with_proplist@@PULSE_0
    0000000000011404 T pa_context_proplist_remove@@PULSE_0
    0000000000010f30 T pa_context_proplist_update@@PULSE_0
    000000000000eb5c T pa_context_ref@@PULSE_0
    000000000001f99c T pa_context_remove_autoload_by_index@@PULSE_0
    000000000001f8ec T pa_context_remove_autoload_by_name@@PULSE_0
    0000000000027768 T pa_context_remove_sample@@PULSE_0
    0000000000011c24 T pa_context_rttime_new@@PULSE_0
    0000000000011d5c T pa_context_rttime_restart@@PULSE_0
    000000000001c01c T pa_context_set_card_profile_by_index@@PULSE_0
    000000000001c1d4 T pa_context_set_card_profile_by_name@@PULSE_0
    000000000001090c T pa_context_set_default_sink@@PULSE_0
    0000000000010a9c T pa_context_set_default_source@@PULSE_0
    000000000000ff48 T pa_context_set_event_callback@@PULSE_0
    0000000000010d1c T pa_context_set_name@@PULSE_0
    000000000001f454 T pa_context_set_port_latency_offset@@PULSE_0
    000000000001dc4c T pa_context_set_sink_input_mute@@PULSE_0
    000000000001da74 T pa_context_set_sink_input_volume@@PULSE_0
    000000000001d700 T pa_context_set_sink_mute_by_index@@PULSE_0
    000000000001d898 T pa_context_set_sink_mute_by_name@@PULSE_0
    0000000000019f90 T pa_context_set_sink_port_by_index@@PULSE_0
    000000000001a148 T pa_context_set_sink_port_by_name@@PULSE_0
    000000000001d308 T pa_context_set_sink_volume_by_index@@PULSE_0
    000000000001d4e4 T pa_context_set_sink_volume_by_name@@PULSE_0
    000000000001e1f4 T pa_context_set_source_mute_by_index@@PULSE_0
    000000000001e38c T pa_context_set_source_mute_by_name@@PULSE_0
    000000000001e754 T pa_context_set_source_output_mute@@PULSE_0
    000000000001e568 T pa_context_set_source_output_volume@@PULSE_0
    000000000001adf8 T pa_context_set_source_port_by_index@@PULSE_0
    000000000001afb0 T pa_context_set_source_port_by_name@@PULSE_0
    000000000001ddfc T pa_context_set_source_volume_by_index@@PULSE_0
    000000000001dfd8 T pa_context_set_source_volume_by_name@@PULSE_0
    000000000000fe6c T pa_context_set_state_callback@@PULSE_0
    000000000002ff68 T pa_context_set_subscribe_callback@@PULSE_0
    0000000000019044 T pa_context_stat@@PULSE_0
    000000000002fe18 T pa_context_subscribe@@PULSE_0
    0000000000020314 T pa_context_suspend_sink_by_index@@PULSE_0
    0000000000020154 T pa_context_suspend_sink_by_name@@PULSE_0
    000000000002068c T pa_context_suspend_source_by_index@@PULSE_0
    00000000000204cc T pa_context_suspend_source_by_name@@PULSE_0
    000000000001f440 T pa_context_unload_module@@PULSE_0
    000000000000ec10 T pa_context_unref@@PULSE_0
    0000000000032484 T pa_cvolume_avg@@PULSE_0
    00000000000325e8 T pa_cvolume_avg_mask@@PULSE_0
    0000000000034240 T pa_cvolume_channels_equal_to@@PULSE_0
    000000000003555c T pa_cvolume_compatible@@PULSE_0
    00000000000328b4 T pa_cvolume_compatible_with_channel_map@@PULSE_0
    0000000000037fec T pa_cvolume_dec@@PULSE_0
    0000000000032058 T pa_cvolume_equal@@PULSE_0
    00000000000356dc T pa_cvolume_get_balance@@PULSE_0
    0000000000036620 T pa_cvolume_get_fade@@PULSE_0
    0000000000036ea4 T pa_cvolume_get_lfe_balance@@PULSE_0
    00000000000378e0 T pa_cvolume_get_position@@PULSE_0
    0000000000037fe4 T pa_cvolume_inc@@PULSE_0
    0000000000037db4 T pa_cvolume_inc_clamp@@PULSE_0
    00000000000322dc T pa_cvolume_init@@PULSE_0
    0000000000032a34 T pa_cvolume_max@@PULSE_0
    0000000000032cf4 T pa_cvolume_max_mask@@PULSE_0
    0000000000037aec T pa_cvolume_merge@@PULSE_0
    0000000000032b90 T pa_cvolume_min@@PULSE_0
    0000000000032f88 T pa_cvolume_min_mask@@PULSE_0
    0000000000034c94 T pa_cvolume_remap@@PULSE_0
    0000000000035f74 T pa_cvolume_scale@@PULSE_0
    00000000000362bc T pa_cvolume_scale_mask@@PULSE_0
    0000000000032360 T pa_cvolume_set@@PULSE_0
    0000000000035a90 T pa_cvolume_set_balance@@PULSE_0
    00000000000369cc T pa_cvolume_set_fade@@PULSE_0
    0000000000037244 T pa_cvolume_set_lfe_balance@@PULSE_0
    0000000000037714 T pa_cvolume_set_position@@PULSE_0
    00000000000335c8 T pa_cvolume_snprint@@PULSE_0
    0000000000033c1c T pa_cvolume_snprint_verbose@@PULSE_0
    0000000000032238 T pa_cvolume_valid@@PULSE_0
    00000000000138a8 T pa_direction_to_string@@PULSE_0
    0000000000013898 T pa_direction_valid@@PULSE_0
    0000000000016c80 T pa_encoding_from_string@@PULSE_0
    0000000000016c60 T pa_encoding_to_string@@PULSE_0
    0000000000014310 T pa_ext_device_manager_delete@@PULSE_0
    0000000000014530 T pa_ext_device_manager_enable_role_device_priority_routing@@PULSE_0
    0000000000013c30 T pa_ext_device_manager_read@@PULSE_0
    00000000000146e0 T pa_ext_device_manager_reorder_devices_for_role@@PULSE_0
    00000000000140d0 T pa_ext_device_manager_set_device_description@@PULSE_0
    0000000000014af0 T pa_ext_device_manager_set_subscribe_cb@@PULSE_0
    0000000000014940 T pa_ext_device_manager_subscribe@@PULSE_0
    0000000000013930 T pa_ext_device_manager_test@@PULSE_0
    00000000000156b8 T pa_ext_device_restore_read_formats@@PULSE_0
    000000000001526c T pa_ext_device_restore_read_formats_all@@PULSE_0
    00000000000158b4 T pa_ext_device_restore_save_formats@@PULSE_0
    00000000000151a0 T pa_ext_device_restore_set_subscribe_cb@@PULSE_0
    0000000000014ff0 T pa_ext_device_restore_subscribe@@PULSE_0
    0000000000014cf0 T pa_ext_device_restore_test@@PULSE_0
    0000000000016698 T pa_ext_stream_restore_delete@@PULSE_0
    0000000000015fcc T pa_ext_stream_restore_read@@PULSE_0
    0000000000016a60 T pa_ext_stream_restore_set_subscribe_cb@@PULSE_0
    00000000000168b0 T pa_ext_stream_restore_subscribe@@PULSE_0
    0000000000015ccc T pa_ext_stream_restore_test@@PULSE_0
    00000000000163a8 T pa_ext_stream_restore_write@@PULSE_0
    0000000000016dc8 T pa_format_info_copy@@PULSE_0
    0000000000016e58 T pa_format_info_free@@PULSE_0
    0000000000018b48 T pa_format_info_free_string_array@@PULSE_0
    0000000000017540 T pa_format_info_from_sample_spec@@PULSE_0
    0000000000017090 T pa_format_info_from_string@@PULSE_0
    0000000000017ea4 T pa_format_info_get_channel_map@@PULSE_0
    0000000000017da0 T pa_format_info_get_channels@@PULSE_0
    0000000000018134 T pa_format_info_get_prop_int@@PULSE_0
    00000000000184f4 T pa_format_info_get_prop_int_array@@PULSE_0
    00000000000182c8 T pa_format_info_get_prop_int_range@@PULSE_0
    0000000000018750 T pa_format_info_get_prop_string@@PULSE_0
    00000000000188e8 T pa_format_info_get_prop_string_array@@PULSE_0
    0000000000017fb0 T pa_format_info_get_prop_type@@PULSE_0
    0000000000017c9c T pa_format_info_get_rate@@PULSE_0
    0000000000017b80 T pa_format_info_get_sample_format@@PULSE_0
    00000000000171dc T pa_format_info_is_compatible@@PULSE_0
    0000000000016ef0 T pa_format_info_is_pcm@@PULSE_0
    0000000000016d90 T pa_format_info_new@@PULSE_0
    0000000000018c3c T pa_format_info_set_channel_map@@PULSE_0
    00000000000177f4 T pa_format_info_set_channels@@PULSE_0
    0000000000018b90 T pa_format_info_set_prop_int@@PULSE_0
    0000000000018cd4 T pa_format_info_set_prop_int_array@@PULSE_0
    0000000000018e50 T pa_format_info_set_prop_int_range@@PULSE_0
    0000000000017868 T pa_format_info_set_prop_string@@PULSE_0
    0000000000018f00 T pa_format_info_set_prop_string_array@@PULSE_0
    0000000000017780 T pa_format_info_set_rate@@PULSE_0
    00000000000176f4 T pa_format_info_set_sample_format@@PULSE_0
    0000000000016f00 T pa_format_info_snprint@@PULSE_0
    0000000000017914 T pa_format_info_to_sample_spec@@PULSE_0
    0000000000016ecc T pa_format_info_valid@@PULSE_0
    0000000000025f70 T pa_frame_size@@PULSE_0
    0000000000031b98 T pa_get_binary_name@@PULSE_0
    0000000000031d34 T pa_get_fqdn@@PULSE_0
    0000000000031a00 T pa_get_home_dir@@PULSE_0
    0000000000031934 T pa_get_host_name@@PULSE_0
    00000000000110fc T pa_get_library_version@@PULSE_0
    0000000000030d50 T pa_gettimeofday@@PULSE_0
    00000000000317d8 T pa_get_user_name@@PULSE_0
    00000000000316cc T pa_locale_to_utf8@@PULSE_0
    000000000002092c T pa_mainloop_api_once@@PULSE_0
    000000000002219c T pa_mainloop_dispatch@@PULSE_0
    0000000000021580 T pa_mainloop_free@@PULSE_0
    0000000000022738 T pa_mainloop_get_api@@PULSE_0
    000000000002252c T pa_mainloop_get_retval@@PULSE_0
    000000000002258c T pa_mainloop_iterate@@PULSE_0
    00000000000214b4 T pa_mainloop_new@@PULSE_0
    0000000000021f58 T pa_mainloop_poll@@PULSE_0
    0000000000021c54 T pa_mainloop_prepare@@PULSE_0
    0000000000022674 T pa_mainloop_quit@@PULSE_0
    0000000000022634 T pa_mainloop_run@@PULSE_0
    0000000000022790 T pa_mainloop_set_poll_func@@PULSE_0
    0000000000021ba0 T pa_mainloop_wakeup@@PULSE_0
    0000000000031e7c T pa_msleep@@PULSE_0
    0000000000023cc0 T pa_operation_cancel@@PULSE_0
    0000000000024030 T pa_operation_get_state@@PULSE_0
    0000000000023a98 T pa_operation_ref@@PULSE_0
    00000000000240d8 T pa_operation_set_state_callback@@PULSE_0
    0000000000023b4c T pa_operation_unref@@PULSE_0
    0000000000026824 T pa_parse_sample_format@@PULSE_0
    0000000000031d04 T pa_path_get_filename@@PULSE_0
    0000000000024f10 T pa_proplist_clear@@PULSE_0
    0000000000024f64 T pa_proplist_contains@@PULSE_0
    0000000000025ad4 T pa_proplist_copy@@PULSE_0
    0000000000025c30 T pa_proplist_equal@@PULSE_0
    00000000000242ac T pa_proplist_free@@PULSE_0
    0000000000025570 T pa_proplist_from_string@@PULSE_0
    0000000000024c04 T pa_proplist_get@@PULSE_0
    0000000000024aec T pa_proplist_gets@@PULSE_0
    0000000000025bcc T pa_proplist_isempty@@PULSE_0
    0000000000025264 T pa_proplist_iterate@@PULSE_0
    00000000000241dc T pa_proplist_key_valid@@PULSE_0
    0000000000024210 T pa_proplist_new@@PULSE_0
    000000000002494c T pa_proplist_set@@PULSE_0
    0000000000024758 T pa_proplist_setf@@PULSE_0
    000000000002448c T pa_proplist_setp@@PULSE_0
    0000000000024300 T pa_proplist_sets@@PULSE_0
    0000000000025b78 T pa_proplist_size@@PULSE_0
    0000000000025528 T pa_proplist_to_string@@PULSE_0
    0000000000025284 T pa_proplist_to_string_sep@@PULSE_0
    0000000000025044 T pa_proplist_unset@@PULSE_0
    0000000000025124 T pa_proplist_unset_many@@PULSE_0
    0000000000024d74 T pa_proplist_update@@PULSE_0
    0000000000025d64 T pa_rtclock_now@@PULSE_0
    0000000000026c1c T pa_sample_format_is_be@@PULSE_0
    0000000000026b98 T pa_sample_format_is_le@@PULSE_0
    000000000002654c T pa_sample_format_to_string@@PULSE_0
    0000000000025df8 T pa_sample_format_valid@@PULSE_0
    0000000000026378 T pa_sample_rate_valid@@PULSE_0
    0000000000025e04 T pa_sample_size@@PULSE_0
    0000000000025d88 T pa_sample_size_of_format@@PULSE_0
    00000000000263a0 T pa_sample_spec_equal@@PULSE_0
    0000000000026310 T pa_sample_spec_init@@PULSE_0
    000000000002656c T pa_sample_spec_snprint@@PULSE_0
    0000000000025ed8 T pa_sample_spec_valid@@PULSE_0
    00000000000210fc T pa_signal_done@@PULSE_0
    00000000000211ac T pa_signal_free@@PULSE_0
    0000000000020c54 T pa_signal_init@@PULSE_0
    00000000000212b0 T pa_signal_new@@PULSE_0
    0000000000021454 T pa_signal_set_destroy@@PULSE_0
    000000000002aecc T pa_stream_begin_write@@PULSE_0
    000000000002b068 T pa_stream_cancel_write@@PULSE_0
    000000000002a610 T pa_stream_connect_playback@@PULSE_0
    000000000002ae0c T pa_stream_connect_record@@PULSE_0
    0000000000026ca0 T pa_stream_connect_upload@@PULSE_0
    000000000002d3ac T pa_stream_cork@@PULSE_0
    000000000002c858 T pa_stream_disconnect@@PULSE_0
    000000000002bc40 T pa_stream_drain@@PULSE_0
    000000000002b8c8 T pa_stream_drop@@PULSE_0
    0000000000026ec0 T pa_stream_finish_upload@@PULSE_0
    000000000002d5dc T pa_stream_flush@@PULSE_0
    000000000002e8a8 T pa_stream_get_buffer_attr@@PULSE_0
    000000000002e6f0 T pa_stream_get_channel_map@@PULSE_0
    0000000000028160 T pa_stream_get_context@@PULSE_0
    000000000002f0ac T pa_stream_get_device_index@@PULSE_0
    000000000002f1c4 T pa_stream_get_device_name@@PULSE_0
    000000000002e7c0 T pa_stream_get_format_info@@PULSE_0
    0000000000028208 T pa_stream_get_index@@PULSE_0
    000000000002e2b8 T pa_stream_get_latency@@PULSE_0
    000000000002fb60 T pa_stream_get_monitor_stream@@PULSE_0
    000000000002e620 T pa_stream_get_sample_spec@@PULSE_0
    00000000000280b8 T pa_stream_get_state@@PULSE_0
    00000000000298bc T pa_stream_get_time@@PULSE_0
    000000000002e518 T pa_stream_get_timing_info@@PULSE_0
    0000000000029c34 T pa_stream_get_underflow_index@@PULSE_0
    000000000002f3e8 T pa_stream_is_corked@@PULSE_0
    000000000002f2d8 T pa_stream_is_suspended@@PULSE_0
    00000000000278ec T pa_stream_new@@PULSE_0
    0000000000027e3c T pa_stream_new_extended@@PULSE_0
    00000000000278f4 T pa_stream_new_with_proplist@@PULSE_0
    000000000002b6bc T pa_stream_peek@@PULSE_0
    000000000002d998 T pa_stream_prebuf@@PULSE_0
    000000000002f864 T pa_stream_proplist_remove@@PULSE_0
    000000000002de44 T pa_stream_proplist_update@@PULSE_0
    000000000002bb40 T pa_stream_readable_size@@PULSE_0
    0000000000028004 T pa_stream_ref@@PULSE_0
    000000000002e9a0 T pa_stream_set_buffer_attr@@PULSE_0
    000000000002d2cc T pa_stream_set_buffer_attr_callback@@PULSE_0
    000000000002d1ec T pa_stream_set_event_callback@@PULSE_0
    000000000002ce6c T pa_stream_set_latency_update_callback@@PULSE_0
    000000000002fa4c T pa_stream_set_monitor_stream@@PULSE_0
    000000000002cf4c T pa_stream_set_moved_callback@@PULSE_0
    000000000002dc18 T pa_stream_set_name@@PULSE_0
    000000000002ccac T pa_stream_set_overflow_callback@@PULSE_0
    000000000002ca0c T pa_stream_set_read_callback@@PULSE_0
    000000000002d10c T pa_stream_set_started_callback@@PULSE_0
    000000000002cbcc T pa_stream_set_state_callback@@PULSE_0
    000000000002d02c T pa_stream_set_suspended_callback@@PULSE_0
    000000000002cd8c T pa_stream_set_underflow_callback@@PULSE_0
    000000000002caec T pa_stream_set_write_callback@@PULSE_0
    000000000002dad8 T pa_stream_trigger@@PULSE_0
    0000000000027e80 T pa_stream_unref@@PULSE_0
    000000000002f4e0 T pa_stream_update_sample_rate@@PULSE_0
    000000000002bf34 T pa_stream_update_timing_info@@PULSE_0
    000000000002ba48 T pa_stream_writable_size@@PULSE_0
    000000000002b6ac T pa_stream_write@@PULSE_0
    000000000002b1b4 T pa_stream_write_ext_free@@PULSE_0
    00000000000138ec T pa_strerror@@PULSE_0
    00000000000348dc T pa_sw_cvolume_divide@@PULSE_0
    0000000000034af0 T pa_sw_cvolume_divide_scalar@@PULSE_0
    0000000000034390 T pa_sw_cvolume_multiply@@PULSE_0
    0000000000034680 T pa_sw_cvolume_multiply_scalar@@PULSE_0
    00000000000338f0 T pa_sw_cvolume_snprint_dB@@PULSE_0
    00000000000332fc T pa_sw_volume_divide@@PULSE_0
    00000000000333ec T pa_sw_volume_from_dB@@PULSE_0
    0000000000033450 T pa_sw_volume_from_linear@@PULSE_0
    000000000003321c T pa_sw_volume_multiply@@PULSE_0
    0000000000034100 T pa_sw_volume_snprint_dB@@PULSE_0
    0000000000033490 T pa_sw_volume_to_dB@@PULSE_0
    0000000000033530 T pa_sw_volume_to_linear@@PULSE_0
    0000000000030840 T pa_threaded_mainloop_accept@@PULSE_0
    0000000000030148 T pa_threaded_mainloop_free@@PULSE_0
    00000000000309b4 T pa_threaded_mainloop_get_api@@PULSE_0
    0000000000030954 T pa_threaded_mainloop_get_retval@@PULSE_0
    0000000000030a14 T pa_threaded_mainloop_in_thread@@PULSE_0
    00000000000304cc T pa_threaded_mainloop_lock@@PULSE_0
    0000000000030020 T pa_threaded_mainloop_new@@PULSE_0
    0000000000030b70 T pa_threaded_mainloop_once_unlocked@@PULSE_0
    0000000000030a9c T pa_threaded_mainloop_set_name@@PULSE_0
    0000000000030674 T pa_threaded_mainloop_signal@@PULSE_0
    0000000000030340 T pa_threaded_mainloop_start@@PULSE_0
    000000000003024c T pa_threaded_mainloop_stop@@PULSE_0
    00000000000305a0 T pa_threaded_mainloop_unlock@@PULSE_0
    0000000000030720 T pa_threaded_mainloop_wait@@PULSE_0
    0000000000031ed4 T pa_thread_make_realtime@@PULSE_0
    00000000000310ec T pa_timeval_add@@PULSE_0
    0000000000030fd0 T pa_timeval_age@@PULSE_0
    0000000000030efc T pa_timeval_cmp@@PULSE_0
    0000000000030e04 T pa_timeval_diff@@PULSE_0
    0000000000031308 T pa_timeval_load@@PULSE_0
    0000000000031284 T pa_timeval_store@@PULSE_0
    00000000000311bc T pa_timeval_sub@@PULSE_0
    0000000000026218 T pa_usec_to_bytes@@PULSE_0
    0000000000031518 T pa_utf8_filter@@PULSE_0
    0000000000031594 T pa_utf8_to_locale@@PULSE_0
    0000000000031328 T pa_utf8_valid@@PULSE_0
    00000000000337f0 T pa_volume_snprint@@PULSE_0
    0000000000033f54 T pa_volume_snprint_verbose@@PULSE_0
    0000000000038580 T pa_xfree@@PULSE_0
    0000000000038210 T pa_xmalloc@@PULSE_0
    00000000000382f0 T pa_xmalloc0@@PULSE_0
    0000000000038454 T pa_xmemdup@@PULSE_0
    00000000000383a8 T pa_xrealloc@@PULSE_0
    00000000000384a4 T pa_xstrdup@@PULSE_0
    00000000000384f8 T pa_xstrndup@@PULSE_0
    0000000000000000 A PULSE_0
  + app/src/main/lib/arm64-v8a/libpulseaudio.so
    0000000000011068 A __bss_end__
    0000000000011068 A _bss_end__
    0000000000011008 A __bss_start
    0000000000011008 A __bss_start__
    0000000000011008 A _edata
    0000000000011068 A __end__
    0000000000011068 A _end
    0000000000010368 D __FINI_ARRAY__
    0000000000010358 D __INIT_ARRAY__
    0000000000010378 D lt__PROGRAM__LTX_preloaded_symbols
    0000000000008280 T main
    000000000000463c T pa_cmdline_help
    00000000000046ac T pa_cmdline_parse
    00000000000053b8 T pa_cpu_limit_done
    0000000000004df0 T pa_cpu_limit_init
    0000000000007114 T pa_daemon_conf_dump
    0000000000006ef0 T pa_daemon_conf_env
    0000000000005674 T pa_daemon_conf_free
    0000000000006fac T pa_daemon_conf_get_default_script_file
    0000000000005b28 T pa_daemon_conf_load
    00000000000055fc T pa_daemon_conf_new
    000000000000705c T pa_daemon_conf_open_default_script_file
    0000000000005a1c T pa_daemon_conf_set_local_server_type
    00000000000057f0 T pa_daemon_conf_set_log_level
    000000000000570c T pa_daemon_conf_set_log_target
    0000000000005954 T pa_daemon_conf_set_resample_method
    0000000000004618 T pa_drop_caps
    0000000000004614 T pa_drop_root
    00000000000078b0 T pa_dump_modules
    0000000000008214 T pa_ltdl_done
    0000000000007ea8 T pa_ltdl_init
    0000000000010348 D __PREINIT_ARRAY__
    0000000000004590 T _start
  + app/src/main/lib/arm64-v8a/libpulsecommon-13.0.so
    0000000000066288 A __bss_end__
    0000000000066288 A _bss_end__
    0000000000066040 A __bss_start
    0000000000066040 A __bss_start__
    0000000000066040 A _edata
    0000000000066288 A __end__
    0000000000066288 A _end
    000000000002b1c4 T pa_accept_cloexec
    0000000000027a1c T pa_append_to_config_home_dir
    000000000002783c T pa_append_to_home_dir
    0000000000018734 T pa_ascii_filter
    0000000000018858 T pa_ascii_valid
    00000000000266d8 T pa_atod
    00000000000290c0 T pa_atoi
    000000000002919c T pa_atol
    0000000000026878 T pa_atou
    000000000003ea60 T pa_aupdate_free
    000000000003ea18 T pa_aupdate_new
    000000000003eadc T pa_aupdate_read_begin
    000000000003eb4c T pa_aupdate_read_end
    000000000003ec00 T pa_aupdate_write_begin
    000000000003ed30 T pa_aupdate_write_end
    000000000003ec80 T pa_aupdate_write_swap
    0000000000022c80 T pa_authkey_load
    00000000000230f0 T pa_authkey_save
    0000000000032094 T pa_autospawn_lock_acquire
    00000000000326a0 T pa_autospawn_lock_done
    0000000000031d7c T pa_autospawn_lock_init
    0000000000032488 T pa_autospawn_lock_release
    000000000004534c T pa_bitset_equals
    0000000000045330 T pa_bitset_get
    00000000000452a8 T pa_bitset_set
    000000000001aff8 T pa_bytes_per_second
    000000000001b674 T pa_bytes_snprint
    000000000001b0d8 T pa_bytes_to_usec
    00000000000442ec T pa_bytes_to_usec_round_up
    000000000001a0b4 T pa_channel_map_can_balance
    000000000001a2b0 T pa_channel_map_can_fade
    000000000001a4a4 T pa_channel_map_can_lfe_balance
    00000000000199e8 T pa_channel_map_compatible
    00000000000190d0 T pa_channel_map_equal
    000000000001abd8 T pa_channel_map_has_position
    00000000000188dc T pa_channel_map_init
    0000000000018a84 T pa_channel_map_init_auto
    0000000000018e44 T pa_channel_map_init_extend
    0000000000018960 T pa_channel_map_init_mono
    00000000000189ec T pa_channel_map_init_stereo
    0000000000019f34 T pa_channel_map_mask
    0000000000019698 T pa_channel_map_parse
    0000000000019360 T pa_channel_map_snprint
    0000000000019b6c T pa_channel_map_superset
    000000000001a68c T pa_channel_map_to_name
    000000000001a930 T pa_channel_map_to_pretty_name
    00000000000192b8 T pa_channel_map_valid
    000000000001958c T pa_channel_position_from_string
    0000000000019094 T pa_channel_position_to_pretty_string
    0000000000019074 T pa_channel_position_to_string
    000000000001b338 T pa_channels_valid
    0000000000026ec0 T pa_check_in_group
    0000000000025b7c T pa_check_signal_is_blocked
    00000000000126d8 T pa_client_conf_free
    000000000001278c T pa_client_conf_load
    0000000000012a9c T pa_client_conf_load_cookie
    0000000000012688 T pa_client_conf_new
    0000000000012e04 T pa_client_conf_set_cookie_file_from_application
    0000000000025740 T pa_close
    00000000000299e8 T pa_close_all
    0000000000029b94 T pa_close_allv
    00000000000298bc T pa_close_pipe
    000000000003f8bc T pa_cmsg_ancil_data_close_fds
    000000000003b988 T pa_common_command_register_memfd_shmid
    000000000004eb64 T pa_cond_free
    000000000004eae4 T pa_cond_new
    000000000004ec14 T pa_cond_signal
    000000000004ecf0 T pa_cond_wait
    0000000000023330 T pa_config_parse
    0000000000023d64 T pa_config_parse_bool
    0000000000023b24 T pa_config_parse_int
    0000000000023e2c T pa_config_parse_not_bool
    0000000000023ca4 T pa_config_parse_size
    0000000000023ef4 T pa_config_parse_string
    0000000000023be4 T pa_config_parse_unsigned
    00000000000447d8 T pa_convert_size
    0000000000023f8c T pa_cstrerror
    000000000001cef4 T pa_cvolume_avg
    000000000001d058 T pa_cvolume_avg_mask
    000000000001ecb0 T pa_cvolume_channels_equal_to
    000000000001ffcc T pa_cvolume_compatible
    000000000001d324 T pa_cvolume_compatible_with_channel_map
    0000000000022a5c T pa_cvolume_dec
    000000000001cac8 T pa_cvolume_equal
    000000000002014c T pa_cvolume_get_balance
    0000000000021090 T pa_cvolume_get_fade
    0000000000021914 T pa_cvolume_get_lfe_balance
    0000000000022350 T pa_cvolume_get_position
    0000000000022a54 T pa_cvolume_inc
    0000000000022824 T pa_cvolume_inc_clamp
    000000000001cd4c T pa_cvolume_init
    000000000001d4a4 T pa_cvolume_max
    000000000001d764 T pa_cvolume_max_mask
    000000000002255c T pa_cvolume_merge
    000000000001d600 T pa_cvolume_min
    000000000001d9f8 T pa_cvolume_min_mask
    000000000001f704 T pa_cvolume_remap
    00000000000209e4 T pa_cvolume_scale
    0000000000020d2c T pa_cvolume_scale_mask
    000000000001cdd0 T pa_cvolume_set
    0000000000020500 T pa_cvolume_set_balance
    000000000002143c T pa_cvolume_set_fade
    0000000000021cb4 T pa_cvolume_set_lfe_balance
    0000000000022184 T pa_cvolume_set_position
    000000000001e038 T pa_cvolume_snprint
    000000000001e68c T pa_cvolume_snprint_verbose
    000000000001cca8 T pa_cvolume_valid
    0000000000043b88 T pa_deinterleave
    0000000000012ecc T pa_detect_fork
    000000000002ac4c T pa_disable_sigpipe
    000000000002b588 T pa_dynarray_append
    000000000002b4c8 T pa_dynarray_free
    000000000002b684 T pa_dynarray_get
    000000000002b6fc T pa_dynarray_last
    000000000002b4a0 T pa_dynarray_new
    000000000002b818 T pa_dynarray_remove_by_data
    000000000002b774 T pa_dynarray_remove_by_index
    000000000002b984 T pa_dynarray_size
    000000000002b908 T pa_dynarray_steal_last
    0000000000012f54 T pa_encoding_from_string
    0000000000012f34 T pa_encoding_to_string
    0000000000028ce8 T pa_endswith
    000000000002aa9c T pa_escape
    000000000002c528 T pa_fdsem_after_poll
    000000000002c400 T pa_fdsem_before_poll
    000000000002bc08 T pa_fdsem_free
    000000000002c394 T pa_fdsem_get
    000000000002b9e4 T pa_fdsem_new
    000000000002bb44 T pa_fdsem_new_shm
    000000000002ba68 T pa_fdsem_open_shm
    000000000002bc88 T pa_fdsem_post
    000000000002c2fc T pa_fdsem_try
    000000000002be7c T pa_fdsem_wait
    0000000000028764 T pa_find_config_file
    000000000002c7cc T pa_flist_free
    000000000002c7c0 T pa_flist_new
    000000000002c61c T pa_flist_new_with_name
    000000000002cab0 T pa_flist_pop
    000000000002c8ec T pa_flist_push
    00000000000286c0 T pa_fopen_cloexec
    000000000001309c T pa_format_info_copy
    000000000001312c T pa_format_info_free
    0000000000014e1c T pa_format_info_free_string_array
    0000000000013814 T pa_format_info_from_sample_spec
    00000000000240a4 T pa_format_info_from_sample_spec2
    0000000000013364 T pa_format_info_from_string
    0000000000014178 T pa_format_info_get_channel_map
    0000000000014074 T pa_format_info_get_channels
    0000000000014408 T pa_format_info_get_prop_int
    00000000000147c8 T pa_format_info_get_prop_int_array
    000000000001459c T pa_format_info_get_prop_int_range
    0000000000014a24 T pa_format_info_get_prop_string
    0000000000014bbc T pa_format_info_get_prop_string_array
    0000000000014284 T pa_format_info_get_prop_type
    0000000000013f70 T pa_format_info_get_rate
    0000000000013e54 T pa_format_info_get_sample_format
    00000000000134b0 T pa_format_info_is_compatible
    00000000000131c4 T pa_format_info_is_pcm
    0000000000013064 T pa_format_info_new
    0000000000014f10 T pa_format_info_set_channel_map
    0000000000013ac8 T pa_format_info_set_channels
    0000000000014e64 T pa_format_info_set_prop_int
    0000000000014fa8 T pa_format_info_set_prop_int_array
    0000000000015124 T pa_format_info_set_prop_int_range
    0000000000013b3c T pa_format_info_set_prop_string
    00000000000151d4 T pa_format_info_set_prop_string_array
    0000000000013a54 T pa_format_info_set_rate
    00000000000139c8 T pa_format_info_set_sample_format
    00000000000131d4 T pa_format_info_snprint
    0000000000013be8 T pa_format_info_to_sample_spec
    00000000000241d4 T pa_format_info_to_sample_spec2
    000000000002463c T pa_format_info_to_sample_spec_fake
    00000000000131a0 T pa_format_info_valid
    00000000000438c0 T pa_frame_align
    000000000004393c T pa_frame_aligned
    000000000001af1c T pa_frame_size
    000000000002a7e8 T pa_gcd
    000000000001c00c T pa_get_binary_name
    0000000000027b54 T pa_get_binary_name_malloc
    0000000000027948 T pa_get_config_home_dir
    0000000000028ed0 T pa_getcwd
    000000000001c1a8 T pa_get_fqdn
    0000000000026e68 T pa_get_gid_of_group
    000000000004d5e4 T pa_getgrgid_free
    000000000004d474 T pa_getgrgid_malloc
    000000000004d758 T pa_getgrnam_free
    000000000004d5e8 T pa_getgrnam_malloc
    000000000001be74 T pa_get_home_dir
    00000000000277c0 T pa_get_home_dir_malloc
    000000000001bda8 T pa_get_host_name
    000000000002a690 T pa_get_host_name_malloc
    000000000004d8cc T pa_getpwnam_free
    000000000004d75c T pa_getpwnam_malloc
    000000000004da40 T pa_getpwuid_free
    000000000004d8d0 T pa_getpwuid_malloc
    0000000000027bd0 T pa_get_runtime_dir
    00000000000275d8 T pa_get_state_dir
    000000000002afa0 T pa_get_temp_dir
    000000000001c4cc T pa_gettimeofday
    000000000001bc4c T pa_get_user_name
    000000000002a610 T pa_get_user_name_malloc
    000000000002d86c T pa_hashmap_first
    000000000002cecc T pa_hashmap_free
    000000000002d204 T pa_hashmap_get
    000000000002da2c T pa_hashmap_isempty
    000000000002d684 T pa_hashmap_iterate
    000000000002d778 T pa_hashmap_iterate_backwards
    000000000002d8dc T pa_hashmap_last
    000000000002ce74 T pa_hashmap_new
    000000000002ce0c T pa_hashmap_new_full
    000000000002cff8 T pa_hashmap_put
    000000000002d2dc T pa_hashmap_remove
    000000000002cf64 T pa_hashmap_remove_all
    000000000002d584 T pa_hashmap_remove_and_free
    000000000002d9cc T pa_hashmap_size
    000000000002d94c T pa_hashmap_steal_first
    0000000000028910 T pa_hexstr
    000000000002eab8 T pa_idxset_copy
    000000000002e7d4 T pa_idxset_first
    000000000002db68 T pa_idxset_free
    000000000002e0d4 T pa_idxset_get_by_data
    000000000002e028 T pa_idxset_get_by_index
    000000000002ea50 T pa_idxset_isempty
    000000000002e64c T pa_idxset_iterate
    000000000002db10 T pa_idxset_new
    000000000002e85c T pa_idxset_next
    000000000002dca4 T pa_idxset_put
    000000000002dc08 T pa_idxset_remove_all
    000000000002e460 T pa_idxset_remove_by_data
    000000000002e19c T pa_idxset_remove_by_index
    000000000002e540 T pa_idxset_rrobin
    000000000002e9f0 T pa_idxset_size
    000000000002e744 T pa_idxset_steal_first
    000000000002daf8 T pa_idxset_string_compare_func
    000000000002dac4 T pa_idxset_string_hash_func
    000000000002db00 T pa_idxset_trivial_compare_func
    000000000002dafc T pa_idxset_trivial_hash_func
    000000000002dabc T pa_init_i18n
    000000000003ede8 T pa_init_proplist
    0000000000028054 T pa_in_system_mode
    00000000000439c0 T pa_interleave
    000000000002f4c0 T pa_iochannel_creds_enable
    000000000002f3ac T pa_iochannel_creds_supported
    000000000002ef0c T pa_iochannel_free
    000000000002ffc0 T pa_iochannel_get_mainloop_api
    0000000000030020 T pa_iochannel_get_recv_fd
    0000000000030080 T pa_iochannel_get_send_fd
    000000000002f0b8 T pa_iochannel_is_hungup
    000000000002efe0 T pa_iochannel_is_readable
    000000000002f04c T pa_iochannel_is_writable
    000000000002ebd8 T pa_iochannel_new
    000000000002f2a0 T pa_iochannel_read
    000000000002f9dc T pa_iochannel_read_with_ancil_data
    000000000002fd5c T pa_iochannel_set_callback
    000000000002fdbc T pa_iochannel_set_noclose
    00000000000300e0 T pa_iochannel_socket_is_local
    000000000002fe2c T pa_iochannel_socket_peer_to_string
    000000000002ff00 T pa_iochannel_socket_set_rcvbuf
    000000000002ff60 T pa_iochannel_socket_set_sndbuf
    000000000002f11c T pa_iochannel_write
    000000000002f5c0 T pa_iochannel_write_with_creds
    000000000002f77c T pa_iochannel_write_with_fds
    000000000003082c T pa_ioline_close
    0000000000030d0c T pa_ioline_defer_close
    0000000000030f04 T pa_ioline_detach_iochannel
    0000000000030f88 T pa_ioline_is_drained
    0000000000030388 T pa_ioline_new
    0000000000030ddc T pa_ioline_printf
    000000000003091c T pa_ioline_puts
    0000000000030778 T pa_ioline_ref
    0000000000030bac T pa_ioline_set_callback
    0000000000030c5c T pa_ioline_set_drain_callback
    0000000000030670 T pa_ioline_unref
    0000000000031b60 T pa_ip_acl_check
    0000000000031a70 T pa_ip_acl_free
    000000000003171c T pa_ip_acl_new
    00000000000250c8 T pa_is_fd_nonblock
    000000000003c6a0 T pa_is_ip6_address
    000000000003c600 T pa_is_ip_address
    0000000000028434 T pa_is_path_absolute
    0000000000016218 T pa_json_object_equal
    0000000000015e74 T pa_json_object_free
    0000000000016140 T pa_json_object_get_array_length
    00000000000161ac T pa_json_object_get_array_member
    0000000000015ffc T pa_json_object_get_bool
    0000000000015f90 T pa_json_object_get_double
    0000000000015f24 T pa_json_object_get_int
    00000000000160d4 T pa_json_object_get_object_member
    0000000000016068 T pa_json_object_get_string
    0000000000015f1c T pa_json_object_get_type
    0000000000015318 T pa_json_parse
    00000000000187d0 T pa_locale_to_utf8
    0000000000026f34 T pa_lock_fd
    0000000000027118 T pa_lock_lockfile
    00000000000336ac T pa_log_level
    0000000000032b88 T pa_log_level_meta
    0000000000033674 T pa_log_levelv
    0000000000032e8c T pa_log_levelv_meta
    000000000003382c T pa_log_parse_target
    0000000000033728 T pa_log_ratelimit
    0000000000032df8 T pa_log_set_flags
    0000000000032ad0 T pa_log_set_ident
    0000000000032b1c T pa_log_set_level
    0000000000032e84 T pa_log_set_show_backtrace
    0000000000032e88 T pa_log_set_skip_backtrace
    0000000000032bec T pa_log_set_target
    00000000000337b8 T pa_log_target_free
    0000000000033770 T pa_log_target_new
    00000000000339a4 T pa_log_target_to_string
    00000000000258f0 T pa_loop_read
    0000000000025a3c T pa_loop_write
    0000000000028080 T pa_machine_id
    00000000000250c0 T pa_make_fd_block
    000000000002516c T pa_make_fd_cloexec
    0000000000024fac T pa_make_fd_nonblock
    0000000000028dd4 T pa_make_path_absolute
    0000000000025268 T pa_make_secure_dir
    00000000000256a4 T pa_make_secure_parent_dir
    00000000000481f0 T pa_make_socket_low_delay
    00000000000482a4 T pa_make_tcp_socket_low_delay
    00000000000483c4 T pa_make_udp_socket_low_delay
    00000000000261f0 T pa_match
    000000000002ae48 T pa_maybe_prefix_path
    00000000000343a8 T pa_mcalign_csize
    0000000000034498 T pa_mcalign_flush
    0000000000033cac T pa_mcalign_free
    0000000000033c14 T pa_mcalign_new
    00000000000340a4 T pa_mcalign_pop
    0000000000033d30 T pa_mcalign_push
    00000000000355f8 T pa_memblock_acquire
    00000000000356b8 T pa_memblock_acquire_chunk
    00000000000358d0 T pa_memblock_get_length
    0000000000035978 T pa_memblock_get_pool
    0000000000035278 T pa_memblock_is_ours
    0000000000035328 T pa_memblock_is_read_only
    00000000000353e8 T pa_memblock_is_silence
    0000000000034520 T pa_memblock_new
    0000000000034e1c T pa_memblock_new_fixed
    0000000000034698 T pa_memblock_new_pool
    0000000000035024 T pa_memblock_new_user
    000000000003ae80 T pa_memblockq_apply_attr
    000000000003a1c4 T pa_memblockq_drop
    000000000003a84c T pa_memblockq_flush_read
    000000000003a6e0 T pa_memblockq_flush_write
    0000000000039140 T pa_memblockq_free
    000000000003b02c T pa_memblockq_get_attr
    000000000003b4d4 T pa_memblockq_get_base
    0000000000039c80 T pa_memblockq_get_length
    000000000003acf4 T pa_memblockq_get_maxlength
    000000000003a9f8 T pa_memblockq_get_maxrewind
    000000000003a998 T pa_memblockq_get_minreq
    000000000003b474 T pa_memblockq_get_nblocks
    000000000003ad54 T pa_memblockq_get_prebuf
    000000000003aa58 T pa_memblockq_get_read_index
    000000000003a938 T pa_memblockq_get_tlength
    000000000003aab8 T pa_memblockq_get_write_index
    000000000003b40c T pa_memblockq_is_empty
    000000000003a4dc T pa_memblockq_is_readable
    0000000000038b10 T pa_memblockq_new
    0000000000039ce8 T pa_memblockq_peek
    0000000000039f3c T pa_memblockq_peek_fixed_size
    000000000003adb4 T pa_memblockq_pop_missing
    0000000000039be4 T pa_memblockq_prebuf_active
    000000000003ac94 T pa_memblockq_prebuf_disable
    000000000003a7e0 T pa_memblockq_prebuf_force
    00000000000392ec T pa_memblockq_push
    000000000003ab18 T pa_memblockq_push_align
    000000000003a41c T pa_memblockq_rewind
    000000000003a584 T pa_memblockq_seek
    0000000000038d68 T pa_memblockq_set_maxlength
    00000000000390d4 T pa_memblockq_set_maxrewind
    0000000000038f28 T pa_memblockq_set_minreq
    0000000000038ffc T pa_memblockq_set_prebuf
    000000000003b368 T pa_memblockq_set_silence
    0000000000038df8 T pa_memblockq_set_tlength
    0000000000039228 T pa_memblockq_silence
    000000000003b0e0 T pa_memblockq_splice
    000000000003b27c T pa_memblockq_willneed
    0000000000035aa8 T pa_memblock_ref
    000000000003554c T pa_memblock_ref_is_one
    00000000000357b8 T pa_memblock_release
    0000000000035494 T pa_memblock_set_is_silence
    0000000000035b5c T pa_memblock_unref
    000000000003624c T pa_memblock_unref_fixed
    0000000000036634 T pa_memblock_will_need
    0000000000044418 T pa_memchunk_dump_to_file
    000000000003b908 T pa_memchunk_isset
    000000000003b55c T pa_memchunk_make_writable
    000000000003b7d0 T pa_memchunk_memcpy
    000000000003b6a4 T pa_memchunk_reset
    0000000000044598 T pa_memchunk_sine
    000000000003b708 T pa_memchunk_will_need
    000000000003804c T pa_memexport_free
    0000000000037e84 T pa_memexport_new
    00000000000381a4 T pa_memexport_process_release
    000000000003842c T pa_memexport_put
    00000000000377e8 T pa_memimport_attach_memfd
    0000000000037200 T pa_memimport_free
    0000000000037a30 T pa_memimport_get
    0000000000037058 T pa_memimport_new
    0000000000037de4 T pa_memimport_process_revoke
    0000000000034b80 T pa_mempool_block_size_max
    0000000000036f00 T pa_mempool_get_memfd_fd
    0000000000036ad0 T pa_mempool_get_shm_id
    0000000000036910 T pa_mempool_get_stat
    0000000000036cb8 T pa_mempool_is_global
    0000000000036a68 T pa_mempool_is_memfd_backed
    0000000000036d18 T pa_mempool_is_per_client
    0000000000034a08 T pa_mempool_is_remote_writable
    0000000000034b18 T pa_mempool_is_shared
    0000000000036750 T pa_mempool_new
    0000000000034be4 T pa_mempool_ref
    0000000000034a68 T pa_mempool_set_is_remote_writable
    0000000000036d80 T pa_mempool_take_memfd_fd
    0000000000036b50 T pa_mempool_unref
    0000000000036968 T pa_mempool_vacuum
    000000000003e214 T pa_memtrap_add
    000000000003e7d8 T pa_memtrap_install
    000000000003e1a8 T pa_memtrap_is_good
    000000000003e3f4 T pa_memtrap_remove
    000000000003e574 T pa_memtrap_update
    000000000001c2f0 T pa_msleep
    000000000004e840 T pa_mutex_free
    000000000004e8f0 T pa_mutex_lock
    000000000004e734 T pa_mutex_new
    000000000004e990 T pa_mutex_try_lock
    000000000004ea44 T pa_mutex_unlock
    000000000002a8e0 T pa_ncpus
    000000000002b25c T pa_nullify_stdfds
    000000000003bb44 T pa_once_begin
    000000000003bbe4 T pa_once_end
    00000000000273b4 T pa_open_cloexec
    000000000002849c T pa_open_config_file
    0000000000026bac T pa_own_uid_in_group
    000000000003c088 T pa_packet_data
    000000000003bdf4 T pa_packet_new
    000000000003bec8 T pa_packet_new_data
    000000000003bf98 T pa_packet_new_dynamic
    000000000003c170 T pa_packet_ref
    000000000003c224 T pa_packet_unref
    00000000000298b4 T pa_page_size
    0000000000025780 T pa_parent_dir
    000000000003c360 T pa_parse_address
    0000000000026270 T pa_parse_boolean
    0000000000028a54 T pa_parsehex
    000000000001b7d0 T pa_parse_sample_format
    00000000000264d4 T pa_parse_volume
    000000000001c178 T pa_path_get_filename
    000000000003d568 T pa_pdispatch_creds
    000000000003d118 T pa_pdispatch_is_pending
    000000000003c718 T pa_pdispatch_new
    000000000003cb08 T pa_pdispatch_ref
    000000000003ccb8 T pa_pdispatch_register_reply
    000000000003c808 T pa_pdispatch_run
    000000000003d1c8 T pa_pdispatch_set_drain_callback
    000000000003d628 T pa_pdispatch_take_ancil_data
    000000000003cbbc T pa_pdispatch_unref
    000000000003d2ec T pa_pdispatch_unregister_reply
    000000000003e08c T pa_pid_file_check_running
    000000000003d740 T pa_pid_file_create
    000000000003e09c T pa_pid_file_kill
    000000000003decc T pa_pid_file_remove
    000000000002aecc T pa_pipe_buf
    000000000002b09c T pa_pipe_cloexec
    00000000000175d8 T pa_proplist_clear
    000000000001762c T pa_proplist_contains
    000000000001819c T pa_proplist_copy
    00000000000182f8 T pa_proplist_equal
    0000000000016974 T pa_proplist_free
    0000000000017c38 T pa_proplist_from_string
    00000000000172cc T pa_proplist_get
    00000000000171b4 T pa_proplist_gets
    000000000003f1c8 T pa_proplist_get_stream_group
    0000000000018294 T pa_proplist_isempty
    000000000001792c T pa_proplist_iterate
    00000000000168a4 T pa_proplist_key_valid
    00000000000168d8 T pa_proplist_new
    0000000000017014 T pa_proplist_set
    0000000000016e20 T pa_proplist_setf
    0000000000016b54 T pa_proplist_setp
    00000000000169c8 T pa_proplist_sets
    0000000000018240 T pa_proplist_size
    0000000000017bf0 T pa_proplist_to_string
    000000000001794c T pa_proplist_to_string_sep
    000000000001770c T pa_proplist_unset
    00000000000177ec T pa_proplist_unset_many
    000000000001743c T pa_proplist_update
    000000000003fe3c T pa_pstream_attach_memfd_shmid
    0000000000041124 T pa_pstream_enable_memfd
    0000000000040f78 T pa_pstream_enable_shm
    00000000000412d8 T pa_pstream_get_memfd
    0000000000041230 T pa_pstream_get_shm
    0000000000040a58 T pa_pstream_is_pending
    000000000003f9c4 T pa_pstream_new
    0000000000040c74 T pa_pstream_ref
    000000000003f6a8 T pa_pstream_register_memfd_mempool
    000000000003f560 T pa_pstream_send_error
    00000000000401c4 T pa_pstream_send_memblock
    000000000003ffb4 T pa_pstream_send_packet
    00000000000403f0 T pa_pstream_send_release
    0000000000040520 T pa_pstream_send_revoke
    000000000003f60c T pa_pstream_send_simple_ack
    000000000003f2f0 T pa_pstream_send_tagstruct_with_creds
    000000000003f48c T pa_pstream_send_tagstruct_with_fds
    0000000000040650 T pa_pstream_set_die_callback
    00000000000406fc T pa_pstream_set_drain_callback
    0000000000040854 T pa_pstream_set_receive_memblock_callback
    00000000000407a8 T pa_pstream_set_receive_packet_callback
    0000000000040900 T pa_pstream_set_release_callback
    00000000000409ac T pa_pstream_set_revoke_callback
    0000000000040e1c T pa_pstream_set_srbchannel
    0000000000040d28 T pa_pstream_unlink
    0000000000040b2c T pa_pstream_unref
    00000000000427ec T pa_queue_free
    0000000000042bb8 T pa_queue_isempty
    00000000000427cc T pa_queue_new
    000000000004292c T pa_queue_pop
    0000000000042a48 T pa_queue_push
    0000000000026078 T pa_raise_priority
    0000000000042e10 T pa_random
    0000000000042c48 T pa_random_seed
    0000000000033a7c T pa_ratelimit_test
    00000000000257d0 T pa_read
    000000000002b3bc T pa_read_line_from_file
    0000000000028174 T pa_readlink
    000000000002ab98 T pa_realpath
    000000000002a808 T pa_reduce
    000000000002a900 T pa_replace
    000000000002aef0 T pa_reset_personality
    00000000000261b4 T pa_reset_priority
    0000000000029fc4 T pa_reset_sigs
    000000000002a204 T pa_reset_sigsv
    00000000000247c0 T pa_rtclock_age
    0000000000024bbc T pa_rtclock_from_wallclock
    00000000000248e0 T pa_rtclock_get
    00000000000249f8 T pa_rtclock_hrtimer
    0000000000024a90 T pa_rtclock_hrtimer_enable
    000000000001caa4 T pa_rtclock_now
    000000000002aef4 T pa_run_from_build_tree
    000000000002b474 T pa_running_in_vm
    000000000003bc9c T pa_run_once
    0000000000028f34 T pa_runtime_path
    000000000004420c T pa_sample_clamp
    000000000001bbc8 T pa_sample_format_is_be
    000000000001bb44 T pa_sample_format_is_le
    000000000001b4f8 T pa_sample_format_to_string
    000000000001ada4 T pa_sample_format_valid
    000000000001b324 T pa_sample_rate_valid
    000000000001adb0 T pa_sample_size
    000000000001ad34 T pa_sample_size_of_format
    000000000001b34c T pa_sample_spec_equal
    000000000001b2bc T pa_sample_spec_init
    000000000001b518 T pa_sample_spec_snprint
    000000000001ae84 T pa_sample_spec_valid
    000000000004f9e0 T pa_semaphore_free
    000000000004f958 T pa_semaphore_new
    000000000004fa90 T pa_semaphore_post
    000000000004fb30 T pa_semaphore_wait
    000000000002a730 T pa_session_id
    000000000002a2c0 T pa_set_env
    000000000002a3b4 T pa_set_env_and_record
    00000000000450a8 T pa_shm_attach
    00000000000452a0 T pa_shm_cleanup
    00000000000448ec T pa_shm_create_rw
    0000000000044c8c T pa_shm_free
    0000000000044eb8 T pa_shm_punch
    0000000000025c88 T pa_sig2str
    0000000000043dc0 T pa_silence_cache_done
    0000000000043d50 T pa_silence_cache_init
    0000000000043588 T pa_silence_memblock
    00000000000437b8 T pa_silence_memchunk
    0000000000043ed8 T pa_silence_memchunk_get
    0000000000043668 T pa_silence_memory
    000000000004d108 T pa_smoother_fix_now
    000000000004c9c8 T pa_smoother_free
    000000000004cec8 T pa_smoother_get
    000000000004c744 T pa_smoother_new
    000000000004d000 T pa_smoother_pause
    000000000004ca1c T pa_smoother_put
    000000000004c930 T pa_smoother_reset
    000000000004d070 T pa_smoother_resume
    000000000004cfa0 T pa_smoother_set_time_offset
    000000000004d170 T pa_smoother_translate
    000000000004e628 T pa_sndfile_dump_formats
    000000000004e4d0 T pa_sndfile_format_from_string
    000000000004e084 T pa_sndfile_init_proplist
    000000000004dd30 T pa_sndfile_read_channel_map
    000000000004e310 T pa_sndfile_readf_function
    000000000004da44 T pa_sndfile_read_sample_spec
    000000000004df00 T pa_sndfile_write_channel_map
    000000000004e3f0 T pa_sndfile_writef_function
    000000000004db88 T pa_sndfile_write_sample_spec
    00000000000292e4 T pa_snprintf
    00000000000487b4 T pa_socket_address_is_local
    00000000000460a4 T pa_socket_client_is_local
    00000000000454a8 T pa_socket_client_new_ipv4
    0000000000045c08 T pa_socket_client_new_ipv6
    0000000000045574 T pa_socket_client_new_sockaddr
    0000000000045d10 T pa_socket_client_new_string
    0000000000045868 T pa_socket_client_new_unix
    0000000000045aac T pa_socket_client_ref
    0000000000045b60 T pa_socket_client_set_callback
    000000000004594c T pa_socket_client_unref
    000000000002b028 T pa_socket_cloexec
    0000000000048870 T pa_socket_is_local
    0000000000047fb4 T pa_socket_peer_to_string
    00000000000478c8 T pa_socket_server_get_address
    0000000000046ba4 T pa_socket_server_new_ipv4
    0000000000047350 T pa_socket_server_new_ipv4_any
    00000000000471e0 T pa_socket_server_new_ipv4_loopback
    00000000000474bc T pa_socket_server_new_ipv4_string
    0000000000046e90 T pa_socket_server_new_ipv6
    0000000000047404 T pa_socket_server_new_ipv6_any
    0000000000047298 T pa_socket_server_new_ipv6_loopback
    00000000000475e8 T pa_socket_server_new_ipv6_string
    0000000000046820 T pa_socket_server_new_unix
    000000000004676c T pa_socket_server_ref
    0000000000047820 T pa_socket_server_set_callback
    0000000000047710 T pa_socket_server_unref
    000000000004848c T pa_socket_set_rcvbuf
    0000000000048548 T pa_socket_set_sndbuf
    00000000000269cc T pa_split
    0000000000026a34 T pa_split_in_place
    0000000000026aa0 T pa_split_spaces
    0000000000026b28 T pa_split_spaces_in_place
    000000000002ad24 T pa_split_spaces_strv
    0000000000025d68 T pa_sprintf_malloc
    000000000004346c T pa_srbchannel_export
    0000000000043274 T pa_srbchannel_free
    00000000000430c4 T pa_srbchannel_new
    0000000000043334 T pa_srbchannel_new_from_template
    0000000000042fe8 T pa_srbchannel_read
    00000000000434ac T pa_srbchannel_set_callback
    0000000000042f18 T pa_srbchannel_write
    0000000000028bf8 T pa_startswith
    00000000000290b4 T pa_state_path
    000000000004ed8c T pa_static_mutex_get
    000000000004fbf4 T pa_static_semaphore_get
    0000000000048920 T pa_strbuf_free
    00000000000490c8 T pa_strbuf_isempty
    0000000000048900 T pa_strbuf_new
    0000000000048f48 T pa_strbuf_printf
    0000000000048d7c T pa_strbuf_putc
    0000000000048b84 T pa_strbuf_puts
    0000000000048c84 T pa_strbuf_putsn
    00000000000489a8 T pa_strbuf_to_string
    0000000000048ae8 T pa_strbuf_to_string_free
    000000000002a4c0 T pa_str_in_list
    000000000002a56c T pa_str_in_list_spaces
    0000000000027098 T pa_strip
    000000000002701c T pa_strip_nl
    0000000000025f60 T pa_strlcpy
    000000000004959c T pa_strlist_data
    000000000004938c T pa_strlist_free
    000000000004953c T pa_strlist_next
    000000000004945c T pa_strlist_parse
    00000000000493b8 T pa_strlist_pop
    0000000000049130 T pa_strlist_prepend
    0000000000049248 T pa_strlist_remove
    0000000000049510 T pa_strlist_reverse
    00000000000491d8 T pa_strlist_to_string
    000000000001f34c T pa_sw_cvolume_divide
    000000000001f560 T pa_sw_cvolume_divide_scalar
    000000000001ee00 T pa_sw_cvolume_multiply
    000000000001f0f0 T pa_sw_cvolume_multiply_scalar
    000000000001e360 T pa_sw_cvolume_snprint_dB
    000000000001dd6c T pa_sw_volume_divide
    000000000001de5c T pa_sw_volume_from_dB
    000000000001dec0 T pa_sw_volume_from_linear
    000000000001dc8c T pa_sw_volume_multiply
    000000000001eb70 T pa_sw_volume_snprint_dB
    000000000001df00 T pa_sw_volume_to_dB
    000000000001dfa0 T pa_sw_volume_to_linear
    000000000004ac4c T pa_tagstruct_data
    000000000004abe0 T pa_tagstruct_eof
    0000000000049710 T pa_tagstruct_free
    000000000004be18 T pa_tagstruct_get
    000000000004aad4 T pa_tagstruct_get_arbitrary
    000000000004acf4 T pa_tagstruct_get_boolean
    000000000004b24c T pa_tagstruct_get_channel_map
    000000000004b37c T pa_tagstruct_get_cvolume
    000000000004b7e4 T pa_tagstruct_get_format_info
    000000000004b5b8 T pa_tagstruct_get_proplist
    000000000004a690 T pa_tagstruct_gets
    000000000004b12c T pa_tagstruct_gets64
    000000000004a99c T pa_tagstruct_get_sample_spec
    000000000004ade0 T pa_tagstruct_get_timeval
    000000000004a7b8 T pa_tagstruct_getu32
    000000000004b00c T pa_tagstruct_getu64
    000000000004a8b0 T pa_tagstruct_getu8
    000000000004aeec T pa_tagstruct_get_usec
    000000000004b4c0 T pa_tagstruct_get_volume
    00000000000495f8 T pa_tagstruct_new
    000000000004965c T pa_tagstruct_new_fixed
    000000000004b8f4 T pa_tagstruct_put
    0000000000049b38 T pa_tagstruct_put_arbitrary
    0000000000049c64 T pa_tagstruct_put_boolean
    000000000004a084 T pa_tagstruct_put_channel_map
    000000000004a1bc T pa_tagstruct_put_cvolume
    000000000004a578 T pa_tagstruct_put_format_info
    000000000004a3b0 T pa_tagstruct_put_proplist
    00000000000497c8 T pa_tagstruct_puts
    0000000000049fa0 T pa_tagstruct_puts64
    00000000000499fc T pa_tagstruct_put_sample_spec
    0000000000049cf0 T pa_tagstruct_put_timeval
    00000000000498a8 T pa_tagstruct_putu32
    0000000000049ebc T pa_tagstruct_putu64
    0000000000049958 T pa_tagstruct_putu8
    0000000000049dd8 T pa_tagstruct_put_usec
    000000000004a300 T pa_tagstruct_put_volume
    000000000004f2ac T pa_thread_free
    000000000004f44c T pa_thread_free_nojoin
    000000000004f5e0 T pa_thread_get_data
    000000000004f72c T pa_thread_get_name
    000000000004f1fc T pa_thread_is_running
    000000000004f380 T pa_thread_join
    000000000001c348 T pa_thread_make_realtime
    000000000004f004 T pa_thread_new
    000000000004f4c0 T pa_thread_self
    000000000004f640 T pa_thread_set_data
    000000000004f6a0 T pa_thread_set_name
    000000000004f7d8 T pa_thread_yield
    0000000000024d28 T pa_timespec_load
    0000000000024d64 T pa_timespec_store
    000000000001c868 T pa_timeval_add
    000000000001c74c T pa_timeval_age
    000000000001c678 T pa_timeval_cmp
    000000000001c580 T pa_timeval_diff
    000000000001ca84 T pa_timeval_load
    0000000000024e14 T pa_timeval_rtstore
    000000000001ca00 T pa_timeval_store
    000000000001c938 T pa_timeval_sub
    000000000004ef50 T pa_tls_free
    000000000004eef0 T pa_tls_get
    000000000004f83c T pa_tls_new
    000000000004f880 T pa_tls_set
    000000000004d3cc T pa_tokenizer_free
    000000000004d420 T pa_tokenizer_get
    000000000004d22c T pa_tokenizer_new
    0000000000029524 T pa_truncate_utf8
    0000000000026dac T pa_uid_in_group
    000000000002a758 T pa_uname_string
    0000000000029d64 T pa_unblock_sigs
    0000000000029f5c T pa_unblock_sigsv
    000000000002ab48 T pa_unescape
    0000000000048604 T pa_unix_socket_is_stale
    0000000000048720 T pa_unix_socket_remove_stale
    0000000000027430 T pa_unlock_lockfile
    000000000002a360 T pa_unset_env
    000000000002a478 T pa_unset_env_recorded
    000000000001b1c4 T pa_usec_to_bytes
    000000000004438c T pa_usec_to_bytes_round_up
    000000000001861c T pa_utf8_filter
    0000000000018698 T pa_utf8_to_locale
    000000000001842c T pa_utf8_valid
    000000000001e260 T pa_volume_snprint
    000000000001e9c4 T pa_volume_snprint_verbose
    000000000002940c T pa_vsnprintf
    0000000000025e88 T pa_vsprintf_malloc
    0000000000029604 T pa_will_need
    000000000002582c T pa_write
    0000000000016864 T pa_xfree
    000000000002ace4 T pa_xfreev
    00000000000164f4 T pa_xmalloc
    00000000000165d4 T pa_xmalloc0
    0000000000016738 T pa_xmemdup
    000000000001668c T pa_xrealloc
    0000000000016788 T pa_xstrdup
    00000000000167dc T pa_xstrndup
    0000000000064a50 D pretty_table
    000000000002cc00 T st_13linear2alaw
    000000000002cd08 T st_14linear2ulaw
    000000000002ccbc T st_alaw2linear16
    000000000002cdd0 T st_ulaw2linear16
    00000000000648b8 D table
  + app/src/main/lib/arm64-v8a/libpulsecore-13.0.so
    0000000000067dd4 T av_build_filter
    0000000000068290 T av_resample
    0000000000068240 T av_resample_close
    000000000006826c T av_resample_compensate
    0000000000068110 T av_resample_init
    000000000001503c T biquad_set
    0000000000086390 A __bss_end__
    0000000000086390 A _bss_end__
    0000000000086298 A __bss_start
    0000000000086298 A __bss_start__
    0000000000086298 A _edata
    00000000000688f4 T __emutls_get_address
    0000000000068a4c T __emutls_register_common
    0000000000086390 A __end__
    0000000000086390 A _end
    00000000000151e0 T lr4_process_float32
    00000000000152a8 T lr4_process_s16
    00000000000151b0 T lr4_set
    0000000000015ecc T pa_asyncmsgq_dispatch
    00000000000164b0 T pa_asyncmsgq_dispatching
    0000000000015be0 T pa_asyncmsgq_done
    0000000000016328 T pa_asyncmsgq_flush
    0000000000015a10 T pa_asyncmsgq_get
    000000000001539c T pa_asyncmsgq_new
    00000000000156a4 T pa_asyncmsgq_post
    0000000000015f3c T pa_asyncmsgq_process_one
    0000000000016178 T pa_asyncmsgq_read_after_poll
    000000000001610c T pa_asyncmsgq_read_before_poll
    00000000000160a0 T pa_asyncmsgq_read_fd
    0000000000015444 T pa_asyncmsgq_ref
    000000000001586c T pa_asyncmsgq_send
    00000000000154bc T pa_asyncmsgq_unref
    0000000000015d54 T pa_asyncmsgq_wait_for
    00000000000162bc T pa_asyncmsgq_write_after_poll
    0000000000016250 T pa_asyncmsgq_write_before_poll
    00000000000161e4 T pa_asyncmsgq_write_fd
    0000000000016644 T pa_asyncq_free
    0000000000016578 T pa_asyncq_new
    0000000000016838 T pa_asyncq_pop
    0000000000016c8c T pa_asyncq_post
    000000000001694c T pa_asyncq_push
    0000000000016f6c T pa_asyncq_read_after_poll
    0000000000016ed0 T pa_asyncq_read_before_poll
    0000000000016e70 T pa_asyncq_read_fd
    00000000000170b8 T pa_asyncq_write_after_poll
    000000000001702c T pa_asyncq_write_before_poll
    0000000000016fcc T pa_asyncq_write_fd
    0000000000017520 T pa_auth_cookie_create
    000000000001715c T pa_auth_cookie_get
    0000000000017720 T pa_auth_cookie_read
    0000000000017350 T pa_auth_cookie_ref
    0000000000017404 T pa_auth_cookie_unref
    00000000000224b0 T pa_available_to_string
    000000000002337c T pa_card_add_profile
    0000000000022e14 T pa_card_choose_initial_profile
    000000000002319c T pa_card_free
    00000000000200c4 T pa_card_list_to_string
    0000000000022ab0 T pa_card_new
    0000000000022a24 T pa_card_new_data_done
    00000000000227dc T pa_card_new_data_init
    0000000000022934 T pa_card_new_data_set_name
    00000000000229b4 T pa_card_new_data_set_preferred_port
    00000000000225ac T pa_card_profile_free
    000000000002250c T pa_card_profile_new
    0000000000022638 T pa_card_profile_set_available
    0000000000023090 T pa_card_put
    0000000000023734 T pa_card_set_preferred_port
    000000000002348c T pa_card_set_profile
    0000000000023868 T pa_card_suspend
    000000000001819c T pa_cli_command_execute
    0000000000017e68 T pa_cli_command_execute_file
    0000000000018048 T pa_cli_command_execute_file_stream
    0000000000018040 T pa_cli_command_execute_line
    0000000000017804 T pa_cli_command_execute_line_stateful
    0000000000021f64 T pa_client_free
    0000000000022144 T pa_client_kill
    000000000001ff68 T pa_client_list_to_string
    0000000000021d3c T pa_client_new
    0000000000021cdc T pa_client_new_data_done
    0000000000021c60 T pa_client_new_data_init
    000000000002239c T pa_client_send_event
    00000000000221d8 T pa_client_set_name
    000000000002230c T pa_client_update_proplist
    0000000000039b08 T pa_convert_func_init_sse
    00000000000262b4 T pa_core_check_idle
    0000000000025954 T pa_core_check_type
    0000000000026cb4 T pa_core_exit
    0000000000026d38 T pa_core_maybe_vacuum
    0000000000025970 T pa_core_new
    0000000000026b34 T pa_core_rttime_new
    0000000000026e68 T pa_core_rttime_restart
    00000000000263f4 T pa_core_set_configured_default_sink
    0000000000026654 T pa_core_set_configured_default_source
    0000000000026a90 T pa_core_set_exit_idle_time
    000000000006f5b0 R pa_core_type_id
    0000000000026504 T pa_core_update_default_sink
    0000000000026764 T pa_core_update_default_source
    0000000000035d20 T pa_cpu_get_arm_flags
    0000000000035d2c T pa_cpu_get_x86_flags
    0000000000035ca8 T pa_cpu_init
    0000000000035d24 T pa_cpu_init_arm
    0000000000035d38 T pa_cpu_init_orc
    0000000000035d30 T pa_cpu_init_x86
    0000000000067998 T pa_database_clear
    0000000000067410 T pa_database_close
    0000000000067a60 T pa_database_first
    00000000000675fc T pa_database_get
    0000000000067b84 T pa_database_next
    0000000000067040 T pa_database_open
    0000000000067718 T pa_database_set
    0000000000067a00 T pa_database_size
    0000000000067498 T pa_database_sync
    00000000000678f8 T pa_database_unset
    0000000000066fcc T pa_datum_free
    000000000004525c T pa_device_init_description
    00000000000453bc T pa_device_init_icon
    00000000000456b4 T pa_device_init_intended_roles
    00000000000469dc T pa_device_init_priority
    0000000000051ea4 T pa_device_port_check_type
    0000000000052800 T pa_device_port_find_best
    0000000000052310 T pa_device_port_new
    00000000000520e4 T pa_device_port_new_data_done
    0000000000051ec0 T pa_device_port_new_data_init
    0000000000052024 T pa_device_port_new_data_set_available
    0000000000051fa4 T pa_device_port_new_data_set_description
    0000000000052084 T pa_device_port_new_data_set_direction
    0000000000051f24 T pa_device_port_new_data_set_name
    0000000000052208 T pa_device_port_set_available
    0000000000052684 T pa_device_port_set_latency_offset
    0000000000052158 T pa_device_port_set_preferred_profile
    000000000007c618 R pa_device_port_type_id
    0000000000021b6c T pa_full_status_string
    0000000000039c00 T pa_get_convert_from_float32ne_function
    0000000000039de8 T pa_get_convert_from_s16ne_function
    0000000000039b0c T pa_get_convert_to_float32ne_function
    0000000000039cf4 T pa_get_convert_to_s16ne_function
    000000000002cfd0 T pa_get_init_remap_func
    000000000003495c T pa_get_mix_func
    00000000000338a8 T pa_get_volume_func
    0000000000027864 T pa_hook_connect
    0000000000027634 T pa_hook_done
    0000000000027a78 T pa_hook_fire
    00000000000275d0 T pa_hook_init
    0000000000027c74 T pa_hook_is_firing
    00000000000279a4 T pa_hook_slot_free
    000000000002ca20 T pa_init_remap_func
    0000000000014a0c T pa_lfe_filter_free
    00000000000147ec T pa_lfe_filter_new
    0000000000014ae0 T pa_lfe_filter_process
    0000000000014ad8 T pa_lfe_filter_reset
    0000000000014e90 T pa_lfe_filter_rewind
    000000000001488c T pa_lfe_filter_update_rate
    0000000000027cdc T pa_load_sym
    000000000002b544 T pa_memblockq_sink_input_new
    000000000002c24c T pa_memblockq_sink_input_set_queue
    00000000000270ac T pa_message_handler_register
    0000000000027390 T pa_message_handler_send_message
    00000000000274f4 T pa_message_handler_set_description
    0000000000027294 T pa_message_handler_unregister
    00000000000346c4 T pa_mix
    0000000000033f28 T pa_mix_func_init
    00000000000282c4 T pa_modargs_append
    0000000000028248 T pa_modargs_free
    0000000000028898 T pa_modargs_get_alternate_sample_rate
    0000000000028990 T pa_modargs_get_channel_map
    0000000000028dec T pa_modargs_get_proplist
    0000000000028aa0 T pa_modargs_get_resample_method
    000000000002863c T pa_modargs_get_sample_rate
    0000000000028734 T pa_modargs_get_sample_spec
    0000000000028b7c T pa_modargs_get_sample_spec_and_channel_map
    00000000000282cc T pa_modargs_get_value
    0000000000028490 T pa_modargs_get_value_boolean
    0000000000028534 T pa_modargs_get_value_double
    000000000002840c T pa_modargs_get_value_s32
    0000000000028388 T pa_modargs_get_value_u32
    00000000000285b8 T pa_modargs_get_value_volume
    0000000000028f34 T pa_modargs_iterate
    0000000000027e10 T pa_modargs_new
    0000000000029420 T pa_modinfo_free
    0000000000029200 T pa_modinfo_get_by_handle
    000000000002935c T pa_modinfo_get_by_name
    00000000000294b4 T pa_module_exists
    000000000002a64c T pa_module_get_n_used
    0000000000029758 T pa_module_hook_connect
    000000000001fde8 T pa_module_list_to_string
    0000000000029850 T pa_module_load
    0000000000029d8c T pa_module_unload
    000000000002a06c T pa_module_unload_all
    0000000000029fa8 T pa_module_unload_by_index
    000000000002a334 T pa_module_unload_request
    000000000002a564 T pa_module_unload_request_by_index
    000000000002a6c0 T pa_module_update_proplist
    000000000002a758 T pa_msgobject_check_type
    000000000002a774 T pa_msgobject_new_internal
    000000000007104e R pa_msgobject_type_id
    000000000002b018 T pa_namereg_get
    000000000002a968 T pa_namereg_is_valid_name
    000000000002aa48 T pa_namereg_is_valid_name_or_wildcard
    000000000002ab6c T pa_namereg_make_valid_name
    000000000002ac54 T pa_namereg_register
    000000000002af24 T pa_namereg_unregister
    000000000002b39c T pa_object_check_type
    000000000002b234 T pa_object_new_internal
    000000000002b400 T pa_object_ref
    0000000000071405 R pa_object_type_id
    000000000002b47c T pa_object_unref
    00000000000302e8 T pa_parse_resample_method
    0000000000052990 T pa_play_file
    000000000002c3e4 T pa_play_memblockq
    000000000002c638 T pa_play_memchunk
    000000000002cfe8 T pa_remap_func_init
    000000000002de9c T pa_remap_func_init_mmx
    000000000002dea0 T pa_remap_func_init_sse
    00000000000302a0 T pa_resample_method_supported
    000000000002fa40 T pa_resample_method_to_string
    0000000000030f24 T pa_resampler_ffmpeg_init
    000000000002fa60 T pa_resampler_free
    00000000000300e0 T pa_resampler_get_method
    0000000000030140 T pa_resampler_input_channel_map
    0000000000030198 T pa_resampler_input_sample_spec
    000000000002fe6c T pa_resampler_max_block_size
    000000000002dea4 T pa_resampler_new
    00000000000301f0 T pa_resampler_output_channel_map
    0000000000030248 T pa_resampler_output_sample_spec
    00000000000313a8 T pa_resampler_peaks_init
    000000000002fd3c T pa_resampler_request
    000000000002ffc0 T pa_resampler_reset
    000000000002fdc0 T pa_resampler_result
    000000000003004c T pa_resampler_rewind
    00000000000303bc T pa_resampler_run
    000000000002fb34 T pa_resampler_set_input_rate
    000000000002fc24 T pa_resampler_set_output_rate
    0000000000031bfc T pa_resampler_trivial_init
    0000000000031fb0 T pa_rtpoll_free
    0000000000032a3c T pa_rtpoll_item_free
    0000000000032ac4 T pa_rtpoll_item_get_pollfd
    0000000000032dbc T pa_rtpoll_item_get_userdata
    00000000000328c0 T pa_rtpoll_item_new
    0000000000033024 T pa_rtpoll_item_new_asyncmsgq_read
    0000000000033374 T pa_rtpoll_item_new_asyncmsgq_write
    0000000000032e1c T pa_rtpoll_item_new_fdsem
    0000000000032c04 T pa_rtpoll_item_set_after_callback
    0000000000032b58 T pa_rtpoll_item_set_before_callback
    0000000000032d5c T pa_rtpoll_item_set_userdata
    0000000000032cb0 T pa_rtpoll_item_set_work_callback
    0000000000031f68 T pa_rtpoll_new
    0000000000032178 T pa_rtpoll_run
    00000000000326f4 T pa_rtpoll_set_timer_absolute
    0000000000032854 T pa_rtpoll_set_timer_disabled
    0000000000032770 T pa_rtpoll_set_timer_relative
    00000000000335d0 T pa_rtpoll_timer_elapsed
    0000000000024d7c T pa_scache_add_directory_lazy
    0000000000023f2c T pa_scache_add_file
    00000000000240a0 T pa_scache_add_file_lazy
    00000000000239ec T pa_scache_add_item
    0000000000024554 T pa_scache_free_all
    0000000000024b08 T pa_scache_get_id_by_name
    0000000000024a54 T pa_scache_get_name_by_id
    0000000000021874 T pa_scache_list_to_string
    00000000000245e4 T pa_scache_play_item
    0000000000024948 T pa_scache_play_item_by_name
    0000000000024348 T pa_scache_remove_item
    0000000000024bbc T pa_scache_total_size
    0000000000024c78 T pa_scache_unload_unused
    0000000000035f7c T pa_sconv_s16be_from_float32ne
    0000000000036350 T pa_sconv_s16be_from_float32re
    0000000000035d40 T pa_sconv_s16be_to_float32ne
    0000000000036138 T pa_sconv_s16be_to_float32re
    0000000000037e2c T pa_sconv_s16le_from_float32ne
    000000000003823c T pa_sconv_s16le_from_float32re
    0000000000037be8 T pa_sconv_s16le_to_float32ne
    0000000000037fdc T pa_sconv_s16le_to_float32re
    0000000000037a18 T pa_sconv_s24_32be_from_float32ne
    0000000000037afc T pa_sconv_s24_32be_from_float32re
    00000000000375f4 T pa_sconv_s24_32be_from_s16ne
    00000000000376f8 T pa_sconv_s24_32be_from_s16re
    0000000000037828 T pa_sconv_s24_32be_to_float32ne
    000000000003794c T pa_sconv_s24_32be_to_float32re
    0000000000037390 T pa_sconv_s24_32be_to_s16ne
    00000000000374c4 T pa_sconv_s24_32be_to_s16re
    0000000000039940 T pa_sconv_s24_32le_from_float32ne
    0000000000039a20 T pa_sconv_s24_32le_from_float32re
    00000000000394b8 T pa_sconv_s24_32le_from_s16ne
    00000000000395c4 T pa_sconv_s24_32le_from_s16re
    00000000000396cc T pa_sconv_s24_32le_to_float32ne
    00000000000397f8 T pa_sconv_s24_32le_to_float32re
    000000000003926c T pa_sconv_s24_32le_to_s16ne
    0000000000039378 T pa_sconv_s24_32le_to_s16re
    00000000000370c0 T pa_sconv_s24be_from_float32ne
    0000000000037294 T pa_sconv_s24be_from_float32re
    0000000000036af8 T pa_sconv_s24be_from_s16ne
    0000000000036d8c T pa_sconv_s24be_from_s16re
    0000000000036ed8 T pa_sconv_s24be_to_float32ne
    00000000000371b4 T pa_sconv_s24be_to_float32re
    000000000003699c T pa_sconv_s24be_to_s16ne
    0000000000036c50 T pa_sconv_s24be_to_s16re
    0000000000038f90 T pa_sconv_s24le_from_float32ne
    000000000003916c T pa_sconv_s24le_from_float32re
    00000000000389b8 T pa_sconv_s24le_from_s16ne
    0000000000038c5c T pa_sconv_s24le_from_s16re
    0000000000038da4 T pa_sconv_s24le_to_float32ne
    0000000000039088 T pa_sconv_s24le_to_float32re
    0000000000038858 T pa_sconv_s24le_to_s16ne
    0000000000038b10 T pa_sconv_s24le_to_s16re
    000000000003605c T pa_sconv_s32be_from_float32ne
    0000000000036438 T pa_sconv_s32be_from_float32re
    0000000000036774 T pa_sconv_s32be_from_s16ne
    0000000000036878 T pa_sconv_s32be_from_s16re
    0000000000035e60 T pa_sconv_s32be_to_float32ne
    0000000000036288 T pa_sconv_s32be_to_float32re
    000000000003651c T pa_sconv_s32be_to_s16ne
    0000000000036650 T pa_sconv_s32be_to_s16re
    0000000000037f04 T pa_sconv_s32le_from_float32ne
    000000000003831c T pa_sconv_s32le_from_float32re
    0000000000038648 T pa_sconv_s32le_from_s16ne
    0000000000038754 T pa_sconv_s32le_from_s16re
    0000000000037d0c T pa_sconv_s32le_to_float32ne
    00000000000380fc T pa_sconv_s32le_to_float32re
    00000000000383fc T pa_sconv_s32le_to_s16ne
    0000000000038508 T pa_sconv_s32le_to_s16re
    0000000000039c78 T pa_set_convert_from_float32ne_function
    0000000000039e60 T pa_set_convert_from_s16ne_function
    0000000000039b84 T pa_set_convert_to_float32ne_function
    0000000000039d6c T pa_set_convert_to_s16ne_function
    000000000002cfdc T pa_set_init_remap_func
    00000000000349d4 T pa_set_mix_func
    000000000002c924 T pa_set_remap_func
    000000000002c830 T pa_setup_remap_arrange
    0000000000033920 T pa_set_volume_func
    000000000003b21c T pa_shared_dump
    000000000003aec4 T pa_shared_get
    000000000003b114 T pa_shared_remove
    000000000003b310 T pa_shared_replace
    000000000003afa8 T pa_shared_set
    000000000004f310 T pa_sink_attach_within_thread
    0000000000050e74 T pa_sink_check_format
    0000000000050fbc T pa_sink_check_formats
    000000000004e010 T pa_sink_check_suspend
    0000000000044194 T pa_sink_check_type
    000000000004f198 T pa_sink_detach_within_thread
    0000000000047030 T pa_sink_enable_decibel_volume
    000000000004b89c T pa_sink_enter_passthrough
    000000000004b7c8 T pa_sink_flat_volume_enabled
    0000000000050118 T pa_sink_get_fixed_latency
    0000000000050d14 T pa_sink_get_formats
    000000000004b3c4 T pa_sink_get_latency
    000000000004fc9c T pa_sink_get_latency_range
    000000000004b5d8 T pa_sink_get_latency_within_thread
    0000000000047c10 T pa_sink_get_master
    0000000000050628 T pa_sink_get_max_request
    000000000005046c T pa_sink_get_max_rewind
    000000000004d824 T pa_sink_get_mute
    000000000004f488 T pa_sink_get_requested_latency
    000000000004e684 T pa_sink_get_requested_latency_within_thread
    000000000004b9a8 T pa_sink_get_volume
    0000000000040414 T pa_sink_input_add_volume_factor
    0000000000044058 T pa_sink_input_attach
    000000000003b430 T pa_sink_input_check_type
    00000000000416fc T pa_sink_input_cork
    0000000000044114 T pa_sink_input_detach
    000000000003eaa8 T pa_sink_input_drop
    00000000000434d4 T pa_sink_input_fail_move
    000000000004272c T pa_sink_input_finish_move
    000000000003e184 T pa_sink_input_get_latency
    000000000003f1e0 T pa_sink_input_get_max_request
    000000000003f0b0 T pa_sink_input_get_max_rewind
    000000000003fa40 T pa_sink_input_get_requested_latency
    0000000000041cec T pa_sink_input_get_resample_method
    0000000000043ed8 T pa_sink_input_get_silence
    0000000000040c60 T pa_sink_input_get_volume
    000000000003d940 T pa_sink_input_is_passthrough
    0000000000040b54 T pa_sink_input_is_volume_readable
    000000000003e03c T pa_sink_input_kill
    00000000000213a4 T pa_sink_input_list_to_string
    0000000000041dec T pa_sink_input_may_move
    0000000000041f74 T pa_sink_input_may_move_to
    0000000000043690 T pa_sink_input_move_to
    000000000003bf04 T pa_sink_input_new
    000000000003b884 T pa_sink_input_new_data_add_volume_factor
    000000000003ba0c T pa_sink_input_new_data_add_volume_factor_sink
    000000000003be4c T pa_sink_input_new_data_done
    000000000003b44c T pa_sink_input_new_data_init
    000000000003b710 T pa_sink_input_new_data_is_passthrough
    000000000003b65c T pa_sink_input_new_data_set_channel_map
    000000000003bd5c T pa_sink_input_new_data_set_formats
    000000000003bb94 T pa_sink_input_new_data_set_muted
    000000000003b5d4 T pa_sink_input_new_data_set_sample_spec
    000000000003bc08 T pa_sink_input_new_data_set_sink
    000000000003b798 T pa_sink_input_new_data_set_volume
    000000000003e3a4 T pa_sink_input_peek
    000000000003d19c T pa_sink_input_process_msg
    000000000003edc4 T pa_sink_input_process_rewind
    000000000003ec84 T pa_sink_input_process_underrun
    000000000003da1c T pa_sink_input_put
    0000000000040844 T pa_sink_input_remove_volume_factor
    0000000000043b14 T pa_sink_input_request_rewind
    0000000000043da4 T pa_sink_input_safe_to_remove
    0000000000042bf4 T pa_sink_input_send_event
    0000000000040e40 T pa_sink_input_set_mute
    0000000000041108 T pa_sink_input_set_property
    00000000000412d8 T pa_sink_input_set_property_arbitrary
    0000000000041aa8 T pa_sink_input_set_rate
    0000000000040260 T pa_sink_input_set_reference_ratio
    000000000003f81c T pa_sink_input_set_requested_latency
    000000000003f6cc T pa_sink_input_set_requested_latency_within_thread
    000000000004392c T pa_sink_input_set_state_within_thread
    000000000003fc04 T pa_sink_input_set_volume
    000000000004008c T pa_sink_input_set_volume_direct
    00000000000422dc T pa_sink_input_start_move
    00000000000760b7 R pa_sink_input_type_id
    000000000003d420 T pa_sink_input_unlink
    000000000003f4f4 T pa_sink_input_update_max_request
    000000000003f310 T pa_sink_input_update_max_rewind
    0000000000041494 T pa_sink_input_update_proplist
    0000000000042d94 T pa_sink_input_update_resampler
    000000000004e210 T pa_sink_invalidate_requested_latency
    0000000000047b44 T pa_sink_is_filter
    000000000004b2d4 T pa_sink_is_passthrough
    000000000004c168 T pa_sink_leave_passthrough
    000000000004deb0 T pa_sink_linked_by
    00000000000204e0 T pa_sink_list_to_string
    0000000000049030 T pa_sink_move_all_fail
    0000000000048de0 T pa_sink_move_all_finish
    0000000000048b94 T pa_sink_move_all_start
    000000000004da14 T pa_sink_mute_changed
    0000000000044750 T pa_sink_new
    00000000000446c8 T pa_sink_new_data_done
    00000000000441b0 T pa_sink_new_data_init
    00000000000444b8 T pa_sink_new_data_set_alternate_sample_rate
    0000000000044404 T pa_sink_new_data_set_channel_map
    00000000000445d4 T pa_sink_new_data_set_muted
    00000000000442fc T pa_sink_new_data_set_name
    0000000000044648 T pa_sink_new_data_set_port
    000000000004437c T pa_sink_new_data_set_sample_spec
    0000000000044524 T pa_sink_new_data_set_volume
    00000000000491b0 T pa_sink_process_input_underruns
    0000000000045a5c T pa_sink_process_msg
    00000000000493bc T pa_sink_process_rewind
    0000000000047338 T pa_sink_put
    000000000004af4c T pa_sink_reconfigure
    00000000000496e8 T pa_sink_render
    000000000004ac40 T pa_sink_render_full
    000000000004a420 T pa_sink_render_into
    000000000004a8ec T pa_sink_render_into_full
    000000000004e380 T pa_sink_request_rewind
    0000000000048208 T pa_sink_set_asyncmsgq
    000000000004dcd8 T pa_sink_set_description
    000000000004fee8 T pa_sink_set_fixed_latency
    000000000004eb18 T pa_sink_set_fixed_latency_within_thread
    0000000000050dc0 T pa_sink_set_formats
    0000000000047230 T pa_sink_set_get_mute_callback
    0000000000046ebc T pa_sink_set_get_volume_callback
    000000000004fa1c T pa_sink_set_latency_range
    000000000004e888 T pa_sink_set_latency_range_within_thread
    000000000004f84c T pa_sink_set_max_request
    000000000004eec0 T pa_sink_set_max_request_within_thread
    000000000004f67c T pa_sink_set_max_rewind
    000000000004ed60 T pa_sink_set_max_rewind_within_thread
    000000000004d588 T pa_sink_set_mute
    00000000000507e4 T pa_sink_set_port
    00000000000502e0 T pa_sink_set_port_latency_offset
    0000000000051368 T pa_sink_set_reference_volume_direct
    00000000000485b4 T pa_sink_set_rtpoll
    000000000005113c T pa_sink_set_sample_format
    0000000000051264 T pa_sink_set_sample_rate
    0000000000047290 T pa_sink_set_set_mute_callback
    0000000000046f1c T pa_sink_set_set_volume_callback
    000000000004cd38 T pa_sink_set_soft_volume
    000000000004bc40 T pa_sink_set_volume
    0000000000047140 T pa_sink_set_write_volume_callback
    000000000004e1b0 T pa_sink_state_to_string
    00000000000489d4 T pa_sink_suspend
    000000000004f010 T pa_sink_suspend_all
    0000000000078a46 R pa_sink_type_id
    0000000000046c58 T pa_sink_unlink
    0000000000048328 T pa_sink_update_flags
    000000000004db88 T pa_sink_update_proplist
    00000000000486e0 T pa_sink_update_status
    000000000004d000 T pa_sink_update_volume_and_mute
    0000000000048850 T pa_sink_used_by
    0000000000050a10 T pa_sink_volume_change_apply
    000000000004d3bc T pa_sink_volume_changed
    0000000000053a78 T pa_sound_file_load
    0000000000053e60 T pa_sound_file_too_big_to_cache
    0000000000063b34 T pa_source_attach_within_thread
    0000000000065234 T pa_source_check_format
    000000000006537c T pa_source_check_formats
    0000000000062b24 T pa_source_check_suspend
    000000000005b08c T pa_source_check_type
    00000000000639c8 T pa_source_detach_within_thread
    000000000005ce8c T pa_source_enable_decibel_volume
    0000000000060454 T pa_source_enter_passthrough
    0000000000060380 T pa_source_flat_volume_enabled
    0000000000064744 T pa_source_get_fixed_latency
    0000000000065188 T pa_source_get_formats
    000000000005ff80 T pa_source_get_latency
    00000000000642e4 T pa_source_get_latency_range
    0000000000060190 T pa_source_get_latency_within_thread
    000000000005d920 T pa_source_get_master
    0000000000064a98 T pa_source_get_max_rewind
    000000000006239c T pa_source_get_mute
    0000000000063ca0 T pa_source_get_requested_latency
    0000000000062fe4 T pa_source_get_requested_latency_within_thread
    00000000000604f4 T pa_source_get_volume
    0000000000062d00 T pa_source_invalidate_requested_latency
    000000000005d854 T pa_source_is_filter
    000000000005fea8 T pa_source_is_passthrough
    0000000000060d24 T pa_source_leave_passthrough
    00000000000629e4 T pa_source_linked_by
    00000000000209e0 T pa_source_list_to_string
    000000000005f14c T pa_source_move_all_fail
    000000000005eefc T pa_source_move_all_finish
    000000000005ecb0 T pa_source_move_all_start
    000000000006258c T pa_source_mute_changed
    000000000005b648 T pa_source_new
    000000000005b5c0 T pa_source_new_data_done
    000000000005b0a8 T pa_source_new_data_init
    000000000005b3b0 T pa_source_new_data_set_alternate_sample_rate
    000000000005b2fc T pa_source_new_data_set_channel_map
    000000000005b4cc T pa_source_new_data_set_muted
    000000000005b1f4 T pa_source_new_data_set_name
    000000000005b540 T pa_source_new_data_set_port
    000000000005b274 T pa_source_new_data_set_sample_spec
    000000000005b41c T pa_source_new_data_set_volume
    000000000005ad9c T pa_source_output_attach
    0000000000053fac T pa_source_output_check_type
    0000000000058d78 T pa_source_output_cork
    000000000005ae58 T pa_source_output_detach
    000000000005a85c T pa_source_output_fail_move
    0000000000059afc T pa_source_output_finish_move
    0000000000056960 T pa_source_output_get_latency
    0000000000057324 T pa_source_output_get_max_rewind
    00000000000579a0 T pa_source_output_get_requested_latency
    0000000000059290 T pa_source_output_get_resample_method
    00000000000582dc T pa_source_output_get_volume
    0000000000056154 T pa_source_output_is_passthrough
    00000000000581d0 T pa_source_output_is_volume_readable
    0000000000056818 T pa_source_output_kill
    0000000000020eb8 T pa_source_output_list_to_string
    0000000000059390 T pa_source_output_may_move
    00000000000594ec T pa_source_output_may_move_to
    000000000005aa18 T pa_source_output_move_to
    0000000000054850 T pa_source_output_new
    000000000005430c T pa_source_output_new_data_apply_volume_factor
    0000000000054404 T pa_source_output_new_data_apply_volume_factor_source
    00000000000547b0 T pa_source_output_new_data_done
    0000000000053fc8 T pa_source_output_new_data_init
    0000000000054198 T pa_source_output_new_data_is_passthrough
    00000000000540e4 T pa_source_output_new_data_set_channel_map
    00000000000546c0 T pa_source_output_new_data_set_formats
    00000000000544f8 T pa_source_output_new_data_set_muted
    000000000005405c T pa_source_output_new_data_set_sample_spec
    000000000005456c T pa_source_output_new_data_set_source
    0000000000054220 T pa_source_output_new_data_set_volume
    0000000000055a6c T pa_source_output_process_msg
    0000000000057084 T pa_source_output_process_rewind
    0000000000056b80 T pa_source_output_push
    0000000000056230 T pa_source_output_put
    0000000000059f7c T pa_source_output_send_event
    00000000000584bc T pa_source_output_set_mute
    0000000000058784 T pa_source_output_set_property
    0000000000058954 T pa_source_output_set_property_arbitrary
    0000000000059060 T pa_source_output_set_rate
    000000000005aed8 T pa_source_output_set_reference_ratio
    000000000005777c T pa_source_output_set_requested_latency
    000000000005762c T pa_source_output_set_requested_latency_within_thread
    000000000005acb4 T pa_source_output_set_state_within_thread
    0000000000057b64 T pa_source_output_set_volume
    0000000000057ffc T pa_source_output_set_volume_direct
    000000000005979c T pa_source_output_start_move
    000000000007d047 R pa_source_output_type_id
    0000000000055cb0 T pa_source_output_unlink
    0000000000057454 T pa_source_output_update_max_rewind
    0000000000058b10 T pa_source_output_update_proplist
    000000000005a11c T pa_source_output_update_resampler
    000000000005f4ec T pa_source_post
    000000000005f818 T pa_source_post_direct
    000000000005c278 T pa_source_process_msg
    000000000005f2cc T pa_source_process_rewind
    000000000005d19c T pa_source_put
    000000000005faf0 T pa_source_reconfigure
    000000000005e168 T pa_source_set_asyncmsgq
    0000000000062850 T pa_source_set_description
    0000000000064530 T pa_source_set_fixed_latency
    0000000000063450 T pa_source_set_fixed_latency_within_thread
    000000000005d094 T pa_source_set_get_mute_callback
    000000000005cd18 T pa_source_set_get_volume_callback
    0000000000064064 T pa_source_set_latency_range
    00000000000631c8 T pa_source_set_latency_range_within_thread
    0000000000063e94 T pa_source_set_max_rewind
    0000000000063674 T pa_source_set_max_rewind_within_thread
    0000000000062100 T pa_source_set_mute
    0000000000064c54 T pa_source_set_port
    000000000006490c T pa_source_set_port_latency_offset
    0000000000065728 T pa_source_set_reference_volume_direct
    000000000005e4cc T pa_source_set_rtpoll
    00000000000654fc T pa_source_set_sample_format
    0000000000065624 T pa_source_set_sample_rate
    000000000005d0f4 T pa_source_set_set_mute_callback
    000000000005cd78 T pa_source_set_set_volume_callback
    00000000000618b0 T pa_source_set_soft_volume
    000000000006078c T pa_source_set_volume
    000000000005cfa4 T pa_source_set_write_volume_callback
    0000000000062ca0 T pa_source_state_to_string
    000000000005e8d0 T pa_source_suspend
    00000000000637c4 T pa_source_suspend_all
    000000000005eab8 T pa_source_sync_suspend
    000000000007f43a R pa_source_type_id
    000000000005df08 T pa_source_unlink
    000000000005e26c T pa_source_update_flags
    0000000000062700 T pa_source_update_proplist
    000000000005e5dc T pa_source_update_status
    0000000000061b78 T pa_source_update_volume_and_mute
    000000000005e74c T pa_source_used_by
    0000000000064e84 T pa_source_volume_change_apply
    0000000000061f34 T pa_source_volume_changed
    0000000000066268 T pa_start_child_for_read
    00000000000528e0 T pa_stdio_acquire
    0000000000052914 T pa_stdio_release
    000000000003365c T pa_stream_get_volume_channel_map
    000000000002514c T pa_subscription_free
    00000000000252cc T pa_subscription_free_all
    0000000000024ff0 T pa_subscription_new
    0000000000025590 T pa_subscription_post
    0000000000026f38 T pa_suspend_cause_to_string
    0000000000066b9c T pa_thread_mq_done
    0000000000066fac T pa_thread_mq_get
    0000000000066cbc T pa_thread_mq_init
    000000000006656c T pa_thread_mq_init_thread_mainloop
    0000000000066ee4 T pa_thread_mq_install
    0000000000033f1c T pa_volume_func_init_arm
    0000000000033f20 T pa_volume_func_init_mmx
    0000000000033f24 T pa_volume_func_init_sse
    0000000000034a50 T pa_volume_memchunk
  + app/src/main/lib/arm64-v8a/libsndfile.so
    000000000004fd44 T adpcm_decode
    000000000004fde4 T adpcm_encode
    000000000005214c T aiff_caf_find_channel_layout_tag
    00000000000521e0 T aiff_caf_of_channel_layout_tag
    0000000000047bcc T aiff_ima_init
    0000000000034174 T alac_decode
    0000000000034050 T alac_decoder_init
    0000000000034d48 T alac_encode
    0000000000036a20 T alac_encoder_init
    0000000000050bc0 T alac_get_desc_chunk_items
    0000000000036950 T alac_get_magic_cookie
    000000000003693c T alac_get_magic_cookie_size
    0000000000036b14 T alac_get_source_format
    00000000000500c4 T alac_init
    0000000000034d40 T alac_set_fastmode
    0000000000041a1c T alaw_init
    0000000000039f74 T append_snprintf
    000000000004fb4c T audio_detect
    0000000000031768 T BitBufferAdvance
    0000000000031640 T BitBufferByteAlign
    0000000000031624 T BitBufferGetPosition
    0000000000031490 T BitBufferInit
    0000000000031580 T BitBufferPeek
    00000000000315b8 T BitBufferPeekOne
    00000000000314a0 T BitBufferRead
    0000000000031544 T BitBufferReadOne
    00000000000314f8 T BitBufferReadSmall
    00000000000317fc T BitBufferReset
    0000000000031790 T BitBufferRewind
    00000000000315d8 T BitBufferUnpackBERSize
    00000000000316dc T BitBufferWrite
    000000000004f8e8 T broadcast_var_alloc
    000000000004fb08 T broadcast_var_get
    000000000004f8f4 T broadcast_var_set
    0000000000065740 A __bss_end__
    0000000000065740 A _bss_end__
    0000000000063152 A __bss_start
    0000000000063152 A __bss_start__
    000000000004f778 T cart_var_alloc
    000000000004f8a4 T cart_var_get
    000000000004f780 T cart_var_set
    0000000000032de8 T copy_coefs
    0000000000033bb8 T copyPredictorTo20
    0000000000033b48 T copyPredictorTo24
    0000000000033b78 T copyPredictorTo24Shift
    0000000000033be8 T copyPredictorTo32
    0000000000033ca8 T copyPredictorTo32Shift
    000000000004f040 T dither_init
    00000000000470fc T double64_be_read
    00000000000472d4 T double64_be_write
    0000000000044ea4 T double64_init
    00000000000471e8 T double64_le_read
    00000000000473b4 T double64_le_write
    000000000004c304 T dwvw_init
    0000000000031c90 T dyn_comp
    0000000000031868 T dyn_decomp
    0000000000063152 A _edata
    0000000000065740 A __end__
    0000000000065740 A _end
    0000000000044948 T float32_be_read
    0000000000044b8c T float32_be_write
    000000000004260c T float32_init
    0000000000044a08 T float32_le_read
    0000000000044ac8 T float32_le_write
    000000000002fe84 T g721_decoder
    000000000002fd90 T g721_encoder
    0000000000030060 T g723_16_decoder
    000000000002ff5c T g723_16_encoder
    0000000000030224 T g723_24_decoder
    0000000000030134 T g723_24_encoder
    00000000000303e8 T g723_40_decoder
    00000000000302f8 T g723_40_encoder
    0000000000030714 T g72x_decode_block
    00000000000307e0 T g72x_encode_block
    00000000000304f4 T g72x_reader_init
    0000000000030604 T g72x_writer_init
    000000000004aff4 T gsm610_init
    0000000000063088 D gsm_A
    0000000000026df0 T gsm_abs
    0000000000026d3c T gsm_add
    0000000000027070 T gsm_asl
    0000000000027030 T gsm_asr
    0000000000063098 D gsm_B
    0000000000027258 T Gsm_Coder
    0000000000027a8c T gsm_create
    0000000000027b00 T gsm_decode
    000000000002788c T Gsm_Decoder
    000000000002851c T gsm_destroy
    00000000000270b0 T gsm_div
    00000000000630d8 D gsm_DLB
    0000000000028528 T gsm_encode
    000000000006310e D gsm_FAC
    00000000000630e8 D gsm_H
    0000000000027ad0 T gsm_init
    00000000000630c8 D gsm_INVA
    0000000000026e64 T gsm_L_add
    0000000000026fb8 T gsm_L_asl
    0000000000026ff4 T gsm_L_asr
    0000000000026e10 T gsm_L_mult
    0000000000029370 T Gsm_Long_Term_Predictor
    000000000002c148 T Gsm_Long_Term_Synthesis_Filtering
    000000000002c498 T Gsm_LPC_Analysis
    0000000000026eb8 T gsm_L_sub
    00000000000630b8 D gsm_MAC
    00000000000630a8 D gsm_MIC
    0000000000026d84 T gsm_mult
    0000000000026db8 T gsm_mult_r
    0000000000026f0c T gsm_norm
    00000000000630fe D gsm_NRFAC
    00000000000292d0 T gsm_option
    000000000002d8ac T Gsm_Preprocess
    00000000000630e0 D gsm_QLB
    000000000002e450 T Gsm_RPE_Decoding
    000000000002da0c T Gsm_RPE_Encoding
    000000000002e5e4 T Gsm_Short_Term_Analysis_Filter
    000000000002f398 T Gsm_Short_Term_Synthesis_Filter
    0000000000026d60 T gsm_sub
    0000000000052234 T id3_skip
    000000000004feb0 T ima_oki_adpcm_decode_block
    000000000005000c T ima_oki_adpcm_encode_block
    000000000004fce0 T ima_oki_adpcm_init
    0000000000032d8c T init_coefs
    000000000004e6fc T interleave_init
    000000000005a674 R kALACEncoderMagic
    000000000005a67c R kDefaultMixBits
    000000000005a680 R kDefaultMixRes
    000000000005a688 R kDefaultNumUV
    000000000005a650 R kMaxBitDepth
    000000000005a684 R kMaxRes
    000000000005a678 R kMaxSampleSize
    000000000005a690 R kMaxUV
    000000000005a68c R kMinUV
    0000000000033ce4 T mix16
    0000000000033d7c T mix20
    0000000000033e14 T mix24
    0000000000033f48 T mix32
    000000000005212c T ogg_open
    0000000000032e74 T pc_block
    000000000003bc48 T pcm_init
    0000000000030af8 T predictor_pole
    00000000000308a4 T predictor_zero
    00000000000304bc T private_init_state
    0000000000036d98 T psf_allocate
    0000000000037a58 T psf_asciiheader_printf
    0000000000038b7c T psf_binheader_readf
    0000000000037b24 T psf_binheader_writef
    000000000003b9d0 T psf_calc_max_all_channels
    000000000003b898 T psf_calc_signal_max
    000000000003adf8 T psf_close_rsrc
    0000000000039c28 T psf_cues_alloc
    0000000000039c5c T psf_cues_dup
    000000000003a608 T psf_d2i_array
    000000000003a65c T psf_d2i_clip_array
    000000000003a450 T psf_d2s_array
    000000000003a4a4 T psf_d2s_clip_array
    000000000003a0b0 T psf_decode_frame_count
    0000000000039904 T psf_default_seek
    000000000003a52c T psf_f2i_array
    000000000003a57c T psf_f2i_clip_array
    000000000003a374 T psf_f2s_array
    000000000003a3c8 T psf_f2s_clip_array
    000000000003a9ac T psf_fclose
    000000000003b2d0 T psf_fgets
    000000000003aea0 T psf_file_valid
    0000000000051e0c T psf_find_read_chunk_iterator
    0000000000051dd0 T psf_find_read_chunk_m32
    0000000000051b64 T psf_find_read_chunk_str
    000000000003a8d8 T psf_fopen
    000000000003b08c T psf_fread
    000000000003aeb0 T psf_fseek
    000000000003b4fc T psf_fsync
    000000000003afe0 T psf_ftell
    000000000003b444 T psf_ftruncate
    000000000003b1a8 T psf_fwrite
    00000000000519c0 T psf_get_chunk_iterator
    0000000000039cb4 T psf_get_cues
    0000000000039df0 T psf_get_date_str
    000000000003acfc T psf_get_filelen
    000000000003b5f4 T psf_get_format_info
    000000000003b568 T psf_get_format_major
    000000000003b560 T psf_get_format_major_count
    000000000003b520 T psf_get_format_simple
    000000000003b518 T psf_get_format_simple_count
    000000000003b5b0 T psf_get_format_subtype
    000000000003b5a8 T psf_get_format_subtype_count
    000000000003bb98 T psf_get_max_all_channels
    000000000003bb44 T psf_get_signal_max
    000000000004efd0 T psf_get_string
    0000000000039980 T psf_hexdump
    000000000003b4b4 T psf_init_files
    0000000000039d1c T psf_instrument_alloc
    000000000003b394 T psf_is_pipe
    000000000004f004 T psf_location_string_count
    0000000000036df4 T psf_log_printf
    0000000000039ad0 T psf_log_SF_INFO
    0000000000039bb4 T psf_memset
    0000000000051c28 T psf_next_chunk_iterator
    000000000003aa50 T psf_open_rsrc
    000000000003a6e4 T psf_open_tmpfile
    0000000000039f08 T psf_rand_int32
    0000000000039d4c T psf_sanitize_string
    0000000000051fc4 T psf_save_write_chunk
    000000000003ae98 T psf_set_file
    000000000003ae48 T psf_set_stdio
    000000000004efb8 T psf_set_string
    0000000000051e20 T psf_store_read_chunk_str
    0000000000051ca8 T psf_store_read_chunk_u32
    000000000004ecf0 T psf_store_string
    000000000003a014 T psf_strlcpy_crlf
    000000000003b4c8 T psf_use_rsrc
    0000000000030b8c T quantize
    0000000000030d78 T reconstruct
    0000000000039e90 T s_bitwidth_to_subformat
    000000000003183c T set_ag_params
    0000000000031814 T set_standard_ag_params
    000000000000a378 T sf_close
    000000000000ae10 T sf_command
    000000000000bb3c T sf_current_byterate
    000000000000a6bc T sf_error
    000000000000a540 T sf_error_number
    000000000000a828 T sf_error_str
    000000000000a93c T sf_format_check
    000000000000e190 T sf_get_chunk_data
    000000000000dfa4 T sf_get_chunk_iterator
    000000000000e0cc T sf_get_chunk_size
    000000000000ba7c T sf_get_string
    000000000000e038 T sf_next_chunk_iterator
    0000000000009528 T sf_open
    000000000000a12c T sf_open_fd
    000000000000a200 T sf_open_virtual
    000000000000a72c T sf_perror
    000000000000c734 T sf_read_double
    000000000000c8c0 T sf_readf_double
    000000000000c5a4 T sf_readf_float
    000000000000c288 T sf_readf_int
    000000000000c418 T sf_read_float
    000000000000bf6c T sf_readf_short
    000000000000c0fc T sf_read_int
    000000000000bc4c T sf_read_raw
    000000000000bde0 T sf_read_short
    000000000000b87c T sf_seek
    000000000000def4 T sf_set_chunk
    000000000000baa0 T sf_set_string
    000000000000a5c8 T sf_strerror
    000000000000ae04 T sf_version_string
    000000000000d584 T sf_write_double
    000000000000d720 T sf_writef_double
    000000000000d3f0 T sf_writef_float
    000000000000d0c0 T sf_writef_int
    000000000000d254 T sf_write_float
    000000000000cd90 T sf_writef_short
    000000000000cf24 T sf_write_int
    000000000000ca50 T sf_write_raw
    000000000000cbf4 T sf_write_short
    000000000000a534 T sf_write_sync
    0000000000030b3c T step_size
    000000000003a320 T str_of_endianness
    000000000003a160 T str_of_major_format
    000000000003a194 T str_of_minor_format
    000000000003a2d8 T str_of_open_mode
    0000000000039e6c T subformat_to_bytewidth
    0000000000039ecc T u_bitwidth_to_subformat
    0000000000040e34 T ulaw_init
    00000000000337c0 T unmix16
    0000000000033854 T unmix20
    00000000000338e8 T unmix24
    0000000000033a4c T unmix32
    000000000003209c T unpc_block
    0000000000030dbc T update
    000000000004d9a0 T vox_adpcm_init
    0000000000047728 T wavlike_ima_init
    0000000000049668 T wavlike_msadpcm_init
    000000000004aa88 T wavlike_msadpcm_write_adapt_coeffs
  + app/src/main/lib/arm64-v8a/libvirglrenderer.so
    000000000004dde4 T cso_cache_create
    000000000004dfdc T cso_cache_delete
    000000000004e30c T cso_cache_set_sanitize_callback
    000000000004dbd8 T cso_construct_key
    000000000004dcc4 T cso_find_state
    000000000004dd58 T cso_find_state_template
    000000000004df50 T cso_for_each_state
    000000000004e840 T cso_hash_contains
    000000000004e3e4 T cso_hash_create
    000000000004e440 T cso_hash_delete
    000000000004e75c T cso_hash_erase
    000000000004e4c4 T cso_hash_find
    000000000004dccc T cso_hash_find_data_from_template
    000000000004e71c T cso_hash_first_node
    000000000004e314 T cso_hash_insert
    000000000004e530 T cso_hash_iter_data
    000000000004e5b0 T cso_hash_iter_is_null
    000000000004e510 T cso_hash_iter_key
    000000000004e550 T cso_hash_iter_next
    000000000004e69c T cso_hash_iter_prev
    000000000004e750 T cso_hash_size
    000000000004e5cc T cso_hash_take
    000000000004dc6c T cso_insert_state
    000000000004e304 T cso_maximum_cache_size
    000000000004e250 T cso_set_maximum_cache_size
    000000000004dddc T cso_take_state
    000000000004c3c8 T _debug_assert_fail
    000000000004d75c T debug_describe_reference
    000000000004d77c T debug_describe_resource
    000000000004dad0 T debug_describe_sampler_view
    000000000004db60 T debug_describe_so_target
    000000000004da50 T debug_describe_surface
    000000000004bee0 T debug_disable_error_message_boxes
    000000000004c3e4 T debug_dump_enum
    000000000004c4f0 T debug_dump_enum_noprefix
    000000000004c57c T debug_dump_flags
    000000000004bf34 T debug_get_bool_option
    000000000004c0c8 T debug_get_flags_option
    000000000004c01c T debug_get_num_option
    000000000004bee4 T debug_get_option
    000000000004be74 T _debug_vprintf
    00000000000297cc T format_is_copy_compatible
    0000000000037fd0 T get_internalformat_string
    0000000000048c60 T Java_com_winlator_xenvironment_components_VirGLRendererComponent_destroyClient
    0000000000048c88 T Java_com_winlator_xenvironment_components_VirGLRendererComponent_destroyRenderer
    0000000000049bc8 T Java_com_winlator_xenvironment_components_VirGLRendererComponent_getCurrentEGLContextPtr
    0000000000048a24 T Java_com_winlator_xenvironment_components_VirGLRendererComponent_handleNewConnection
    0000000000048af0 T Java_com_winlator_xenvironment_components_VirGLRendererComponent_handleRequest
    000000000006af88 B jni_info
    0000000000068c60 B obj_types
    000000000005be28 T os_get_option
    000000000005bdac T os_log_message
    000000000005b7c0 T tgsi_align_128bit
    00000000000559bc T tgsi_alloc_tokens
    0000000000053e90 T tgsi_build_full_declaration
    0000000000054090 T tgsi_build_full_immediate
    0000000000054170 T tgsi_build_full_instruction
    0000000000054578 T tgsi_build_full_property
    0000000000053e58 T tgsi_build_header
    0000000000053e60 T tgsi_build_processor
    0000000000053e74 T tgsi_default_full_declaration
    000000000005407c T tgsi_default_full_immediate
    0000000000054140 T tgsi_default_full_instruction
    0000000000054560 T tgsi_default_full_property
    0000000000054134 T tgsi_default_instruction
    00000000000508bc T tgsi_dump
    000000000004ea7c T tgsi_dump_declaration
    000000000004f758 T tgsi_dump_immediate
    000000000004fa14 T tgsi_dump_instruction
    0000000000050af0 T tgsi_dump_instruction_str
    000000000004f500 T tgsi_dump_property
    0000000000050954 T tgsi_dump_str
    00000000000507ac T tgsi_dump_to_file
    00000000000559c4 T tgsi_dump_tokens
    0000000000055964 T tgsi_dup_tokens
    000000000005aa3c T tgsi_file_name
    0000000000068c08 D tgsi_fs_coord_origin_names
    0000000000068c18 D tgsi_fs_coord_pixel_center_names
    00000000000552a8 T tgsi_get_opcode_info
    00000000000552d8 T tgsi_get_opcode_name
    000000000005530c T tgsi_get_processor_name
    0000000000068c28 D tgsi_immediate_type_names
    0000000000068b70 D tgsi_interpolate_locations
    0000000000068b50 D tgsi_interpolate_names
    0000000000068b88 D tgsi_invariant_name
    0000000000055154 T tgsi_is_passthrough_shader
    000000000005b670 T tgsi_iterate_shader
    0000000000068c48 D tgsi_memory_names
    00000000000553b4 T tgsi_opcode_infer_dst_type
    0000000000055334 T tgsi_opcode_infer_src_type
    00000000000553f4 T tgsi_parse_end_of_tokens
    00000000000553f0 T tgsi_parse_free
    00000000000553b8 T tgsi_parse_init
    000000000005540c T tgsi_parse_token
    0000000000068b90 D tgsi_primitive_names
    0000000000068880 D tgsi_processor_type_names
    0000000000068a68 D tgsi_property_names
    0000000000068b28 D tgsi_return_type_names
    000000000005aa64 T tgsi_sanity_check
    000000000005461c T tgsi_scan_shader
    00000000000688b0 D tgsi_semantic_names
    0000000000068860 D tgsi_swizzle_names
    00000000000559c8 T tgsi_text_translate
    00000000000689d0 D tgsi_texture_names
    000000000005bd84 T tgsi_transform_foo
    000000000005bad4 T tgsi_transform_shader
    000000000005b864 T tgsi_util_get_full_src_register_sign_mode
    000000000005b7f4 T tgsi_util_get_full_src_register_swizzle
    000000000005b8e4 T tgsi_util_get_inst_usage_mask
    000000000005ba24 T tgsi_util_get_src_from_ind
    000000000005b7cc T tgsi_util_get_src_register_swizzle
    000000000005ba4c T tgsi_util_get_texture_coord_dim
    000000000005b884 T tgsi_util_set_full_src_register_sign_mode
    000000000005b81c T tgsi_util_set_src_register_swizzle
    000000000004c6e4 T u_prim_name
    0000000000053d08 T ureg_create
    0000000000053c10 T ureg_create_shader
    000000000005150c T ureg_DECL_address
    00000000000513e8 T ureg_DECL_array_temporary
    00000000000510d8 T ureg_DECL_constant
    0000000000051088 T ureg_DECL_constant2D
    0000000000050b78 T ureg_DECL_fs_input_cyl_centroid
    0000000000050cf8 T ureg_DECL_gs_input
    000000000005121c T ureg_DECL_hw_atomic
    0000000000051758 T ureg_DECL_immediate
    0000000000051adc T ureg_DECL_immediate_block_uint
    0000000000051c28 T ureg_DECL_immediate_int
    0000000000051ad4 T ureg_DECL_immediate_uint
    00000000000513cc T ureg_DECL_local_temporary
    0000000000050f88 T ureg_DECL_output
    0000000000050e88 T ureg_DECL_output_masked
    0000000000051560 T ureg_DECL_predicate
    00000000000515b0 T ureg_DECL_sampler
    0000000000051690 T ureg_DECL_sampler_view
    0000000000050dc0 T ureg_DECL_system_value
    00000000000512c4 T ureg_DECL_temporary
    0000000000050c8c T ureg_DECL_vs_input
    0000000000053dd4 T ureg_destroy
    0000000000051e08 T ureg_emit_dst
    0000000000051f0c T ureg_emit_insn
    0000000000052044 T ureg_emit_label
    0000000000051c30 T ureg_emit_src
    0000000000052164 T ureg_emit_texture
    0000000000052244 T ureg_emit_texture_offset
    0000000000052904 T ureg_finalize
    0000000000052304 T ureg_fixup_insn_size
    0000000000052134 T ureg_fixup_label
    0000000000053d04 T ureg_free_tokens
    0000000000052124 T ureg_get_instruction_number
    0000000000053dc8 T ureg_get_nr_outputs
    0000000000053cc0 T ureg_get_tokens
    0000000000052344 T ureg_insn
    00000000000526e4 T ureg_label_insn
    0000000000050b64 T ureg_property
    00000000000514d8 T ureg_release_temporary
    000000000005246c T ureg_tex_insn
    000000000004cbc8 T u_surface_default_template
    000000000004c7cc T util_bitmask_add
    000000000004c9d0 T util_bitmask_clear
    000000000004c770 T util_bitmask_create
    000000000004cba0 T util_bitmask_destroy
    000000000004ca10 T util_bitmask_get
    000000000004cb14 T util_bitmask_get_first_index
    000000000004ca68 T util_bitmask_get_next_index
    000000000004c8f4 T util_bitmask_set
    000000000004cd64 T util_copy_box
    000000000004cbe0 T util_copy_rect
    000000000006d138 B util_cpu_caps
    000000000004c71c T util_cpu_detect
    000000000004d18c T util_fill_box
    000000000004ce48 T util_fill_rect
    000000000005fd98 D util_format_a16_float_description
    0000000000063c98 D util_format_a16l16_unorm_description
    00000000000630c8 D util_format_a16_sint_description
    000000000005fc78 D util_format_a16_snorm_description
    0000000000062fa8 D util_format_a16_uint_description
    000000000005fa80 D util_format_a16_unorm_description
    000000000005feb8 D util_format_a32_float_description
    0000000000063308 D util_format_a32_sint_description
    00000000000631e8 D util_format_a32_uint_description
    000000000005f720 D util_format_a4b4g4r4_unorm_description
    00000000000623d8 D util_format_a4r4_unorm_description
    0000000000063e00 D util_format_a8b8g8r8_snorm_description
    0000000000060140 D util_format_a8b8g8r8_srgb_description
    000000000005f528 D util_format_a8b8g8r8_unorm_description
    0000000000063c08 D util_format_a8l8_snorm_description
    0000000000063c50 D util_format_a8l8_srgb_description
    0000000000063bc0 D util_format_a8l8_unorm_description
    0000000000060260 D util_format_a8r8g8b8_srgb_description
    000000000005f498 D util_format_a8r8g8b8_unorm_description
    00000000000624b0 D util_format_a8r8_unorm_description
    0000000000062e88 D util_format_a8_sint_description
    000000000005fb58 D util_format_a8_snorm_description
    0000000000062d68 D util_format_a8_uint_description
    000000000005f918 D util_format_a8_unorm_description
    000000000004a5b8 T util_format_apply_color_swizzle
    0000000000062660 D util_format_b10g10r10a2_snorm_description
    0000000000062618 D util_format_b10g10r10a2_sscaled_description
    0000000000063428 D util_format_b10g10r10a2_uint_description
    000000000005f840 D util_format_b10g10r10a2_unorm_description
    00000000000625d0 D util_format_b10g10r10a2_uscaled_description
    0000000000063590 D util_format_b10g10r10x2_unorm_description
    000000000005f888 D util_format_b2g3r3_unorm_description
    000000000005f690 D util_format_b4g4r4a4_unorm_description
    000000000005f6d8 D util_format_b4g4r4x4_unorm_description
    000000000005f648 D util_format_b5g5r5a1_unorm_description
    000000000005f600 D util_format_b5g5r5x1_unorm_description
    0000000000063b78 D util_format_b5g6r5_srgb_description
    000000000005f768 D util_format_b5g6r5_unorm_description
    00000000000601d0 D util_format_b8g8r8a8_srgb_description
    000000000005f408 D util_format_b8g8r8a8_unorm_description
    0000000000060218 D util_format_b8g8r8x8_srgb_description
    000000000005f450 D util_format_b8g8r8x8_unorm_description
    0000000000060ec0 D util_format_bptc_rgba_unorm_description
    0000000000060f50 D util_format_bptc_rgb_float_description
    0000000000060f98 D util_format_bptc_rgb_ufloat_description
    0000000000060f08 D util_format_bptc_srgba_description
    000000000004a564 T util_format_compose_swizzles
    000000000004aa78 T util_format_description
    0000000000060a40 D util_format_dxt1_rgba_description
    00000000000609f8 D util_format_dxt1_rgb_description
    0000000000060b60 D util_format_dxt1_srgba_description
    0000000000060b18 D util_format_dxt1_srgb_description
    0000000000060a88 D util_format_dxt3_rgba_description
    0000000000060ba8 D util_format_dxt3_srgba_description
    0000000000060ad0 D util_format_dxt5_rgba_description
    0000000000060bf0 D util_format_dxt5_srgba_description
    0000000000060e78 D util_format_etc1_rgb8_description
    000000000004a354 T util_format_fits_8unorm
    0000000000063db8 D util_format_g16r16_snorm_description
    0000000000063d70 D util_format_g16r16_unorm_description
    0000000000060848 D util_format_g8r8_b8r8_unorm_description
    0000000000060800 D util_format_g8r8_g8b8_unorm_description
    0000000000063d28 D util_format_g8r8_snorm_description
    0000000000063ce0 D util_format_g8r8_unorm_description
    0000000000049c64 T util_format_has_alpha
    000000000005fe70 D util_format_i16_float_description
    0000000000063110 D util_format_i16_sint_description
    000000000005fd50 D util_format_i16_snorm_description
    0000000000062ff0 D util_format_i16_uint_description
    000000000005fac8 D util_format_i16_unorm_description
    000000000005ff90 D util_format_i32_float_description
    0000000000063350 D util_format_i32_sint_description
    0000000000063230 D util_format_i32_uint_description
    0000000000062ed0 D util_format_i8_sint_description
    000000000005fc30 D util_format_i8_snorm_description
    0000000000062db0 D util_format_i8_uint_description
    000000000005f960 D util_format_i8_unorm_description
    0000000000049cf0 T util_format_is_alpha
    0000000000049bcc T util_format_is_float
    0000000000049ff8 T util_format_is_intensity
    0000000000049c9c T util_format_is_luminance
    0000000000049fa4 T util_format_is_luminance_alpha
    0000000000049d4c T util_format_is_pure_integer
    0000000000049dd8 T util_format_is_pure_sint
    0000000000049e70 T util_format_is_pure_uint
    0000000000049f08 T util_format_is_snorm
    000000000004a048 T util_format_is_subsampled_422
    000000000004a098 T util_format_is_supported
    0000000000062300 D util_format_iyuv_description
    000000000005fe28 D util_format_l16a16_float_description
    00000000000631a0 D util_format_l16a16_sint_description
    000000000005fd08 D util_format_l16a16_snorm_description
    0000000000063080 D util_format_l16a16_uint_description
    000000000005fb10 D util_format_l16a16_unorm_description
    000000000005fde0 D util_format_l16_float_description
    0000000000063158 D util_format_l16_sint_description
    000000000005fcc0 D util_format_l16_snorm_description
    0000000000063038 D util_format_l16_uint_description
    000000000005fa38 D util_format_l16_unorm_description
    000000000005ff48 D util_format_l32a32_float_description
    00000000000633e0 D util_format_l32a32_sint_description
    00000000000632c0 D util_format_l32a32_uint_description
    000000000005ff00 D util_format_l32_float_description
    0000000000063398 D util_format_l32_sint_description
    0000000000063278 D util_format_l32_uint_description
    000000000005f9a8 D util_format_l4a4_unorm_description
    0000000000062f60 D util_format_l8a8_sint_description
    000000000005fbe8 D util_format_l8a8_snorm_description
    0000000000060068 D util_format_l8a8_srgb_description
    0000000000062e40 D util_format_l8a8_uint_description
    000000000005f9f0 D util_format_l8a8_unorm_description
    0000000000062f18 D util_format_l8_sint_description
    000000000005fba0 D util_format_l8_snorm_description
    000000000005ffd8 D util_format_l8_srgb_description
    0000000000062df8 D util_format_l8_uint_description
    000000000005f8d0 D util_format_l8_unorm_description
    0000000000060da0 D util_format_latc1_snorm_description
    0000000000060d58 D util_format_latc1_unorm_description
    0000000000060e30 D util_format_latc2_snorm_description
    0000000000060de8 D util_format_latc2_unorm_description
    000000000005f3c0 D util_format_none_description
    0000000000062348 D util_format_nv12_description
    0000000000062390 D util_format_nv21_description
    0000000000062588 D util_format_r10g10b10a2_snorm_description
    0000000000062540 D util_format_r10g10b10a2_sscaled_description
    0000000000063b30 D util_format_r10g10b10a2_uint_description
    000000000005f7b0 D util_format_r10g10b10a2_unorm_description
    00000000000624f8 D util_format_r10g10b10a2_uscaled_description
    0000000000062228 D util_format_r10g10b10x2_snorm_description
    000000000005f7f8 D util_format_r10g10b10x2_unorm_description
    00000000000621e0 D util_format_r10g10b10x2_uscaled_description
    0000000000060338 D util_format_r10sg10sb10sa2u_norm_description
    00000000000608d8 D util_format_r11g11b10_float_description
    00000000000638f0 D util_format_r16a16_float_description
    0000000000063a58 D util_format_r16a16_sint_description
    00000000000638a8 D util_format_r16a16_snorm_description
    0000000000063a10 D util_format_r16a16_uint_description
    0000000000063860 D util_format_r16a16_unorm_description
    00000000000616a0 D util_format_r16_float_description
    0000000000061778 D util_format_r16g16b16a16_float_description
    0000000000062ae0 D util_format_r16g16b16a16_sint_description
    0000000000061ad8 D util_format_r16g16b16a16_snorm_description
    0000000000061bf8 D util_format_r16g16b16a16_sscaled_description
    00000000000629c0 D util_format_r16g16b16a16_uint_description
    0000000000061898 D util_format_r16g16b16a16_unorm_description
    00000000000619b8 D util_format_r16g16b16a16_uscaled_description
    0000000000061730 D util_format_r16g16b16_float_description
    0000000000062a98 D util_format_r16g16b16_sint_description
    0000000000061a90 D util_format_r16g16b16_snorm_description
    0000000000061bb0 D util_format_r16g16b16_sscaled_description
    0000000000062978 D util_format_r16g16b16_uint_description
    0000000000061850 D util_format_r16g16b16_unorm_description
    0000000000061970 D util_format_r16g16b16_uscaled_description
    0000000000063668 D util_format_r16g16b16x16_float_description
    00000000000636f8 D util_format_r16g16b16x16_sint_description
    0000000000063620 D util_format_r16g16b16x16_snorm_description
    00000000000636b0 D util_format_r16g16b16x16_uint_description
    00000000000635d8 D util_format_r16g16b16x16_unorm_description
    00000000000616e8 D util_format_r16g16_float_description
    0000000000062a50 D util_format_r16g16_sint_description
    0000000000061a48 D util_format_r16g16_snorm_description
    0000000000061b68 D util_format_r16g16_sscaled_description
    0000000000062930 D util_format_r16g16_uint_description
    0000000000061808 D util_format_r16g16_unorm_description
    0000000000061928 D util_format_r16g16_uscaled_description
    0000000000062a08 D util_format_r16_sint_description
    0000000000061a00 D util_format_r16_snorm_description
    0000000000061b20 D util_format_r16_sscaled_description
    00000000000628e8 D util_format_r16_uint_description
    00000000000617c0 D util_format_r16_unorm_description
    00000000000618e0 D util_format_r16_uscaled_description
    0000000000060968 D util_format_r1_unorm_description
    0000000000063938 D util_format_r32a32_float_description
    0000000000063ae8 D util_format_r32a32_sint_description
    0000000000063aa0 D util_format_r32a32_uint_description
    00000000000620c0 D util_format_r32_fixed_description
    0000000000061100 D util_format_r32_float_description
    0000000000062198 D util_format_r32g32b32a32_fixed_description
    00000000000611d8 D util_format_r32g32b32a32_float_description
    0000000000062d20 D util_format_r32g32b32a32_sint_description
    0000000000061538 D util_format_r32g32b32a32_snorm_description
    0000000000061658 D util_format_r32g32b32a32_sscaled_description
    0000000000062c00 D util_format_r32g32b32a32_uint_description
    00000000000612f8 D util_format_r32g32b32a32_unorm_description
    0000000000061418 D util_format_r32g32b32a32_uscaled_description
    0000000000062150 D util_format_r32g32b32_fixed_description
    0000000000061190 D util_format_r32g32b32_float_description
    0000000000062cd8 D util_format_r32g32b32_sint_description
    00000000000614f0 D util_format_r32g32b32_snorm_description
    0000000000061610 D util_format_r32g32b32_sscaled_description
    0000000000062bb8 D util_format_r32g32b32_uint_description
    00000000000612b0 D util_format_r32g32b32_unorm_description
    00000000000613d0 D util_format_r32g32b32_uscaled_description
    0000000000063740 D util_format_r32g32b32x32_float_description
    00000000000637d0 D util_format_r32g32b32x32_sint_description
    0000000000063788 D util_format_r32g32b32x32_uint_description
    0000000000062108 D util_format_r32g32_fixed_description
    0000000000061148 D util_format_r32g32_float_description
    0000000000062c90 D util_format_r32g32_sint_description
    00000000000614a8 D util_format_r32g32_snorm_description
    00000000000615c8 D util_format_r32g32_sscaled_description
    0000000000062b70 D util_format_r32g32_uint_description
    0000000000061268 D util_format_r32g32_unorm_description
    0000000000061388 D util_format_r32g32_uscaled_description
    0000000000062c48 D util_format_r32_sint_description
    0000000000061460 D util_format_r32_snorm_description
    0000000000061580 D util_format_r32_sscaled_description
    0000000000062b28 D util_format_r32_uint_description
    0000000000061220 D util_format_r32_unorm_description
    0000000000061340 D util_format_r32_uscaled_description
    0000000000062420 D util_format_r4a4_unorm_description
    0000000000060380 D util_format_r5sg5sb6u_norm_description
    0000000000060fe0 D util_format_r64_float_description
    00000000000610b8 D util_format_r64g64b64a64_float_description
    0000000000061070 D util_format_r64g64b64_float_description
    0000000000061028 D util_format_r64g64_float_description
    00000000000639c8 D util_format_r8a8_sint_description
    0000000000063818 D util_format_r8a8_snorm_description
    0000000000063980 D util_format_r8a8_uint_description
    0000000000062468 D util_format_r8a8_unorm_description
    00000000000628a0 D util_format_r8g8b8a8_sint_description
    0000000000061f58 D util_format_r8g8b8a8_snorm_description
    00000000000600f8 D util_format_r8g8b8a8_srgb_description
    0000000000062078 D util_format_r8g8b8a8_sscaled_description
    0000000000062780 D util_format_r8g8b8a8_uint_description
    0000000000061d18 D util_format_r8g8b8a8_unorm_description
    0000000000061e38 D util_format_r8g8b8a8_uscaled_description
    00000000000607b8 D util_format_r8g8_b8g8_unorm_description
    0000000000062858 D util_format_r8g8b8_sint_description
    0000000000061f10 D util_format_r8g8b8_snorm_description
    00000000000600b0 D util_format_r8g8b8_srgb_description
    0000000000062030 D util_format_r8g8b8_sscaled_description
    0000000000062738 D util_format_r8g8b8_uint_description
    0000000000061cd0 D util_format_r8g8b8_unorm_description
    0000000000061df0 D util_format_r8g8b8_uscaled_description
    0000000000063548 D util_format_r8g8b8x8_sint_description
    0000000000063470 D util_format_r8g8b8x8_snorm_description
    00000000000634b8 D util_format_r8g8b8x8_srgb_description
    0000000000063500 D util_format_r8g8b8x8_uint_description
    000000000005f5b8 D util_format_r8g8b8x8_unorm_description
    00000000000609b0 D util_format_r8g8bx_snorm_description
    0000000000060890 D util_format_r8g8_r8b8_unorm_description
    0000000000062810 D util_format_r8g8_sint_description
    0000000000061ec8 D util_format_r8g8_snorm_description
    0000000000061fe8 D util_format_r8g8_sscaled_description
    00000000000626f0 D util_format_r8g8_uint_description
    0000000000061c88 D util_format_r8g8_unorm_description
    0000000000061da8 D util_format_r8g8_uscaled_description
    00000000000602f0 D util_format_r8sg8sb8ux8u_norm_description
    00000000000627c8 D util_format_r8_sint_description
    0000000000061e80 D util_format_r8_snorm_description
    0000000000060020 D util_format_r8_srgb_description
    0000000000061fa0 D util_format_r8_sscaled_description
    00000000000626a8 D util_format_r8_uint_description
    0000000000061c40 D util_format_r8_unorm_description
    0000000000061d60 D util_format_r8_uscaled_description
    0000000000060920 D util_format_r9g9b9e5_float_description
    0000000000060c80 D util_format_rgtc1_snorm_description
    0000000000060c38 D util_format_rgtc1_unorm_description
    0000000000060d10 D util_format_rgtc2_snorm_description
    0000000000060cc8 D util_format_rgtc2_unorm_description
    000000000006afb0 B util_format_s3tc_enabled
    00000000000603c8 D util_format_s8_uint_description
    0000000000060530 D util_format_s8_uint_z24_unorm_description
    00000000000605c0 D util_format_s8x24_uint_description
    000000000004a888 T util_format_swizzle_4f
    000000000004a95c T util_format_unswizzle_4f
    0000000000060728 D util_format_uyvy_description
    0000000000060578 D util_format_x24s8_uint_description
    00000000000606e0 D util_format_x32_s8x24_uint_description
    0000000000063e48 D util_format_x8b8g8r8_snorm_description
    0000000000060188 D util_format_x8b8g8r8_srgb_description
    000000000005f570 D util_format_x8b8g8r8_unorm_description
    00000000000602a8 D util_format_x8r8g8b8_srgb_description
    000000000005f4e0 D util_format_x8r8g8b8_unorm_description
    0000000000060650 D util_format_x8z24_unorm_description
    0000000000060770 D util_format_yuyv_description
    0000000000062270 D util_format_yv12_description
    00000000000622b8 D util_format_yv16_description
    0000000000060410 D util_format_z16_unorm_description
    00000000000604e8 D util_format_z24_unorm_s8_uint_description
    0000000000060608 D util_format_z24x8_unorm_description
    00000000000604a0 D util_format_z32_float_description
    0000000000060698 D util_format_z32_float_s8x24_uint_description
    0000000000060458 D util_format_z32_unorm_description
    000000000004d74c T util_fpstate_get
    000000000004d758 T util_fpstate_set
    000000000004d754 T util_fpstate_set_denorms_to_zero
    000000000004a174 T util_get_depth_format_mrd
    000000000004bcf8 T util_hash_table_clear
    000000000004ba14 T util_hash_table_create
    000000000004bdf0 T util_hash_table_destroy
    000000000004bd70 T util_hash_table_foreach
    000000000004bb74 T util_hash_table_get
    000000000004bc20 T util_hash_table_remove
    000000000004ba78 T util_hash_table_set
    000000000004d734 T util_init_math
    000000000004a1b8 T util_is_format_compatible
    000000000004b728 T util_map_texcoords2d_onto_cubemap
    000000000004d22c T util_resource_copy_region
    000000000004d3cc T util_try_blit_via_copy_region
    0000000000048e78 T virgl_block_read
    0000000000068808 D virgl_server_cbs
    0000000000048ef4 T virgl_server_create_renderer
    0000000000049090 T virgl_server_destroy_renderer
    0000000000049a70 T virgl_server_flush_frontbuffer
    0000000000048c90 T virgl_server_new_shm
    0000000000049908 T virgl_server_renderer_create_fence
    0000000000049934 T virgl_server_resource_busy_wait
    0000000000049224 T virgl_server_resource_create
    00000000000494d0 T virgl_server_resource_destroy
    0000000000049100 T virgl_server_send_caps
    000000000004980c T virgl_server_submit_cmd
    00000000000495c4 T virgl_server_transfer_get
    00000000000496f0 T virgl_server_transfer_put
    0000000000035ae4 T vrend_begin_query
    000000000003029c T vrend_bind_sampler_states
    000000000002c200 T vrend_bind_shader
    000000000002afe0 T vrend_bind_vertex_elements_state
    0000000000026b0c T vrend_blitter_fini
    0000000000028ef4 T vrend_build_format_list
    0000000000029478 T vrend_check_framebuffer_mixed_color_attachements
    00000000000293a8 T vrend_check_texture_storage
    000000000002c334 T vrend_clear
    000000000006af50 B vrend_clicbs
    000000000003821c T vrend_convert_shader
    0000000000025a68 T vrend_copy_iovec
    0000000000031b78 T vrend_create_context
    0000000000035994 T vrend_create_query
    0000000000029e20 T vrend_create_sampler_state
    000000000002a054 T vrend_create_sampler_view
    000000000002bcd8 T vrend_create_shader
    0000000000035ce8 T vrend_create_so_target
    0000000000029d24 T vrend_create_surface
    000000000002acdc T vrend_create_vertex_elements_state
    0000000000027178 T vrend_decode_block
    0000000000028e6c T vrend_decode_reset
    0000000000030c24 T vrend_destroy_context
    000000000002cc34 T vrend_draw_vbo
    0000000000035b44 T vrend_end_query
    000000000002a570 T vrend_fb_bind_texture
    000000000002a3d4 T vrend_fb_bind_texture_id
    0000000000029d10 T vrend_get_format_table_entry
    0000000000025754 T vrend_get_iovec_size
    0000000000035b88 T vrend_get_query_result
    0000000000031ad8 T vrend_hw_switch_context
    0000000000029c8c T vrend_insert_format
    0000000000029cc4 T vrend_insert_format_swizzle
    000000000002efac T vrend_launch_grid
    0000000000027154 T vrend_lookup_renderer_ctx
    000000000002bc58 T vrend_memory_barrier
    000000000002fe24 T vrend_object_bind_blend
    000000000002fea0 T vrend_object_bind_dsa
    000000000002ffbc T vrend_object_bind_rasterizer
    0000000000029a1c T vrend_object_fini_ctx_table
    0000000000029a9c T vrend_object_fini_resource_table
    00000000000299a0 T vrend_object_init_ctx_table
    0000000000029a28 T vrend_object_init_resource_table
    0000000000029b3c T vrend_object_insert
    0000000000029ac8 T vrend_object_insert_nofree
    0000000000029bb4 T vrend_object_lookup
    0000000000029bac T vrend_object_remove
    0000000000029984 T vrend_object_set_destroy_callback
    00000000000411fc T vrend_patch_vertex_shader_interpolants
    00000000000257f8 T vrend_read_from_iovec
    0000000000025990 T vrend_read_from_iovec_cb
    0000000000036bb0 T vrend_renderer_attach_res_ctx
    0000000000034df0 T vrend_renderer_blit
    0000000000025c80 T vrend_renderer_blit_gl
    0000000000035754 T vrend_renderer_check_fences
    0000000000027054 T vrend_renderer_context_create
    0000000000026fd4 T vrend_renderer_context_create_internal
    00000000000270e0 T vrend_renderer_context_destroy
    0000000000033e8c T vrend_renderer_copy_transfer3d
    00000000000356c8 T vrend_renderer_create_fence
    0000000000031cd8 T vrend_renderer_create_sub_ctx
    0000000000029e08 T vrend_renderer_ctx_res_lookup
    0000000000036c54 T vrend_renderer_destroy_sub_ctx
    0000000000035db8 T vrend_renderer_fill_caps
    0000000000030b4c T vrend_renderer_fini
    0000000000031544 T vrend_renderer_force_ctx_0
    0000000000036c20 T vrend_renderer_get_cap_set
    0000000000030380 T vrend_renderer_init
    000000000002c1f0 T vrend_renderer_object_destroy
    0000000000029e14 T vrend_renderer_object_insert
    00000000000295a4 T vrend_renderer_query_multisample_caps
    0000000000031e90 T vrend_renderer_resource_attach_iov
    0000000000034308 T vrend_renderer_resource_copy_region
    0000000000031f6c T vrend_renderer_resource_create
    0000000000030bac T vrend_renderer_resource_destroy
    0000000000031ef8 T vrend_renderer_resource_detach_iov
    00000000000329dc T vrend_renderer_resource_unref
    0000000000031e2c T vrend_renderer_set_sub_ctx
    0000000000032a74 T vrend_renderer_transfer_iov
    0000000000029bf4 T vrend_resource_insert
    0000000000029c68 T vrend_resource_lookup
    0000000000029c5c T vrend_resource_remove
    0000000000029994 T vrend_resource_set_destroy_callback
    0000000000033fa0 T vrend_set_blend_color
    0000000000034210 T vrend_set_clip_state
    000000000002b038 T vrend_set_constants
    000000000002a588 T vrend_set_framebuffer_state
    000000000002aad0 T vrend_set_framebuffer_state_no_attach
    000000000002b1d4 T vrend_set_index_buffer
    0000000000034260 T vrend_set_min_samples
    000000000002b8ac T vrend_set_num_sampler_views
    000000000002b3fc T vrend_set_num_vbo
    0000000000034014 T vrend_set_polygon_stipple
    0000000000034248 T vrend_set_sample_mask
    0000000000033fbc T vrend_set_scissor_state
    000000000002bb8c T vrend_set_single_abo
    000000000002b9b0 T vrend_set_single_image_view
    000000000002b4a8 T vrend_set_single_sampler_view
    000000000002bab0 T vrend_set_single_ssbo
    000000000002b2b4 T vrend_set_single_vbo
    0000000000033f50 T vrend_set_stencil_ref
    0000000000031290 T vrend_set_streamout_targets
    00000000000342e0 T vrend_set_tess_state
    000000000002b0e8 T vrend_set_uniform_buffer
    000000000002ab54 T vrend_set_viewport_states
    00000000000415c8 T vrend_shader_create_passthrough_tcs
    0000000000037f44 T vrend_shader_lookup_sampler_array
    0000000000037f90 T vrend_shader_samplerreturnconv
    0000000000037fb0 T vrend_shader_samplertypeconv
    0000000000033e00 T vrend_transfer_inline_write
    000000000002c950 T vrend_update_stencil_state
    00000000000258c4 T vrend_write_to_iovec
  + app/src/main/lib/arm64-v8a/libvortekrenderer.so
    0000000000036a28 T acquireNextImage
    0000000000035320 T checkFormatProperties
    0000000000036618 T createSwapchain
    000000000003544c T createVkContext
    0000000000036940 T destroySwapchain
    000000000003591c T destroyVkContext
    0000000000035000 T disableUnsupportedFeatures
    0000000000037d3c T getCompressedImageFormatProperties
    00000000000350e8 T getExposedDeviceExtensionProperties
    00000000000352bc T getFeatureNames
    000000000001a42c T getHandleRequestFunc
    0000000000034874 T getMemoryPropertyFlags
    0000000000034820 T getMemoryTypeIndex
    00000000000369e4 T getSurfaceFormats
    0000000000036610 T getSwapchainMinImageCount
    0000000000036564 T getWindowExtent
    00000000000365d0 T getWindowHardwareBuffer
    000000000003bd50 D handleRequestFuncs
    000000000002daf4 T initVulkanDevice
    000000000002c924 T initVulkanInstance
    00000000000348e4 T injectExtensions
    0000000000034c88 T injectExtensions2
    0000000000037d2c T isCompressedFormat
    0000000000038e3c T isFormatScaled
    00000000000348a8 T isHostVisibleMemory
    000000000000e314 T Java_com_winlator_xenvironment_components_VortekRendererComponent_createVkContext
    000000000000e43c T Java_com_winlator_xenvironment_components_VortekRendererComponent_destroyVkContext
    000000000003ce08 B memoryPools
    000000000003ce18 B memoryPoolsMutex
    0000000000034f7c T overrideMemoryHeapSize
    0000000000036b48 T presentImage
    0000000000035db8 T ResourceMemory_allocate
    00000000000364dc T ResourceMemory_free
    0000000000036c48 T RingBuffer_create
    0000000000036fbc T RingBuffer_free
    0000000000036d10 T RingBuffer_freeSpace
    0000000000036ce8 T RingBuffer_getSHMemSize
    0000000000036c34 T RingBuffer_hasStatus
    0000000000036d38 T RingBuffer_read
    0000000000036bf4 T RingBuffer_setStatus
    0000000000036cf0 T RingBuffer_size
    0000000000036c14 T RingBuffer_unsetStatus
    0000000000036e60 T RingBuffer_write
    00000000000383e8 T ShaderInspector_create
    0000000000038498 T ShaderInspector_createModule
    00000000000385e4 T ShaderInspector_inspectShaderStages
    0000000000037be8 T TextureDecoder_addBoundBuffer
    000000000003784c T TextureDecoder_containsImage
    00000000000376f8 T TextureDecoder_copyBufferToImage
    0000000000037008 T TextureDecoder_create
    0000000000037890 T TextureDecoder_createImage
    000000000003709c T TextureDecoder_decodeAll
    0000000000037050 T TextureDecoder_destroy
    0000000000037b04 T TextureDecoder_destroyImage
    0000000000037cb0 T TextureDecoder_removeBoundBuffer
    00000000000365f0 T updateWindowContent
    000000000000e444 T VkObject_create
    000000000000e5ec T VkObject_free
    000000000000e5d0 T VkObject_fromHandle
    000000000000e5cc T VkObject_fromId
    000000000000e594 T VkObject_toHandle
    0000000000023890 T vt_handle_vkAcquireNextImage2KHR
    000000000001dd38 T vt_handle_vkAcquireNextImageKHR
    0000000000019b04 T vt_handle_vkAllocateCommandBuffers
    0000000000018160 T vt_handle_vkAllocateDescriptorSets
    0000000000011924 T vt_handle_vkAllocateMemory
    0000000000019e28 T vt_handle_vkBeginCommandBuffer
    0000000000012270 T vt_handle_vkBindBufferMemory
    0000000000023834 T vt_handle_vkBindBufferMemory2
    000000000001244c T vt_handle_vkBindImageMemory
    0000000000023838 T vt_handle_vkBindImageMemory2
    000000000001cbd8 T vt_handle_vkCmdBeginConditionalRenderingEXT
    000000000001cac8 T vt_handle_vkCmdBeginQuery
    00000000000279a4 T vt_handle_vkCmdBeginQueryIndexedEXT
    0000000000029924 T vt_handle_vkCmdBeginRendering
    000000000001cffc T vt_handle_vkCmdBeginRenderPass
    0000000000026e28 T vt_handle_vkCmdBeginRenderPass2
    0000000000027704 T vt_handle_vkCmdBeginTransformFeedbackEXT
    000000000001aa1c T vt_handle_vkCmdBindDescriptorSets
    000000000001abfc T vt_handle_vkCmdBindIndexBuffer
    000000000001a4a8 T vt_handle_vkCmdBindPipeline
    0000000000027570 T vt_handle_vkCmdBindTransformFeedbackBuffersEXT
    000000000001ac8c T vt_handle_vkCmdBindVertexBuffers
    0000000000028118 T vt_handle_vkCmdBindVertexBuffers2
    000000000001b4a8 T vt_handle_vkCmdBlitImage
    0000000000028910 T vt_handle_vkCmdBlitImage2
    000000000001c008 T vt_handle_vkCmdClearAttachments
    000000000001bcb0 T vt_handle_vkCmdClearColorImage
    000000000001be54 T vt_handle_vkCmdClearDepthStencilImage
    000000000001b100 T vt_handle_vkCmdCopyBuffer
    00000000000285e0 T vt_handle_vkCmdCopyBuffer2
    000000000001b6c4 T vt_handle_vkCmdCopyBufferToImage
    0000000000028ac8 T vt_handle_vkCmdCopyBufferToImage2
    000000000001b288 T vt_handle_vkCmdCopyImage
    0000000000028738 T vt_handle_vkCmdCopyImage2
    000000000001b8f0 T vt_handle_vkCmdCopyImageToBuffer
    0000000000028cf8 T vt_handle_vkCmdCopyImageToBuffer2
    000000000001cde8 T vt_handle_vkCmdCopyQueryPoolResults
    000000000001b00c T vt_handle_vkCmdDispatch
    0000000000023894 T vt_handle_vkCmdDispatchBase
    000000000001b07c T vt_handle_vkCmdDispatchIndirect
    000000000001addc T vt_handle_vkCmdDraw
    000000000001ae50 T vt_handle_vkCmdDrawIndexed
    000000000001af70 T vt_handle_vkCmdDrawIndexedIndirect
    0000000000027494 T vt_handle_vkCmdDrawIndexedIndirectCount
    000000000001aed4 T vt_handle_vkCmdDrawIndirect
    0000000000027acc T vt_handle_vkCmdDrawIndirectByteCountEXT
    00000000000273b8 T vt_handle_vkCmdDrawIndirectCount
    000000000001cca4 T vt_handle_vkCmdEndConditionalRenderingEXT
    000000000001cb54 T vt_handle_vkCmdEndQuery
    0000000000027a40 T vt_handle_vkCmdEndQueryIndexedEXT
    0000000000029e10 T vt_handle_vkCmdEndRendering
    000000000001d104 T vt_handle_vkCmdEndRenderPass
    0000000000026fe4 T vt_handle_vkCmdEndRenderPass2
    0000000000027854 T vt_handle_vkCmdEndTransformFeedbackEXT
    000000000001d12c T vt_handle_vkCmdExecuteCommands
    000000000001bc14 T vt_handle_vkCmdFillBuffer
    000000000001d0b8 T vt_handle_vkCmdNextSubpass
    0000000000026f10 T vt_handle_vkCmdNextSubpass2
    000000000001c808 T vt_handle_vkCmdPipelineBarrier
    000000000002941c T vt_handle_vkCmdPipelineBarrier2
    000000000001cec8 T vt_handle_vkCmdPushConstants
    0000000000023228 T vt_handle_vkCmdPushDescriptorSetKHR
    000000000001c45c T vt_handle_vkCmdResetEvent
    0000000000029244 T vt_handle_vkCmdResetEvent2
    000000000001cccc T vt_handle_vkCmdResetQueryPool
    000000000001c1b8 T vt_handle_vkCmdResolveImage
    0000000000028eac T vt_handle_vkCmdResolveImage2
    000000000001a820 T vt_handle_vkCmdSetBlendConstants
    0000000000029084 T vt_handle_vkCmdSetColorWriteEnableEXT
    0000000000027e1c T vt_handle_vkCmdSetCullMode
    000000000001a7b0 T vt_handle_vkCmdSetDepthBias
    0000000000028548 T vt_handle_vkCmdSetDepthBiasEnable
    000000000001a8ac T vt_handle_vkCmdSetDepthBounds
    00000000000283e0 T vt_handle_vkCmdSetDepthBoundsTestEnable
    0000000000028394 T vt_handle_vkCmdSetDepthCompareOp
    00000000000282fc T vt_handle_vkCmdSetDepthTestEnable
    0000000000028348 T vt_handle_vkCmdSetDepthWriteEnable
    000000000002383c T vt_handle_vkCmdSetDeviceMask
    000000000001c3d8 T vt_handle_vkCmdSetEvent
    000000000002916c T vt_handle_vkCmdSetEvent2
    0000000000027e68 T vt_handle_vkCmdSetFrontFace
    0000000000027dbc T vt_handle_vkCmdSetLineStippleEXT
    000000000001a764 T vt_handle_vkCmdSetLineWidth
    0000000000028594 T vt_handle_vkCmdSetPrimitiveRestartEnable
    0000000000027eb4 T vt_handle_vkCmdSetPrimitiveTopology
    00000000000284fc T vt_handle_vkCmdSetRasterizerDiscardEnable
    000000000002392c T vt_handle_vkCmdSetSampleLocationsEXT
    000000000001a658 T vt_handle_vkCmdSetScissor
    000000000002801c T vt_handle_vkCmdSetScissorWithCount
    000000000001a908 T vt_handle_vkCmdSetStencilCompareMask
    0000000000028478 T vt_handle_vkCmdSetStencilOp
    000000000001a9c0 T vt_handle_vkCmdSetStencilReference
    000000000002842c T vt_handle_vkCmdSetStencilTestEnable
    000000000001a964 T vt_handle_vkCmdSetStencilWriteMask
    000000000001a52c T vt_handle_vkCmdSetViewport
    0000000000027f00 T vt_handle_vkCmdSetViewportWithCount
    000000000001bae8 T vt_handle_vkCmdUpdateBuffer
    000000000001c4e0 T vt_handle_vkCmdWaitEvents
    00000000000292c8 T vt_handle_vkCmdWaitEvents2
    000000000001cd58 T vt_handle_vkCmdWriteTimestamp
    0000000000029898 T vt_handle_vkCmdWriteTimestamp2
    00000000000143fc T vt_handle_vkCreateBuffer
    000000000001455c T vt_handle_vkCreateBufferView
    0000000000019928 T vt_handle_vkCreateCommandPool
    0000000000016edc T vt_handle_vkCreateComputePipelines
    0000000000017d7c T vt_handle_vkCreateDescriptorPool
    0000000000017c38 T vt_handle_vkCreateDescriptorSetLayout
    000000000000fa60 T vt_handle_vkCreateDevice
    0000000000013da4 T vt_handle_vkCreateEvent
    000000000001331c T vt_handle_vkCreateFence
    0000000000018adc T vt_handle_vkCreateFramebuffer
    000000000001535c T vt_handle_vkCreateGraphicsPipelines
    00000000000146dc T vt_handle_vkCreateImage
    00000000000149dc T vt_handle_vkCreateImageView
    000000000000e630 T vt_handle_vkCreateInstance
    0000000000014f34 T vt_handle_vkCreatePipelineCache
    000000000001752c T vt_handle_vkCreatePipelineLayout
    0000000000014080 T vt_handle_vkCreateQueryPool
    0000000000018f84 T vt_handle_vkCreateRenderPass
    0000000000025908 T vt_handle_vkCreateRenderPass2
    0000000000017788 T vt_handle_vkCreateSampler
    0000000000025478 T vt_handle_vkCreateSamplerYcbcrConversion
    0000000000013a50 T vt_handle_vkCreateSemaphore
    0000000000014dc4 T vt_handle_vkCreateShaderModule
    000000000001d69c T vt_handle_vkCreateSwapchainKHR
    0000000000014504 T vt_handle_vkDestroyBuffer
    0000000000014698 T vt_handle_vkDestroyBufferView
    0000000000019a3c T vt_handle_vkDestroyCommandPool
    0000000000018098 T vt_handle_vkDestroyDescriptorPool
    0000000000017d38 T vt_handle_vkDestroyDescriptorSetLayout
    0000000000010a24 T vt_handle_vkDestroyDevice
    0000000000013eb0 T vt_handle_vkDestroyEvent
    00000000000135d0 T vt_handle_vkDestroyFence
    0000000000018f40 T vt_handle_vkDestroyFramebuffer
    000000000001482c T vt_handle_vkDestroyImage
    0000000000014d80 T vt_handle_vkDestroyImageView
    000000000000ea08 T vt_handle_vkDestroyInstance
    00000000000174e8 T vt_handle_vkDestroyPipeline
    000000000001507c T vt_handle_vkDestroyPipelineCache
    0000000000017744 T vt_handle_vkDestroyPipelineLayout
    000000000001419c T vt_handle_vkDestroyQueryPool
    000000000001981c T vt_handle_vkDestroyRenderPass
    0000000000017bf4 T vt_handle_vkDestroySampler
    00000000000255d0 T vt_handle_vkDestroySamplerYcbcrConversion
    0000000000013d60 T vt_handle_vkDestroySemaphore
    0000000000014ee0 T vt_handle_vkDestroyShaderModule
    000000000001db04 T vt_handle_vkDestroySwapchainKHR
    00000000000118ac T vt_handle_vkDeviceWaitIdle
    000000000001a370 T vt_handle_vkEndCommandBuffer
    0000000000010d44 T vt_handle_vkEnumerateDeviceExtensionProperties
    0000000000010d40 T vt_handle_vkEnumerateDeviceLayerProperties
    0000000000010ae8 T vt_handle_vkEnumerateInstanceExtensionProperties
    0000000000010ae4 T vt_handle_vkEnumerateInstanceLayerProperties
    0000000000010a64 T vt_handle_vkEnumerateInstanceVersion
    0000000000023428 T vt_handle_vkEnumeratePhysicalDeviceGroups
    000000000000ea34 T vt_handle_vkEnumeratePhysicalDevices
    0000000000011e40 T vt_handle_vkFlushMappedMemoryRanges
    0000000000019d0c T vt_handle_vkFreeCommandBuffers
    00000000000187f0 T vt_handle_vkFreeDescriptorSets
    0000000000011d60 T vt_handle_vkFreeMemory
    0000000000027c44 T vt_handle_vkGetBufferDeviceAddress
    000000000001219c T vt_handle_vkGetBufferMemoryRequirements
    0000000000023b48 T vt_handle_vkGetBufferMemoryRequirements2
    0000000000027b88 T vt_handle_vkGetBufferOpaqueCaptureAddress
    000000000002574c T vt_handle_vkGetDescriptorSetLayoutSupport
    0000000000024874 T vt_handle_vkGetDeviceBufferMemoryRequirements
    0000000000023830 T vt_handle_vkGetDeviceGroupPeerMemoryFeatures
    0000000000023888 T vt_handle_vkGetDeviceGroupPresentCapabilitiesKHR
    000000000002388c T vt_handle_vkGetDeviceGroupSurfacePresentModesKHR
    0000000000024c6c T vt_handle_vkGetDeviceImageMemoryRequirements
    0000000000025070 T vt_handle_vkGetDeviceImageSparseMemoryRequirements
    00000000000120f8 T vt_handle_vkGetDeviceMemoryCommitment
    0000000000027d00 T vt_handle_vkGetDeviceMemoryOpaqueCaptureAddress
    0000000000010f5c T vt_handle_vkGetDeviceQueue
    0000000000025614 T vt_handle_vkGetDeviceQueue2
    0000000000013ef4 T vt_handle_vkGetEventStatus
    0000000000023420 T vt_handle_vkGetFenceFdKHR
    0000000000013710 T vt_handle_vkGetFenceStatus
    0000000000012378 T vt_handle_vkGetImageMemoryRequirements
    0000000000023f24 T vt_handle_vkGetImageMemoryRequirements2
    0000000000012538 T vt_handle_vkGetImageSparseMemoryRequirements
    00000000000244a0 T vt_handle_vkGetImageSparseMemoryRequirements2
    000000000001489c T vt_handle_vkGetImageSubresourceLayout
    0000000000023408 T vt_handle_vkGetMemoryFdKHR
    000000000002340c T vt_handle_vkGetMemoryFdPropertiesKHR
    0000000000023404 T vt_handle_vkGetPhysicalDeviceExternalBufferProperties
    000000000002341c T vt_handle_vkGetPhysicalDeviceExternalFenceProperties
    0000000000023410 T vt_handle_vkGetPhysicalDeviceExternalSemaphoreProperties
    000000000000f568 T vt_handle_vkGetPhysicalDeviceFeatures
    000000000001e1fc T vt_handle_vkGetPhysicalDeviceFeatures2
    000000000000f7f8 T vt_handle_vkGetPhysicalDeviceFormatProperties
    0000000000021d0c T vt_handle_vkGetPhysicalDeviceFormatProperties2
    000000000000f8f4 T vt_handle_vkGetPhysicalDeviceImageFormatProperties
    00000000000220e4 T vt_handle_vkGetPhysicalDeviceImageFormatProperties2
    000000000000f3c4 T vt_handle_vkGetPhysicalDeviceMemoryProperties
    0000000000022be8 T vt_handle_vkGetPhysicalDeviceMemoryProperties2
    0000000000023a60 T vt_handle_vkGetPhysicalDeviceMultisamplePropertiesEXT
    0000000000023928 T vt_handle_vkGetPhysicalDevicePresentRectanglesKHR
    000000000000ec08 T vt_handle_vkGetPhysicalDeviceProperties
    000000000001f484 T vt_handle_vkGetPhysicalDeviceProperties2
    000000000000f208 T vt_handle_vkGetPhysicalDeviceQueueFamilyProperties
    00000000000228ac T vt_handle_vkGetPhysicalDeviceQueueFamilyProperties2
    000000000001271c T vt_handle_vkGetPhysicalDeviceSparseImageFormatProperties
    0000000000022e9c T vt_handle_vkGetPhysicalDeviceSparseImageFormatProperties2
    000000000001d22c T vt_handle_vkGetPhysicalDeviceSurfaceCapabilitiesKHR
    000000000001d338 T vt_handle_vkGetPhysicalDeviceSurfaceFormatsKHR
    000000000001d550 T vt_handle_vkGetPhysicalDeviceSurfacePresentModesKHR
    000000000001d228 T vt_handle_vkGetPhysicalDeviceSurfaceSupportKHR
    0000000000027e18 T vt_handle_vkGetPhysicalDeviceToolProperties
    00000000000150c0 T vt_handle_vkGetPipelineCacheData
    00000000000141e0 T vt_handle_vkGetQueryPoolResults
    0000000000019860 T vt_handle_vkGetRenderAreaGranularity
    000000000002707c T vt_handle_vkGetSemaphoreCounterValue
    0000000000023414 T vt_handle_vkGetSemaphoreFdKHR
    000000000001db34 T vt_handle_vkGetSwapchainImagesKHR
    0000000000023424 T vt_handle_vkImportFenceFdKHR
    0000000000023418 T vt_handle_vkImportSemaphoreFdKHR
    0000000000011f9c T vt_handle_vkInvalidateMappedMemoryRanges
    0000000000011d7c T vt_handle_vkMapMemory
    0000000000015228 T vt_handle_vkMergePipelineCaches
    0000000000012924 T vt_handle_vkQueueBindSparse
    000000000001de48 T vt_handle_vkQueuePresentKHR
    000000000001105c T vt_handle_vkQueueSubmit
    00000000000294bc T vt_handle_vkQueueSubmit2
    0000000000011834 T vt_handle_vkQueueWaitIdle
    000000000001a45c T vt_handle_vkResetCommandBuffer
    0000000000019a80 T vt_handle_vkResetCommandPool
    00000000000180dc T vt_handle_vkResetDescriptorPool
    0000000000013ffc T vt_handle_vkResetEvent
    0000000000013614 T vt_handle_vkResetFences
    0000000000014380 T vt_handle_vkResetQueryPool
    0000000000013f78 T vt_handle_vkSetEvent
    00000000000273b4 T vt_handle_vkSignalSemaphore
    0000000000023398 T vt_handle_vkTrimCommandPool
    0000000000011e3c T vt_handle_vkUnmapMemory
    000000000001890c T vt_handle_vkUpdateDescriptorSets
    0000000000013794 T vt_handle_vkWaitForFences
    0000000000027080 T vt_handle_vkWaitSemaphores
    000000000003c660 B vulkanWrapper
  + app/src/main/lib/arm64-v8a/libwinlator.so
    0000000000003da0 T AHardwareBuffer_getFd
    0000000000005bf4 T ArrayDeque_addFirst
    0000000000005cb0 T ArrayDeque_addLast
    0000000000005dc8 T ArrayDeque_free
    0000000000005b8c T ArrayDeque_init
    0000000000005be0 T ArrayDeque_isEmpty
    0000000000005d6c T ArrayDeque_removeFirst
    0000000000005d9c T ArrayDeque_removeLast
    000000000000508c T ArrayList_add
    0000000000005204 T ArrayList_free
    0000000000005274 T ArrayList_fromStrings
    0000000000005058 T ArrayList_indexOf
    0000000000005170 T ArrayList_remove
    0000000000005108 T ArrayList_removeAt
    00000000000057b8 T ArrayMap_free
    0000000000005698 T ArrayMap_get
    0000000000005350 T ArrayMap_indexOfKey
    0000000000005598 T ArrayMap_indexOfValue
    00000000000055d8 T ArrayMap_put
    0000000000005740 T ArrayMap_remove
    00000000000056d0 T ArrayMap_removeAt
    000000000000439c T ashmemCreateRegion
    0000000000003e98 T createHardwareBuffer
    0000000000003dd0 T createImageKHR
    00000000000043b8 T createMemoryFd
    0000000000004d98 T IntArray_add
    0000000000004e10 T IntArray_addAll
    0000000000004ff4 T IntArray_clear
    0000000000004f40 T IntArray_remove
    0000000000005024 T IntArray_sort
    00000000000041b4 T Java_com_winlator_core_GPUHelper_vkGetDeviceExtensions
    0000000000005e30 T Java_com_winlator_core_WineRegistryEditor_getKeyLocation
    0000000000006104 T Java_com_winlator_core_WineRegistryEditor_getValueLocation
    0000000000003f1c T Java_com_winlator_renderer_GPUImage_createHardwareBuffer
    0000000000004098 T Java_com_winlator_renderer_GPUImage_createImageKHR
    00000000000040a4 T Java_com_winlator_renderer_GPUImage_destroyHardwareBuffer
    0000000000004184 T Java_com_winlator_renderer_GPUImage_destroyImageKHR
    00000000000040e0 T Java_com_winlator_renderer_GPUImage_lockHardwareBuffer
    000000000000440c T Java_com_winlator_sysvshm_SysVSharedMemory_ashmemCreateRegion
    00000000000045b8 T Java_com_winlator_sysvshm_SysVSharedMemory_createMemoryFd
    0000000000004514 T Java_com_winlator_sysvshm_SysVSharedMemory_mapSHMSegment
    0000000000004588 T Java_com_winlator_sysvshm_SysVSharedMemory_unmapSHMSegment
    00000000000049c0 T Java_com_winlator_xconnector_ClientSocket_read
    0000000000004a60 T Java_com_winlator_xconnector_ClientSocket_recvAncillaryMsg
    0000000000004bfc T Java_com_winlator_xconnector_ClientSocket_sendAncillaryMsg
    0000000000004a10 T Java_com_winlator_xconnector_ClientSocket_write
    0000000000004940 T Java_com_winlator_xconnector_XConnectorEpoll_addFdToEpoll
    000000000000477c T Java_com_winlator_xconnector_XConnectorEpoll_closeFd
    0000000000004654 T Java_com_winlator_xconnector_XConnectorEpoll_createAFUnixSocket
    0000000000004774 T Java_com_winlator_xconnector_XConnectorEpoll_createEpollFd
    0000000000004a54 T Java_com_winlator_xconnector_XConnectorEpoll_createEventFd
    0000000000004784 T Java_com_winlator_xconnector_XConnectorEpoll_doEpollIndefinitely
    00000000000049ac T Java_com_winlator_xconnector_XConnectorEpoll_removeFdFromEpoll
    0000000000004cac T Java_com_winlator_xconnector_XConnectorEpoll_waitForSocketRead
    000000000000340c T Java_com_winlator_xserver_Drawable_copyArea
    0000000000003550 T Java_com_winlator_xserver_Drawable_copyAreaOp
    0000000000003a60 T Java_com_winlator_xserver_Drawable_drawAlphaMaskedBitmap
    0000000000003330 T Java_com_winlator_xserver_Drawable_drawBitmap
    0000000000003880 T Java_com_winlator_xserver_Drawable_drawLine
    000000000000377c T Java_com_winlator_xserver_Drawable_fillRect
    0000000000003bac T Java_com_winlator_xserver_Drawable_fromBitmap
    0000000000003c70 T Java_com_winlator_xserver_Pixmap_toBitmap
    00000000000059e8 T SparseArray_get
    000000000000583c T SparseArray_indexOfKey
    000000000000589c T SparseArray_indexOfValue
    00000000000058dc T SparseArray_put
    0000000000005ac8 T SparseArray_remove
    0000000000005a54 T SparseArray_removeAt
  + app/src/main/lib/arm64-v8a/libzstd-jni-1.5.2-3.so
    000000000009b0a0 A __bss_end__
    000000000009b0a0 A _bss_end__
    000000000009b008 A __bss_start
    000000000009b008 A __bss_start__
    00000000000552e8 T COVER_best_destroy
    0000000000055358 T COVER_best_finish
    0000000000055258 T COVER_best_init
    0000000000055324 T COVER_best_start
    00000000000552a4 T COVER_best_wait
    000000000005510c T COVER_checkTotalCompressedSize
    00000000000544a4 T COVER_computeEpochs
    0000000000055438 T COVER_dictSelectionError
    0000000000055468 T COVER_dictSelectionFree
    0000000000055444 T COVER_dictSelectionIsError
    0000000000055470 T COVER_selectDict
    000000000005441c T COVER_sum
    0000000000054440 T COVER_warnOnSmallCorpus
    0000000000057b80 T divbwt
    0000000000056198 T divsufsort
    000000000009b008 A _edata
    000000000009b0a0 A __end__
    000000000009b0a0 A _end
    00000000000103d8 T ERR_getErrorString
    0000000000012ec8 T FSE_buildCTable_raw
    0000000000012f40 T FSE_buildCTable_rle
    00000000000125e0 T FSE_buildCTable_wksp
    0000000000011094 T FSE_buildDTable
    000000000001080c T FSE_buildDTable_raw
    00000000000107f8 T FSE_buildDTable_rle
    00000000000105d4 T FSE_buildDTable_wksp
    000000000001342c T FSE_compress
    00000000000133c8 T FSE_compress2
    00000000000131bc T FSE_compressBound
    0000000000012f60 T FSE_compress_usingCTable
    00000000000131c8 T FSE_compress_wksp
    0000000000012afc T FSE_createCTable
    00000000000105b4 T FSE_createDTable
    00000000000110f4 T FSE_decompress
    0000000000010850 T FSE_decompress_usingDTable
    0000000000010c08 T FSE_decompress_wksp
    0000000000010c0c T FSE_decompress_wksp_bmi2
    0000000000012b24 T FSE_freeCTable
    00000000000105d0 T FSE_freeDTable
    000000000000feb8 T FSE_getErrorName
    000000000000feb4 T FSE_isError
    000000000001288c T FSE_NCountWriteBound
    0000000000012b98 T FSE_normalizeCount
    0000000000012b90 T FSE_optimalTableLog
    0000000000012b28 T FSE_optimalTableLog_internal
    00000000000101c0 T FSE_readNCount
    000000000000fed0 T FSE_readNCount_bmi2
    0000000000062ac8 T FSEv05_buildDTable
    0000000000062ed8 T FSEv05_buildDTable_raw
    0000000000062ec4 T FSEv05_buildDTable_rle
    0000000000062aa8 T FSEv05_createDTable
    0000000000063228 T FSEv05_decompress
    0000000000062f28 T FSEv05_decompress_usingDTable
    0000000000062ac4 T FSEv05_freeDTable
    0000000000062c8c T FSEv05_getErrorName
    0000000000062c88 T FSEv05_isError
    0000000000062c9c T FSEv05_readNCount
    000000000006694c T FSEv06_buildDTable
    0000000000066aec T FSEv06_buildDTable_raw
    0000000000066ad8 T FSEv06_buildDTable_rle
    000000000006692c T FSEv06_createDTable
    0000000000066dbc T FSEv06_decompress
    0000000000066b30 T FSEv06_decompress_usingDTable
    0000000000066948 T FSEv06_freeDTable
    00000000000666f0 T FSEv06_getErrorName
    00000000000666ec T FSEv06_isError
    0000000000066700 T FSEv06_readNCount
    000000000006a738 T FSEv07_buildDTable
    000000000006a8d8 T FSEv07_buildDTable_raw
    000000000006a8c4 T FSEv07_buildDTable_rle
    000000000006a718 T FSEv07_createDTable
    000000000006a62c T FSEv07_decompress
    000000000006a918 T FSEv07_decompress_usingDTable
    000000000006a734 T FSEv07_freeDTable
    000000000006a218 T FSEv07_getErrorName
    000000000006a214 T FSEv07_isError
    000000000006a230 T FSEv07_readNCount
    000000000000feac T FSE_versionNumber
    00000000000128b0 T FSE_writeNCount
    000000000009b008 B g_debuglevel
    000000000009b098 B g_ZSTD_threading_useless_symbol
    00000000000139f0 T HIST_count
    000000000001399c T HIST_countFast
    0000000000013694 T HIST_countFast_wksp
    00000000000135e0 T HIST_count_simple
    0000000000013950 T HIST_count_wksp
    00000000000135d4 T HIST_isError
    00000000000155d8 T HUF_buildCTable
    0000000000013f2c T HUF_buildCTable_wksp
    00000000000156b0 T HUF_compress
    0000000000015620 T HUF_compress1X
    0000000000015558 T HUF_compress1X_repeat
    0000000000014644 T HUF_compress1X_usingCTable
    0000000000014648 T HUF_compress1X_usingCTable_bmi2
    0000000000015194 T HUF_compress1X_wksp
    0000000000015668 T HUF_compress2
    00000000000155ac T HUF_compress4X_repeat
    0000000000015090 T HUF_compress4X_usingCTable
    0000000000015094 T HUF_compress4X_usingCTable_bmi2
    0000000000015584 T HUF_compress4X_wksp
    0000000000014638 T HUF_compressBound
    000000000004c2b0 T HUF_decompress
    000000000004bfcc T HUF_decompress1X1
    000000000004bf90 T HUF_decompress1X1_DCtx
    000000000004a108 T HUF_decompress1X1_DCtx_wksp
    000000000004be28 T HUF_decompress1X1_DCtx_wksp_bmi2
    0000000000049fd8 T HUF_decompress1X1_usingDTable
    000000000004c0c4 T HUF_decompress1X2
    000000000004c088 T HUF_decompress1X2_DCtx
    000000000004ae48 T HUF_decompress1X2_DCtx_wksp
    000000000004ac2c T HUF_decompress1X2_usingDTable
    000000000004c438 T HUF_decompress1X_DCtx
    000000000004bd2c T HUF_decompress1X_DCtx_wksp
    000000000004bc10 T HUF_decompress1X_usingDTable
    000000000004be18 T HUF_decompress1X_usingDTable_bmi2
    000000000004c17c T HUF_decompress4X1
    000000000004c140 T HUF_decompress4X1_DCtx
    000000000004a748 T HUF_decompress4X1_DCtx_wksp
    000000000004a184 T HUF_decompress4X1_usingDTable
    000000000004c234 T HUF_decompress4X2
    000000000004c1f8 T HUF_decompress4X2_DCtx
    000000000004bbb8 T HUF_decompress4X2_DCtx_wksp
    000000000004ae9c T HUF_decompress4X2_usingDTable
    000000000004c348 T HUF_decompress4X_DCtx
    000000000004c3fc T HUF_decompress4X_hufOnly
    000000000004bc7c T HUF_decompress4X_hufOnly_wksp
    000000000004be90 T HUF_decompress4X_hufOnly_wksp_bmi2
    000000000004bc20 T HUF_decompress4X_usingDTable
    000000000004be80 T HUF_decompress4X_usingDTable_bmi2
    00000000000145b0 T HUF_estimateCompressedSize
    000000000000fecc T HUF_getErrorName
    0000000000013f20 T HUF_getNbBitsFromCTable
    000000000000fec8 T HUF_isError
    0000000000013a44 T HUF_optimalTableLog
    0000000000013d30 T HUF_readCTable
    000000000004bf50 T HUF_readDTableX1
    0000000000049bfc T HUF_readDTableX1_wksp
    0000000000049c04 T HUF_readDTableX1_wksp_bmi2
    000000000004c048 T HUF_readDTableX2
    000000000004a7a8 T HUF_readDTableX2_wksp
    000000000004a7b0 T HUF_readDTableX2_wksp_bmi2
    00000000000101c4 T HUF_readStats
    0000000000010214 T HUF_readStats_wksp
    000000000004bc30 T HUF_selectDecoder
    0000000000064820 T HUFv05_decompress
    000000000006387c T HUFv05_decompress1X2
    0000000000063610 T HUFv05_decompress1X2_usingDTable
    0000000000064384 T HUFv05_decompress1X4
    0000000000064180 T HUFv05_decompress1X4_usingDTable
    0000000000063d28 T HUFv05_decompress4X2
    0000000000063918 T HUFv05_decompress4X2_usingDTable
    0000000000064784 T HUFv05_decompress4X4
    0000000000064420 T HUFv05_decompress4X4_usingDTable
    0000000000063310 T HUFv05_getErrorName
    000000000006330c T HUFv05_isError
    0000000000063314 T HUFv05_readDTableX2
    0000000000063dc4 T HUFv05_readDTableX4
    00000000000683c4 T HUFv06_decompress
    0000000000067404 T HUFv06_decompress1X2
    00000000000671a8 T HUFv06_decompress1X2_usingDTable
    0000000000067f1c T HUFv06_decompress1X4
    0000000000067d20 T HUFv06_decompress1X4_usingDTable
    00000000000678b4 T HUFv06_decompress4X2
    00000000000674a0 T HUFv06_decompress4X2_usingDTable
    0000000000068324 T HUFv06_decompress4X4
    0000000000067fbc T HUFv06_decompress4X4_usingDTable
    0000000000066ea8 T HUFv06_readDTableX2
    0000000000067950 T HUFv06_readDTableX4
    000000000006bc8c T HUFv07_decompress
    000000000006ae00 T HUFv07_decompress1X2
    000000000006ada8 T HUFv07_decompress1X2_DCtx
    000000000006ace8 T HUFv07_decompress1X2_usingDTable
    000000000006b7c8 T HUFv07_decompress1X4
    000000000006b770 T HUFv07_decompress1X4_DCtx
    000000000006b6b4 T HUFv07_decompress1X4_usingDTable
    000000000006be78 T HUFv07_decompress1X_DCtx
    000000000006bc2c T HUFv07_decompress1X_usingDTable
    000000000006b244 T HUFv07_decompress4X2
    000000000006b1ec T HUFv07_decompress4X2_DCtx
    000000000006ae7c T HUFv07_decompress4X2_usingDTable
    000000000006bbb0 T HUFv07_decompress4X4
    000000000006bb58 T HUFv07_decompress4X4_DCtx
    000000000006b844 T HUFv07_decompress4X4_usingDTable
    000000000006bd24 T HUFv07_decompress4X_DCtx
    000000000006bdd8 T HUFv07_decompress4X_hufOnly
    000000000006bc3c T HUFv07_decompress4X_usingDTable
    000000000006a22c T HUFv07_getErrorName
    000000000006a228 T HUFv07_isError
    000000000006aba4 T HUFv07_readDTableX2
    000000000006b2c0 T HUFv07_readDTableX4
    000000000006a454 T HUFv07_readStats
    000000000006bc4c T HUFv07_selectDecoder
    00000000000145e8 T HUF_validateCTable
    0000000000013cf0 T HUF_writeCTable
    0000000000013a4c T HUF_writeCTable_wksp
    000000000005f6b0 T Java_com_github_luben_zstd_Zstd_blockSizeMax
    000000000005f688 T Java_com_github_luben_zstd_Zstd_chainLogMax
    000000000005f680 T Java_com_github_luben_zstd_Zstd_chainLogMin
    000000000005f3a0 T Java_com_github_luben_zstd_Zstd_compressBound
    000000000005de10 T Java_com_github_luben_zstd_ZstdCompressCtx_compressByteArray0
    000000000005dd14 T Java_com_github_luben_zstd_ZstdCompressCtx_compressDirectByteBuffer0
    000000000005dbbc T Java_com_github_luben_zstd_ZstdCompressCtx_compressDirectByteBufferStream0
    000000000005d924 T Java_com_github_luben_zstd_ZstdCompressCtx_free
    000000000005d8d4 T Java_com_github_luben_zstd_ZstdCompressCtx_init
    000000000005dab8 T Java_com_github_luben_zstd_ZstdCompressCtx_loadCDict0
    000000000005da44 T Java_com_github_luben_zstd_ZstdCompressCtx_loadCDictFast0
    000000000005db5c T Java_com_github_luben_zstd_ZstdCompressCtx_reset0
    000000000005d984 T Java_com_github_luben_zstd_ZstdCompressCtx_setChecksum0
    000000000005d9c4 T Java_com_github_luben_zstd_ZstdCompressCtx_setContentSize0
    000000000005da04 T Java_com_github_luben_zstd_ZstdCompressCtx_setDictID0
    000000000005d94c T Java_com_github_luben_zstd_ZstdCompressCtx_setLevel0
    000000000005db80 T Java_com_github_luben_zstd_ZstdCompressCtx_setPledgedSrcSize0
    000000000005d74c T Java_com_github_luben_zstd_Zstd_compressDirectByteBufferFastDict0
    000000000005d644 T Java_com_github_luben_zstd_Zstd_compressFastDict0
    000000000005f0f8 T Java_com_github_luben_zstd_Zstd_compressUnsafe
    000000000005e304 T Java_com_github_luben_zstd_ZstdDecompressCtx_decompressByteArray0
    000000000005e208 T Java_com_github_luben_zstd_ZstdDecompressCtx_decompressDirectByteBuffer0
    000000000005e0b0 T Java_com_github_luben_zstd_ZstdDecompressCtx_decompressDirectByteBufferStream0
    000000000005df4c T Java_com_github_luben_zstd_ZstdDecompressCtx_free
    000000000005defc T Java_com_github_luben_zstd_ZstdDecompressCtx_init
    000000000005dfe8 T Java_com_github_luben_zstd_ZstdDecompressCtx_loadDDict0
    000000000005df74 T Java_com_github_luben_zstd_ZstdDecompressCtx_loadDDictFast0
    000000000005e08c T Java_com_github_luben_zstd_ZstdDecompressCtx_reset0
    000000000005d810 T Java_com_github_luben_zstd_Zstd_decompressDirectByteBufferFastDict0
    000000000005f318 T Java_com_github_luben_zstd_Zstd_decompressedDirectByteBufferSize
    000000000005f1a4 T Java_com_github_luben_zstd_Zstd_decompressedSize0
    000000000005d53c T Java_com_github_luben_zstd_Zstd_decompressFastDict0
    000000000005f190 T Java_com_github_luben_zstd_Zstd_decompressUnsafe
    000000000005f6b8 T Java_com_github_luben_zstd_Zstd_defaultCompressionLevel
    000000000005d43c T Java_com_github_luben_zstd_ZstdDictCompress_free
    000000000005d384 T Java_com_github_luben_zstd_ZstdDictCompress_init
    000000000005d514 T Java_com_github_luben_zstd_ZstdDictDecompress_free
    000000000005d464 T Java_com_github_luben_zstd_ZstdDictDecompress_init
    000000000005cdcc T Java_com_github_luben_zstd_ZstdDirectBufferCompressingStreamNoFinalizer_compressDirectByteBuffer
    000000000005cb94 T Java_com_github_luben_zstd_ZstdDirectBufferCompressingStreamNoFinalizer_createCStream
    000000000005cf50 T Java_com_github_luben_zstd_ZstdDirectBufferCompressingStreamNoFinalizer_endStream
    000000000005cfe8 T Java_com_github_luben_zstd_ZstdDirectBufferCompressingStreamNoFinalizer_flushStream
    000000000005cb98 T Java_com_github_luben_zstd_ZstdDirectBufferCompressingStreamNoFinalizer_freeCStream
    000000000005cba0 T Java_com_github_luben_zstd_ZstdDirectBufferCompressingStreamNoFinalizer_initCStream
    000000000005cbf0 T Java_com_github_luben_zstd_ZstdDirectBufferCompressingStreamNoFinalizer_initCStreamWithDict
    000000000005cd04 T Java_com_github_luben_zstd_ZstdDirectBufferCompressingStreamNoFinalizer_initCStreamWithFastDict
    000000000005cb90 T Java_com_github_luben_zstd_ZstdDirectBufferCompressingStreamNoFinalizer_recommendedCOutSize
    000000000005d15c T Java_com_github_luben_zstd_ZstdDirectBufferDecompressingStreamNoFinalizer_createDStream
    000000000005d1f4 T Java_com_github_luben_zstd_ZstdDirectBufferDecompressingStreamNoFinalizer_decompressStream
    000000000005d160 T Java_com_github_luben_zstd_ZstdDirectBufferDecompressingStreamNoFinalizer_freeDStream
    000000000005d168 T Java_com_github_luben_zstd_ZstdDirectBufferDecompressingStreamNoFinalizer_initDStream
    000000000005d158 T Java_com_github_luben_zstd_ZstdDirectBufferDecompressingStreamNoFinalizer_recommendedDOutSize
    000000000005f700 T Java_com_github_luben_zstd_Zstd_errChecksumWrong
    000000000005f6f8 T Java_com_github_luben_zstd_Zstd_errCorruptionDetected
    000000000005f708 T Java_com_github_luben_zstd_Zstd_errDictionaryCorrupted
    000000000005f718 T Java_com_github_luben_zstd_Zstd_errDictionaryCreationFailed
    000000000005f710 T Java_com_github_luben_zstd_Zstd_errDictionaryWrong
    000000000005f778 T Java_com_github_luben_zstd_Zstd_errDstBufferNull
    000000000005f768 T Java_com_github_luben_zstd_Zstd_errDstSizeTooSmall
    000000000005f6e8 T Java_com_github_luben_zstd_Zstd_errFrameParameterUnsupported
    000000000005f6f0 T Java_com_github_luben_zstd_Zstd_errFrameParameterWindowTooLarge
    000000000005f6d0 T Java_com_github_luben_zstd_Zstd_errGeneric
    000000000005f750 T Java_com_github_luben_zstd_Zstd_errInitMissing
    000000000005f738 T Java_com_github_luben_zstd_Zstd_errMaxSymbolValueTooLarge
    000000000005f740 T Java_com_github_luben_zstd_Zstd_errMaxSymbolValueTooSmall
    000000000005f758 T Java_com_github_luben_zstd_Zstd_errMemoryAllocation
    000000000005f6c8 T Java_com_github_luben_zstd_Zstd_errNoError
    000000000005f728 T Java_com_github_luben_zstd_Zstd_errParameterOutOfBound
    000000000005f720 T Java_com_github_luben_zstd_Zstd_errParameterUnsupported
    000000000005f6d8 T Java_com_github_luben_zstd_Zstd_errPrefixUnknown
    000000000005f770 T Java_com_github_luben_zstd_Zstd_errSrcSizeWrong
    000000000005f748 T Java_com_github_luben_zstd_Zstd_errStageWrong
    000000000005f730 T Java_com_github_luben_zstd_Zstd_errTableLogTooLarge
    000000000005f6e0 T Java_com_github_luben_zstd_Zstd_errVersionUnsupported
    000000000005f760 T Java_com_github_luben_zstd_Zstd_errWorkSpaceTooSmall
    000000000005f2d0 T Java_com_github_luben_zstd_Zstd_getDictIdFromDict
    000000000005f21c T Java_com_github_luben_zstd_Zstd_getDictIdFromFrame
    000000000005f264 T Java_com_github_luben_zstd_Zstd_getDictIdFromFrameBuffer
    000000000005f3e8 T Java_com_github_luben_zstd_Zstd_getErrorCode
    000000000005f3b4 T Java_com_github_luben_zstd_Zstd_getErrorName
    000000000005f694 T Java_com_github_luben_zstd_Zstd_hashLogMax
    000000000005f68c T Java_com_github_luben_zstd_Zstd_hashLogMin
    000000000005e708 T Java_com_github_luben_zstd_ZstdInputStreamNoFinalizer_createDStream
    000000000005e7a4 T Java_com_github_luben_zstd_ZstdInputStreamNoFinalizer_decompressStream
    000000000005e70c T Java_com_github_luben_zstd_ZstdInputStreamNoFinalizer_freeDStream
    000000000005e724 T Java_com_github_luben_zstd_ZstdInputStreamNoFinalizer_initDStream
    000000000005e700 T Java_com_github_luben_zstd_ZstdInputStreamNoFinalizer_recommendedDInSize
    000000000005e704 T Java_com_github_luben_zstd_ZstdInputStreamNoFinalizer_recommendedDOutSize
    000000000005f3a8 T Java_com_github_luben_zstd_Zstd_isError
    000000000005f4c4 T Java_com_github_luben_zstd_Zstd_loadDictCompress
    000000000005f404 T Java_com_github_luben_zstd_Zstd_loadDictDecompress
    000000000005f520 T Java_com_github_luben_zstd_Zstd_loadFastDictCompress
    000000000005f460 T Java_com_github_luben_zstd_Zstd_loadFastDictDecompress
    000000000005f6a4 T Java_com_github_luben_zstd_Zstd_magicNumber
    000000000005f6c4 T Java_com_github_luben_zstd_Zstd_maxCompressionLevel
    000000000005f6c0 T Java_com_github_luben_zstd_Zstd_minCompressionLevel
    000000000005ea2c T Java_com_github_luben_zstd_ZstdOutputStreamNoFinalizer_compressStream
    000000000005e97c T Java_com_github_luben_zstd_ZstdOutputStreamNoFinalizer_createCStream
    000000000005eba4 T Java_com_github_luben_zstd_ZstdOutputStreamNoFinalizer_endStream
    000000000005ec20 T Java_com_github_luben_zstd_ZstdOutputStreamNoFinalizer_flushStream
    000000000005e980 T Java_com_github_luben_zstd_ZstdOutputStreamNoFinalizer_freeCStream
    000000000005e978 T Java_com_github_luben_zstd_ZstdOutputStreamNoFinalizer_recommendedCOutSize
    000000000005e998 T Java_com_github_luben_zstd_ZstdOutputStreamNoFinalizer_resetCStream
    000000000005f6a0 T Java_com_github_luben_zstd_Zstd_searchLogMax
    000000000005f698 T Java_com_github_luben_zstd_Zstd_searchLogMin
    000000000005f584 T Java_com_github_luben_zstd_Zstd_setCompressionChecksums
    000000000005f5b4 T Java_com_github_luben_zstd_Zstd_setCompressionLevel
    000000000005f5d8 T Java_com_github_luben_zstd_Zstd_setCompressionLong
    000000000005f64c T Java_com_github_luben_zstd_Zstd_setCompressionWorkers
    000000000005ed4c T Java_com_github_luben_zstd_Zstd_trainFromBuffer
    000000000005ef30 T Java_com_github_luben_zstd_Zstd_trainFromBufferDirect
    000000000005f678 T Java_com_github_luben_zstd_Zstd_windowLogMax
    000000000005f670 T Java_com_github_luben_zstd_Zstd_windowLogMin
    0000000000011908 T POOL_add
    00000000000113d8 T POOL_create
    0000000000011428 T POOL_create_advanced
    00000000000115b8 T POOL_free
    00000000000117d0 T POOL_resize
    00000000000117b4 T POOL_sizeof
    00000000000119fc T POOL_tryAdd
    000000000005fe94 T ZBUFFv04_createDCtx
    000000000005ff64 T ZBUFFv04_decompressContinue
    000000000005ff1c T ZBUFFv04_decompressInit
    000000000005ff5c T ZBUFFv04_decompressWithDictionary
    000000000005fedc T ZBUFFv04_freeDCtx
    000000000005f9d4 T ZBUFFv04_getErrorName
    000000000005f9c8 T ZBUFFv04_isError
    000000000005f9e0 T ZBUFFv04_recommendedDInSize
    000000000005f9ec T ZBUFFv04_recommendedDOutSize
    0000000000065ec4 T ZBUFFv05_createDCtx
    0000000000065f78 T ZBUFFv05_decompressContinue
    0000000000065f6c T ZBUFFv05_decompressInit
    0000000000065f4c T ZBUFFv05_decompressInitDictionary
    0000000000065f0c T ZBUFFv05_freeDCtx
    00000000000663ac T ZBUFFv05_getErrorName
    00000000000663a8 T ZBUFFv05_isError
    00000000000663b0 T ZBUFFv05_recommendedDInSize
    00000000000663bc T ZBUFFv05_recommendedDOutSize
    00000000000698f4 T ZBUFFv06_createDCtx
    00000000000699a8 T ZBUFFv06_decompressContinue
    000000000006999c T ZBUFFv06_decompressInit
    000000000006997c T ZBUFFv06_decompressInitDictionary
    000000000006993c T ZBUFFv06_freeDCtx
    00000000000684f4 T ZBUFFv06_getErrorName
    00000000000684f0 T ZBUFFv06_isError
    0000000000069dec T ZBUFFv06_recommendedDInSize
    0000000000069df8 T ZBUFFv06_recommendedDOutSize
    000000000006d9d0 T ZBUFFv07_createDCtx
    000000000006da18 T ZBUFFv07_createDCtx_advanced
    000000000006db80 T ZBUFFv07_decompressContinue
    000000000006db74 T ZBUFFv07_decompressInit
    000000000006db54 T ZBUFFv07_decompressInitDictionary
    000000000006daf4 T ZBUFFv07_freeDCtx
    000000000006bf38 T ZBUFFv07_getErrorName
    000000000006bf34 T ZBUFFv07_isError
    000000000006dff4 T ZBUFFv07_recommendedDInSize
    000000000006dffc T ZBUFFv07_recommendedDOutSize
    000000000005c714 T ZDICT_addEntropyTablesFromBuffer
    000000000005ac54 T ZDICT_finalizeDictionary
    000000000005aba8 T ZDICT_getDictHeaderSize
    000000000005ab7c T ZDICT_getDictID
    000000000005ab70 T ZDICT_getErrorName
    000000000005ab64 T ZDICT_isError
    0000000000055760 T ZDICT_optimizeTrainFromBuffer_cover
    000000000005a254 T ZDICT_optimizeTrainFromBuffer_fastCover
    000000000005c6a4 T ZDICT_trainFromBuffer
    00000000000544e8 T ZDICT_trainFromBuffer_cover
    000000000005984c T ZDICT_trainFromBuffer_fastCover
    000000000005b778 T ZDICT_trainFromBuffer_legacy
    0000000000016d58 T ZSTD_adjustCParams
    0000000000017de8 T ZSTD_buildBlockEntropyStats
    000000000001ed64 T ZSTD_buildCTable
    0000000000050de0 T ZSTD_buildFSETable
    0000000000016898 T ZSTD_CCtx_getParameter
    0000000000016c10 T ZSTD_CCtx_loadDictionary
    0000000000016ab4 T ZSTD_CCtx_loadDictionary_advanced
    0000000000016c04 T ZSTD_CCtx_loadDictionary_byReference
    00000000000168a0 T ZSTD_CCtxParams_getParameter
    0000000000015f90 T ZSTD_CCtxParams_init
    0000000000015fcc T ZSTD_CCtxParams_init_advanced
    0000000000015f60 T ZSTD_CCtxParams_reset
    00000000000163d8 T ZSTD_CCtxParams_setParameter
    0000000000016c1c T ZSTD_CCtx_refCDict
    0000000000016c70 T ZSTD_CCtx_refPrefix
    0000000000016c78 T ZSTD_CCtx_refPrefix_advanced
    0000000000016c54 T ZSTD_CCtx_refThreadPool
    0000000000016ccc T ZSTD_CCtx_reset
    0000000000016340 T ZSTD_CCtx_setParameter
    0000000000016a64 T ZSTD_CCtx_setParametersUsingCCtxParams
    0000000000016a94 T ZSTD_CCtx_setPledgedSrcSize
    0000000000019284 T ZSTD_CCtx_trace
    0000000000053b58 T ZSTD_checkContinuity
    000000000001604c T ZSTD_checkCParams
    00000000000195c8 T ZSTD_compress
    0000000000017cfc T ZSTD_compress2
    00000000000193a8 T ZSTD_compress_advanced
    0000000000019464 T ZSTD_compress_advanced_internal
    0000000000019274 T ZSTD_compressBegin
    000000000001913c T ZSTD_compressBegin_advanced
    0000000000018cac T ZSTD_compressBegin_advanced_internal
    000000000001a210 T ZSTD_compressBegin_usingCDict
    000000000001a0cc T ZSTD_compressBegin_usingCDict_advanced
    00000000000191b4 T ZSTD_compressBegin_usingDict
    0000000000018988 T ZSTD_compressBlock
    000000000002a160 T ZSTD_compressBlock_btlazy2
    000000000002af10 T ZSTD_compressBlock_btlazy2_dictMatchState
    000000000002f214 T ZSTD_compressBlock_btlazy2_extDict
    0000000000040af4 T ZSTD_compressBlock_btopt
    0000000000042410 T ZSTD_compressBlock_btopt_dictMatchState
    0000000000042420 T ZSTD_compressBlock_btopt_extDict
    0000000000041734 T ZSTD_compressBlock_btultra
    000000000004230c T ZSTD_compressBlock_btultra2
    0000000000042418 T ZSTD_compressBlock_btultra_dictMatchState
    0000000000042428 T ZSTD_compressBlock_btultra_extDict
    0000000000020150 T ZSTD_compressBlock_doubleFast
    0000000000021a7c T ZSTD_compressBlock_doubleFast_dictMatchState
    0000000000023dd8 T ZSTD_compressBlock_doubleFast_extDict
    00000000000252a8 T ZSTD_compressBlock_fast
    0000000000026e44 T ZSTD_compressBlock_fast_dictMatchState
    00000000000287c8 T ZSTD_compressBlock_fast_extDict
    000000000002abc0 T ZSTD_compressBlock_greedy
    000000000002c014 T ZSTD_compressBlock_greedy_dedicatedDictSearch
    000000000002e198 T ZSTD_compressBlock_greedy_dedicatedDictSearch_row
    000000000002b7fc T ZSTD_compressBlock_greedy_dictMatchState
    000000000002d7bc T ZSTD_compressBlock_greedy_dictMatchState_row
    000000000002e460 T ZSTD_compressBlock_greedy_extDict
    000000000002f5f4 T ZSTD_compressBlock_greedy_extDict_row
    000000000002ccd4 T ZSTD_compressBlock_greedy_row
    000000000002a80c T ZSTD_compressBlock_lazy
    000000000002a4f8 T ZSTD_compressBlock_lazy2
    000000000002ba4c T ZSTD_compressBlock_lazy2_dedicatedDictSearch
    000000000002da84 T ZSTD_compressBlock_lazy2_dedicatedDictSearch_row
    000000000002b234 T ZSTD_compressBlock_lazy2_dictMatchState
    000000000002d0a8 T ZSTD_compressBlock_lazy2_dictMatchState_row
    000000000002ee34 T ZSTD_compressBlock_lazy2_extDict
    0000000000030184 T ZSTD_compressBlock_lazy2_extDict_row
    000000000002c264 T ZSTD_compressBlock_lazy2_row
    000000000002bd1c T ZSTD_compressBlock_lazy_dedicatedDictSearch
    000000000002de48 T ZSTD_compressBlock_lazy_dedicatedDictSearch_row
    000000000002b504 T ZSTD_compressBlock_lazy_dictMatchState
    000000000002d46c T ZSTD_compressBlock_lazy_dictMatchState_row
    000000000002e7d8 T ZSTD_compressBlock_lazy_extDict
    000000000002fa8c T ZSTD_compressBlock_lazy_extDict_row
    000000000002c7f8 T ZSTD_compressBlock_lazy_row
    0000000000015a20 T ZSTD_compressBound
    00000000000195b8 T ZSTD_compressCCtx
    00000000000181e0 T ZSTD_compressContinue
    0000000000019288 T ZSTD_compressEnd
    000000000001e7a0 T ZSTD_compressLiterals
    000000000001e734 T ZSTD_compressRleLiteralsBlock
    000000000001b010 T ZSTD_compressSequences
    000000000001a610 T ZSTD_compressStream
    000000000001a66c T ZSTD_compressStream2
    000000000001af90 T ZSTD_compressStream2_simpleArgs
    000000000001f52c T ZSTD_compressSuperBlock
    000000000001a298 T ZSTD_compress_usingCDict
    000000000001a220 T ZSTD_compress_usingCDict_advanced
    00000000000194f0 T ZSTD_compress_usingDict
    0000000000017910 T ZSTD_copyCCtx
    000000000004d828 T ZSTD_copyDCtx
    000000000004cf68 T ZSTD_copyDDictParameters
    0000000000016184 T ZSTD_cParam_getBounds
    0000000000015a40 T ZSTD_createCCtx
    0000000000015a8c T ZSTD_createCCtx_advanced
    0000000000015e94 T ZSTD_createCCtxParams
    0000000000019dd0 T ZSTD_createCDict
    0000000000019840 T ZSTD_createCDict_advanced
    00000000000198fc T ZSTD_createCDict_advanced2
    0000000000019e30 T ZSTD_createCDict_byReference
    000000000001a2a4 T ZSTD_createCStream
    000000000001a2f0 T ZSTD_createCStream_advanced
    000000000004d664 T ZSTD_createDCtx
    000000000004d574 T ZSTD_createDCtx_advanced
    000000000004d2c0 T ZSTD_createDDict
    000000000004d008 T ZSTD_createDDict_advanced
    000000000004d304 T ZSTD_createDDict_byReference
    000000000004f088 T ZSTD_createDStream
    000000000004f0cc T ZSTD_createDStream_advanced
    00000000000113d0 T ZSTD_createThreadPool
    000000000001eb00 T ZSTD_crossEntropyCost
    000000000001a340 T ZSTD_CStreamInSize
    000000000001a348 T ZSTD_CStreamOutSize
    0000000000012568 T ZSTD_customCalloc
    00000000000125b4 T ZSTD_customFree
    0000000000012550 T ZSTD_customMalloc
    0000000000016d48 T ZSTD_cycleLog
    000000000004f6fc T ZSTD_DCtx_getParameter
    000000000004f200 T ZSTD_DCtx_loadDictionary
    000000000004f120 T ZSTD_DCtx_loadDictionary_advanced
    000000000004f1f4 T ZSTD_DCtx_loadDictionary_byReference
    000000000004f344 T ZSTD_DCtx_refDDict
    000000000004f24c T ZSTD_DCtx_refPrefix
    000000000004f20c T ZSTD_DCtx_refPrefix_advanced
    000000000004f280 T ZSTD_DCtx_reset
    000000000004f5ec T ZSTD_DCtx_setFormat
    000000000004f560 T ZSTD_DCtx_setMaxWindowSize
    000000000004f5f8 T ZSTD_DCtx_setParameter
    000000000004cf58 T ZSTD_DDict_dictContent
    000000000004cf60 T ZSTD_DDict_dictSize
    0000000000050920 T ZSTD_decodeLiteralsBlock
    0000000000050fc0 T ZSTD_decodeSeqHeaders
    000000000004f7b4 T ZSTD_decodingBufferSize_min
    000000000004e5d0 T ZSTD_decompress
    000000000004ee08 T ZSTD_decompressBegin
    000000000004ef88 T ZSTD_decompressBegin_usingDDict
    000000000004eea0 T ZSTD_decompressBegin_usingDict
    0000000000053b88 T ZSTD_decompressBlock
    0000000000051340 T ZSTD_decompressBlock_internal
    000000000004df60 T ZSTD_decompressBound
    000000000004e690 T ZSTD_decompressContinue
    000000000004e534 T ZSTD_decompressDCtx
    000000000004f888 T ZSTD_decompressStream
    00000000000504a4 T ZSTD_decompressStream_simpleArgs
    000000000004e580 T ZSTD_decompress_usingDDict
    000000000004e000 T ZSTD_decompress_usingDict
    0000000000029b80 T ZSTD_dedicatedDictSearch_lazy_loadDictionary
    000000000001b5b8 T ZSTD_defaultCLevel
    000000000004f59c T ZSTD_dParam_getBounds
    000000000004f10c T ZSTD_DStreamInSize
    000000000004f118 T ZSTD_DStreamOutSize
    000000000001eef8 T ZSTD_encodeSequences
    000000000001b538 T ZSTD_endStream
    0000000000017568 T ZSTD_estimateCCtxSize
    00000000000171c4 T ZSTD_estimateCCtxSize_usingCCtxParams
    0000000000017404 T ZSTD_estimateCCtxSize_usingCParams
    00000000000197b8 T ZSTD_estimateCDictSize
    0000000000019670 T ZSTD_estimateCDictSize_advanced
    00000000000177c4 T ZSTD_estimateCStreamSize
    000000000001764c T ZSTD_estimateCStreamSize_usingCCtxParams
    0000000000017734 T ZSTD_estimateCStreamSize_usingCParams
    000000000004d498 T ZSTD_estimateDCtxSize
    000000000004d3dc T ZSTD_estimateDDictSize
    000000000004f7dc T ZSTD_estimateDStreamSize
    000000000004f7fc T ZSTD_estimateDStreamSize_fromFrame
    0000000000020004 T ZSTD_fillDoubleHashTable
    000000000002512c T ZSTD_fillHashTable
    000000000004dd10 T ZSTD_findDecompressedSize
    000000000004dddc T ZSTD_findFrameCompressedSize
    000000000001b4f4 T ZSTD_flushStream
    000000000004d8e0 T ZSTD_frameHeaderSize
    0000000000015d04 T ZSTD_freeCCtx
    0000000000015f10 T ZSTD_freeCCtxParams
    0000000000019d1c T ZSTD_freeCDict
    000000000001a33c T ZSTD_freeCStream
    000000000004d6a4 T ZSTD_freeDCtx
    000000000004d22c T ZSTD_freeDDict
    000000000004f108 T ZSTD_freeDStream
    00000000000117b0 T ZSTD_freeThreadPool
    000000000001ea5c T ZSTD_fseBitCost
    0000000000017c14 T ZSTD_generateSequences
    000000000001896c T ZSTD_getBlockSize
    00000000000508d0 T ZSTD_getcBlockSize
    000000000001b5c0 T ZSTD_getCParams
    0000000000016f7c T ZSTD_getCParamsFromCCtxParams
    000000000001a0b0 T ZSTD_getCParamsFromCDict
    000000000004dde0 T ZSTD_getDecompressedSize
    000000000001a0c0 T ZSTD_getDictID_fromCDict
    000000000004d414 T ZSTD_getDictID_fromDDict
    000000000004f004 T ZSTD_getDictID_fromDict
    000000000004f02c T ZSTD_getDictID_fromFrame
    0000000000012540 T ZSTD_getErrorCode
    0000000000012534 T ZSTD_getErrorName
    000000000001254c T ZSTD_getErrorString
    000000000004db4c T ZSTD_getFrameContentSize
    000000000004db44 T ZSTD_getFrameHeader
    000000000004d950 T ZSTD_getFrameHeader_advanced
    0000000000017844 T ZSTD_getFrameProgression
    000000000001b5d0 T ZSTD_getParams
    0000000000015e8c T ZSTD_getSeqStore
    000000000001a5cc T ZSTD_initCStream
    000000000001a430 T ZSTD_initCStream_advanced
    000000000001a36c T ZSTD_initCStream_internal
    000000000001a558 T ZSTD_initCStream_srcSize
    000000000001a418 T ZSTD_initCStream_usingCDict
    000000000001a3ec T ZSTD_initCStream_usingCDict_advanced
    000000000001a500 T ZSTD_initCStream_usingDict
    000000000004f310 T ZSTD_initDStream
    000000000004f318 T ZSTD_initDStream_usingDDict
    000000000004f254 T ZSTD_initDStream_usingDict
    0000000000015b68 T ZSTD_initStaticCCtx
    0000000000019ef0 T ZSTD_initStaticCDict
    000000000001a338 T ZSTD_initStaticCStream
    000000000004d4a4 T ZSTD_initStaticDCtx
    000000000004d348 T ZSTD_initStaticDDict
    000000000004f0c8 T ZSTD_initStaticDStream
    0000000000029ecc T ZSTD_insertAndFindFirstIndex
    000000000004dfc4 T ZSTD_insertBlock
    00000000000178e8 T ZSTD_invalidateRepCodes
    0000000000012528 T ZSTD_isError
    000000000004d830 T ZSTD_isFrame
    000000000004d8b8 T ZSTD_isSkippableFrame
    000000000003f7e8 T ZSTD_ldm_adjustParameters
    00000000000403dc T ZSTD_ldm_blockCompress
    000000000003f8a8 T ZSTD_ldm_fillHashTable
    000000000003fbb0 T ZSTD_ldm_generateSequences
    000000000003f888 T ZSTD_ldm_getMaxNbSeq
    000000000003f854 T ZSTD_ldm_getTableSize
    0000000000040370 T ZSTD_ldm_skipRawSeqStoreBytes
    00000000000402d0 T ZSTD_ldm_skipSequences
    00000000000189bc T ZSTD_loadCEntropy
    000000000004ebe4 T ZSTD_loadDEntropy
    0000000000016338 T ZSTD_maxCLevel
    0000000000017d8c T ZSTD_mergeBlockDelimiters
    0000000000016330 T ZSTD_minCLevel
    0000000000048718 T ZSTDMT_compressStream_generic
    00000000000475c0 T ZSTDMT_createCCtx_advanced
    00000000000477f8 T ZSTDMT_freeCCtx
    0000000000047d98 T ZSTDMT_getFrameProgression
    0000000000047f34 T ZSTDMT_initCStream_internal
    0000000000048704 T ZSTDMT_nextInputSizeHint
    0000000000047bd4 T ZSTDMT_sizeof_CCtx
    0000000000047eac T ZSTDMT_toFlushNow
    0000000000047d10 T ZSTDMT_updateCParams_whileCompressing
    000000000004e668 T ZSTD_nextInputType
    000000000004e660 T ZSTD_nextSrcSizeToDecompress
    000000000001e69c T ZSTD_noCompressLiterals
    000000000004dc3c T ZSTD_readSkippableFrame
    00000000000181a0 T ZSTD_referenceExternalSequences
    00000000000178a4 T ZSTD_reset_compressedBlockState
    000000000001a354 T ZSTD_resetCStream
    000000000004f538 T ZSTD_resetDStream
    0000000000017bfc T ZSTD_resetSeqStore
    000000000002a038 T ZSTD_row_update
    0000000000017bbc T ZSTD_selectBlockCompressor
    000000000001eb58 T ZSTD_selectEncodingType
    0000000000017ae8 T ZSTD_seqToCodes
    0000000000015e08 T ZSTD_sizeof_CCtx
    0000000000019820 T ZSTD_sizeof_CDict
    0000000000015e88 T ZSTD_sizeof_CStream
    000000000004d454 T ZSTD_sizeof_DCtx
    000000000004d3f0 T ZSTD_sizeof_DDict
    000000000004f7b0 T ZSTD_sizeof_DStream
    0000000000017888 T ZSTD_toFlushNow
    0000000000040838 T ZSTD_updateTree
    00000000000603c8 T ZSTDv04_createDCtx
    000000000005fba8 T ZSTDv04_decompress
    000000000005fc7c T ZSTDv04_decompressContinue
    000000000005f9f4 T ZSTDv04_decompressDCtx
    000000000005f888 T ZSTDv04_findFrameSizeInfoLegacy
    00000000000603cc T ZSTDv04_freeDCtx
    000000000005fc74 T ZSTDv04_nextSrcSizeToDecompress
    000000000005fc54 T ZSTDv04_resetDCtx
    0000000000064998 T ZSTDv05_copyDCtx
    0000000000064954 T ZSTDv05_createDCtx
    0000000000065af0 T ZSTDv05_decompress
    0000000000064944 T ZSTDv05_decompressBegin
    000000000006589c T ZSTDv05_decompressBegin_usingDict
    00000000000649fc T ZSTDv05_decompressBlock
    0000000000065c9c T ZSTDv05_decompressContinue
    0000000000065ae4 T ZSTDv05_decompressDCtx
    0000000000065840 T ZSTDv05_decompress_usingDict
    0000000000065640 T ZSTDv05_decompress_usingPreparedDCtx
    0000000000065b58 T ZSTDv05_findFrameSizeInfoLegacy
    0000000000064980 T ZSTDv05_freeDCtx
    0000000000064934 T ZSTDv05_getErrorName
    00000000000649a0 T ZSTDv05_getFrameParams
    0000000000064930 T ZSTDv05_isError
    0000000000065c94 T ZSTDv05_nextSrcSizeToDecompress
    0000000000064938 T ZSTDv05_sizeofDCtx
    0000000000068558 T ZSTDv06_copyDCtx
    0000000000068514 T ZSTDv06_createDCtx
    0000000000069498 T ZSTDv06_decompress
    0000000000068504 T ZSTDv06_decompressBegin
    0000000000069240 T ZSTDv06_decompressBegin_usingDict
    0000000000068624 T ZSTDv06_decompressBlock
    000000000006968c T ZSTDv06_decompressContinue
    000000000006948c T ZSTDv06_decompressDCtx
    00000000000691e4 T ZSTDv06_decompress_usingDict
    0000000000068fd0 T ZSTDv06_decompress_usingPreparedDCtx
    0000000000069500 T ZSTDv06_findFrameSizeInfoLegacy
    0000000000068540 T ZSTDv06_freeDCtx
    00000000000684ec T ZSTDv06_getErrorName
    0000000000068560 T ZSTDv06_getFrameParams
    00000000000684e8 T ZSTDv06_isError
    0000000000069684 T ZSTDv06_nextSrcSizeToDecompress
    00000000000684f8 T ZSTDv06_sizeofDCtx
    000000000006c0a4 T ZSTDv07_copyDCtx
    000000000006c038 T ZSTDv07_createDCtx
    000000000006bfb8 T ZSTDv07_createDCtx_advanced
    000000000006d834 T ZSTDv07_createDDict
    000000000006d254 T ZSTDv07_decompress
    000000000006bf4c T ZSTDv07_decompressBegin
    000000000006cd7c T ZSTDv07_decompressBegin_usingDict
    000000000006c30c T ZSTDv07_decompressBlock
    000000000006d460 T ZSTDv07_decompressContinue
    000000000006d248 T ZSTDv07_decompressDCtx
    000000000006d974 T ZSTDv07_decompress_usingDDict
    000000000006cd20 T ZSTDv07_decompress_usingDict
    000000000006bf44 T ZSTDv07_estimateDCtxSize
    000000000006d2c4 T ZSTDv07_findFrameSizeInfoLegacy
    000000000006c080 T ZSTDv07_freeDCtx
    000000000006d91c T ZSTDv07_freeDDict
    000000000006c2b0 T ZSTDv07_getDecompressedSize
    000000000006bf30 T ZSTDv07_getErrorName
    000000000006c0ac T ZSTDv07_getFrameParams
    000000000006cce4 T ZSTDv07_insertBlock
    000000000006bf2c T ZSTDv07_isError
    000000000006d44c T ZSTDv07_isSkipFrame
    000000000006d444 T ZSTDv07_nextSrcSizeToDecompress
    000000000006bf3c T ZSTDv07_sizeofDCtx
    0000000000012514 T ZSTD_versionNumber
    000000000001251c T ZSTD_versionString
    000000000001817c T ZSTD_writeLastEmptyBlock
    000000000001810c T ZSTD_writeSkippableFrame
    0000000000011a94 T ZSTD_XXH32
    0000000000011e58 T ZSTD_XXH32_canonicalFromHash
    0000000000011b80 T ZSTD_XXH32_copyState
    0000000000011b60 T ZSTD_XXH32_createState
    0000000000011d70 T ZSTD_XXH32_digest
    0000000000011b68 T ZSTD_XXH32_freeState
    0000000000011e64 T ZSTD_XXH32_hashFromCanonical
    0000000000011b94 T ZSTD_XXH32_reset
    0000000000011bcc T ZSTD_XXH32_update
    0000000000011e70 T ZSTD_XXH64
    00000000000124e0 T ZSTD_XXH64_canonicalFromHash
    0000000000012080 T ZSTD_XXH64_copyState
    0000000000012060 T ZSTD_XXH64_createState
    00000000000122f0 T ZSTD_XXH64_digest
    0000000000012068 T ZSTD_XXH64_freeState
    00000000000124ec T ZSTD_XXH64_hashFromCanonical
    0000000000012088 T ZSTD_XXH64_reset
    00000000000120e4 T ZSTD_XXH64_update
    0000000000011a8c T ZSTD_XXH_versionNumber
  + app/src/main/res/anim/abc_fade_in.xml
  + app/src/main/res/anim/abc_fade_out.xml
  + app/src/main/res/anim/abc_grow_fade_in_from_bottom.xml
  + app/src/main/res/anim/abc_popup_enter.xml
  + app/src/main/res/anim/abc_popup_exit.xml
  + app/src/main/res/anim/abc_shrink_fade_out_from_bottom.xml
  + app/src/main/res/anim/abc_slide_in_bottom.xml
  + app/src/main/res/anim/abc_slide_in_top.xml
  + app/src/main/res/anim/abc_slide_out_bottom.xml
  + app/src/main/res/anim/abc_slide_out_top.xml
  + app/src/main/res/anim/abc_tooltip_enter.xml
  + app/src/main/res/anim/abc_tooltip_exit.xml
  + app/src/main/res/anim/btn_checkbox_to_checked_box_inner_merged_animation.xml
  + app/src/main/res/anim/btn_checkbox_to_checked_box_outer_merged_animation.xml
  + app/src/main/res/anim/btn_checkbox_to_checked_icon_null_animation.xml
  + app/src/main/res/anim/btn_checkbox_to_unchecked_box_inner_merged_animation.xml
  + app/src/main/res/anim/btn_checkbox_to_unchecked_check_path_merged_animation.xml
  + app/src/main/res/anim/btn_checkbox_to_unchecked_icon_null_animation.xml
  + app/src/main/res/anim/btn_radio_to_off_mtrl_dot_group_animation.xml
  + app/src/main/res/anim/btn_radio_to_off_mtrl_ring_outer_animation.xml
  + app/src/main/res/anim/btn_radio_to_off_mtrl_ring_outer_path_animation.xml
  + app/src/main/res/anim/btn_radio_to_on_mtrl_dot_group_animation.xml
  + app/src/main/res/anim/btn_radio_to_on_mtrl_ring_outer_animation.xml
  + app/src/main/res/anim/btn_radio_to_on_mtrl_ring_outer_path_animation.xml
  + app/src/main/res/anim/design_bottom_sheet_slide_in.xml
  + app/src/main/res/anim/design_bottom_sheet_slide_out.xml
  + app/src/main/res/anim/design_snackbar_in.xml
  + app/src/main/res/anim/design_snackbar_out.xml
  + app/src/main/res/anim/fragment_close_enter.xml
  + app/src/main/res/anim/fragment_close_exit.xml
  + app/src/main/res/anim/fragment_fade_enter.xml
  + app/src/main/res/anim/fragment_fade_exit.xml
  + app/src/main/res/anim/fragment_fast_out_extra_slow_in.xml
  + app/src/main/res/anim/fragment_open_enter.xml
  + app/src/main/res/anim/fragment_open_exit.xml
  + app/src/main/res/anim/mtrl_bottom_sheet_slide_in.xml
  + app/src/main/res/anim/mtrl_bottom_sheet_slide_out.xml
  + app/src/main/res/anim/mtrl_card_lowers_interpolator.xml
  + app/src/main/res/animator/design_appbar_state_list_animator.xml
  + app/src/main/res/animator/design_fab_hide_motion_spec.xml
  + app/src/main/res/animator/design_fab_show_motion_spec.xml
  + app/src/main/res/animator/linear_indeterminate_line1_head_interpolator.xml
  + app/src/main/res/animator/linear_indeterminate_line1_tail_interpolator.xml
  + app/src/main/res/animator/linear_indeterminate_line2_head_interpolator.xml
  + app/src/main/res/animator/linear_indeterminate_line2_tail_interpolator.xml
  + app/src/main/res/animator/mtrl_btn_state_list_anim.xml
  + app/src/main/res/animator/mtrl_btn_unelevated_state_list_anim.xml
  + app/src/main/res/animator/mtrl_card_state_list_anim.xml
  + app/src/main/res/animator/mtrl_chip_state_list_anim.xml
  + app/src/main/res/animator/mtrl_extended_fab_change_size_collapse_motion_spec.xml
  + app/src/main/res/animator/mtrl_extended_fab_change_size_expand_motion_spec.xml
  + app/src/main/res/animator/mtrl_extended_fab_hide_motion_spec.xml
  + app/src/main/res/animator/mtrl_extended_fab_show_motion_spec.xml
  + app/src/main/res/animator/mtrl_extended_fab_state_list_animator.xml
  + app/src/main/res/animator/mtrl_fab_hide_motion_spec.xml
  + app/src/main/res/animator/mtrl_fab_show_motion_spec.xml
  + app/src/main/res/animator/mtrl_fab_transformation_sheet_collapse_spec.xml
  + app/src/main/res/animator/mtrl_fab_transformation_sheet_expand_spec.xml
  + app/src/main/res/color-night/material_timepicker_button_stroke.xml
  + app/src/main/res/color-night/material_timepicker_clockface.xml
  + app/src/main/res/color-night/material_timepicker_modebutton_tint.xml
  + app/src/main/res/color/abc_background_cache_hint_selector_material_dark.xml
  + app/src/main/res/color/abc_background_cache_hint_selector_material_light.xml
  + app/src/main/res/color/abc_btn_colored_borderless_text_material.xml
  + app/src/main/res/color/abc_btn_colored_text_material.xml
  + app/src/main/res/color/abc_color_highlight_material.xml
  + app/src/main/res/color/abc_hint_foreground_material_dark.xml
  + app/src/main/res/color/abc_hint_foreground_material_light.xml
  + app/src/main/res/color/abc_primary_text_disable_only_material_dark.xml
  + app/src/main/res/color/abc_primary_text_disable_only_material_light.xml
  + app/src/main/res/color/abc_primary_text_material_dark.xml
  + app/src/main/res/color/abc_primary_text_material_light.xml
  + app/src/main/res/color/abc_search_url_text.xml
  + app/src/main/res/color/abc_secondary_text_material_dark.xml
  + app/src/main/res/color/abc_secondary_text_material_light.xml
  + app/src/main/res/color/abc_tint_btn_checkable.xml
  + app/src/main/res/color/abc_tint_default.xml
  + app/src/main/res/color/abc_tint_edittext.xml
  + app/src/main/res/color/abc_tint_seek_thumb.xml
  + app/src/main/res/color/abc_tint_spinner.xml
  + app/src/main/res/color/abc_tint_switch_track.xml
  + app/src/main/res/color/checkbox_themeable_attribute_color.xml
  + app/src/main/res/color/design_box_stroke_color.xml
  + app/src/main/res/color/design_error.xml
  + app/src/main/res/color/design_icon_tint.xml
  + app/src/main/res/color/material_cursor_color.xml
  + app/src/main/res/color/material_on_background_disabled.xml
  + app/src/main/res/color/material_on_background_emphasis_high_type.xml
  + app/src/main/res/color/material_on_background_emphasis_medium.xml
  + app/src/main/res/color/material_on_primary_disabled.xml
  + app/src/main/res/color/material_on_primary_emphasis_high_type.xml
  + app/src/main/res/color/material_on_primary_emphasis_medium.xml
  + app/src/main/res/color/material_on_surface_disabled.xml
  + app/src/main/res/color/material_on_surface_emphasis_high_type.xml
  + app/src/main/res/color/material_on_surface_emphasis_medium.xml
  + app/src/main/res/color/material_on_surface_stroke.xml
  + app/src/main/res/color/material_slider_active_tick_marks_color.xml
  + app/src/main/res/color/material_slider_active_track_color.xml
  + app/src/main/res/color/material_slider_halo_color.xml
  + app/src/main/res/color/material_slider_inactive_tick_marks_color.xml
  + app/src/main/res/color/material_slider_inactive_track_color.xml
  + app/src/main/res/color/material_slider_thumb_color.xml
  + app/src/main/res/color/material_timepicker_button_background.xml
  + app/src/main/res/color/material_timepicker_button_stroke.xml
  + app/src/main/res/color/material_timepicker_clock_text_color.xml
  + app/src/main/res/color/material_timepicker_clockface.xml
  + app/src/main/res/color/material_timepicker_modebutton_tint.xml
  + app/src/main/res/color/mtrl_btn_bg_color_selector.xml
  + app/src/main/res/color/mtrl_btn_ripple_color.xml
  + app/src/main/res/color/mtrl_btn_stroke_color_selector.xml
  + app/src/main/res/color/mtrl_btn_text_btn_bg_color_selector.xml
  + app/src/main/res/color/mtrl_btn_text_btn_ripple_color.xml
  + app/src/main/res/color/mtrl_btn_text_color_selector.xml
  + app/src/main/res/color/mtrl_calendar_item_stroke_color.xml
  + app/src/main/res/color/mtrl_calendar_selected_range.xml
  + app/src/main/res/color/mtrl_card_view_foreground.xml
  + app/src/main/res/color/mtrl_card_view_ripple.xml
  + app/src/main/res/color/mtrl_chip_background_color.xml
  + app/src/main/res/color/mtrl_chip_close_icon_tint.xml
  + app/src/main/res/color/mtrl_chip_surface_color.xml
  + app/src/main/res/color/mtrl_chip_text_color.xml
  + app/src/main/res/color/mtrl_choice_chip_background_color.xml
  + app/src/main/res/color/mtrl_choice_chip_ripple_color.xml
  + app/src/main/res/color/mtrl_choice_chip_text_color.xml
  + app/src/main/res/color/mtrl_error.xml
  + app/src/main/res/color/mtrl_fab_bg_color_selector.xml
  + app/src/main/res/color/mtrl_fab_icon_text_color_selector.xml
  + app/src/main/res/color/mtrl_fab_ripple_color.xml
  + app/src/main/res/color/mtrl_filled_background_color.xml
  + app/src/main/res/color/mtrl_filled_icon_tint.xml
  + app/src/main/res/color/mtrl_filled_stroke_color.xml
  + app/src/main/res/color/mtrl_indicator_text_color.xml
  + app/src/main/res/color/mtrl_navigation_bar_colored_item_tint.xml
  + app/src/main/res/color/mtrl_navigation_bar_colored_ripple_color.xml
  + app/src/main/res/color/mtrl_navigation_bar_item_tint.xml
  + app/src/main/res/color/mtrl_navigation_bar_ripple_color.xml
  + app/src/main/res/color/mtrl_navigation_item_background_color.xml
  + app/src/main/res/color/mtrl_navigation_item_icon_tint.xml
  + app/src/main/res/color/mtrl_navigation_item_text_color.xml
  + app/src/main/res/color/mtrl_on_primary_text_btn_text_color_selector.xml
  + app/src/main/res/color/mtrl_on_surface_ripple_color.xml
  + app/src/main/res/color/mtrl_outlined_icon_tint.xml
  + app/src/main/res/color/mtrl_outlined_stroke_color.xml
  + app/src/main/res/color/mtrl_popupmenu_overlay_color.xml
  + app/src/main/res/color/mtrl_tabs_colored_ripple_color.xml
  + app/src/main/res/color/mtrl_tabs_icon_color_selector.xml
  + app/src/main/res/color/mtrl_tabs_icon_color_selector_colored.xml
  + app/src/main/res/color/mtrl_tabs_legacy_text_color_selector.xml
  + app/src/main/res/color/mtrl_tabs_ripple_color.xml
  + app/src/main/res/color/mtrl_text_btn_text_color_selector.xml
  + app/src/main/res/color/radiobutton_themeable_attribute_color.xml
  + app/src/main/res/color/switch_thumb_material_dark.xml
  + app/src/main/res/color/switch_thumb_material_light.xml
  + app/src/main/res/color/test_mtrl_calendar_day.xml
  + app/src/main/res/color/test_mtrl_calendar_day_selected.xml
  + app/src/main/res/drawable-hdpi/abc_ab_share_pack_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_btn_check_to_on_mtrl_000.png
  + app/src/main/res/drawable-hdpi/abc_btn_check_to_on_mtrl_015.png
  + app/src/main/res/drawable-hdpi/abc_btn_radio_to_on_mtrl_000.png
  + app/src/main/res/drawable-hdpi/abc_btn_radio_to_on_mtrl_015.png
  + app/src/main/res/drawable-hdpi/abc_btn_switch_to_on_mtrl_00001.png
  + app/src/main/res/drawable-hdpi/abc_btn_switch_to_on_mtrl_00012.png
  + app/src/main/res/drawable-hdpi/abc_cab_background_top_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_ic_commit_search_api_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_ic_menu_copy_mtrl_am_alpha.png
  + app/src/main/res/drawable-hdpi/abc_ic_menu_cut_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_ic_menu_paste_mtrl_am_alpha.png
  + app/src/main/res/drawable-hdpi/abc_ic_menu_selectall_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_ic_menu_share_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_ic_star_black_16dp.png
  + app/src/main/res/drawable-hdpi/abc_ic_star_black_36dp.png
  + app/src/main/res/drawable-hdpi/abc_ic_star_black_48dp.png
  + app/src/main/res/drawable-hdpi/abc_ic_star_half_black_16dp.png
  + app/src/main/res/drawable-hdpi/abc_ic_star_half_black_36dp.png
  + app/src/main/res/drawable-hdpi/abc_ic_star_half_black_48dp.png
  + app/src/main/res/drawable-hdpi/abc_list_divider_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_list_focused_holo.png
  + app/src/main/res/drawable-hdpi/abc_list_longpressed_holo.png
  + app/src/main/res/drawable-hdpi/abc_list_pressed_holo_dark.png
  + app/src/main/res/drawable-hdpi/abc_list_pressed_holo_light.png
  + app/src/main/res/drawable-hdpi/abc_list_selector_disabled_holo_dark.png
  + app/src/main/res/drawable-hdpi/abc_list_selector_disabled_holo_light.png
  + app/src/main/res/drawable-hdpi/abc_menu_hardkey_panel_mtrl_mult.png
  + app/src/main/res/drawable-hdpi/abc_popup_background_mtrl_mult.png
  + app/src/main/res/drawable-hdpi/abc_scrubber_control_off_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_scrubber_control_to_pressed_mtrl_000.png
  + app/src/main/res/drawable-hdpi/abc_scrubber_control_to_pressed_mtrl_005.png
  + app/src/main/res/drawable-hdpi/abc_scrubber_primary_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_scrubber_track_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_spinner_mtrl_am_alpha.png
  + app/src/main/res/drawable-hdpi/abc_switch_track_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_tab_indicator_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_text_select_handle_left_mtrl_dark.png
  + app/src/main/res/drawable-hdpi/abc_text_select_handle_left_mtrl_light.png
  + app/src/main/res/drawable-hdpi/abc_text_select_handle_middle_mtrl_dark.png
  + app/src/main/res/drawable-hdpi/abc_text_select_handle_middle_mtrl_light.png
  + app/src/main/res/drawable-hdpi/abc_text_select_handle_right_mtrl_dark.png
  + app/src/main/res/drawable-hdpi/abc_text_select_handle_right_mtrl_light.png
  + app/src/main/res/drawable-hdpi/abc_textfield_activated_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_textfield_default_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_textfield_search_activated_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/abc_textfield_search_default_mtrl_alpha.png
  + app/src/main/res/drawable-hdpi/button_neutral_normal.png
  + app/src/main/res/drawable-hdpi/button_neutral_pressed.png
  + app/src/main/res/drawable-hdpi/button_positive_normal.png
  + app/src/main/res/drawable-hdpi/button_positive_pressed.png
  + app/src/main/res/drawable-hdpi/color_frame.png
  + app/src/main/res/drawable-hdpi/color_frame_selected.png
  + app/src/main/res/drawable-hdpi/combo_box_normal.png
  + app/src/main/res/drawable-hdpi/combo_box_pressed.png
  + app/src/main/res/drawable-hdpi/container_drive.png
  + app/src/main/res/drawable-hdpi/container_file.png
  + app/src/main/res/drawable-hdpi/container_file_library.png
  + app/src/main/res/drawable-hdpi/container_file_link.png
  + app/src/main/res/drawable-hdpi/container_file_window.png
  + app/src/main/res/drawable-hdpi/container_folder.png
  + app/src/main/res/drawable-hdpi/container_folder_documents.png
  + app/src/main/res/drawable-hdpi/container_folder_favorites.png
  + app/src/main/res/drawable-hdpi/content_dialog_background.png
  + app/src/main/res/drawable-hdpi/cursor.png
  + app/src/main/res/drawable-hdpi/edit_text_focused.png
  + app/src/main/res/drawable-hdpi/edit_text_normal.png
  + app/src/main/res/drawable-hdpi/edit_text_pressed.png
  + app/src/main/res/drawable-hdpi/icon_about.png
  + app/src/main/res/drawable-hdpi/icon_add.png
  + app/src/main/res/drawable-hdpi/icon_audio_settings.png
  + app/src/main/res/drawable-hdpi/icon_confirm.png
  + app/src/main/res/drawable-hdpi/icon_container.png
  + app/src/main/res/drawable-hdpi/icon_cpu.png
  + app/src/main/res/drawable-hdpi/icon_debug.png
  + app/src/main/res/drawable-hdpi/icon_display_settings.png
  + app/src/main/res/drawable-hdpi/icon_duplicate.png
  + app/src/main/res/drawable-hdpi/icon_edit.png
  + app/src/main/res/drawable-hdpi/icon_env_var.png
  + app/src/main/res/drawable-hdpi/icon_exit.png
  + app/src/main/res/drawable-hdpi/icon_export.png
  + app/src/main/res/drawable-hdpi/icon_folder_search.png
  + app/src/main/res/drawable-hdpi/icon_fullscreen.png
  + app/src/main/res/drawable-hdpi/icon_gamepad.png
  + app/src/main/res/drawable-hdpi/icon_help.png
  + app/src/main/res/drawable-hdpi/icon_hide.png
  + app/src/main/res/drawable-hdpi/icon_image_picker.png
  + app/src/main/res/drawable-hdpi/icon_info.png
  + app/src/main/res/drawable-hdpi/icon_input_controls.png
  + app/src/main/res/drawable-hdpi/icon_install.png
  + app/src/main/res/drawable-hdpi/icon_keyboard.png
  + app/src/main/res/drawable-hdpi/icon_list_item_menu.png
  + app/src/main/res/drawable-hdpi/icon_magnifier.png
  + app/src/main/res/drawable-hdpi/icon_memory.png
  + app/src/main/res/drawable-hdpi/icon_menu.png
  + app/src/main/res/drawable-hdpi/icon_move.png
  + app/src/main/res/drawable-hdpi/icon_open.png
  + app/src/main/res/drawable-hdpi/icon_paste.png
  + app/src/main/res/drawable-hdpi/icon_pause.png
  + app/src/main/res/drawable-hdpi/icon_play.png
  + app/src/main/res/drawable-hdpi/icon_power.png
  + app/src/main/res/drawable-hdpi/icon_remove.png
  + app/src/main/res/drawable-hdpi/icon_remove2.png
  + app/src/main/res/drawable-hdpi/icon_reset.png
  + app/src/main/res/drawable-hdpi/icon_run.png
  + app/src/main/res/drawable-hdpi/icon_screen_effect.png
  + app/src/main/res/drawable-hdpi/icon_settings.png
  + app/src/main/res/drawable-hdpi/icon_shortcut.png
  + app/src/main/res/drawable-hdpi/icon_task_manager.png
  + app/src/main/res/drawable-hdpi/icon_temperature.png
  + app/src/main/res/drawable-hdpi/icon_wine.png
  + app/src/main/res/drawable-hdpi/icon_zoom_minus.png
  + app/src/main/res/drawable-hdpi/icon_zoom_plus.png
  + app/src/main/res/drawable-hdpi/logo.png
  + app/src/main/res/drawable-hdpi/notification_bg_low_normal.png
  + app/src/main/res/drawable-hdpi/notification_bg_low_pressed.png
  + app/src/main/res/drawable-hdpi/notification_bg_normal.png
  + app/src/main/res/drawable-hdpi/notification_bg_normal_pressed.png
  + app/src/main/res/drawable-hdpi/notify_panel_notification_icon_bg.png
  + app/src/main/res/drawable-hdpi/number_picker_decrement.png
  + app/src/main/res/drawable-hdpi/number_picker_increment.png
  + app/src/main/res/drawable-hdpi/panel_background.png
  + app/src/main/res/drawable-hdpi/panel_corner_arrow.png
  + app/src/main/res/drawable-hdpi/preloader_background.png
  + app/src/main/res/drawable-hdpi/preloader_spinner.png
  + app/src/main/res/drawable-hdpi/remove_button.png
  + app/src/main/res/drawable-hdpi/taskmgr_process.png
  + app/src/main/res/drawable-hdpi/toggle_button_off.png
  + app/src/main/res/drawable-hdpi/toggle_button_on.png
  + app/src/main/res/drawable-hdpi/touchpad_help_main_menu.png
  + app/src/main/res/drawable-hdpi/touchpad_help_mouse_left_click.png
  + app/src/main/res/drawable-hdpi/touchpad_help_mouse_right_click.png
  + app/src/main/res/drawable-hdpi/touchpad_help_mouse_scroll_wheel.png
  + app/src/main/res/drawable-hdpi/wallpaper.png
  + app/src/main/res/drawable-ldrtl-hdpi/abc_ic_menu_copy_mtrl_am_alpha.png
  + app/src/main/res/drawable-ldrtl-hdpi/abc_ic_menu_cut_mtrl_alpha.png
  + app/src/main/res/drawable-ldrtl-hdpi/abc_spinner_mtrl_am_alpha.png
  + app/src/main/res/drawable-ldrtl-mdpi/abc_ic_menu_copy_mtrl_am_alpha.png
  + app/src/main/res/drawable-ldrtl-mdpi/abc_ic_menu_cut_mtrl_alpha.png
  + app/src/main/res/drawable-ldrtl-mdpi/abc_spinner_mtrl_am_alpha.png
  + app/src/main/res/drawable-ldrtl-xhdpi/abc_ic_menu_copy_mtrl_am_alpha.png
  + app/src/main/res/drawable-ldrtl-xhdpi/abc_ic_menu_cut_mtrl_alpha.png
  + app/src/main/res/drawable-ldrtl-xhdpi/abc_spinner_mtrl_am_alpha.png
  + app/src/main/res/drawable-ldrtl-xxhdpi/abc_ic_menu_copy_mtrl_am_alpha.png
  + app/src/main/res/drawable-ldrtl-xxhdpi/abc_ic_menu_cut_mtrl_alpha.png
  + app/src/main/res/drawable-ldrtl-xxhdpi/abc_spinner_mtrl_am_alpha.png
  + app/src/main/res/drawable-ldrtl-xxxhdpi/abc_ic_menu_copy_mtrl_am_alpha.png
  + app/src/main/res/drawable-ldrtl-xxxhdpi/abc_ic_menu_cut_mtrl_alpha.png
  + app/src/main/res/drawable-ldrtl-xxxhdpi/abc_spinner_mtrl_am_alpha.png
  + app/src/main/res/drawable-mdpi/abc_ab_share_pack_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_btn_check_to_on_mtrl_000.png
  + app/src/main/res/drawable-mdpi/abc_btn_check_to_on_mtrl_015.png
  + app/src/main/res/drawable-mdpi/abc_btn_radio_to_on_mtrl_000.png
  + app/src/main/res/drawable-mdpi/abc_btn_radio_to_on_mtrl_015.png
  + app/src/main/res/drawable-mdpi/abc_btn_switch_to_on_mtrl_00001.png
  + app/src/main/res/drawable-mdpi/abc_btn_switch_to_on_mtrl_00012.png
  + app/src/main/res/drawable-mdpi/abc_cab_background_top_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_ic_commit_search_api_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_ic_menu_copy_mtrl_am_alpha.png
  + app/src/main/res/drawable-mdpi/abc_ic_menu_cut_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_ic_menu_paste_mtrl_am_alpha.png
  + app/src/main/res/drawable-mdpi/abc_ic_menu_selectall_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_ic_menu_share_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_ic_star_black_16dp.png
  + app/src/main/res/drawable-mdpi/abc_ic_star_black_36dp.png
  + app/src/main/res/drawable-mdpi/abc_ic_star_black_48dp.png
  + app/src/main/res/drawable-mdpi/abc_ic_star_half_black_16dp.png
  + app/src/main/res/drawable-mdpi/abc_ic_star_half_black_36dp.png
  + app/src/main/res/drawable-mdpi/abc_ic_star_half_black_48dp.png
  + app/src/main/res/drawable-mdpi/abc_list_divider_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_list_focused_holo.png
  + app/src/main/res/drawable-mdpi/abc_list_longpressed_holo.png
  + app/src/main/res/drawable-mdpi/abc_list_pressed_holo_dark.png
  + app/src/main/res/drawable-mdpi/abc_list_pressed_holo_light.png
  + app/src/main/res/drawable-mdpi/abc_list_selector_disabled_holo_dark.png
  + app/src/main/res/drawable-mdpi/abc_list_selector_disabled_holo_light.png
  + app/src/main/res/drawable-mdpi/abc_menu_hardkey_panel_mtrl_mult.png
  + app/src/main/res/drawable-mdpi/abc_popup_background_mtrl_mult.png
  + app/src/main/res/drawable-mdpi/abc_scrubber_control_off_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_scrubber_control_to_pressed_mtrl_000.png
  + app/src/main/res/drawable-mdpi/abc_scrubber_control_to_pressed_mtrl_005.png
  + app/src/main/res/drawable-mdpi/abc_scrubber_primary_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_scrubber_track_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_spinner_mtrl_am_alpha.png
  + app/src/main/res/drawable-mdpi/abc_switch_track_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_tab_indicator_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_text_select_handle_left_mtrl_dark.png
  + app/src/main/res/drawable-mdpi/abc_text_select_handle_left_mtrl_light.png
  + app/src/main/res/drawable-mdpi/abc_text_select_handle_middle_mtrl_dark.png
  + app/src/main/res/drawable-mdpi/abc_text_select_handle_middle_mtrl_light.png
  + app/src/main/res/drawable-mdpi/abc_text_select_handle_right_mtrl_dark.png
  + app/src/main/res/drawable-mdpi/abc_text_select_handle_right_mtrl_light.png
  + app/src/main/res/drawable-mdpi/abc_textfield_activated_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_textfield_default_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_textfield_search_activated_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/abc_textfield_search_default_mtrl_alpha.png
  + app/src/main/res/drawable-mdpi/notification_bg_low_normal.png
  + app/src/main/res/drawable-mdpi/notification_bg_low_pressed.png
  + app/src/main/res/drawable-mdpi/notification_bg_normal.png
  + app/src/main/res/drawable-mdpi/notification_bg_normal_pressed.png
  + app/src/main/res/drawable-mdpi/notify_panel_notification_icon_bg.png
  + app/src/main/res/drawable-watch/abc_dialog_material_background.xml
  + app/src/main/res/drawable-xhdpi/abc_ab_share_pack_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_btn_check_to_on_mtrl_000.png
  + app/src/main/res/drawable-xhdpi/abc_btn_check_to_on_mtrl_015.png
  + app/src/main/res/drawable-xhdpi/abc_btn_radio_to_on_mtrl_000.png
  + app/src/main/res/drawable-xhdpi/abc_btn_radio_to_on_mtrl_015.png
  + app/src/main/res/drawable-xhdpi/abc_btn_switch_to_on_mtrl_00001.png
  + app/src/main/res/drawable-xhdpi/abc_btn_switch_to_on_mtrl_00012.png
  + app/src/main/res/drawable-xhdpi/abc_cab_background_top_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_ic_commit_search_api_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_ic_menu_copy_mtrl_am_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_ic_menu_cut_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_ic_menu_paste_mtrl_am_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_ic_menu_selectall_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_ic_menu_share_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_ic_star_black_16dp.png
  + app/src/main/res/drawable-xhdpi/abc_ic_star_black_36dp.png
  + app/src/main/res/drawable-xhdpi/abc_ic_star_black_48dp.png
  + app/src/main/res/drawable-xhdpi/abc_ic_star_half_black_16dp.png
  + app/src/main/res/drawable-xhdpi/abc_ic_star_half_black_36dp.png
  + app/src/main/res/drawable-xhdpi/abc_ic_star_half_black_48dp.png
  + app/src/main/res/drawable-xhdpi/abc_list_divider_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_list_focused_holo.png
  + app/src/main/res/drawable-xhdpi/abc_list_longpressed_holo.png
  + app/src/main/res/drawable-xhdpi/abc_list_pressed_holo_dark.png
  + app/src/main/res/drawable-xhdpi/abc_list_pressed_holo_light.png
  + app/src/main/res/drawable-xhdpi/abc_list_selector_disabled_holo_dark.png
  + app/src/main/res/drawable-xhdpi/abc_list_selector_disabled_holo_light.png
  + app/src/main/res/drawable-xhdpi/abc_menu_hardkey_panel_mtrl_mult.png
  + app/src/main/res/drawable-xhdpi/abc_popup_background_mtrl_mult.png
  + app/src/main/res/drawable-xhdpi/abc_scrubber_control_off_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_scrubber_control_to_pressed_mtrl_000.png
  + app/src/main/res/drawable-xhdpi/abc_scrubber_control_to_pressed_mtrl_005.png
  + app/src/main/res/drawable-xhdpi/abc_scrubber_primary_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_scrubber_track_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_spinner_mtrl_am_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_switch_track_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_tab_indicator_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_text_select_handle_left_mtrl_dark.png
  + app/src/main/res/drawable-xhdpi/abc_text_select_handle_left_mtrl_light.png
  + app/src/main/res/drawable-xhdpi/abc_text_select_handle_middle_mtrl_dark.png
  + app/src/main/res/drawable-xhdpi/abc_text_select_handle_middle_mtrl_light.png
  + app/src/main/res/drawable-xhdpi/abc_text_select_handle_right_mtrl_dark.png
  + app/src/main/res/drawable-xhdpi/abc_text_select_handle_right_mtrl_light.png
  + app/src/main/res/drawable-xhdpi/abc_textfield_activated_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_textfield_default_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_textfield_search_activated_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/abc_textfield_search_default_mtrl_alpha.png
  + app/src/main/res/drawable-xhdpi/notification_bg_low_normal.png
  + app/src/main/res/drawable-xhdpi/notification_bg_low_pressed.png
  + app/src/main/res/drawable-xhdpi/notification_bg_normal.png
  + app/src/main/res/drawable-xhdpi/notification_bg_normal_pressed.png
  + app/src/main/res/drawable-xhdpi/notify_panel_notification_icon_bg.png
  + app/src/main/res/drawable-xxhdpi/abc_ab_share_pack_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_btn_check_to_on_mtrl_000.png
  + app/src/main/res/drawable-xxhdpi/abc_btn_check_to_on_mtrl_015.png
  + app/src/main/res/drawable-xxhdpi/abc_btn_radio_to_on_mtrl_000.png
  + app/src/main/res/drawable-xxhdpi/abc_btn_radio_to_on_mtrl_015.png
  + app/src/main/res/drawable-xxhdpi/abc_btn_switch_to_on_mtrl_00001.png
  + app/src/main/res/drawable-xxhdpi/abc_btn_switch_to_on_mtrl_00012.png
  + app/src/main/res/drawable-xxhdpi/abc_cab_background_top_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_ic_commit_search_api_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_ic_menu_copy_mtrl_am_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_ic_menu_cut_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_ic_menu_paste_mtrl_am_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_ic_menu_selectall_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_ic_menu_share_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_ic_star_black_16dp.png
  + app/src/main/res/drawable-xxhdpi/abc_ic_star_black_36dp.png
  + app/src/main/res/drawable-xxhdpi/abc_ic_star_black_48dp.png
  + app/src/main/res/drawable-xxhdpi/abc_ic_star_half_black_16dp.png
  + app/src/main/res/drawable-xxhdpi/abc_ic_star_half_black_36dp.png
  + app/src/main/res/drawable-xxhdpi/abc_ic_star_half_black_48dp.png
  + app/src/main/res/drawable-xxhdpi/abc_list_divider_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_list_focused_holo.png
  + app/src/main/res/drawable-xxhdpi/abc_list_longpressed_holo.png
  + app/src/main/res/drawable-xxhdpi/abc_list_pressed_holo_dark.png
  + app/src/main/res/drawable-xxhdpi/abc_list_pressed_holo_light.png
  + app/src/main/res/drawable-xxhdpi/abc_list_selector_disabled_holo_dark.png
  + app/src/main/res/drawable-xxhdpi/abc_list_selector_disabled_holo_light.png
  + app/src/main/res/drawable-xxhdpi/abc_menu_hardkey_panel_mtrl_mult.png
  + app/src/main/res/drawable-xxhdpi/abc_popup_background_mtrl_mult.png
  + app/src/main/res/drawable-xxhdpi/abc_scrubber_control_off_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_scrubber_control_to_pressed_mtrl_000.png
  + app/src/main/res/drawable-xxhdpi/abc_scrubber_control_to_pressed_mtrl_005.png
  + app/src/main/res/drawable-xxhdpi/abc_scrubber_primary_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_scrubber_track_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_spinner_mtrl_am_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_switch_track_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_tab_indicator_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_text_select_handle_left_mtrl_dark.png
  + app/src/main/res/drawable-xxhdpi/abc_text_select_handle_left_mtrl_light.png
  + app/src/main/res/drawable-xxhdpi/abc_text_select_handle_middle_mtrl_dark.png
  + app/src/main/res/drawable-xxhdpi/abc_text_select_handle_middle_mtrl_light.png
  + app/src/main/res/drawable-xxhdpi/abc_text_select_handle_right_mtrl_dark.png
  + app/src/main/res/drawable-xxhdpi/abc_text_select_handle_right_mtrl_light.png
  + app/src/main/res/drawable-xxhdpi/abc_textfield_activated_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_textfield_default_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_textfield_search_activated_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/abc_textfield_search_default_mtrl_alpha.png
  + app/src/main/res/drawable-xxhdpi/icon_action_bar_add.png
  + app/src/main/res/drawable-xxhdpi/icon_action_bar_back.png
  + app/src/main/res/drawable-xxhdpi/icon_action_bar_grid.png
  + app/src/main/res/drawable-xxhdpi/icon_action_bar_home.png
  + app/src/main/res/drawable-xxhdpi/icon_action_bar_list.png
  + app/src/main/res/drawable-xxhdpi/icon_action_bar_menu.png
  + app/src/main/res/drawable-xxhdpi/icon_action_bar_new_folder.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_add_favorite.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_bring_to_front.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_copy.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_cpu.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_cut.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_download.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_duplicate.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_edit.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_file_manager.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_folder_list.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_folder_open.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_info.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_remove.png
  + app/src/main/res/drawable-xxhdpi/icon_popup_menu_settings.png
  + app/src/main/res/drawable-xxhdpi/toolbox.png
  + app/src/main/res/drawable-xxxhdpi/abc_btn_check_to_on_mtrl_000.png
  + app/src/main/res/drawable-xxxhdpi/abc_btn_check_to_on_mtrl_015.png
  + app/src/main/res/drawable-xxxhdpi/abc_btn_radio_to_on_mtrl_000.png
  + app/src/main/res/drawable-xxxhdpi/abc_btn_radio_to_on_mtrl_015.png
  + app/src/main/res/drawable-xxxhdpi/abc_btn_switch_to_on_mtrl_00001.png
  + app/src/main/res/drawable-xxxhdpi/abc_btn_switch_to_on_mtrl_00012.png
  + app/src/main/res/drawable-xxxhdpi/abc_ic_menu_copy_mtrl_am_alpha.png
  + app/src/main/res/drawable-xxxhdpi/abc_ic_menu_cut_mtrl_alpha.png
  + app/src/main/res/drawable-xxxhdpi/abc_ic_menu_paste_mtrl_am_alpha.png
  + app/src/main/res/drawable-xxxhdpi/abc_ic_menu_selectall_mtrl_alpha.png
  + app/src/main/res/drawable-xxxhdpi/abc_ic_menu_share_mtrl_alpha.png
  + app/src/main/res/drawable-xxxhdpi/abc_ic_star_black_16dp.png
  + app/src/main/res/drawable-xxxhdpi/abc_ic_star_black_36dp.png
  + app/src/main/res/drawable-xxxhdpi/abc_ic_star_black_48dp.png
  + app/src/main/res/drawable-xxxhdpi/abc_ic_star_half_black_16dp.png
  + app/src/main/res/drawable-xxxhdpi/abc_ic_star_half_black_36dp.png
  + app/src/main/res/drawable-xxxhdpi/abc_ic_star_half_black_48dp.png
  + app/src/main/res/drawable-xxxhdpi/abc_scrubber_control_to_pressed_mtrl_000.png
  + app/src/main/res/drawable-xxxhdpi/abc_scrubber_control_to_pressed_mtrl_005.png
  + app/src/main/res/drawable-xxxhdpi/abc_spinner_mtrl_am_alpha.png
  + app/src/main/res/drawable-xxxhdpi/abc_switch_track_mtrl_alpha.png
  + app/src/main/res/drawable-xxxhdpi/abc_tab_indicator_mtrl_alpha.png
  + app/src/main/res/drawable-xxxhdpi/abc_text_select_handle_left_mtrl_dark.png
  + app/src/main/res/drawable-xxxhdpi/abc_text_select_handle_left_mtrl_light.png
  + app/src/main/res/drawable-xxxhdpi/abc_text_select_handle_right_mtrl_dark.png
  + app/src/main/res/drawable-xxxhdpi/abc_text_select_handle_right_mtrl_light.png
  + app/src/main/res/drawable/_avd_hide_password__0_res_0x7f080000.xml
  + app/src/main/res/drawable/_avd_hide_password__1_res_0x7f080001.xml
  + app/src/main/res/drawable/_avd_hide_password__2_res_0x7f080002.xml
  + app/src/main/res/drawable/_avd_show_password__0_res_0x7f080003.xml
  + app/src/main/res/drawable/_avd_show_password__1_res_0x7f080004.xml
  + app/src/main/res/drawable/_avd_show_password__2_res_0x7f080005.xml
  + app/src/main/res/drawable/abc_action_bar_item_background_material.xml
  + app/src/main/res/drawable/abc_btn_borderless_material.xml
  + app/src/main/res/drawable/abc_btn_check_material.xml
  + app/src/main/res/drawable/abc_btn_check_material_anim.xml
  + app/src/main/res/drawable/abc_btn_colored_material.xml
  + app/src/main/res/drawable/abc_btn_default_mtrl_shape.xml
  + app/src/main/res/drawable/abc_btn_radio_material.xml
  + app/src/main/res/drawable/abc_btn_radio_material_anim.xml
  + app/src/main/res/drawable/abc_cab_background_internal_bg.xml
  + app/src/main/res/drawable/abc_cab_background_top_material.xml
  + app/src/main/res/drawable/abc_control_background_material.xml
  + app/src/main/res/drawable/abc_dialog_material_background.xml
  + app/src/main/res/drawable/abc_edit_text_material.xml
  + app/src/main/res/drawable/abc_ic_ab_back_material.xml
  + app/src/main/res/drawable/abc_ic_arrow_drop_right_black_24dp.xml
  + app/src/main/res/drawable/abc_ic_clear_material.xml
  + app/src/main/res/drawable/abc_ic_go_search_api_material.xml
  + app/src/main/res/drawable/abc_ic_menu_overflow_material.xml
  + app/src/main/res/drawable/abc_ic_search_api_material.xml
  + app/src/main/res/drawable/abc_ic_voice_search_api_material.xml
  + app/src/main/res/drawable/abc_item_background_holo_dark.xml
  + app/src/main/res/drawable/abc_item_background_holo_light.xml
  + app/src/main/res/drawable/abc_list_divider_material.xml
  + app/src/main/res/drawable/abc_list_selector_background_transition_holo_dark.xml
  + app/src/main/res/drawable/abc_list_selector_background_transition_holo_light.xml
  + app/src/main/res/drawable/abc_list_selector_holo_dark.xml
  + app/src/main/res/drawable/abc_list_selector_holo_light.xml
  + app/src/main/res/drawable/abc_ratingbar_indicator_material.xml
  + app/src/main/res/drawable/abc_ratingbar_material.xml
  + app/src/main/res/drawable/abc_ratingbar_small_material.xml
  + app/src/main/res/drawable/abc_seekbar_thumb_material.xml
  + app/src/main/res/drawable/abc_seekbar_tick_mark_material.xml
  + app/src/main/res/drawable/abc_seekbar_track_material.xml
  + app/src/main/res/drawable/abc_spinner_textfield_background_material.xml
  + app/src/main/res/drawable/abc_switch_thumb_material.xml
  + app/src/main/res/drawable/abc_tab_indicator_material.xml
  + app/src/main/res/drawable/abc_text_cursor_material.xml
  + app/src/main/res/drawable/abc_textfield_search_material.xml
  + app/src/main/res/drawable/abc_vector_test.xml
  + app/src/main/res/drawable/avd_hide_password.xml
  + app/src/main/res/drawable/avd_show_password.xml
  + app/src/main/res/drawable/bordered_panel.xml
  + app/src/main/res/drawable/btn_checkbox_checked_mtrl.xml
  + app/src/main/res/drawable/btn_checkbox_checked_to_unchecked_mtrl_animation.xml
  + app/src/main/res/drawable/btn_checkbox_unchecked_mtrl.xml
  + app/src/main/res/drawable/btn_checkbox_unchecked_to_checked_mtrl_animation.xml
  + app/src/main/res/drawable/btn_radio_off_mtrl.xml
  + app/src/main/res/drawable/btn_radio_off_to_on_mtrl_animation.xml
  + app/src/main/res/drawable/btn_radio_on_mtrl.xml
  + app/src/main/res/drawable/btn_radio_on_to_off_mtrl_animation.xml
  + app/src/main/res/drawable/button_neutral.xml
  + app/src/main/res/drawable/button_positive.xml
  + app/src/main/res/drawable/combo_box.xml
  + app/src/main/res/drawable/custom_toast_background.xml
  + app/src/main/res/drawable/design_fab_background.xml
  + app/src/main/res/drawable/design_ic_visibility.xml
  + app/src/main/res/drawable/design_ic_visibility_off.xml
  + app/src/main/res/drawable/design_password_eye.xml
  + app/src/main/res/drawable/design_snackbar_background.xml
  + app/src/main/res/drawable/edit_text.xml
  + app/src/main/res/drawable/ic_arrow_down_24dp.xml
  + app/src/main/res/drawable/ic_clock_black_24dp.xml
  + app/src/main/res/drawable/ic_keyboard_black_24dp.xml
  + app/src/main/res/drawable/ic_mtrl_checked_circle.xml
  + app/src/main/res/drawable/ic_mtrl_chip_checked_black.xml
  + app/src/main/res/drawable/ic_mtrl_chip_checked_circle.xml
  + app/src/main/res/drawable/ic_mtrl_chip_close_circle.xml
  + app/src/main/res/drawable/icon_background.xml
  + app/src/main/res/drawable/input_controls_toolbar.xml
  + app/src/main/res/drawable/left_side_button.xml
  + app/src/main/res/drawable/material_cursor_drawable.xml
  + app/src/main/res/drawable/material_ic_calendar_black_24dp.xml
  + app/src/main/res/drawable/material_ic_clear_black_24dp.xml
  + app/src/main/res/drawable/material_ic_edit_black_24dp.xml
  + app/src/main/res/drawable/material_ic_keyboard_arrow_left_black_24dp.xml
  + app/src/main/res/drawable/material_ic_keyboard_arrow_right_black_24dp.xml
  + app/src/main/res/drawable/material_ic_menu_arrow_down_black_24dp.xml
  + app/src/main/res/drawable/material_ic_menu_arrow_up_black_24dp.xml
  + app/src/main/res/drawable/mtrl_dialog_background.xml
  + app/src/main/res/drawable/mtrl_dropdown_arrow.xml
  + app/src/main/res/drawable/mtrl_ic_arrow_drop_down.xml
  + app/src/main/res/drawable/mtrl_ic_arrow_drop_up.xml
  + app/src/main/res/drawable/mtrl_ic_cancel.xml
  + app/src/main/res/drawable/mtrl_ic_error.xml
  + app/src/main/res/drawable/mtrl_navigation_bar_item_background.xml
  + app/src/main/res/drawable/mtrl_popupmenu_background.xml
  + app/src/main/res/drawable/mtrl_popupmenu_background_dark.xml
  + app/src/main/res/drawable/mtrl_tabs_default_indicator.xml
  + app/src/main/res/drawable/navigation_empty_icon.xml
  + app/src/main/res/drawable/notification_action_background.xml
  + app/src/main/res/drawable/notification_bg.xml
  + app/src/main/res/drawable/notification_bg_low.xml
  + app/src/main/res/drawable/notification_icon_background.xml
  + app/src/main/res/drawable/notification_tile_bg.xml
  + app/src/main/res/drawable/number_picker_background.xml
  + app/src/main/res/drawable/preference_list_divider_material.xml
  + app/src/main/res/drawable/progress_bar_indeterminate.xml
  + app/src/main/res/drawable/right_side_button.xml
  + app/src/main/res/drawable/tab_layout_background.xml
  + app/src/main/res/drawable/table_head_background.xml
  + app/src/main/res/drawable/test_custom_background.xml
  + app/src/main/res/drawable/toggle_button_selector.xml
  + app/src/main/res/drawable/tooltip_frame_dark.xml
  + app/src/main/res/drawable/tooltip_frame_light.xml
  + app/src/main/res/interpolator/btn_checkbox_checked_mtrl_animation_interpolator_0.xml
  + app/src/main/res/interpolator/btn_checkbox_checked_mtrl_animation_interpolator_1.xml
  + app/src/main/res/interpolator/btn_checkbox_unchecked_mtrl_animation_interpolator_0.xml
  + app/src/main/res/interpolator/btn_checkbox_unchecked_mtrl_animation_interpolator_1.xml
  + app/src/main/res/interpolator/btn_radio_to_off_mtrl_animation_interpolator_0.xml
  + app/src/main/res/interpolator/btn_radio_to_on_mtrl_animation_interpolator_0.xml
  + app/src/main/res/interpolator/fast_out_slow_in.xml
  + app/src/main/res/interpolator/mtrl_fast_out_linear_in.xml
  + app/src/main/res/interpolator/mtrl_fast_out_slow_in.xml
  + app/src/main/res/interpolator/mtrl_linear.xml
  + app/src/main/res/interpolator/mtrl_linear_out_slow_in.xml
  + app/src/main/res/layout-land/material_clock_period_toggle_land.xml
  + app/src/main/res/layout-land/material_timepicker.xml
  + app/src/main/res/layout-land/mtrl_picker_header_dialog.xml
  + app/src/main/res/layout-ldrtl/material_textinput_timepicker.xml
  + app/src/main/res/layout-sw600dp/design_layout_snackbar.xml
  + app/src/main/res/layout-sw600dp/mtrl_layout_snackbar.xml
  + app/src/main/res/layout-watch/abc_alert_dialog_button_bar_material.xml
  + app/src/main/res/layout-watch/abc_alert_dialog_title_material.xml
  + app/src/main/res/layout/abc_action_bar_title_item.xml
  + app/src/main/res/layout/abc_action_bar_up_container.xml
  + app/src/main/res/layout/abc_action_menu_item_layout.xml
  + app/src/main/res/layout/abc_action_menu_layout.xml
  + app/src/main/res/layout/abc_action_mode_bar.xml
  + app/src/main/res/layout/abc_action_mode_close_item_material.xml
  + app/src/main/res/layout/abc_activity_chooser_view.xml
  + app/src/main/res/layout/abc_activity_chooser_view_list_item.xml
  + app/src/main/res/layout/abc_alert_dialog_button_bar_material.xml
  + app/src/main/res/layout/abc_alert_dialog_material.xml
  + app/src/main/res/layout/abc_alert_dialog_title_material.xml
  + app/src/main/res/layout/abc_cascading_menu_item_layout.xml
  + app/src/main/res/layout/abc_dialog_title_material.xml
  + app/src/main/res/layout/abc_expanded_menu_layout.xml
  + app/src/main/res/layout/abc_list_menu_item_checkbox.xml
  + app/src/main/res/layout/abc_list_menu_item_icon.xml
  + app/src/main/res/layout/abc_list_menu_item_layout.xml
  + app/src/main/res/layout/abc_list_menu_item_radio.xml
  + app/src/main/res/layout/abc_popup_menu_header_item_layout.xml
  + app/src/main/res/layout/abc_popup_menu_item_layout.xml
  + app/src/main/res/layout/abc_screen_content_include.xml
  + app/src/main/res/layout/abc_screen_simple.xml
  + app/src/main/res/layout/abc_screen_simple_overlay_action_mode.xml
  + app/src/main/res/layout/abc_screen_toolbar.xml
  + app/src/main/res/layout/abc_search_dropdown_item_icons_2line.xml
  + app/src/main/res/layout/abc_search_view.xml
  + app/src/main/res/layout/abc_select_dialog_material.xml
  + app/src/main/res/layout/abc_tooltip.xml
  + app/src/main/res/layout/about_dialog.xml
  + app/src/main/res/layout/add_env_var_dialog.xml
  + app/src/main/res/layout/audio_driver_config_dialog.xml
  + app/src/main/res/layout/base_file_manager_fragment.xml
  + app/src/main/res/layout/binding_field.xml
  + app/src/main/res/layout/box64_edit_preset_dialog.xml
  + app/src/main/res/layout/box64_env_var_list_item.xml
  + app/src/main/res/layout/container_detail_fragment.xml
  + app/src/main/res/layout/container_list_item.xml
  + app/src/main/res/layout/container_storage_info_dialog.xml
  + app/src/main/res/layout/containers_fragment.xml
  + app/src/main/res/layout/content_dialog.xml
  + app/src/main/res/layout/control_element_settings.xml
  + app/src/main/res/layout/controls_editor_activity.xml
  + app/src/main/res/layout/cpu_list_dialog.xml
  + app/src/main/res/layout/cpu_list_item.xml
  + app/src/main/res/layout/create_folder_dialog.xml
  + app/src/main/res/layout/custom_dialog.xml
  + app/src/main/res/layout/custom_toast.xml
  + app/src/main/res/layout/debug_dialog.xml
  + app/src/main/res/layout/debug_toolbar.xml
  + app/src/main/res/layout/design_bottom_navigation_item.xml
  + app/src/main/res/layout/design_bottom_sheet_dialog.xml
  + app/src/main/res/layout/design_layout_snackbar.xml
  + app/src/main/res/layout/design_layout_snackbar_include.xml
  + app/src/main/res/layout/design_layout_tab_icon.xml
  + app/src/main/res/layout/design_layout_tab_text.xml
  + app/src/main/res/layout/design_menu_item_action_area.xml
  + app/src/main/res/layout/design_navigation_item.xml
  + app/src/main/res/layout/design_navigation_item_header.xml
  + app/src/main/res/layout/design_navigation_item_separator.xml
  + app/src/main/res/layout/design_navigation_item_subheader.xml
  + app/src/main/res/layout/design_navigation_menu.xml
  + app/src/main/res/layout/design_navigation_menu_item.xml
  + app/src/main/res/layout/design_text_input_end_icon.xml
  + app/src/main/res/layout/design_text_input_start_icon.xml
  + app/src/main/res/layout/download_progress_dialog.xml
  + app/src/main/res/layout/drive_list_item.xml
  + app/src/main/res/layout/dxvk_config_dialog.xml
  + app/src/main/res/layout/env_vars_list_item.xml
  + app/src/main/res/layout/expand_button.xml
  + app/src/main/res/layout/external_controller_binding_list_item.xml
  + app/src/main/res/layout/external_controller_bindings_activity.xml
  + app/src/main/res/layout/external_controller_list_item.xml
  + app/src/main/res/layout/file_grid_item.xml
  + app/src/main/res/layout/file_info_dialog.xml
  + app/src/main/res/layout/file_list_item.xml
  + app/src/main/res/layout/frame_rating.xml
  + app/src/main/res/layout/image_frame.xml
  + app/src/main/res/layout/image_picker_view.xml
  + app/src/main/res/layout/input_controls_dialog.xml
  + app/src/main/res/layout/input_controls_fragment.xml
  + app/src/main/res/layout/installed_wine_list_item.xml
  + app/src/main/res/layout/magnifier_view.xml
  + app/src/main/res/layout/main_activity.xml
  + app/src/main/res/layout/main_menu_header.xml
  + app/src/main/res/layout/material_chip_input_combo.xml
  + app/src/main/res/layout/material_clock_display.xml
  + app/src/main/res/layout/material_clock_display_divider.xml
  + app/src/main/res/layout/material_clock_period_toggle.xml
  + app/src/main/res/layout/material_clockface_textview.xml
  + app/src/main/res/layout/material_clockface_view.xml
  + app/src/main/res/layout/material_radial_view_group.xml
  + app/src/main/res/layout/material_textinput_timepicker.xml
  + app/src/main/res/layout/material_time_chip.xml
  + app/src/main/res/layout/material_time_input.xml
  + app/src/main/res/layout/material_timepicker.xml
  + app/src/main/res/layout/material_timepicker_dialog.xml
  + app/src/main/res/layout/material_timepicker_textinput_display.xml
  + app/src/main/res/layout/mtrl_alert_dialog.xml
  + app/src/main/res/layout/mtrl_alert_dialog_actions.xml
  + app/src/main/res/layout/mtrl_alert_dialog_title.xml
  + app/src/main/res/layout/mtrl_alert_select_dialog_item.xml
  + app/src/main/res/layout/mtrl_alert_select_dialog_multichoice.xml
  + app/src/main/res/layout/mtrl_alert_select_dialog_singlechoice.xml
  + app/src/main/res/layout/mtrl_calendar_day.xml
  + app/src/main/res/layout/mtrl_calendar_day_of_week.xml
  + app/src/main/res/layout/mtrl_calendar_days_of_week.xml
  + app/src/main/res/layout/mtrl_calendar_horizontal.xml
  + app/src/main/res/layout/mtrl_calendar_month.xml
  + app/src/main/res/layout/mtrl_calendar_month_labeled.xml
  + app/src/main/res/layout/mtrl_calendar_month_navigation.xml
  + app/src/main/res/layout/mtrl_calendar_months.xml
  + app/src/main/res/layout/mtrl_calendar_vertical.xml
  + app/src/main/res/layout/mtrl_calendar_year.xml
  + app/src/main/res/layout/mtrl_layout_snackbar.xml
  + app/src/main/res/layout/mtrl_layout_snackbar_include.xml
  + app/src/main/res/layout/mtrl_navigation_rail_item.xml
  + app/src/main/res/layout/mtrl_picker_actions.xml
  + app/src/main/res/layout/mtrl_picker_dialog.xml
  + app/src/main/res/layout/mtrl_picker_fullscreen.xml
  + app/src/main/res/layout/mtrl_picker_header_dialog.xml
  + app/src/main/res/layout/mtrl_picker_header_fullscreen.xml
  + app/src/main/res/layout/mtrl_picker_header_selection_text.xml
  + app/src/main/res/layout/mtrl_picker_header_title_text.xml
  + app/src/main/res/layout/mtrl_picker_header_toggle.xml
  + app/src/main/res/layout/mtrl_picker_text_input_date.xml
  + app/src/main/res/layout/mtrl_picker_text_input_date_range.xml
  + app/src/main/res/layout/notification_action.xml
  + app/src/main/res/layout/notification_action_tombstone.xml
  + app/src/main/res/layout/notification_template_custom_big.xml
  + app/src/main/res/layout/notification_template_icon_group.xml
  + app/src/main/res/layout/notification_template_part_chronometer.xml
  + app/src/main/res/layout/notification_template_part_time.xml
  + app/src/main/res/layout/number_picker.xml
  + app/src/main/res/layout/preference.xml
  + app/src/main/res/layout/preference_category.xml
  + app/src/main/res/layout/preference_category_material.xml
  + app/src/main/res/layout/preference_dialog_edittext.xml
  + app/src/main/res/layout/preference_dropdown.xml
  + app/src/main/res/layout/preference_dropdown_material.xml
  + app/src/main/res/layout/preference_information.xml
  + app/src/main/res/layout/preference_information_material.xml
  + app/src/main/res/layout/preference_list_fragment.xml
  + app/src/main/res/layout/preference_material.xml
  + app/src/main/res/layout/preference_recyclerview.xml
  + app/src/main/res/layout/preference_widget_checkbox.xml
  + app/src/main/res/layout/preference_widget_seekbar.xml
  + app/src/main/res/layout/preference_widget_seekbar_material.xml
  + app/src/main/res/layout/preference_widget_switch.xml
  + app/src/main/res/layout/preference_widget_switch_compat.xml
  + app/src/main/res/layout/preloader_dialog.xml
  + app/src/main/res/layout/process_info_list_item.xml
  + app/src/main/res/layout/screen_effect_dialog.xml
  + app/src/main/res/layout/select_dialog_item_material.xml
  + app/src/main/res/layout/select_dialog_multichoice_material.xml
  + app/src/main/res/layout/select_dialog_singlechoice_material.xml
  + app/src/main/res/layout/settings_fragment.xml
  + app/src/main/res/layout/shortcut_settings_dialog.xml
  + app/src/main/res/layout/support_simple_spinner_dropdown_item.xml
  + app/src/main/res/layout/task_manager_dialog.xml
  + app/src/main/res/layout/task_manager_panel.xml
  + app/src/main/res/layout/task_manager_panel_item.xml
  + app/src/main/res/layout/test_action_chip.xml
  + app/src/main/res/layout/test_chip_zero_corner_radius.xml
  + app/src/main/res/layout/test_design_checkbox.xml
  + app/src/main/res/layout/test_design_radiobutton.xml
  + app/src/main/res/layout/test_navigation_bar_item_layout.xml
  + app/src/main/res/layout/test_reflow_chipgroup.xml
  + app/src/main/res/layout/test_toolbar.xml
  + app/src/main/res/layout/test_toolbar_custom_background.xml
  + app/src/main/res/layout/test_toolbar_elevation.xml
  + app/src/main/res/layout/test_toolbar_surface.xml
  + app/src/main/res/layout/text_view_with_line_height_from_appearance.xml
  + app/src/main/res/layout/text_view_with_line_height_from_layout.xml
  + app/src/main/res/layout/text_view_with_line_height_from_style.xml
  + app/src/main/res/layout/text_view_with_theme_line_height.xml
  + app/src/main/res/layout/text_view_without_line_height.xml
  + app/src/main/res/layout/touchpad_help_dialog.xml
  + app/src/main/res/layout/turnip_config_dialog.xml
  + app/src/main/res/layout/virgl_config_dialog.xml
  + app/src/main/res/layout/vkd3d_config_dialog.xml
  + app/src/main/res/layout/vortek_config_dialog.xml
  + app/src/main/res/layout/wincomponent_list_item.xml
  + app/src/main/res/layout/wine_debug_channel_list_item.xml
  + app/src/main/res/layout/wine_install_dialog.xml
  + app/src/main/res/layout/wined3d_config_dialog.xml
  + app/src/main/res/layout/xserver_display_activity.xml
  + app/src/main/res/menu/container_file_manager_menu.xml
  + app/src/main/res/menu/container_popup_menu.xml
  + app/src/main/res/menu/containers_menu.xml
  + app/src/main/res/menu/drive_search_popup_menu.xml
  + app/src/main/res/menu/extra_args_popup_menu.xml
  + app/src/main/res/menu/file_manager_popup_menu.xml
  + app/src/main/res/menu/main_menu.xml
  + app/src/main/res/menu/open_file_popup_menu.xml
  + app/src/main/res/menu/process_popup_menu.xml
  + app/src/main/res/menu/shortcuts_menu.xml
  + app/src/main/res/menu/xserver_menu.xml
  + app/src/main/res/mipmap-anydpi/ic_launcher.xml
  + app/src/main/res/mipmap-anydpi/ic_launcher_round.xml
  + app/src/main/res/mipmap-hdpi/ic_launcher.png
  + app/src/main/res/mipmap-hdpi/ic_launcher_foreground.png
  + app/src/main/res/mipmap-hdpi/ic_launcher_round.png
  + app/src/main/res/mipmap-mdpi/ic_launcher.png
  + app/src/main/res/mipmap-mdpi/ic_launcher_foreground.png
  + app/src/main/res/mipmap-mdpi/ic_launcher_round.png
  + app/src/main/res/mipmap-xhdpi/ic_launcher.png
  + app/src/main/res/mipmap-xhdpi/ic_launcher_foreground.png
  + app/src/main/res/mipmap-xhdpi/ic_launcher_round.png
  + app/src/main/res/mipmap-xxhdpi/ic_launcher.png
  + app/src/main/res/mipmap-xxhdpi/ic_launcher_foreground.png
  + app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png
  + app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
  + app/src/main/res/mipmap-xxxhdpi/ic_launcher_foreground.png
  + app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png
  + app/src/main/res/values-af/plurals.xml
  + app/src/main/res/values-af/strings.xml
  + app/src/main/res/values-am/plurals.xml
  + app/src/main/res/values-am/strings.xml
  + app/src/main/res/values-ar/plurals.xml
  + app/src/main/res/values-ar/strings.xml
  + app/src/main/res/values-as/plurals.xml
  + app/src/main/res/values-as/strings.xml
  + app/src/main/res/values-az/plurals.xml
  + app/src/main/res/values-az/strings.xml
  + app/src/main/res/values-b+es+419/plurals.xml
  + app/src/main/res/values-b+es+419/strings.xml
  + app/src/main/res/values-b+sr+Latn/plurals.xml
  + app/src/main/res/values-b+sr+Latn/strings.xml
  + app/src/main/res/values-be/plurals.xml
  + app/src/main/res/values-be/strings.xml
  + app/src/main/res/values-bg/plurals.xml
  + app/src/main/res/values-bg/strings.xml
  + app/src/main/res/values-bn/plurals.xml
  + app/src/main/res/values-bn/strings.xml
  + app/src/main/res/values-bs/plurals.xml
  + app/src/main/res/values-bs/strings.xml
  + app/src/main/res/values-ca/plurals.xml
  + app/src/main/res/values-ca/strings.xml
  + app/src/main/res/values-cs/plurals.xml
  + app/src/main/res/values-cs/strings.xml
  + app/src/main/res/values-da/plurals.xml
  + app/src/main/res/values-da/strings.xml
  + app/src/main/res/values-de/plurals.xml
  + app/src/main/res/values-de/strings.xml
  + app/src/main/res/values-el/plurals.xml
  + app/src/main/res/values-el/strings.xml
  + app/src/main/res/values-en-rAU/strings.xml
  + app/src/main/res/values-en-rCA/strings.xml
  + app/src/main/res/values-en-rGB/plurals.xml
  + app/src/main/res/values-en-rGB/strings.xml
  + app/src/main/res/values-en-rIN/strings.xml
  + app/src/main/res/values-en-rXC/strings.xml
  + app/src/main/res/values-es-rUS/plurals.xml
  + app/src/main/res/values-es-rUS/strings.xml
  + app/src/main/res/values-es/plurals.xml
  + app/src/main/res/values-es/strings.xml
  + app/src/main/res/values-et/plurals.xml
  + app/src/main/res/values-et/strings.xml
  + app/src/main/res/values-eu/plurals.xml
  + app/src/main/res/values-eu/strings.xml
  + app/src/main/res/values-fa/plurals.xml
  + app/src/main/res/values-fa/strings.xml
  + app/src/main/res/values-fi/plurals.xml
  + app/src/main/res/values-fi/strings.xml
  + app/src/main/res/values-fr-rCA/plurals.xml
  + app/src/main/res/values-fr-rCA/strings.xml
  + app/src/main/res/values-fr/plurals.xml
  + app/src/main/res/values-fr/strings.xml
  + app/src/main/res/values-gl/plurals.xml
  + app/src/main/res/values-gl/strings.xml
  + app/src/main/res/values-gu/plurals.xml
  + app/src/main/res/values-gu/strings.xml
  + app/src/main/res/values-h320dp-port/dimens.xml
  + app/src/main/res/values-h360dp-land/dimens.xml
  + app/src/main/res/values-h480dp-land/dimens.xml
  + app/src/main/res/values-h550dp-port/dimens.xml
  + app/src/main/res/values-h720dp/dimens.xml
  + app/src/main/res/values-hdpi/drawables.xml
  + app/src/main/res/values-hdpi/styles.xml
  + app/src/main/res/values-hi/plurals.xml
  + app/src/main/res/values-hi/strings.xml
  + app/src/main/res/values-hr/plurals.xml
  + app/src/main/res/values-hr/strings.xml
  + app/src/main/res/values-hu/plurals.xml
  + app/src/main/res/values-hu/strings.xml
  + app/src/main/res/values-hy/plurals.xml
  + app/src/main/res/values-hy/strings.xml
  + app/src/main/res/values-in/plurals.xml
  + app/src/main/res/values-in/strings.xml
  + app/src/main/res/values-is/plurals.xml
  + app/src/main/res/values-is/strings.xml
  + app/src/main/res/values-it/plurals.xml
  + app/src/main/res/values-it/strings.xml
  + app/src/main/res/values-iw/plurals.xml
  + app/src/main/res/values-iw/strings.xml
  + app/src/main/res/values-ja/plurals.xml
  + app/src/main/res/values-ja/strings.xml
  + app/src/main/res/values-ka/plurals.xml
  + app/src/main/res/values-ka/strings.xml
  + app/src/main/res/values-kk/plurals.xml
  + app/src/main/res/values-kk/strings.xml
  + app/src/main/res/values-km/plurals.xml
  + app/src/main/res/values-km/strings.xml
  + app/src/main/res/values-kn/plurals.xml
  + app/src/main/res/values-kn/strings.xml
  + app/src/main/res/values-ko/plurals.xml
  + app/src/main/res/values-ko/strings.xml
  + app/src/main/res/values-ky/plurals.xml
  + app/src/main/res/values-ky/strings.xml
  + app/src/main/res/values-land/dimens.xml
  + app/src/main/res/values-land/integers.xml
  + app/src/main/res/values-land/styles.xml
  + app/src/main/res/values-large/dimens.xml
  + app/src/main/res/values-large/styles.xml
  + app/src/main/res/values-ldrtl-hdpi/drawables.xml
  + app/src/main/res/values-ldrtl-mdpi/drawables.xml
  + app/src/main/res/values-ldrtl-xhdpi/drawables.xml
  + app/src/main/res/values-ldrtl-xxhdpi/drawables.xml
  + app/src/main/res/values-ldrtl-xxxhdpi/drawables.xml
  + app/src/main/res/values-ldrtl/drawables.xml
  + app/src/main/res/values-lo/plurals.xml
  + app/src/main/res/values-lo/strings.xml
  + app/src/main/res/values-lt/plurals.xml
  + app/src/main/res/values-lt/strings.xml
  + app/src/main/res/values-lv/plurals.xml
  + app/src/main/res/values-lv/strings.xml
  + app/src/main/res/values-mdpi/drawables.xml
  + app/src/main/res/values-mk/plurals.xml
  + app/src/main/res/values-mk/strings.xml
  + app/src/main/res/values-ml/plurals.xml
  + app/src/main/res/values-ml/strings.xml
  + app/src/main/res/values-mn/plurals.xml
  + app/src/main/res/values-mn/strings.xml
  + app/src/main/res/values-mr/plurals.xml
  + app/src/main/res/values-mr/strings.xml
  + app/src/main/res/values-ms/plurals.xml
  + app/src/main/res/values-ms/strings.xml
  + app/src/main/res/values-my/plurals.xml
  + app/src/main/res/values-my/strings.xml
  + app/src/main/res/values-nb/plurals.xml
  + app/src/main/res/values-nb/strings.xml
  + app/src/main/res/values-ne/plurals.xml
  + app/src/main/res/values-ne/strings.xml
  + app/src/main/res/values-night/colors.xml
  + app/src/main/res/values-night/styles.xml
  + app/src/main/res/values-nl/plurals.xml
  + app/src/main/res/values-nl/strings.xml
  + app/src/main/res/values-or/plurals.xml
  + app/src/main/res/values-or/strings.xml
  + app/src/main/res/values-pa/plurals.xml
  + app/src/main/res/values-pa/strings.xml
  + app/src/main/res/values-pl/plurals.xml
  + app/src/main/res/values-pl/strings.xml
  + app/src/main/res/values-port/bools.xml
  + app/src/main/res/values-pt-rBR/plurals.xml
  + app/src/main/res/values-pt-rBR/strings.xml
  + app/src/main/res/values-pt-rPT/plurals.xml
  + app/src/main/res/values-pt-rPT/strings.xml
  + app/src/main/res/values-pt/strings.xml
  + app/src/main/res/values-ro/plurals.xml
  + app/src/main/res/values-ro/strings.xml
  + app/src/main/res/values-ru/plurals.xml
  + app/src/main/res/values-ru/strings.xml
  + app/src/main/res/values-si/plurals.xml
  + app/src/main/res/values-si/strings.xml
  + app/src/main/res/values-sk/plurals.xml
  + app/src/main/res/values-sk/strings.xml
  + app/src/main/res/values-sl/plurals.xml
  + app/src/main/res/values-sl/strings.xml
  + app/src/main/res/values-small/dimens.xml
  + app/src/main/res/values-sq/plurals.xml
  + app/src/main/res/values-sq/strings.xml
  + app/src/main/res/values-sr/plurals.xml
  + app/src/main/res/values-sr/strings.xml
  + app/src/main/res/values-sv/plurals.xml
  + app/src/main/res/values-sv/strings.xml
  + app/src/main/res/values-sw/plurals.xml
  + app/src/main/res/values-sw/strings.xml
  + app/src/main/res/values-sw360dp/bools.xml
  + app/src/main/res/values-sw600dp/dimens.xml
  + app/src/main/res/values-sw600dp/integers.xml
  + app/src/main/res/values-sw600dp/styles.xml
  + app/src/main/res/values-ta/plurals.xml
  + app/src/main/res/values-ta/strings.xml
  + app/src/main/res/values-te/plurals.xml
  + app/src/main/res/values-te/strings.xml
  + app/src/main/res/values-th/plurals.xml
  + app/src/main/res/values-th/strings.xml
  + app/src/main/res/values-tl/plurals.xml
  + app/src/main/res/values-tl/strings.xml
  + app/src/main/res/values-tr/plurals.xml
  + app/src/main/res/values-tr/strings.xml
  + app/src/main/res/values-uk/plurals.xml
  + app/src/main/res/values-uk/strings.xml
  + app/src/main/res/values-ur/plurals.xml
  + app/src/main/res/values-ur/strings.xml
  + app/src/main/res/values-uz/plurals.xml
  + app/src/main/res/values-uz/strings.xml
  + app/src/main/res/values-v27/styles.xml
  + app/src/main/res/values-v28/dimens.xml
  + app/src/main/res/values-v28/styles.xml
  + app/src/main/res/values-vi/plurals.xml
  + app/src/main/res/values-vi/strings.xml
  + app/src/main/res/values-w320dp-land/dimens.xml
  + app/src/main/res/values-w360dp-port/dimens.xml
  + app/src/main/res/values-w480dp-port/dimens.xml
  + app/src/main/res/values-w600dp-land/dimens.xml
  + app/src/main/res/values-watch/drawables.xml
  + app/src/main/res/values-watch/styles.xml
  + app/src/main/res/values-xhdpi/drawables.xml
  + app/src/main/res/values-xlarge/dimens.xml
  + app/src/main/res/values-xxhdpi/drawables.xml
  + app/src/main/res/values-xxxhdpi/drawables.xml
  + app/src/main/res/values-zh-rCN/plurals.xml
  + app/src/main/res/values-zh-rCN/strings.xml
  + app/src/main/res/values-zh-rHK/plurals.xml
  + app/src/main/res/values-zh-rHK/strings.xml
  + app/src/main/res/values-zh-rTW/plurals.xml
  + app/src/main/res/values-zh-rTW/strings.xml
  + app/src/main/res/values-zu/plurals.xml
  + app/src/main/res/values-zu/strings.xml
  + app/src/main/res/values/arrays.xml
  + app/src/main/res/values/attrs.xml
  + app/src/main/res/values/bools.xml
  + app/src/main/res/values/colors.xml
  + app/src/main/res/values/dimens.xml
  + app/src/main/res/values/drawables.xml
  + app/src/main/res/values/integers.xml
  + app/src/main/res/values/plurals.xml
  + app/src/main/res/values/public.xml
  + app/src/main/res/values/strings.xml
  + app/src/main/res/values/styles.xml
  + app/src/main/res/xml/standalone_badge.xml
  + app/src/main/res/xml/standalone_badge_gravity_bottom_end.xml
  + app/src/main/res/xml/standalone_badge_gravity_bottom_start.xml
  + app/src/main/res/xml/standalone_badge_gravity_top_start.xml
  + app/src/main/res/xml/standalone_badge_offset.xml
  + build.gradle
    buildscript {
        repositories {
        	google()
            mavenCentral()
        }
        dependencies {
            classpath 'com.android.tools.build:gradle:4.2.2'
        }
    }
    
    allprojects {
        repositories {
            google()
            mavenCentral()
        }
    }
    
    task clean(type: Delete) {
        delete rootProject.buildDir
    }
  + settings.gradle
    include ':app'
    rootProject.name = 'Winlator'
  Processing file: app/src/main/assets/box64/box64-0.3.2.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/box64/box64-0.3.2.tzst
  Staging directories: box64-0.3.2.tzst_3139136195
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/box64/box64-0.3.2.tzst -C box64-0.3.2.tzst_3139136195
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/box64/box64-0.3.2.tzst
  + usr/local/bin/box64
  Processing file: app/src/main/assets/box64/box64-0.3.4.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/box64/box64-0.3.4.tzst
  Staging directories: box64-0.3.4.tzst_3208087748
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/box64/box64-0.3.4.tzst -C box64-0.3.4.tzst_3208087748
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/box64/box64-0.3.4.tzst
  + usr/local/bin/box64
  Processing file: app/src/main/assets/container_pattern.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/container_pattern.tzst
  Staging directories: container_pattern.tzst_3296606046
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/container_pattern.tzst -C container_pattern.tzst_3296606046
  + .wine/.update-timestamp
    disable
  + .wine/drive_c/Program Files (x86)/Common Files/System/ADO/msado15.dll
  + .wine/drive_c/Program Files (x86)/Common Files/System/OLE DB/msdaps.dll
  + .wine/drive_c/Program Files (x86)/Common Files/System/OLE DB/msdasql.dll
  + .wine/drive_c/Program Files (x86)/Common Files/System/OLE DB/oledb32.dll
  + .wine/drive_c/Program Files (x86)/Internet Explorer/iexplore.exe
  + .wine/drive_c/Program Files (x86)/Windows Media Player/wmplayer.exe
  + .wine/drive_c/Program Files (x86)/Windows NT/Accessories/wordpad.exe
  + .wine/drive_c/Program Files/Common Files/System/ADO/msado15.dll
  + .wine/drive_c/Program Files/Common Files/System/OLE DB/msdaps.dll
  + .wine/drive_c/Program Files/Common Files/System/OLE DB/msdasql.dll
  + .wine/drive_c/Program Files/Common Files/System/OLE DB/oledb32.dll
  + .wine/drive_c/Program Files/Internet Explorer/iexplore.exe
  + .wine/drive_c/Program Files/Windows Media Player/wmplayer.exe
  + .wine/drive_c/Program Files/Windows NT/Accessories/wordpad.exe
  + .wine/drive_c/windows/command/start.exe
  + .wine/drive_c/windows/explorer.exe
  + .wine/drive_c/windows/globalization/sorting/sortdefault.nls
  + .wine/drive_c/windows/hh.exe
  + .wine/drive_c/windows/inf/input.inf
    [Version]
    Signature="$CHICAGO$"
    ClassGuid={745a17a0-74d3-11d0-b6fe-00a0c90f57da}
    Class=HIDClass
    
    [Manufacturer]
    Wine=mfg_section
    
    [mfg_section]
    Wine HID device=device_section,HID\
    
    [device_section.Services]
    AddService = ,0x2
  + .wine/drive_c/windows/inf/winebus.inf
    [Version]
    Signature="$CHICAGO$"
    ClassGuid={4d36e97d-e325-11ce-bfc1-08002be10318}
    Class=System
    
    [Manufacturer]
    Wine=mfg_section
    
    [mfg_section]
    Wine HID bus driver=device_section,root\winebus
    
    [device_section.Services]
    AddService = winebus,0x2,svc_section
    
    [svc_section]
    Description="Wine HID bus driver"
    DisplayName="Wine HID bus"
    ServiceBinary="%12%\winebus.sys"
    LoadOrderGroup="WinePlugPlay"
    ServiceType=1
    StartType=3
     ... (truncated) ...
  + .wine/drive_c/windows/inf/winehid.inf
    [Version]
    Signature="$CHICAGO$"
    ClassGuid={745a17a0-74d3-11d0-b6fe-00a0c90f57da}
    Class=HIDClass
    
    [Manufacturer]
    Wine=mfg_section
    
    [mfg_section]
    Wine HID compatible device=device_section,WINEBUS\WINE_COMP_HID
    
    [device_section.Services]
    AddService = winehid,0x2,svc_section
    
    [svc_section]
    Description="Wine HID Minidriver"
    DisplayName="Wine HID"
    ServiceBinary="%12%\winehid.sys"
    LoadOrderGroup="WinePlugPlay"
    ServiceType=1
    StartType=3
     ... (truncated) ...
  + .wine/drive_c/windows/inf/winexinput.inf
    [Version]
    Signature="$CHICAGO$"
    ClassGuid={4d36e97d-e325-11ce-bfc1-08002be10318}
    Class=System
    
    [Manufacturer]
    Wine=mfg_section
    
    [mfg_section]
    Wine XInput compatible device=device_section,WINEBUS\WINE_COMP_XINPUT
    
    [device_section.Services]
    AddService = xinput,0x2,svc_section
    
    [svc_section]
    Description="Wine XInput device driver"
    DisplayName="Wine XInput"
    ServiceBinary="%12%\winexinput.sys"
    LoadOrderGroup="WinePlugPlay"
    ServiceType=1
    StartType=3
     ... (truncated) ...
  + .wine/drive_c/windows/notepad.exe
  + .wine/drive_c/windows/regedit.exe
  + .wine/drive_c/windows/resources/themes/light/light.msstyles
  + .wine/drive_c/windows/rundll.exe
  + .wine/drive_c/windows/system.ini
    [mci]
    MPEGVideo=mciqtz32.dll
    MPEGVideo2=mciqtz32.dll
    avivideo=mciavi32.dll
    cdaudio=mcicda.dll
    sequencer=mciseq.dll
    vcr=mcivisca.drv
    ; videodisc=mcipionr.drv
    waveaudio=mciwave.dll
    [drivers32]
    msacm.imaadpcm=imaadp32.acm
    msacm.msadpcm=msadp32.acm
    msacm.msg711=msg711.acm
    msacm.l3acm=l3codeca.acm
    msacm.msgsm610=msgsm32.acm
    vidc.mrle=msrle32.dll
    vidc.msvc=msvidc32.dll
    vidc.cvid=iccvid.dll
    vidc.IV50=ir50_32.dll
    ; vidc.IV31=ir32_32.dll
    ; vidc.IV32=ir32_32.dll
  + .wine/drive_c/windows/system/ddeml.dll
  + .wine/drive_c/windows/system/mmsystem.dll
  + .wine/drive_c/windows/system32/Speech/Common/sapi.dll
  + .wine/drive_c/windows/system32/Speech/Engines/TTS/msttsengine.dll
  + .wine/drive_c/windows/system32/WindowsPowerShell/v1.0/powershell.exe
  + .wine/drive_c/windows/system32/c_037.nls
  + .wine/drive_c/windows/system32/c_10000.nls
  + .wine/drive_c/windows/system32/c_10001.nls
  + .wine/drive_c/windows/system32/c_10002.nls
  + .wine/drive_c/windows/system32/c_10003.nls
  + .wine/drive_c/windows/system32/c_10004.nls
  + .wine/drive_c/windows/system32/c_10005.nls
  + .wine/drive_c/windows/system32/c_10006.nls
  + .wine/drive_c/windows/system32/c_10007.nls
  + .wine/drive_c/windows/system32/c_10008.nls
  + .wine/drive_c/windows/system32/c_10010.nls
  + .wine/drive_c/windows/system32/c_10017.nls
  + .wine/drive_c/windows/system32/c_10021.nls
  + .wine/drive_c/windows/system32/c_10029.nls
  + .wine/drive_c/windows/system32/c_10079.nls
  + .wine/drive_c/windows/system32/c_10081.nls
  + .wine/drive_c/windows/system32/c_10082.nls
  + .wine/drive_c/windows/system32/c_1026.nls
  + .wine/drive_c/windows/system32/c_1250.nls
  + .wine/drive_c/windows/system32/c_1251.nls
  + .wine/drive_c/windows/system32/c_1252.nls
  + .wine/drive_c/windows/system32/c_1253.nls
  + .wine/drive_c/windows/system32/c_1254.nls
  + .wine/drive_c/windows/system32/c_1255.nls
  + .wine/drive_c/windows/system32/c_1256.nls
  + .wine/drive_c/windows/system32/c_1257.nls
  + .wine/drive_c/windows/system32/c_1258.nls
  + .wine/drive_c/windows/system32/c_1361.nls
  + .wine/drive_c/windows/system32/c_20127.nls
  + .wine/drive_c/windows/system32/c_20866.nls
  + .wine/drive_c/windows/system32/c_20932.nls
  + .wine/drive_c/windows/system32/c_20949.nls
  + .wine/drive_c/windows/system32/c_21866.nls
  + .wine/drive_c/windows/system32/c_28591.nls
  + .wine/drive_c/windows/system32/c_28592.nls
  + .wine/drive_c/windows/system32/c_28593.nls
  + .wine/drive_c/windows/system32/c_28594.nls
  + .wine/drive_c/windows/system32/c_28595.nls
  + .wine/drive_c/windows/system32/c_28596.nls
  + .wine/drive_c/windows/system32/c_28597.nls
  + .wine/drive_c/windows/system32/c_28598.nls
  + .wine/drive_c/windows/system32/c_28599.nls
  + .wine/drive_c/windows/system32/c_28603.nls
  + .wine/drive_c/windows/system32/c_28605.nls
  + .wine/drive_c/windows/system32/c_437.nls
  + .wine/drive_c/windows/system32/c_500.nls
  + .wine/drive_c/windows/system32/c_708.nls
  + .wine/drive_c/windows/system32/c_720.nls
  + .wine/drive_c/windows/system32/c_737.nls
  + .wine/drive_c/windows/system32/c_775.nls
  + .wine/drive_c/windows/system32/c_850.nls
  + .wine/drive_c/windows/system32/c_852.nls
  + .wine/drive_c/windows/system32/c_855.nls
  + .wine/drive_c/windows/system32/c_857.nls
  + .wine/drive_c/windows/system32/c_860.nls
  + .wine/drive_c/windows/system32/c_861.nls
  + .wine/drive_c/windows/system32/c_862.nls
  + .wine/drive_c/windows/system32/c_863.nls
  + .wine/drive_c/windows/system32/c_864.nls
  + .wine/drive_c/windows/system32/c_865.nls
  + .wine/drive_c/windows/system32/c_866.nls
  + .wine/drive_c/windows/system32/c_869.nls
  + .wine/drive_c/windows/system32/c_874.nls
  + .wine/drive_c/windows/system32/c_875.nls
  + .wine/drive_c/windows/system32/c_932.nls
  + .wine/drive_c/windows/system32/c_936.nls
  + .wine/drive_c/windows/system32/c_949.nls
  + .wine/drive_c/windows/system32/c_950.nls
  + .wine/drive_c/windows/system32/drivers/cng.sys
  + .wine/drive_c/windows/system32/drivers/etc/hosts
    # 127.0.0.1 localhost
  + .wine/drive_c/windows/system32/drivers/etc/networks
    # loopback 127
  + .wine/drive_c/windows/system32/drivers/etc/protocol
    # Internet protocols
    
    ip           0   IP
    icmp         1   ICMP
    ggp          3   GGP
    tcp          6   TCP
    egp          8   EGP
    pup          12  PUP
    udp          17  UDP
    hmp          20  HMP
    xns-idp      22  XNS-IDP
    rdp          27  RDP
    ipv6         41  IPv6
    ipv6-route   43  IPv6-Route
    ipv6-frag    44  IPv6-Frag
    esp          50  ESP
    ah           51  AH
    ipv6-icmp    58  IPv6-ICMP
    ipv6-nonxt   59  IPv6-NoNxt
    ipv6-opts    60  IPv6-Opts
    rvd          66  RVD
  + .wine/drive_c/windows/system32/drivers/etc/services
    # Network services, Internet style
    
    echo            7/tcp
    echo            7/udp
    discard         9/tcp     sink null
    discard         9/udp     sink null
    systat          11/tcp    users
    daytime         13/tcp
    daytime         13/udp
    netstat         15/tcp
    qotd            17/tcp    quote
    qotd            17/udp    quote
    chargen         19/tcp    ttytst source
    chargen         19/udp    ttytst source
    ftp-data        20/tcp
    ftp             21/tcp
    fsp             21/udp    fspd
    ssh             22/tcp
    telnet          23/tcp
    smtp            25/tcp    mail
    time            37/tcp    timserver
     ... (truncated) ...
  + .wine/drive_c/windows/system32/drivers/fltmgr.sys
  + .wine/drive_c/windows/system32/drivers/hidclass.sys
  + .wine/drive_c/windows/system32/drivers/hidparse.sys
  + .wine/drive_c/windows/system32/drivers/http.sys
  + .wine/drive_c/windows/system32/drivers/ksecdd.sys
  + .wine/drive_c/windows/system32/drivers/mountmgr.sys
  + .wine/drive_c/windows/system32/drivers/ndis.sys
  + .wine/drive_c/windows/system32/drivers/netio.sys
  + .wine/drive_c/windows/system32/drivers/nsiproxy.sys
  + .wine/drive_c/windows/system32/drivers/scsiport.sys
  + .wine/drive_c/windows/system32/drivers/tdi.sys
  + .wine/drive_c/windows/system32/drivers/usbd.sys
  + .wine/drive_c/windows/system32/drivers/winebus.sys
  + .wine/drive_c/windows/system32/drivers/winehid.sys
  + .wine/drive_c/windows/system32/drivers/winexinput.sys
  + .wine/drive_c/windows/system32/gecko/plugin/npmshtml.dll
  + .wine/drive_c/windows/system32/l_intl.nls
  + .wine/drive_c/windows/system32/locale.nls
  + .wine/drive_c/windows/system32/normidna.nls
  + .wine/drive_c/windows/system32/normnfc.nls
  + .wine/drive_c/windows/system32/normnfd.nls
  + .wine/drive_c/windows/system32/normnfkc.nls
  + .wine/drive_c/windows/system32/normnfkd.nls
  + .wine/drive_c/windows/system32/spool/drivers/color/srgb color space profile.icm
  + .wine/drive_c/windows/system32/spool/drivers/w32x86/3/wineps.drv
  + .wine/drive_c/windows/system32/spool/drivers/win40/0/wineps16.drv
  + .wine/drive_c/windows/system32/spool/drivers/x64/3/wineps.drv
  + .wine/drive_c/windows/system32/spool/prtprocs/w32x86/wineps.drv
  + .wine/drive_c/windows/system32/spool/prtprocs/w32x86/winprint.dll
  + .wine/drive_c/windows/system32/spool/prtprocs/x64/wineps.drv
  + .wine/drive_c/windows/system32/spool/prtprocs/x64/winprint.dll
  + .wine/drive_c/windows/system32/wbem/mofcomp.exe
  + .wine/drive_c/windows/system32/wbem/wbemdisp.dll
  + .wine/drive_c/windows/system32/wbem/wbemprox.dll
  + .wine/drive_c/windows/system32/wbem/wmic.exe
  + .wine/drive_c/windows/system32/wbem/wmiutils.dll
  + .wine/drive_c/windows/system32/winevulkan.json
    {
        "file_format_version": "1.0.0",
        "ICD": {
            "library_path": ".\\winevulkan.dll",
            "api_version": "1.3.277"
        }
    }
  + .wine/drive_c/windows/syswow64/Speech/Common/sapi.dll
  + .wine/drive_c/windows/syswow64/Speech/Engines/TTS/msttsengine.dll
  + .wine/drive_c/windows/syswow64/WindowsPowerShell/v1.0/powershell.exe
  + .wine/drive_c/windows/syswow64/c_037.nls
  + .wine/drive_c/windows/syswow64/c_10000.nls
  + .wine/drive_c/windows/syswow64/c_10001.nls
  + .wine/drive_c/windows/syswow64/c_10002.nls
  + .wine/drive_c/windows/syswow64/c_10003.nls
  + .wine/drive_c/windows/syswow64/c_10004.nls
  + .wine/drive_c/windows/syswow64/c_10005.nls
  + .wine/drive_c/windows/syswow64/c_10006.nls
  + .wine/drive_c/windows/syswow64/c_10007.nls
  + .wine/drive_c/windows/syswow64/c_10008.nls
  + .wine/drive_c/windows/syswow64/c_10010.nls
  + .wine/drive_c/windows/syswow64/c_10017.nls
  + .wine/drive_c/windows/syswow64/c_10021.nls
  + .wine/drive_c/windows/syswow64/c_10029.nls
  + .wine/drive_c/windows/syswow64/c_10079.nls
  + .wine/drive_c/windows/syswow64/c_10081.nls
  + .wine/drive_c/windows/syswow64/c_10082.nls
  + .wine/drive_c/windows/syswow64/c_1026.nls
  + .wine/drive_c/windows/syswow64/c_1250.nls
  + .wine/drive_c/windows/syswow64/c_1251.nls
  + .wine/drive_c/windows/syswow64/c_1252.nls
  + .wine/drive_c/windows/syswow64/c_1253.nls
  + .wine/drive_c/windows/syswow64/c_1254.nls
  + .wine/drive_c/windows/syswow64/c_1255.nls
  + .wine/drive_c/windows/syswow64/c_1256.nls
  + .wine/drive_c/windows/syswow64/c_1257.nls
  + .wine/drive_c/windows/syswow64/c_1258.nls
  + .wine/drive_c/windows/syswow64/c_1361.nls
  + .wine/drive_c/windows/syswow64/c_20127.nls
  + .wine/drive_c/windows/syswow64/c_20866.nls
  + .wine/drive_c/windows/syswow64/c_20932.nls
  + .wine/drive_c/windows/syswow64/c_20949.nls
  + .wine/drive_c/windows/syswow64/c_21866.nls
  + .wine/drive_c/windows/syswow64/c_28591.nls
  + .wine/drive_c/windows/syswow64/c_28592.nls
  + .wine/drive_c/windows/syswow64/c_28593.nls
  + .wine/drive_c/windows/syswow64/c_28594.nls
  + .wine/drive_c/windows/syswow64/c_28595.nls
  + .wine/drive_c/windows/syswow64/c_28596.nls
  + .wine/drive_c/windows/syswow64/c_28597.nls
  + .wine/drive_c/windows/syswow64/c_28598.nls
  + .wine/drive_c/windows/syswow64/c_28599.nls
  + .wine/drive_c/windows/syswow64/c_28603.nls
  + .wine/drive_c/windows/syswow64/c_28605.nls
  + .wine/drive_c/windows/syswow64/c_437.nls
  + .wine/drive_c/windows/syswow64/c_500.nls
  + .wine/drive_c/windows/syswow64/c_708.nls
  + .wine/drive_c/windows/syswow64/c_720.nls
  + .wine/drive_c/windows/syswow64/c_737.nls
  + .wine/drive_c/windows/syswow64/c_775.nls
  + .wine/drive_c/windows/syswow64/c_850.nls
  + .wine/drive_c/windows/syswow64/c_852.nls
  + .wine/drive_c/windows/syswow64/c_855.nls
  + .wine/drive_c/windows/syswow64/c_857.nls
  + .wine/drive_c/windows/syswow64/c_860.nls
  + .wine/drive_c/windows/syswow64/c_861.nls
  + .wine/drive_c/windows/syswow64/c_862.nls
  + .wine/drive_c/windows/syswow64/c_863.nls
  + .wine/drive_c/windows/syswow64/c_864.nls
  + .wine/drive_c/windows/syswow64/c_865.nls
  + .wine/drive_c/windows/syswow64/c_866.nls
  + .wine/drive_c/windows/syswow64/c_869.nls
  + .wine/drive_c/windows/syswow64/c_874.nls
  + .wine/drive_c/windows/syswow64/c_875.nls
  + .wine/drive_c/windows/syswow64/c_932.nls
  + .wine/drive_c/windows/syswow64/c_936.nls
  + .wine/drive_c/windows/syswow64/c_949.nls
  + .wine/drive_c/windows/syswow64/c_950.nls
  + .wine/drive_c/windows/syswow64/ddhelp.exe
  + .wine/drive_c/windows/syswow64/dosx.exe
  + .wine/drive_c/windows/syswow64/dsound.vxd
  + .wine/drive_c/windows/syswow64/gecko/plugin/npmshtml.dll
  + .wine/drive_c/windows/syswow64/l_intl.nls
  + .wine/drive_c/windows/syswow64/locale.nls
  + .wine/drive_c/windows/syswow64/normidna.nls
  + .wine/drive_c/windows/syswow64/normnfc.nls
  + .wine/drive_c/windows/syswow64/normnfd.nls
  + .wine/drive_c/windows/syswow64/normnfkc.nls
  + .wine/drive_c/windows/syswow64/normnfkd.nls
  + .wine/drive_c/windows/syswow64/wbem/mofcomp.exe
  + .wine/drive_c/windows/syswow64/wbem/wbemdisp.dll
  + .wine/drive_c/windows/syswow64/wbem/wbemprox.dll
  + .wine/drive_c/windows/syswow64/wbem/wmic.exe
  + .wine/drive_c/windows/syswow64/wbem/wmiutils.dll
  + .wine/drive_c/windows/syswow64/winevulkan.json
    {
        "file_format_version": "1.0.0",
        "ICD": {
            "library_path": ".\\winevulkan.dll",
            "api_version": "1.3.277"
        }
    }
  + .wine/drive_c/windows/twain.dll
  + .wine/drive_c/windows/twain_32.dll
  + .wine/drive_c/windows/twain_32/gphoto2.ds
  + .wine/drive_c/windows/twain_32/sane.ds
  + .wine/drive_c/windows/twain_64/gphoto2.ds
  + .wine/drive_c/windows/twain_64/sane.ds
  + .wine/drive_c/windows/win.ini
    [mail]
    mapi=1
  + .wine/drive_c/windows/winhelp.exe
  + .wine/drive_c/windows/winhlp32.exe
  + .wine/drive_c/windows/winsxs/amd64_microsoft-windows-msxml30_31bf3856ad364e35_6.0.6000.16386_none_deadbeef/msxml3.dll
  + .wine/drive_c/windows/winsxs/amd64_microsoft-windows-msxml60_31bf3856ad364e35_6.0.6000.16386_none_deadbeef/msxml6.dll
  + .wine/drive_c/windows/winsxs/amd64_microsoft.msxml2_6bd6b9abf345378f_4.1.0.0_none_deadbeef/msxml4.dll
  + .wine/drive_c/windows/winsxs/amd64_microsoft.vc80.atl_1fc8b3b9a1e18e3b_8.0.50727.4053_none_deadbeef/atl80.dll
  + .wine/drive_c/windows/winsxs/amd64_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.9672_none_deadbeef/msvcm80.dll
  + .wine/drive_c/windows/winsxs/amd64_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.9672_none_deadbeef/msvcp80.dll
  + .wine/drive_c/windows/winsxs/amd64_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.9672_none_deadbeef/msvcr80.dll
  + .wine/drive_c/windows/winsxs/amd64_microsoft.vc90.atl_1fc8b3b9a1e18e3b_9.0.30729.6161_none_deadbeef/atl90.dll
  + .wine/drive_c/windows/winsxs/amd64_microsoft.vc90.crt_1fc8b3b9a1e18e3b_9.0.30729.6161_none_deadbeef/msvcm90.dll
  + .wine/drive_c/windows/winsxs/amd64_microsoft.vc90.crt_1fc8b3b9a1e18e3b_9.0.30729.6161_none_deadbeef/msvcp90.dll
  + .wine/drive_c/windows/winsxs/amd64_microsoft.vc90.crt_1fc8b3b9a1e18e3b_9.0.30729.6161_none_deadbeef/msvcr90.dll
  + .wine/drive_c/windows/winsxs/amd64_microsoft.windows.common-controls_6595b64144ccf1df_6.0.2600.2982_none_deadbeef/comctl32.dll
  + .wine/drive_c/windows/winsxs/amd64_microsoft.windows.gdiplus_6595b64144ccf1df_1.0.6000.16386_none_deadbeef/gdiplus.dll
  + .wine/drive_c/windows/winsxs/amd64_microsoft.windows.gdiplus_6595b64144ccf1df_1.1.7601.23038_none_deadbeef/gdiplus.dll
  + .wine/drive_c/windows/winsxs/manifests/amd64_microsoft-windows-msxml30_31bf3856ad364e35_6.0.6000.16386_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft-Windows-MSXML30" version="6.0.6000.16386" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35"/>
      <file name="msxml3.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/amd64_microsoft-windows-msxml60_31bf3856ad364e35_6.0.6000.16386_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft-Windows-MSXML60" version="6.0.6000.16386" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35"/>
      <file name="msxml6.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/amd64_microsoft.msxml2_6bd6b9abf345378f_4.1.0.0_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.MSXML2" version="4.1.0.0" processorArchitecture="amd64" publicKeyToken="6bd6b9abf345378f"/>
      <file name="msxml4.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/amd64_microsoft.vc80.atl_1fc8b3b9a1e18e3b_8.0.50727.4053_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.VC80.ATL" version="8.0.50727.4053" processorArchitecture="amd64" publicKeyToken="1fc8b3b9a1e18e3b"/>
      <file name="atl80.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/amd64_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.9672_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.VC80.CRT" version="8.0.50727.9672" processorArchitecture="amd64" publicKeyToken="1fc8b3b9a1e18e3b"/>
      <file name="msvcr80.dll"/>
      <file name="msvcp80.dll"/>
      <file name="msvcm80.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/amd64_microsoft.vc90.atl_1fc8b3b9a1e18e3b_9.0.30729.6161_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.VC90.ATL" version="9.0.30729.6161" processorArchitecture="amd64" publicKeyToken="1fc8b3b9a1e18e3b"/>
      <file name="atl90.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/amd64_microsoft.vc90.crt_1fc8b3b9a1e18e3b_9.0.30729.6161_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.VC90.CRT" version="9.0.30729.6161" processorArchitecture="amd64" publicKeyToken="1fc8b3b9a1e18e3b"/>
      <file name="msvcr90.dll"/>
      <file name="msvcp90.dll"/>
      <file name="msvcm90.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/amd64_microsoft.windows.common-controls_6595b64144ccf1df_6.0.2600.2982_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.Windows.Common-Controls" version="6.0.2600.2982" processorArchitecture="amd64" publicKeyToken="6595b64144ccf1df"/>
      <file name="comctl32.dll">
        <windowClass>Button</windowClass>
        <windowClass>ButtonListBox</windowClass>
        <windowClass>ComboBoxEx32</windowClass>
        <windowClass>ComboLBox</windowClass>
        <windowClass>Combobox</windowClass>
        <windowClass>Edit</windowClass>
        <windowClass>Listbox</windowClass>
        <windowClass>NativeFontCtl</windowClass>
        <windowClass>ReBarWindow32</windowClass>
        <windowClass>ScrollBar</windowClass>
        <windowClass>Static</windowClass>
        <windowClass>SysAnimate32</windowClass>
        <windowClass>SysDateTimePick32</windowClass>
        <windowClass>SysHeader32</windowClass>
        <windowClass>SysIPAddress32</windowClass>
        <windowClass>SysLink</windowClass>
        <windowClass>SysListView32</windowClass>
     ... (truncated) ...
  + .wine/drive_c/windows/winsxs/manifests/amd64_microsoft.windows.gdiplus_6595b64144ccf1df_1.0.6000.16386_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.Windows.GdiPlus" version="1.0.6000.16386" processorArchitecture="amd64" publicKeyToken="6595b64144ccf1df"/>
      <file name="gdiplus.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/amd64_microsoft.windows.gdiplus_6595b64144ccf1df_1.1.7601.23038_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.Windows.GdiPlus" version="1.1.7601.23038" processorArchitecture="amd64" publicKeyToken="6595b64144ccf1df"/>
      <file name="gdiplus.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/x86_microsoft-windows-msxml30_31bf3856ad364e35_6.0.6000.16386_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft-Windows-MSXML30" version="6.0.6000.16386" processorArchitecture="x86" publicKeyToken="31bf3856ad364e35"/>
      <file name="msxml3.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/x86_microsoft-windows-msxml60_31bf3856ad364e35_6.0.6000.16386_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft-Windows-MSXML60" version="6.0.6000.16386" processorArchitecture="x86" publicKeyToken="31bf3856ad364e35"/>
      <file name="msxml6.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/x86_microsoft.msxml2_6bd6b9abf345378f_4.1.0.0_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.MSXML2" version="4.1.0.0" processorArchitecture="x86" publicKeyToken="6bd6b9abf345378f"/>
      <file name="msxml4.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/x86_microsoft.vc80.atl_1fc8b3b9a1e18e3b_8.0.50727.4053_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.VC80.ATL" version="8.0.50727.4053" processorArchitecture="x86" publicKeyToken="1fc8b3b9a1e18e3b"/>
      <file name="atl80.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/x86_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.9672_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.VC80.CRT" version="8.0.50727.9672" processorArchitecture="x86" publicKeyToken="1fc8b3b9a1e18e3b"/>
      <file name="msvcr80.dll"/>
      <file name="msvcp80.dll"/>
      <file name="msvcm80.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/x86_microsoft.vc90.atl_1fc8b3b9a1e18e3b_9.0.30729.6161_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.VC90.ATL" version="9.0.30729.6161" processorArchitecture="x86" publicKeyToken="1fc8b3b9a1e18e3b"/>
      <file name="atl90.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/x86_microsoft.vc90.crt_1fc8b3b9a1e18e3b_9.0.30729.6161_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.VC90.CRT" version="9.0.30729.6161" processorArchitecture="x86" publicKeyToken="1fc8b3b9a1e18e3b"/>
      <file name="msvcr90.dll"/>
      <file name="msvcp90.dll"/>
      <file name="msvcm90.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.2600.2982_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.Windows.Common-Controls" version="6.0.2600.2982" processorArchitecture="x86" publicKeyToken="6595b64144ccf1df"/>
      <file name="comctl32.dll">
        <windowClass>Button</windowClass>
        <windowClass>ButtonListBox</windowClass>
        <windowClass>ComboBoxEx32</windowClass>
        <windowClass>ComboLBox</windowClass>
        <windowClass>Combobox</windowClass>
        <windowClass>Edit</windowClass>
        <windowClass>Listbox</windowClass>
        <windowClass>NativeFontCtl</windowClass>
        <windowClass>ReBarWindow32</windowClass>
        <windowClass>ScrollBar</windowClass>
        <windowClass>Static</windowClass>
        <windowClass>SysAnimate32</windowClass>
        <windowClass>SysDateTimePick32</windowClass>
        <windowClass>SysHeader32</windowClass>
        <windowClass>SysIPAddress32</windowClass>
        <windowClass>SysLink</windowClass>
        <windowClass>SysListView32</windowClass>
     ... (truncated) ...
  + .wine/drive_c/windows/winsxs/manifests/x86_microsoft.windows.gdiplus_6595b64144ccf1df_1.0.6000.16386_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.Windows.GdiPlus" version="1.0.6000.16386" processorArchitecture="x86" publicKeyToken="6595b64144ccf1df"/>
      <file name="gdiplus.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/manifests/x86_microsoft.windows.gdiplus_6595b64144ccf1df_1.1.7601.23038_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
      <assemblyIdentity type="win32" name="Microsoft.Windows.GdiPlus" version="1.1.7601.23038" processorArchitecture="x86" publicKeyToken="6595b64144ccf1df"/>
      <file name="gdiplus.dll"/>
    </assembly>
  + .wine/drive_c/windows/winsxs/x86_microsoft-windows-msxml30_31bf3856ad364e35_6.0.6000.16386_none_deadbeef/msxml3.dll
  + .wine/drive_c/windows/winsxs/x86_microsoft-windows-msxml60_31bf3856ad364e35_6.0.6000.16386_none_deadbeef/msxml6.dll
  + .wine/drive_c/windows/winsxs/x86_microsoft.msxml2_6bd6b9abf345378f_4.1.0.0_none_deadbeef/msxml4.dll
  + .wine/drive_c/windows/winsxs/x86_microsoft.vc80.atl_1fc8b3b9a1e18e3b_8.0.50727.4053_none_deadbeef/atl80.dll
  + .wine/drive_c/windows/winsxs/x86_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.9672_none_deadbeef/msvcm80.dll
  + .wine/drive_c/windows/winsxs/x86_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.9672_none_deadbeef/msvcp80.dll
  + .wine/drive_c/windows/winsxs/x86_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.9672_none_deadbeef/msvcr80.dll
  + .wine/drive_c/windows/winsxs/x86_microsoft.vc90.atl_1fc8b3b9a1e18e3b_9.0.30729.6161_none_deadbeef/atl90.dll
  + .wine/drive_c/windows/winsxs/x86_microsoft.vc90.crt_1fc8b3b9a1e18e3b_9.0.30729.6161_none_deadbeef/msvcm90.dll
  + .wine/drive_c/windows/winsxs/x86_microsoft.vc90.crt_1fc8b3b9a1e18e3b_9.0.30729.6161_none_deadbeef/msvcp90.dll
  + .wine/drive_c/windows/winsxs/x86_microsoft.vc90.crt_1fc8b3b9a1e18e3b_9.0.30729.6161_none_deadbeef/msvcr90.dll
  + .wine/drive_c/windows/winsxs/x86_microsoft.windows.common-controls_6595b64144ccf1df_6.0.2600.2982_none_deadbeef/comctl32.dll
  + .wine/drive_c/windows/winsxs/x86_microsoft.windows.gdiplus_6595b64144ccf1df_1.0.6000.16386_none_deadbeef/gdiplus.dll
  + .wine/drive_c/windows/winsxs/x86_microsoft.windows.gdiplus_6595b64144ccf1df_1.1.7601.23038_none_deadbeef/gdiplus.dll
  + .wine/system.reg
    WINE REGISTRY Version 2
    ;; All keys relative to REGISTRY\\Machine
    
    #arch=win64
    
    [Software\\Borland\\Database Engine\\Settings\\SYSTEM\\INIT] 1714477163
    #time=1da9af30c86dc26
    "SHAREDMEMLOCATION"="9000"
    
    [Software\\Classes\\*\\shellex\\ContextMenuHandlers] 1714477163
    #time=1da9af30c7bec9e
    
    [Software\\Classes\\.ai] 1714477161
    #time=1da9af30b3fb1da
    "Content Type"="application/postscript"
    
    [Software\\Classes\\.avi] 1714477161
    #time=1da9af30b3ad2f0
    "Content Type"="video/avi"
    
    [Software\\Classes\\.bmp] 1714477161
     ... (truncated) ...
  + .wine/user.reg
    WINE REGISTRY Version 2
    ;; All keys relative to REGISTRY\\User\\S-1-5-21-0-0-0-1000
    
    #arch=win64
    
    [AppEvents\\Schemes\\Apps\\Explorer\\Navigating\\.Current] 1714477163
    #time=1da9af30c895348
    @=""
    
    [Control Panel\\Accessibility\\AudioDescription] 1714477140
    #time=1da9af2feceb1b2
    "Locale"=dword:00000000
    "On"="0"
    
    [Control Panel\\Accessibility\\Blind Access] 1714477140
    #time=1da9af2fece9aec
    "On"="0"
    
    [Control Panel\\Accessibility\\Keyboard Preference] 1714477140
    #time=1da9af2fece72b0
    "On"="1"
     ... (truncated) ...
  + .wine/userdef.reg
    WINE REGISTRY Version 2
    ;; All keys relative to REGISTRY\\User\\.Default
    
    #arch=win64
    
    [Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders] 1714477147
    #time=1da9af302f8d4fc
    "Administrative Tools"="C:\\users\\xuser\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Administrative Tools"
    "AppData"="C:\\users\\xuser\\AppData\\Roaming"
    "Cache"="C:\\users\\xuser\\AppData\\Local\\Microsoft\\Windows\\INetCache"
    "Cookies"="C:\\users\\xuser\\AppData\\Local\\Microsoft\\Windows\\INetCookies"
    "Desktop"="C:\\users\\xuser\\Desktop"
    "Favorites"="C:\\users\\xuser\\Favorites"
    "Fonts"="C:\\windows\\Fonts"
    "History"="C:\\users\\xuser\\AppData\\Local\\Microsoft\\Windows\\History"
    "Local AppData"="C:\\users\\xuser\\AppData\\Local"
    "My Music"="C:\\users\\xuser\\Music"
    "My Pictures"="C:\\users\\xuser\\Pictures"
    "My Videos"="C:\\users\\xuser\\Videos"
    "NetHood"="C:\\users\\xuser\\AppData\\Roaming\\Microsoft\\Windows\\Network Shortcuts"
    "Personal"="C:\\users\\xuser\\Documents"
     ... (truncated) ...
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/container_pattern.tzst
  Processing file: app/src/main/assets/dxwrapper/cnc-ddraw-6.6/ddraw.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/cnc-ddraw-6.6/ddraw.tzst
  Staging directories: ddraw.tzst_690489481
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/cnc-ddraw-6.6/ddraw.tzst -C ddraw.tzst_690489481
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/cnc-ddraw-6.6/ddraw.tzst
  + syswow64/ddraw.dll
  Processing file: app/src/main/assets/dxwrapper/d8vk-1.0.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/d8vk-1.0.tzst
  Staging directories: d8vk-1.0.tzst_3097568306
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/d8vk-1.0.tzst -C d8vk-1.0.tzst_3097568306
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/d8vk-1.0.tzst
  + syswow64/d3d8.dll
  Processing file: app/src/main/assets/dxwrapper/dxvk-0.96.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/dxvk-0.96.tzst
  Staging directories: dxvk-0.96.tzst_2026764681
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/dxvk-0.96.tzst -C dxvk-0.96.tzst_2026764681
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/dxvk-0.96.tzst
  + system32/d3d10.dll
  + system32/d3d10_1.dll
  + system32/d3d10core.dll
  + system32/d3d11.dll
  + system32/dxgi.dll
  + syswow64/d3d10.dll
  + syswow64/d3d10_1.dll
  + syswow64/d3d10core.dll
  + syswow64/d3d11.dll
  + syswow64/dxgi.dll
  Processing file: app/src/main/assets/dxwrapper/dxvk-1.10.3.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/dxvk-1.10.3.tzst
  Staging directories: dxvk-1.10.3.tzst_1580602575
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/dxvk-1.10.3.tzst -C dxvk-1.10.3.tzst_1580602575
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/dxvk-1.10.3.tzst
  + system32/d3d10.dll
  + system32/d3d10_1.dll
  + system32/d3d10core.dll
  + system32/d3d11.dll
  + system32/d3d9.dll
  + system32/dxgi.dll
  + syswow64/d3d10.dll
  + syswow64/d3d10_1.dll
  + syswow64/d3d10core.dll
  + syswow64/d3d11.dll
  + syswow64/d3d9.dll
  + syswow64/dxgi.dll
  Processing file: app/src/main/assets/dxwrapper/dxvk-1.7.2.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/dxvk-1.7.2.tzst
  Staging directories: dxvk-1.7.2.tzst_1188820820
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/dxvk-1.7.2.tzst -C dxvk-1.7.2.tzst_1188820820
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/dxvk-1.7.2.tzst
  + system32/d3d10.dll
  + system32/d3d10_1.dll
  + system32/d3d10core.dll
  + system32/d3d11.dll
  + system32/d3d9.dll
  + system32/dxgi.dll
  + syswow64/d3d10.dll
  + syswow64/d3d10_1.dll
  + syswow64/d3d10core.dll
  + syswow64/d3d11.dll
  + syswow64/d3d9.dll
  + syswow64/dxgi.dll
  Processing file: app/src/main/assets/dxwrapper/dxvk-2.4.1.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/dxvk-2.4.1.tzst
  Staging directories: dxvk-2.4.1.tzst_3641669483
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/dxvk-2.4.1.tzst -C dxvk-2.4.1.tzst_3641669483
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/dxvk-2.4.1.tzst
  + system32/d3d10.dll
  + system32/d3d10_1.dll
  + system32/d3d10core.dll
  + system32/d3d11.dll
  + system32/d3d9.dll
  + system32/dxgi.dll
  + syswow64/d3d10.dll
  + syswow64/d3d10_1.dll
  + syswow64/d3d10core.dll
  + syswow64/d3d11.dll
  + syswow64/d3d9.dll
  + syswow64/dxgi.dll
  Processing file: app/src/main/assets/dxwrapper/vkd3d-2.13.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/vkd3d-2.13.tzst
  Staging directories: vkd3d-2.13.tzst_140162452
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/vkd3d-2.13.tzst -C vkd3d-2.13.tzst_140162452
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/dxwrapper/vkd3d-2.13.tzst
  + system32/d3d12.dll
  + system32/d3d12core.dll
  + syswow64/d3d12.dll
  + syswow64/d3d12core.dll
  Processing file: app/src/main/assets/graphics_driver/turnip-24.1.0.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/turnip-24.1.0.tzst
  Staging directories: turnip-24.1.0.tzst_2493010577
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/turnip-24.1.0.tzst -C turnip-24.1.0.tzst_2493010577
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/turnip-24.1.0.tzst
  + usr/lib/libvulkan_freedreno.so
    00000000000f3010 T vk_icdGetInstanceProcAddr
    0000000000170a90 T vk_icdGetPhysicalDeviceProcAddr
    0000000000170940 T vk_icdNegotiateLoaderICDInterfaceVersion
  + usr/share/vulkan/icd.d/freedreno_icd.aarch64.json
    {
        "ICD": {
            "api_version": "1.1.246",
            "library_path": "/data/data/com.winlator/files/rootfs/lib/libvulkan_freedreno.so"
        },
        "file_format_version": "1.0.0"
    }
  Processing file: app/src/main/assets/graphics_driver/turnip-25.0.0.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/turnip-25.0.0.tzst
  Staging directories: turnip-25.0.0.tzst_802773049
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/turnip-25.0.0.tzst -C turnip-25.0.0.tzst_802773049
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/turnip-25.0.0.tzst
  + usr/lib/libvulkan_freedreno.so
    00000000000d5bb0 T vk_icdGetInstanceProcAddr
    000000000016cc30 T vk_icdGetPhysicalDeviceProcAddr
    000000000016cae0 T vk_icdNegotiateLoaderICDInterfaceVersion
  + usr/share/vulkan/icd.d/freedreno_icd.aarch64.json
    {
        "ICD": {
            "api_version": "1.1.246",
            "library_path": "/data/data/com.winlator/files/rootfs/lib/libvulkan_freedreno.so"
        },
        "file_format_version": "1.0.0"
    }
  Processing file: app/src/main/assets/graphics_driver/virgl-23.1.9.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/virgl-23.1.9.tzst
  Staging directories: virgl-23.1.9.tzst_2155668443
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/virgl-23.1.9.tzst -C virgl-23.1.9.tzst_2155668443
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/virgl-23.1.9.tzst
  + usr/lib/libGL.so.1.7.0
  Processing file: app/src/main/assets/graphics_driver/vortek-1.0.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/vortek-1.0.tzst
  Staging directories: vortek-1.0.tzst_542123213
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/vortek-1.0.tzst -C vortek-1.0.tzst_542123213
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/vortek-1.0.tzst
  + usr/lib/libvulkan_vortek.so
    000000000003d5a0 T ArrayDeque_addFirst
    000000000003d5d0 T ArrayDeque_addLast
    000000000003d664 T ArrayDeque_free
    000000000003d530 T ArrayDeque_init
    000000000003d584 T ArrayDeque_isEmpty
    000000000003d600 T ArrayDeque_removeFirst
    000000000003d634 T ArrayDeque_removeLast
    000000000003cbb4 T ArrayList_add
    000000000003cce0 T ArrayList_free
    000000000003cd50 T ArrayList_fromStrings
    000000000003cb74 T ArrayList_indexOf
    000000000003cca0 T ArrayList_remove
    000000000003cc30 T ArrayList_removeAt
    000000000003d230 T ArrayMap_free
    000000000003d140 T ArrayMap_get
    000000000003cdc0 T ArrayMap_indexOfKey
    000000000003d010 T ArrayMap_indexOfValue
    000000000003d054 T ArrayMap_put
    000000000003d1f4 T ArrayMap_remove
    000000000003d180 T ArrayMap_removeAt
    0000000000060220 B clientRing
    000000000003d6d0 T DescriptorUpdateTemplate_create
    000000000003d804 T DescriptorUpdateTemplate_fillDescriptorWrites
    000000000003d7d0 T DescriptorUpdateTemplate_free
    000000000003c884 T IntArray_add
    000000000003c8f4 T IntArray_addAll
    000000000003cb10 T IntArray_clear
    000000000003ca50 T IntArray_remove
    000000000003cb50 T IntArray_sort
    0000000000060260 B memoryPools
    0000000000060230 B memoryPoolsMutex
    000000000003dcd0 T RingBuffer_create
    000000000003dd90 T RingBuffer_free
    000000000003da00 T RingBuffer_freeSpace
    000000000003dcc0 T RingBuffer_getSHMemSize
    000000000003d9c0 T RingBuffer_hasStatus
    000000000003da24 T RingBuffer_read
    000000000003d980 T RingBuffer_setStatus
    000000000003d9d4 T RingBuffer_size
    000000000003d9a0 T RingBuffer_unsetStatus
    000000000003db70 T RingBuffer_write
    0000000000060210 D serverFd
    0000000000060228 B serverRing
    000000000003d430 T SparseArray_get
    000000000003d2a0 T SparseArray_indexOfKey
    000000000003d300 T SparseArray_indexOfValue
    000000000003d344 T SparseArray_put
    000000000003d4f0 T SparseArray_remove
    000000000003d470 T SparseArray_removeAt
    000000000003c500 T vk_icdGetInstanceProcAddr
    000000000003c590 T vk_icdNegotiateLoaderICDInterfaceVersion
    000000000003c5b0 T VkObject_create
    000000000003c780 T VkObject_free
    000000000003c754 T VkObject_fromHandle
    000000000003c750 T VkObject_fromId
    000000000003c704 T VkObject_toHandle
    0000000000009b60 T vortekInitOnce
    0000000000010990 T vt_call_vkAcquireNextImage2KHR
    000000000001c730 T vt_call_vkAcquireNextImageKHR
    0000000000026430 T vt_call_vkAllocateCommandBuffers
    0000000000031b94 T vt_call_vkAllocateDescriptorSets
    0000000000024e80 T vt_call_vkAllocateMemory
    0000000000032ef4 T vt_call_vkBeginCommandBuffer
    0000000000037f80 T vt_call_vkBindBufferMemory
    0000000000009e74 T vt_call_vkBindBufferMemory2
    0000000000037c60 T vt_call_vkBindImageMemory
    0000000000010980 T vt_call_vkBindImageMemory2
    000000000000c400 T vt_call_vkCmdBeginConditionalRenderingEXT
    0000000000013084 T vt_call_vkCmdBeginQuery
    000000000000d210 T vt_call_vkCmdBeginQueryIndexedEXT
    00000000000136e4 T vt_call_vkCmdBeginRendering
    0000000000014410 T vt_call_vkCmdBeginRenderPass
    0000000000014540 T vt_call_vkCmdBeginRenderPass2
    0000000000016d70 T vt_call_vkCmdBeginTransformFeedbackEXT
    0000000000010074 T vt_call_vkCmdBindDescriptorSets
    000000000000bab0 T vt_call_vkCmdBindIndexBuffer
    000000000000b1d0 T vt_call_vkCmdBindPipeline
    000000000000f570 T vt_call_vkCmdBindTransformFeedbackBuffersEXT
    0000000000016be0 T vt_call_vkCmdBindVertexBuffers
    000000000000f340 T vt_call_vkCmdBindVertexBuffers2
    000000000000fde4 T vt_call_vkCmdBlitImage
    000000000000e510 T vt_call_vkCmdBlitImage2
    00000000000125b0 T vt_call_vkCmdClearAttachments
    000000000000f970 T vt_call_vkCmdClearColorImage
    000000000000f754 T vt_call_vkCmdClearDepthStencilImage
    000000000000bf60 T vt_call_vkCmdCopyBuffer
    000000000000e060 T vt_call_vkCmdCopyBuffer2
    0000000000010c70 T vt_call_vkCmdCopyBufferToImage
    0000000000010a00 T vt_call_vkCmdCopyBufferToImage2
    0000000000010ed0 T vt_call_vkCmdCopyImage
    000000000000e270 T vt_call_vkCmdCopyImage2
    000000000000fb84 T vt_call_vkCmdCopyImageToBuffer
    000000000000e794 T vt_call_vkCmdCopyImageToBuffer2
    000000000000c6f4 T vt_call_vkCmdCopyQueryPoolResults
    000000000000beb0 T vt_call_vkCmdDispatch
    000000000000cd40 T vt_call_vkCmdDispatchBase
    0000000000011160 T vt_call_vkCmdDispatchIndirect
    000000000000bbd4 T vt_call_vkCmdDraw
    000000000000bc94 T vt_call_vkCmdDrawIndexed
    000000000000bd70 T vt_call_vkCmdDrawIndexedIndirect
    000000000000d060 T vt_call_vkCmdDrawIndexedIndirectCount
    00000000000119b0 T vt_call_vkCmdDrawIndirect
    000000000000d474 T vt_call_vkCmdDrawIndirectByteCountEXT
    0000000000012db0 T vt_call_vkCmdDrawIndirectCount
    000000000000c540 T vt_call_vkCmdEndConditionalRenderingEXT
    00000000000131b0 T vt_call_vkCmdEndQuery
    000000000000d350 T vt_call_vkCmdEndQueryIndexedEXT
    000000000000f004 T vt_call_vkCmdEndRendering
    000000000000cae0 T vt_call_vkCmdEndRenderPass
    000000000000cf60 T vt_call_vkCmdEndRenderPass2
    0000000000011814 T vt_call_vkCmdEndTransformFeedbackEXT
    000000000000cb70 T vt_call_vkCmdExecuteCommands
    000000000000c2c0 T vt_call_vkCmdFillBuffer
    000000000000ca50 T vt_call_vkCmdNextSubpass
    000000000000ce20 T vt_call_vkCmdNextSubpass2
    0000000000014b70 T vt_call_vkCmdPipelineBarrier
    0000000000017724 T vt_call_vkCmdPipelineBarrier2
    000000000000c8c0 T vt_call_vkCmdPushConstants
    0000000000016630 T vt_call_vkCmdPushDescriptorSetKHR
    0000000000015bc0 T vt_call_vkCmdPushDescriptorSetWithTemplateKHR
    00000000000133f0 T vt_call_vkCmdResetEvent
    000000000000edc0 T vt_call_vkCmdResetEvent2
    0000000000012f60 T vt_call_vkCmdResetQueryPool
    00000000000146a0 T vt_call_vkCmdResolveImage
    000000000000ea00 T vt_call_vkCmdResolveImage2
    000000000000b740 T vt_call_vkCmdSetBlendConstants
    000000000000eca0 T vt_call_vkCmdSetColorWriteEnableEXT
    000000000000d680 T vt_call_vkCmdSetCullMode
    000000000000b680 T vt_call_vkCmdSetDepthBias
    000000000000df40 T vt_call_vkCmdSetDepthBiasEnable
    000000000000b7f0 T vt_call_vkCmdSetDepthBounds
    000000000000dcc4 T vt_call_vkCmdSetDepthBoundsTestEnable
    000000000000dc34 T vt_call_vkCmdSetDepthCompareOp
    000000000000db14 T vt_call_vkCmdSetDepthTestEnable
    000000000000dba4 T vt_call_vkCmdSetDepthWriteEnable
    000000000000ccb0 T vt_call_vkCmdSetDeviceMask
    00000000000132d0 T vt_call_vkCmdSetEvent
    0000000000017300 T vt_call_vkCmdSetEvent2
    000000000000d710 T vt_call_vkCmdSetFrontFace
    000000000000d5d4 T vt_call_vkCmdSetLineStippleEXT
    000000000000b5e0 T vt_call_vkCmdSetLineWidth
    000000000000dfd0 T vt_call_vkCmdSetPrimitiveRestartEnable
    000000000000d7a0 T vt_call_vkCmdSetPrimitiveTopology
    000000000000deb0 T vt_call_vkCmdSetRasterizerDiscardEnable
    00000000000169c0 T vt_call_vkCmdSetSampleLocationsEXT
    000000000000b470 T vt_call_vkCmdSetScissor
    000000000000d9b0 T vt_call_vkCmdSetScissorWithCount
    000000000000b8a0 T vt_call_vkCmdSetStencilCompareMask
    000000000000dde4 T vt_call_vkCmdSetStencilOp
    000000000000ba00 T vt_call_vkCmdSetStencilReference
    000000000000dd54 T vt_call_vkCmdSetStencilTestEnable
    000000000000b950 T vt_call_vkCmdSetStencilWriteMask
    000000000000b2e4 T vt_call_vkCmdSetViewport
    000000000000d830 T vt_call_vkCmdSetViewportWithCount
    000000000000c150 T vt_call_vkCmdUpdateBuffer
    0000000000014f70 T vt_call_vkCmdWaitEvents
    0000000000016f00 T vt_call_vkCmdWaitEvents2
    000000000000c5d0 T vt_call_vkCmdWriteTimestamp
    000000000000eee0 T vt_call_vkCmdWriteTimestamp2
    000000000001f260 T vt_call_vkCreateBuffer
    000000000001ad90 T vt_call_vkCreateBufferView
    00000000000393a0 T vt_call_vkCreateCommandPool
    0000000000033900 T vt_call_vkCreateComputePipelines
    0000000000035240 T vt_call_vkCreateDescriptorPool
    0000000000026bd0 T vt_call_vkCreateDescriptorSetLayout
    0000000000017b40 T vt_call_vkCreateDescriptorUpdateTemplate
    0000000000019dd0 T vt_call_vkCreateDevice
    0000000000038670 T vt_call_vkCreateEvent
    0000000000023290 T vt_call_vkCreateFence
    0000000000027004 T vt_call_vkCreateFramebuffer
    0000000000028c84 T vt_call_vkCreateGraphicsPipelines
    00000000000267c4 T vt_call_vkCreateImage
    000000000001dd44 T vt_call_vkCreateImageView
    000000000002a844 T vt_call_vkCreateInstance
    000000000001ca04 T vt_call_vkCreatePipelineCache
    0000000000028190 T vt_call_vkCreatePipelineLayout
    0000000000010940 T vt_call_vkCreatePrivateDataSlot
    000000000003a9e0 T vt_call_vkCreateQueryPool
    000000000003b7b4 T vt_call_vkCreateRenderPass
    0000000000036470 T vt_call_vkCreateRenderPass2
    0000000000022100 T vt_call_vkCreateSampler
    000000000001b040 T vt_call_vkCreateSamplerYcbcrConversion
    0000000000028880 T vt_call_vkCreateSemaphore
    000000000001bfa0 T vt_call_vkCreateShaderModule
    0000000000025424 T vt_call_vkCreateSwapchainKHR
    0000000000009eb4 T vt_call_vkCreateXlibSurfaceKHR
    0000000000021ef0 T vt_call_vkDestroyBuffer
    00000000000218c0 T vt_call_vkDestroyBufferView
    0000000000021ce0 T vt_call_vkDestroyCommandPool
    0000000000025a60 T vt_call_vkDestroyDescriptorPool
    0000000000021ad0 T vt_call_vkDestroyDescriptorSetLayout
    0000000000017640 T vt_call_vkDestroyDescriptorUpdateTemplate
    0000000000020420 T vt_call_vkDestroyDevice
    0000000000021290 T vt_call_vkDestroyEvent
    000000000001f9d0 T vt_call_vkDestroyFence
    000000000001f7c0 T vt_call_vkDestroyFramebuffer
    0000000000020000 T vt_call_vkDestroyImage
    000000000001fbe0 T vt_call_vkDestroyImageView
    0000000000021080 T vt_call_vkDestroyInstance
    0000000000020a50 T vt_call_vkDestroyPipeline
    0000000000020840 T vt_call_vkDestroyPipelineCache
    00000000000214a0 T vt_call_vkDestroyPipelineLayout
    00000000000109d4 T vt_call_vkDestroyPrivateDataSlot
    0000000000020c60 T vt_call_vkDestroyQueryPool
    0000000000020210 T vt_call_vkDestroyRenderPass
    000000000001f5b4 T vt_call_vkDestroySampler
    0000000000020630 T vt_call_vkDestroySamplerYcbcrConversion
    000000000001fdf0 T vt_call_vkDestroySemaphore
    0000000000020e70 T vt_call_vkDestroyShaderModule
    000000000000ae60 T vt_call_vkDestroySurfaceKHR
    00000000000216b0 T vt_call_vkDestroySwapchainKHR
    0000000000031694 T vt_call_vkDeviceWaitIdle
    0000000000017c44 T vt_call_vkEndCommandBuffer
    00000000000242b0 T vt_call_vkEnumerateDeviceExtensionProperties
    0000000000009e30 T vt_call_vkEnumerateDeviceLayerProperties
    000000000001ebf0 T vt_call_vkEnumerateInstanceExtensionProperties
    0000000000009e20 T vt_call_vkEnumerateInstanceLayerProperties
    0000000000018494 T vt_call_vkEnumerateInstanceVersion
    0000000000022774 T vt_call_vkEnumeratePhysicalDeviceGroups
    000000000001da14 T vt_call_vkEnumeratePhysicalDevices
    000000000003ad50 T vt_call_vkFlushMappedMemoryRanges
    0000000000037930 T vt_call_vkFreeCommandBuffers
    0000000000035dc0 T vt_call_vkFreeDescriptorSets
    0000000000023c50 T vt_call_vkFreeMemory
    0000000000032c64 T vt_call_vkGetBufferDeviceAddress
    0000000000024090 T vt_call_vkGetBufferMemoryRequirements
    00000000000198e4 T vt_call_vkGetBufferMemoryRequirements2
    0000000000032740 T vt_call_vkGetBufferOpaqueCaptureAddress
    000000000001c250 T vt_call_vkGetDescriptorSetLayoutSupport
    0000000000034760 T vt_call_vkGetDeviceBufferMemoryRequirements
    0000000000009e70 T vt_call_vkGetDeviceGroupPeerMemoryFeatures
    0000000000009ef0 T vt_call_vkGetDeviceGroupPresentCapabilitiesKHR
    0000000000009e80 T vt_call_vkGetDeviceGroupSurfacePresentModesKHR
    0000000000034c40 T vt_call_vkGetDeviceImageMemoryRequirements
    0000000000017dd0 T vt_call_vkGetDeviceImageSparseMemoryRequirements
    000000000003c244 T vt_call_vkGetDeviceMemoryCommitment
    00000000000329d4 T vt_call_vkGetDeviceMemoryOpaqueCaptureAddress
    0000000000012534 T vt_call_vkGetDeviceProcAddr
    000000000002a5c0 T vt_call_vkGetDeviceQueue
    0000000000033640 T vt_call_vkGetDeviceQueue2
    0000000000030f14 T vt_call_vkGetEventStatus
    0000000000010970 T vt_call_vkGetFenceFdKHR
    0000000000031414 T vt_call_vkGetFenceStatus
    0000000000023e70 T vt_call_vkGetImageMemoryRequirements
    00000000000248a0 T vt_call_vkGetImageMemoryRequirements2
    0000000000018c00 T vt_call_vkGetImageSparseMemoryRequirements
    0000000000019540 T vt_call_vkGetImageSparseMemoryRequirements2
    0000000000035ae4 T vt_call_vkGetImageSubresourceLayout
    00000000000124c0 T vt_call_vkGetInstanceProcAddr
    0000000000010950 T vt_call_vkGetMemoryFdKHR
    0000000000009e64 T vt_call_vkGetMemoryFdPropertiesKHR
    0000000000009e60 T vt_call_vkGetPhysicalDeviceExternalBufferProperties
    00000000000109d0 T vt_call_vkGetPhysicalDeviceExternalFenceProperties
    00000000000109c0 T vt_call_vkGetPhysicalDeviceExternalSemaphoreProperties
    00000000000360a4 T vt_call_vkGetPhysicalDeviceFeatures
    000000000002b1c0 T vt_call_vkGetPhysicalDeviceFeatures2
    0000000000027740 T vt_call_vkGetPhysicalDeviceFormatProperties
    000000000001b310 T vt_call_vkGetPhysicalDeviceFormatProperties2
    0000000000039a60 T vt_call_vkGetPhysicalDeviceImageFormatProperties
    00000000000389c4 T vt_call_vkGetPhysicalDeviceImageFormatProperties2
    00000000000285e0 T vt_call_vkGetPhysicalDeviceMemoryProperties
    00000000000382a0 T vt_call_vkGetPhysicalDeviceMemoryProperties2
    00000000000279d0 T vt_call_vkGetPhysicalDeviceMultisamplePropertiesEXT
    0000000000009e90 T vt_call_vkGetPhysicalDevicePresentRectanglesKHR
    0000000000032194 T vt_call_vkGetPhysicalDeviceProperties
    000000000002dbd0 T vt_call_vkGetPhysicalDeviceProperties2
    0000000000039700 T vt_call_vkGetPhysicalDeviceQueueFamilyProperties
    0000000000019200 T vt_call_vkGetPhysicalDeviceQueueFamilyProperties2
    0000000000018ef0 T vt_call_vkGetPhysicalDeviceSparseImageFormatProperties
    000000000001b7c0 T vt_call_vkGetPhysicalDeviceSparseImageFormatProperties2
    000000000003b410 T vt_call_vkGetPhysicalDeviceSurfaceCapabilitiesKHR
    000000000001e8a0 T vt_call_vkGetPhysicalDeviceSurfaceFormatsKHR
    000000000001e240 T vt_call_vkGetPhysicalDeviceSurfacePresentModesKHR
    0000000000009e40 T vt_call_vkGetPhysicalDeviceSurfaceSupportKHR
    00000000000109b0 T vt_call_vkGetPhysicalDeviceToolProperties
    0000000000009e50 T vt_call_vkGetPhysicalDeviceXlibPresentationSupportKHR
    000000000001e564 T vt_call_vkGetPipelineCacheData
    0000000000009eb0 T vt_call_vkGetPrivateData
    000000000001cce4 T vt_call_vkGetQueryPoolResults
    0000000000023074 T vt_call_vkGetRenderAreaGranularity
    00000000000109a0 T vt_call_vkGetSemaphoreCounterValue
    0000000000010960 T vt_call_vkGetSemaphoreFdKHR
    000000000001ef00 T vt_call_vkGetSwapchainImagesKHR
    00000000000109e0 T vt_call_vkImportFenceFdKHR
    00000000000109c4 T vt_call_vkImportSemaphoreFdKHR
    000000000003a660 T vt_call_vkInvalidateMappedMemoryRanges
    0000000000035710 T vt_call_vkMapMemory
    000000000003b0d0 T vt_call_vkMergePipelineCaches
    000000000001cfb0 T vt_call_vkQueueBindSparse
    0000000000023624 T vt_call_vkQueuePresentKHR
    0000000000039df0 T vt_call_vkQueueSubmit
    0000000000018640 T vt_call_vkQueueSubmit2
    0000000000030c90 T vt_call_vkQueueWaitIdle
    0000000000024650 T vt_call_vkResetCommandBuffer
    000000000002aee0 T vt_call_vkResetCommandPool
    0000000000032454 T vt_call_vkResetDescriptorPool
    0000000000031914 T vt_call_vkResetEvent
    00000000000341a0 T vt_call_vkResetFences
    00000000000261c4 T vt_call_vkResetQueryPool
    0000000000031194 T vt_call_vkSetEvent
    0000000000009ea0 T vt_call_vkSetPrivateData
    00000000000109f0 T vt_call_vkSignalSemaphore
    0000000000037690 T vt_call_vkTrimCommandPool
    0000000000017a54 T vt_call_vkUnmapMemory
    0000000000027c60 T vt_call_vkUpdateDescriptorSets
    0000000000025c90 T vt_call_vkUpdateDescriptorSetWithTemplate
    000000000001bb70 T vt_call_vkWaitForFences
    0000000000022b04 T vt_call_vkWaitSemaphores
  + usr/share/vulkan/icd.d/vortek_icd.aarch64.json
    {
        "ICD": {
            "api_version": "1.1.128",
            "library_path": "/data/data/com.winlator/files/rootfs/lib/libvulkan_vortek.so"
        },
        "file_format_version": "1.0.0"
    }
  Processing file: app/src/main/assets/graphics_driver/zink-22.2.5.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/zink-22.2.5.tzst
  Staging directories: zink-22.2.5.tzst_2495961750
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/zink-22.2.5.tzst -C zink-22.2.5.tzst_2495961750
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/graphics_driver/zink-22.2.5.tzst
  + usr/lib/libGL.so.1.7.0
  Processing file: app/src/main/assets/pulseaudio.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/pulseaudio.tzst
  Staging directories: pulseaudio.tzst_4081951205
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/pulseaudio.tzst -C pulseaudio.tzst_4081951205
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/pulseaudio.tzst
  + modules/libprotocol-native.so
    000000000001f000 A __bss_end__
    000000000001f000 A _bss_end__
    000000000001f000 A __bss_start
    000000000001f000 A __bss_start__
    000000000001f000 A _edata
    000000000001f000 A __end__
    000000000001f000 A _end
    000000000000a144 T pa_native_connection_get_client
    000000000000a080 T pa_native_connection_get_pstream
    0000000000009bec T pa_native_options_new
    0000000000009d04 T pa_native_options_parse
    0000000000007e3c T pa_native_options_ref
    0000000000009c0c T pa_native_options_unref
    00000000000095d8 T pa_native_protocol_add_server_string
    0000000000007778 T pa_native_protocol_connect
    0000000000008ecc T pa_native_protocol_disconnect
    0000000000009234 T pa_native_protocol_get
    00000000000097c8 T pa_native_protocol_hooks
    0000000000009918 T pa_native_protocol_install_ext
    00000000000093bc T pa_native_protocol_ref
    0000000000009ad0 T pa_native_protocol_remove_ext
    00000000000096d0 T pa_native_protocol_remove_server_string
    0000000000009870 T pa_native_protocol_servers
    0000000000009470 T pa_native_protocol_unref
  + modules/module-aaudio-sink.so
    0000000000000000 A __bss_start
    0000000000004e50 D _edata
    0000000000004e50 D _end
    0000000000002d18 T pa__done
    0000000000002ce0 T pa__get_author
    0000000000002cec T pa__get_description
    0000000000002d0c T pa__get_usage
    0000000000002cf8 T pa__get_version
    0000000000002dec T pa__init
    0000000000002d04 T pa__load_once
  + modules/module-native-protocol-unix.so
    0000000000003000 A __bss_end__
    0000000000003000 A _bss_end__
    0000000000003000 A __bss_start
    0000000000003000 A __bss_start__
    0000000000003000 A _edata
    0000000000003000 A __end__
    0000000000003000 A _end
    00000000000013d4 T module_native_protocol_unix_LTX_pa__done
    00000000000010d8 T module_native_protocol_unix_LTX_pa__get_author
    00000000000010b8 T module_native_protocol_unix_LTX_pa__get_description
    00000000000010c4 T module_native_protocol_unix_LTX_pa__get_usage
    00000000000010e4 T module_native_protocol_unix_LTX_pa__get_version
    00000000000010f0 T module_native_protocol_unix_LTX_pa__init
    00000000000010d0 T module_native_protocol_unix_LTX_pa__load_once
  Processing file: app/src/main/assets/rootfs.txz
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/rootfs.txz
  Staging directories: rootfs.txz_554237367
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/rootfs.txz -C rootfs.txz_554237367
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/rootfs.txz
  + etc/alsa/conf.d/android_aserver.conf
    pcm.android_aserver {
        type android_aserver
        hint {
            description "Android ALSA Server"
        }
    }
    
    ctl.android_aserver {
        type android_aserver
        hint {
            description "Android ALSA Server"
        }
    }
    
    pcm.!default {
        type android_aserver
        hint {
            description "Default"
        }
    }
    
     ... (truncated) ...
  + etc/fonts/conf.d/README
    conf.d/README
    
    Each file in this directory is a fontconfig configuration file.  Fontconfig
    scans this directory, loading all files of the form [0-9][0-9]*.conf.
    These files are normally installed in /data/data/com.winlator/files/rootfs/usr/share/fontconfig/conf.avail
    and then symlinked here, allowing them to be easily installed and then
    enabled/disabled by adjusting the symlinks.
    
    The files are loaded in numeric order, the structure of the configuration
    has led to the following conventions in usage:
    
     Files beginning with:	Contain:
    
     00 through 09		Font directories
     10 through 19		system rendering defaults (AA, etc)
     20 through 29		font rendering options
     30 through 39		family substitution
     40 through 49		generic identification, map family->generic
     50 through 59		alternate config file loading
     60 through 69		generic aliases, map generic->family
     70 through 79		select font (adjust which fonts are available)
     ... (truncated) ...
  + etc/fonts/fonts.conf
    <?xml version="1.0"?>
    <!DOCTYPE fontconfig SYSTEM "urn:fontconfig:fonts.dtd">
    <!-- /etc/fonts/fonts.conf file to configure system font access -->
    <fontconfig>
    	<description>Default configuration file</description>
    
    <!--
    	DO NOT EDIT THIS FILE.
    	IT WILL BE REPLACED WHEN FONTCONFIG IS UPDATED.
    	LOCAL CHANGES BELONG IN 'local.conf'.
    
    	The intent of this standard configuration file is to be adequate for
    	most environments.  If you have a reasonably normal environment and
    	have found problems with this configuration, they are probably
    	things that others will also want fixed.  Please submit any problems
    	to the fontconfig issue tracking system located at fontconfig.org
    
    	Note that the normal 'make install' procedure for fontconfig is to
    	replace any existing fonts.conf file with the new version.  Place
    	any local customizations in local.conf which this file references.
    
     ... (truncated) ...
  + etc/ld.so.cache
  + etc/pulse/client.conf
    # This file is part of PulseAudio.
    #
    # PulseAudio is free software; you can redistribute it and/or modify
    # it under the terms of the GNU Lesser General Public License as published by
    # the Free Software Foundation; either version 2 of the License, or
    # (at your option) any later version.
    #
    # PulseAudio is distributed in the hope that it will be useful, but
    # WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    # General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public License
    # along with PulseAudio; if not, see <http://www.gnu.org/licenses/>.
    
    ## Configuration file for PulseAudio clients. See pulse-client.conf(5) for
    ## more information. Default values are commented out.  Use either ; or # for
    ## commenting.
    
    ; default-sink =
    ; default-source =
     ... (truncated) ...
  + etc/resolv.conf
    nameserver 8.8.8.8
    nameserver 8.8.4.4
  + etc/rpc
    #ident	"@(#)rpc	1.11	95/07/14 SMI"	/* SVr4.0 1.2	*/
    #
    #	rpc
    #
    portmapper	100000	portmap sunrpc rpcbind
    rstatd		100001	rstat rup perfmeter rstat_svc
    rusersd		100002	rusers
    nfs		100003	nfsprog
    ypserv		100004	ypprog
    mountd		100005	mount showmount
    ypbind		100007
    walld		100008	rwall shutdown
    yppasswdd	100009	yppasswd
    etherstatd	100010	etherstat
    rquotad		100011	rquotaprog quota rquota
    sprayd		100012	spray
    3270_mapper	100013
    rje_mapper	100014
    selection_svc	100015	selnsvc
    database_svc	100016
    rexd		100017	rex
     ... (truncated) ...
  + opt/wine/bin/function_grep.pl
    #! /usr/bin/perl -w
    #
    # Copyright 2000 Patrik Stridvall
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
    #
    
    use strict;
    
     ... (truncated) ...
  + opt/wine/bin/msidb
    #!/bin/sh
    #
    # Wrapper script to start a Winelib application once it is installed
    #
    # Copyright (C) 2002 Alexandre Julliard
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
    #
    
     ... (truncated) ...
  + opt/wine/bin/msiexec
    #!/bin/sh
    #
    # Wrapper script to start a Winelib application once it is installed
    #
    # Copyright (C) 2002 Alexandre Julliard
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
    #
    
     ... (truncated) ...
  + opt/wine/bin/notepad
    #!/bin/sh
    #
    # Wrapper script to start a Winelib application once it is installed
    #
    # Copyright (C) 2002 Alexandre Julliard
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
    #
    
     ... (truncated) ...
  + opt/wine/bin/regedit
    #!/bin/sh
    #
    # Wrapper script to start a Winelib application once it is installed
    #
    # Copyright (C) 2002 Alexandre Julliard
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
    #
    
     ... (truncated) ...
  + opt/wine/bin/regsvr32
    #!/bin/sh
    #
    # Wrapper script to start a Winelib application once it is installed
    #
    # Copyright (C) 2002 Alexandre Julliard
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
    #
    
     ... (truncated) ...
  + opt/wine/bin/widl
  + opt/wine/bin/wine
  + opt/wine/bin/wine-preloader
  + opt/wine/bin/wineboot
    #!/bin/sh
    #
    # Wrapper script to start a Winelib application once it is installed
    #
    # Copyright (C) 2002 Alexandre Julliard
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
    #
    
     ... (truncated) ...
  + opt/wine/bin/winebuild
  + opt/wine/bin/winecfg
    #!/bin/sh
    #
    # Wrapper script to start a Winelib application once it is installed
    #
    # Copyright (C) 2002 Alexandre Julliard
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
    #
    
     ... (truncated) ...
  + opt/wine/bin/wineconsole
    #!/bin/sh
    #
    # Wrapper script to start a Winelib application once it is installed
    #
    # Copyright (C) 2002 Alexandre Julliard
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
    #
    
     ... (truncated) ...
  + opt/wine/bin/winedbg
    #!/bin/sh
    #
    # Wrapper script to start a Winelib application once it is installed
    #
    # Copyright (C) 2002 Alexandre Julliard
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
    #
    
     ... (truncated) ...
  + opt/wine/bin/winedump
  + opt/wine/bin/winefile
    #!/bin/sh
    #
    # Wrapper script to start a Winelib application once it is installed
    #
    # Copyright (C) 2002 Alexandre Julliard
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
    #
    
     ... (truncated) ...
  + opt/wine/bin/winegcc
  + opt/wine/bin/winemaker
    #!/usr/bin/perl -w
    use utf8;
    use strict;
    
    # Copyright 2000-2004 François Gouget for CodeWeavers
    # Copyright 2004 Dimitrie O. Paun
    # Copyright 2009-2012 André Hentschel
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
     ... (truncated) ...
  + opt/wine/bin/winemine
    #!/bin/sh
    #
    # Wrapper script to start a Winelib application once it is installed
    #
    # Copyright (C) 2002 Alexandre Julliard
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
    #
    
     ... (truncated) ...
  + opt/wine/bin/winepath
    #!/bin/sh
    #
    # Wrapper script to start a Winelib application once it is installed
    #
    # Copyright (C) 2002 Alexandre Julliard
    #
    # This library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    #
    # This library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    #
    # You should have received a copy of the GNU Lesser General Public
    # License along with this library; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
    #
    
     ... (truncated) ...
  + opt/wine/bin/wineserver
  + opt/wine/bin/wmc
  + opt/wine/bin/wrc
  + opt/wine/lib/wine/i386-windows/acledit.dll
  + opt/wine/lib/wine/i386-windows/aclui.dll
  + opt/wine/lib/wine/i386-windows/activeds.dll
  + opt/wine/lib/wine/i386-windows/activeds.tlb
  + opt/wine/lib/wine/i386-windows/actxprxy.dll
  + opt/wine/lib/wine/i386-windows/adsldp.dll
  + opt/wine/lib/wine/i386-windows/adsldpc.dll
  + opt/wine/lib/wine/i386-windows/advapi32.dll
  + opt/wine/lib/wine/i386-windows/advpack.dll
  + opt/wine/lib/wine/i386-windows/amsi.dll
  + opt/wine/lib/wine/i386-windows/amstream.dll
  + opt/wine/lib/wine/i386-windows/apisetschema.dll
  + opt/wine/lib/wine/i386-windows/apphelp.dll
  + opt/wine/lib/wine/i386-windows/appwiz.cpl
  + opt/wine/lib/wine/i386-windows/appxdeploymentclient.dll
  + opt/wine/lib/wine/i386-windows/arp.exe
  + opt/wine/lib/wine/i386-windows/aspnet_regiis.exe
  + opt/wine/lib/wine/i386-windows/atl.dll
  + opt/wine/lib/wine/i386-windows/atl100.dll
  + opt/wine/lib/wine/i386-windows/atl110.dll
  + opt/wine/lib/wine/i386-windows/atl80.dll
  + opt/wine/lib/wine/i386-windows/atl90.dll
  + opt/wine/lib/wine/i386-windows/atlthunk.dll
  + opt/wine/lib/wine/i386-windows/atmlib.dll
  + opt/wine/lib/wine/i386-windows/attrib.exe
  + opt/wine/lib/wine/i386-windows/authz.dll
  + opt/wine/lib/wine/i386-windows/avicap32.dll
  + opt/wine/lib/wine/i386-windows/avifil32.dll
  + opt/wine/lib/wine/i386-windows/avrt.dll
  + opt/wine/lib/wine/i386-windows/bcrypt.dll
  + opt/wine/lib/wine/i386-windows/bcryptprimitives.dll
  + opt/wine/lib/wine/i386-windows/bluetoothapis.dll
  + opt/wine/lib/wine/i386-windows/browseui.dll
  + opt/wine/lib/wine/i386-windows/bthprops.cpl
  + opt/wine/lib/wine/i386-windows/cabarc.exe
  + opt/wine/lib/wine/i386-windows/cabinet.dll
  + opt/wine/lib/wine/i386-windows/cacls.exe
  + opt/wine/lib/wine/i386-windows/capi2032.dll
  + opt/wine/lib/wine/i386-windows/cards.dll
  + opt/wine/lib/wine/i386-windows/cdosys.dll
  + opt/wine/lib/wine/i386-windows/certutil.exe
  + opt/wine/lib/wine/i386-windows/cfgmgr32.dll
  + opt/wine/lib/wine/i386-windows/chcp.com
  + opt/wine/lib/wine/i386-windows/clock.exe
  + opt/wine/lib/wine/i386-windows/clusapi.dll
  + opt/wine/lib/wine/i386-windows/cmd.exe
  + opt/wine/lib/wine/i386-windows/cng.sys
  + opt/wine/lib/wine/i386-windows/combase.dll
  + opt/wine/lib/wine/i386-windows/comcat.dll
  + opt/wine/lib/wine/i386-windows/comctl32.dll
  + opt/wine/lib/wine/i386-windows/comdlg32.dll
  + opt/wine/lib/wine/i386-windows/coml2.dll
  + opt/wine/lib/wine/i386-windows/compstui.dll
  + opt/wine/lib/wine/i386-windows/comsvcs.dll
  + opt/wine/lib/wine/i386-windows/concrt140.dll
  + opt/wine/lib/wine/i386-windows/conhost.exe
  + opt/wine/lib/wine/i386-windows/connect.dll
  + opt/wine/lib/wine/i386-windows/control.exe
  + opt/wine/lib/wine/i386-windows/credui.dll
  + opt/wine/lib/wine/i386-windows/crtdll.dll
  + opt/wine/lib/wine/i386-windows/crypt32.dll
  + opt/wine/lib/wine/i386-windows/cryptdlg.dll
  + opt/wine/lib/wine/i386-windows/cryptdll.dll
  + opt/wine/lib/wine/i386-windows/cryptext.dll
  + opt/wine/lib/wine/i386-windows/cryptnet.dll
  + opt/wine/lib/wine/i386-windows/cryptowinrt.dll
  + opt/wine/lib/wine/i386-windows/cryptsp.dll
  + opt/wine/lib/wine/i386-windows/cryptui.dll
  + opt/wine/lib/wine/i386-windows/cscript.exe
  + opt/wine/lib/wine/i386-windows/ctapi32.dll
  + opt/wine/lib/wine/i386-windows/ctl3d32.dll
  + opt/wine/lib/wine/i386-windows/d2d1.dll
  + opt/wine/lib/wine/i386-windows/d3d10.dll
  + opt/wine/lib/wine/i386-windows/d3d10_1.dll
  + opt/wine/lib/wine/i386-windows/d3d10core.dll
  + opt/wine/lib/wine/i386-windows/d3d11.dll
  + opt/wine/lib/wine/i386-windows/d3d12.dll
  + opt/wine/lib/wine/i386-windows/d3d12core.dll
  + opt/wine/lib/wine/i386-windows/d3d8.dll
  + opt/wine/lib/wine/i386-windows/d3d8thk.dll
  + opt/wine/lib/wine/i386-windows/d3d9.dll
  + opt/wine/lib/wine/i386-windows/d3dcompiler_33.dll
  + opt/wine/lib/wine/i386-windows/d3dcompiler_34.dll
  + opt/wine/lib/wine/i386-windows/d3dcompiler_35.dll
  + opt/wine/lib/wine/i386-windows/d3dcompiler_36.dll
  + opt/wine/lib/wine/i386-windows/d3dcompiler_37.dll
  + opt/wine/lib/wine/i386-windows/d3dcompiler_38.dll
  + opt/wine/lib/wine/i386-windows/d3dcompiler_39.dll
  + opt/wine/lib/wine/i386-windows/d3dcompiler_40.dll
  + opt/wine/lib/wine/i386-windows/d3dcompiler_41.dll
  + opt/wine/lib/wine/i386-windows/d3dcompiler_42.dll
  + opt/wine/lib/wine/i386-windows/d3dcompiler_43.dll
  + opt/wine/lib/wine/i386-windows/d3dcompiler_46.dll
  + opt/wine/lib/wine/i386-windows/d3dcompiler_47.dll
  + opt/wine/lib/wine/i386-windows/d3dim.dll
  + opt/wine/lib/wine/i386-windows/d3dim700.dll
  + opt/wine/lib/wine/i386-windows/d3drm.dll
  + opt/wine/lib/wine/i386-windows/d3dx10_33.dll
  + opt/wine/lib/wine/i386-windows/d3dx10_34.dll
  + opt/wine/lib/wine/i386-windows/d3dx10_35.dll
  + opt/wine/lib/wine/i386-windows/d3dx10_36.dll
  + opt/wine/lib/wine/i386-windows/d3dx10_37.dll
  + opt/wine/lib/wine/i386-windows/d3dx10_38.dll
  + opt/wine/lib/wine/i386-windows/d3dx10_39.dll
  + opt/wine/lib/wine/i386-windows/d3dx10_40.dll
  + opt/wine/lib/wine/i386-windows/d3dx10_41.dll
  + opt/wine/lib/wine/i386-windows/d3dx10_42.dll
  + opt/wine/lib/wine/i386-windows/d3dx10_43.dll
  + opt/wine/lib/wine/i386-windows/d3dx11_42.dll
  + opt/wine/lib/wine/i386-windows/d3dx11_43.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_24.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_25.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_26.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_27.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_28.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_29.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_30.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_31.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_32.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_33.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_34.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_35.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_36.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_37.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_38.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_39.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_40.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_41.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_42.dll
  + opt/wine/lib/wine/i386-windows/d3dx9_43.dll
  + opt/wine/lib/wine/i386-windows/d3dxof.dll
  + opt/wine/lib/wine/i386-windows/davclnt.dll
  + opt/wine/lib/wine/i386-windows/dbgeng.dll
  + opt/wine/lib/wine/i386-windows/dbghelp.dll
  + opt/wine/lib/wine/i386-windows/dciman32.dll
  + opt/wine/lib/wine/i386-windows/dcomp.dll
  + opt/wine/lib/wine/i386-windows/ddraw.dll
  + opt/wine/lib/wine/i386-windows/ddrawex.dll
  + opt/wine/lib/wine/i386-windows/devenum.dll
  + opt/wine/lib/wine/i386-windows/dhcpcsvc.dll
  + opt/wine/lib/wine/i386-windows/dhcpcsvc6.dll
  + opt/wine/lib/wine/i386-windows/dhtmled.ocx
  + opt/wine/lib/wine/i386-windows/diasymreader.dll
  + opt/wine/lib/wine/i386-windows/difxapi.dll
  + opt/wine/lib/wine/i386-windows/dinput.dll
  + opt/wine/lib/wine/i386-windows/dinput8.dll
  + opt/wine/lib/wine/i386-windows/directmanipulation.dll
  + opt/wine/lib/wine/i386-windows/dism.exe
  + opt/wine/lib/wine/i386-windows/dispex.dll
  + opt/wine/lib/wine/i386-windows/dllhost.exe
  + opt/wine/lib/wine/i386-windows/dmband.dll
  + opt/wine/lib/wine/i386-windows/dmcompos.dll
  + opt/wine/lib/wine/i386-windows/dmime.dll
  + opt/wine/lib/wine/i386-windows/dmloader.dll
  + opt/wine/lib/wine/i386-windows/dmscript.dll
  + opt/wine/lib/wine/i386-windows/dmstyle.dll
  + opt/wine/lib/wine/i386-windows/dmsynth.dll
  + opt/wine/lib/wine/i386-windows/dmusic.dll
  + opt/wine/lib/wine/i386-windows/dmusic32.dll
  + opt/wine/lib/wine/i386-windows/dnsapi.dll
  + opt/wine/lib/wine/i386-windows/dplay.dll
  + opt/wine/lib/wine/i386-windows/dplaysvr.exe
  + opt/wine/lib/wine/i386-windows/dplayx.dll
  + opt/wine/lib/wine/i386-windows/dpnaddr.dll
  + opt/wine/lib/wine/i386-windows/dpnet.dll
  + opt/wine/lib/wine/i386-windows/dpnhpast.dll
  + opt/wine/lib/wine/i386-windows/dpnhupnp.dll
  + opt/wine/lib/wine/i386-windows/dpnlobby.dll
  + opt/wine/lib/wine/i386-windows/dpnsvr.exe
  + opt/wine/lib/wine/i386-windows/dpvoice.dll
  + opt/wine/lib/wine/i386-windows/dpvsetup.exe
  + opt/wine/lib/wine/i386-windows/dpwsockx.dll
  + opt/wine/lib/wine/i386-windows/drmclien.dll
  + opt/wine/lib/wine/i386-windows/dsdmo.dll
  + opt/wine/lib/wine/i386-windows/dsound.dll
  + opt/wine/lib/wine/i386-windows/dsquery.dll
  + opt/wine/lib/wine/i386-windows/dssenh.dll
  + opt/wine/lib/wine/i386-windows/dsuiext.dll
  + opt/wine/lib/wine/i386-windows/dswave.dll
  + opt/wine/lib/wine/i386-windows/dwmapi.dll
  + opt/wine/lib/wine/i386-windows/dwrite.dll
  + opt/wine/lib/wine/i386-windows/dx8vb.dll
  + opt/wine/lib/wine/i386-windows/dxcore.dll
  + opt/wine/lib/wine/i386-windows/dxdiag.exe
  + opt/wine/lib/wine/i386-windows/dxdiagn.dll
  + opt/wine/lib/wine/i386-windows/dxgi.dll
  + opt/wine/lib/wine/i386-windows/dxtrans.dll
  + opt/wine/lib/wine/i386-windows/dxva2.dll
  + opt/wine/lib/wine/i386-windows/eject.exe
  + opt/wine/lib/wine/i386-windows/esent.dll
  + opt/wine/lib/wine/i386-windows/evr.dll
  + opt/wine/lib/wine/i386-windows/expand.exe
  + opt/wine/lib/wine/i386-windows/explorer.exe
  + opt/wine/lib/wine/i386-windows/explorerframe.dll
  + opt/wine/lib/wine/i386-windows/extrac32.exe
  + opt/wine/lib/wine/i386-windows/faultrep.dll
  + opt/wine/lib/wine/i386-windows/fc.exe
  + opt/wine/lib/wine/i386-windows/feclient.dll
  + opt/wine/lib/wine/i386-windows/find.exe
  + opt/wine/lib/wine/i386-windows/findstr.exe
  + opt/wine/lib/wine/i386-windows/fltlib.dll
  + opt/wine/lib/wine/i386-windows/fltmgr.sys
  + opt/wine/lib/wine/i386-windows/fntcache.dll
  + opt/wine/lib/wine/i386-windows/fontsub.dll
  + opt/wine/lib/wine/i386-windows/fsutil.exe
  + opt/wine/lib/wine/i386-windows/fusion.dll
  + opt/wine/lib/wine/i386-windows/fwpuclnt.dll
  + opt/wine/lib/wine/i386-windows/gameux.dll
  + opt/wine/lib/wine/i386-windows/gamingtcui.dll
  + opt/wine/lib/wine/i386-windows/gdi32.dll
  + opt/wine/lib/wine/i386-windows/gdiplus.dll
  + opt/wine/lib/wine/i386-windows/geolocation.dll
  + opt/wine/lib/wine/i386-windows/glu32.dll
  + opt/wine/lib/wine/i386-windows/gpkcsp.dll
  + opt/wine/lib/wine/i386-windows/graphicscapture.dll
  + opt/wine/lib/wine/i386-windows/hal.dll
  + opt/wine/lib/wine/i386-windows/hh.exe
  + opt/wine/lib/wine/i386-windows/hhctrl.ocx
  + opt/wine/lib/wine/i386-windows/hid.dll
  + opt/wine/lib/wine/i386-windows/hidclass.sys
  + opt/wine/lib/wine/i386-windows/hidparse.sys
  + opt/wine/lib/wine/i386-windows/hlink.dll
  + opt/wine/lib/wine/i386-windows/hnetcfg.dll
  + opt/wine/lib/wine/i386-windows/hostname.exe
  + opt/wine/lib/wine/i386-windows/hrtfapo.dll
  + opt/wine/lib/wine/i386-windows/http.sys
  + opt/wine/lib/wine/i386-windows/httpapi.dll
  + opt/wine/lib/wine/i386-windows/hvsimanagementapi.dll
  + opt/wine/lib/wine/i386-windows/ia2comproxy.dll
  + opt/wine/lib/wine/i386-windows/icacls.exe
  + opt/wine/lib/wine/i386-windows/iccvid.dll
  + opt/wine/lib/wine/i386-windows/icinfo.exe
  + opt/wine/lib/wine/i386-windows/icmp.dll
  + opt/wine/lib/wine/i386-windows/ieframe.dll
  + opt/wine/lib/wine/i386-windows/ieproxy.dll
  + opt/wine/lib/wine/i386-windows/iexplore.exe
  + opt/wine/lib/wine/i386-windows/imaadp32.acm
  + opt/wine/lib/wine/i386-windows/imagehlp.dll
  + opt/wine/lib/wine/i386-windows/imm32.dll
  + opt/wine/lib/wine/i386-windows/inetcomm.dll
  + opt/wine/lib/wine/i386-windows/inetcpl.cpl
  + opt/wine/lib/wine/i386-windows/inetmib1.dll
  + opt/wine/lib/wine/i386-windows/infosoft.dll
  + opt/wine/lib/wine/i386-windows/initpki.dll
  + opt/wine/lib/wine/i386-windows/inkobj.dll
  + opt/wine/lib/wine/i386-windows/inseng.dll
  + opt/wine/lib/wine/i386-windows/ipconfig.exe
  + opt/wine/lib/wine/i386-windows/iphlpapi.dll
  + opt/wine/lib/wine/i386-windows/iprop.dll
  + opt/wine/lib/wine/i386-windows/ir50_32.dll
  + opt/wine/lib/wine/i386-windows/irprops.cpl
  + opt/wine/lib/wine/i386-windows/itircl.dll
  + opt/wine/lib/wine/i386-windows/itss.dll
  + opt/wine/lib/wine/i386-windows/joy.cpl
  + opt/wine/lib/wine/i386-windows/jscript.dll
  + opt/wine/lib/wine/i386-windows/jsproxy.dll
  + opt/wine/lib/wine/i386-windows/kerberos.dll
  + opt/wine/lib/wine/i386-windows/kernel32.dll
  + opt/wine/lib/wine/i386-windows/kernelbase.dll
  + opt/wine/lib/wine/i386-windows/klist.exe
  + opt/wine/lib/wine/i386-windows/ksecdd.sys
  + opt/wine/lib/wine/i386-windows/ksproxy.ax
  + opt/wine/lib/wine/i386-windows/ksuser.dll
  + opt/wine/lib/wine/i386-windows/ktmw32.dll
  + opt/wine/lib/wine/i386-windows/l3codeca.acm
  + opt/wine/lib/wine/i386-windows/light.msstyles
  + opt/wine/lib/wine/i386-windows/loadperf.dll
  + opt/wine/lib/wine/i386-windows/localspl.dll
  + opt/wine/lib/wine/i386-windows/localui.dll
  + opt/wine/lib/wine/i386-windows/lodctr.exe
  + opt/wine/lib/wine/i386-windows/lz32.dll
  + opt/wine/lib/wine/i386-windows/magnification.dll
  + opt/wine/lib/wine/i386-windows/mapi32.dll
  + opt/wine/lib/wine/i386-windows/mapistub.dll
  + opt/wine/lib/wine/i386-windows/mciavi32.dll
  + opt/wine/lib/wine/i386-windows/mcicda.dll
  + opt/wine/lib/wine/i386-windows/mciqtz32.dll
  + opt/wine/lib/wine/i386-windows/mciseq.dll
  + opt/wine/lib/wine/i386-windows/mciwave.dll
  + opt/wine/lib/wine/i386-windows/mf.dll
  + opt/wine/lib/wine/i386-windows/mf3216.dll
  + opt/wine/lib/wine/i386-windows/mferror.dll
  + opt/wine/lib/wine/i386-windows/mfmediaengine.dll
  + opt/wine/lib/wine/i386-windows/mfplat.dll
  + opt/wine/lib/wine/i386-windows/mfplay.dll
  + opt/wine/lib/wine/i386-windows/mfreadwrite.dll
  + opt/wine/lib/wine/i386-windows/mfsrcsnk.dll
  + opt/wine/lib/wine/i386-windows/mgmtapi.dll
  + opt/wine/lib/wine/i386-windows/midimap.dll
  + opt/wine/lib/wine/i386-windows/mlang.dll
  + opt/wine/lib/wine/i386-windows/mmcndmgr.dll
  + opt/wine/lib/wine/i386-windows/mmdevapi.dll
  + opt/wine/lib/wine/i386-windows/mofcomp.exe
  + opt/wine/lib/wine/i386-windows/mountmgr.sys
  + opt/wine/lib/wine/i386-windows/mp3dmod.dll
  + opt/wine/lib/wine/i386-windows/mpr.dll
  + opt/wine/lib/wine/i386-windows/mprapi.dll
  + opt/wine/lib/wine/i386-windows/msacm32.dll
  + opt/wine/lib/wine/i386-windows/msacm32.drv
  + opt/wine/lib/wine/i386-windows/msado15.dll
  + opt/wine/lib/wine/i386-windows/msadp32.acm
  + opt/wine/lib/wine/i386-windows/msasn1.dll
  + opt/wine/lib/wine/i386-windows/msauddecmft.dll
  + opt/wine/lib/wine/i386-windows/mscat32.dll
  + opt/wine/lib/wine/i386-windows/mscms.dll
  + opt/wine/lib/wine/i386-windows/mscoree.dll
  + opt/wine/lib/wine/i386-windows/mscorwks.dll
  + opt/wine/lib/wine/i386-windows/msctf.dll
  + opt/wine/lib/wine/i386-windows/msctfmonitor.dll
  + opt/wine/lib/wine/i386-windows/msctfp.dll
  + opt/wine/lib/wine/i386-windows/msdaps.dll
  + opt/wine/lib/wine/i386-windows/msdasql.dll
  + opt/wine/lib/wine/i386-windows/msdelta.dll
  + opt/wine/lib/wine/i386-windows/msdmo.dll
  + opt/wine/lib/wine/i386-windows/msdrm.dll
  + opt/wine/lib/wine/i386-windows/msftedit.dll
  + opt/wine/lib/wine/i386-windows/msg711.acm
  + opt/wine/lib/wine/i386-windows/msgsm32.acm
  + opt/wine/lib/wine/i386-windows/mshta.exe
  + opt/wine/lib/wine/i386-windows/mshtml.dll
  + opt/wine/lib/wine/i386-windows/mshtml.tlb
  + opt/wine/lib/wine/i386-windows/msi.dll
  + opt/wine/lib/wine/i386-windows/msidb.exe
  + opt/wine/lib/wine/i386-windows/msident.dll
  + opt/wine/lib/wine/i386-windows/msiexec.exe
  + opt/wine/lib/wine/i386-windows/msimg32.dll
  + opt/wine/lib/wine/i386-windows/msimsg.dll
  + opt/wine/lib/wine/i386-windows/msimtf.dll
  + opt/wine/lib/wine/i386-windows/msinfo32.exe
  + opt/wine/lib/wine/i386-windows/msisip.dll
  + opt/wine/lib/wine/i386-windows/msisys.ocx
  + opt/wine/lib/wine/i386-windows/msls31.dll
  + opt/wine/lib/wine/i386-windows/msmpeg2vdec.dll
  + opt/wine/lib/wine/i386-windows/msnet32.dll
  + opt/wine/lib/wine/i386-windows/mspatcha.dll
  + opt/wine/lib/wine/i386-windows/msports.dll
  + opt/wine/lib/wine/i386-windows/msrle32.dll
  + opt/wine/lib/wine/i386-windows/msscript.ocx
  + opt/wine/lib/wine/i386-windows/mssign32.dll
  + opt/wine/lib/wine/i386-windows/mssip32.dll
  + opt/wine/lib/wine/i386-windows/mstask.dll
  + opt/wine/lib/wine/i386-windows/msttsengine.dll
  + opt/wine/lib/wine/i386-windows/msv1_0.dll
  + opt/wine/lib/wine/i386-windows/msvcirt.dll
  + opt/wine/lib/wine/i386-windows/msvcm80.dll
  + opt/wine/lib/wine/i386-windows/msvcm90.dll
  + opt/wine/lib/wine/i386-windows/msvcp100.dll
  + opt/wine/lib/wine/i386-windows/msvcp110.dll
  + opt/wine/lib/wine/i386-windows/msvcp120.dll
  + opt/wine/lib/wine/i386-windows/msvcp120_app.dll
  + opt/wine/lib/wine/i386-windows/msvcp140.dll
  + opt/wine/lib/wine/i386-windows/msvcp140_1.dll
  + opt/wine/lib/wine/i386-windows/msvcp140_2.dll
  + opt/wine/lib/wine/i386-windows/msvcp140_atomic_wait.dll
  + opt/wine/lib/wine/i386-windows/msvcp140_codecvt_ids.dll
  + opt/wine/lib/wine/i386-windows/msvcp60.dll
  + opt/wine/lib/wine/i386-windows/msvcp70.dll
  + opt/wine/lib/wine/i386-windows/msvcp71.dll
  + opt/wine/lib/wine/i386-windows/msvcp80.dll
  + opt/wine/lib/wine/i386-windows/msvcp90.dll
  + opt/wine/lib/wine/i386-windows/msvcp_win.dll
  + opt/wine/lib/wine/i386-windows/msvcr100.dll
  + opt/wine/lib/wine/i386-windows/msvcr110.dll
  + opt/wine/lib/wine/i386-windows/msvcr120.dll
  + opt/wine/lib/wine/i386-windows/msvcr120_app.dll
  + opt/wine/lib/wine/i386-windows/msvcr70.dll
  + opt/wine/lib/wine/i386-windows/msvcr71.dll
  + opt/wine/lib/wine/i386-windows/msvcr80.dll
  + opt/wine/lib/wine/i386-windows/msvcr90.dll
  + opt/wine/lib/wine/i386-windows/msvcrt.dll
  + opt/wine/lib/wine/i386-windows/msvcrt20.dll
  + opt/wine/lib/wine/i386-windows/msvcrt40.dll
  + opt/wine/lib/wine/i386-windows/msvcrtd.dll
  + opt/wine/lib/wine/i386-windows/msvfw32.dll
  + opt/wine/lib/wine/i386-windows/msvidc32.dll
  + opt/wine/lib/wine/i386-windows/mswsock.dll
  + opt/wine/lib/wine/i386-windows/msxml.dll
  + opt/wine/lib/wine/i386-windows/msxml2.dll
  + opt/wine/lib/wine/i386-windows/msxml3.dll
  + opt/wine/lib/wine/i386-windows/msxml4.dll
  + opt/wine/lib/wine/i386-windows/msxml6.dll
  + opt/wine/lib/wine/i386-windows/mtxdm.dll
  + opt/wine/lib/wine/i386-windows/ncrypt.dll
  + opt/wine/lib/wine/i386-windows/nddeapi.dll
  + opt/wine/lib/wine/i386-windows/ndis.sys
  + opt/wine/lib/wine/i386-windows/net.exe
  + opt/wine/lib/wine/i386-windows/netapi32.dll
  + opt/wine/lib/wine/i386-windows/netcfgx.dll
  + opt/wine/lib/wine/i386-windows/netio.sys
  + opt/wine/lib/wine/i386-windows/netprofm.dll
  + opt/wine/lib/wine/i386-windows/netsh.exe
  + opt/wine/lib/wine/i386-windows/netstat.exe
  + opt/wine/lib/wine/i386-windows/netutils.dll
  + opt/wine/lib/wine/i386-windows/newdev.dll
  + opt/wine/lib/wine/i386-windows/ngen.exe
  + opt/wine/lib/wine/i386-windows/ninput.dll
  + opt/wine/lib/wine/i386-windows/normaliz.dll
  + opt/wine/lib/wine/i386-windows/notepad.exe
  + opt/wine/lib/wine/i386-windows/npmshtml.dll
  + opt/wine/lib/wine/i386-windows/npptools.dll
  + opt/wine/lib/wine/i386-windows/nsi.dll
  + opt/wine/lib/wine/i386-windows/nsiproxy.sys
  + opt/wine/lib/wine/i386-windows/ntdll.dll
  + opt/wine/lib/wine/i386-windows/ntdsapi.dll
  + opt/wine/lib/wine/i386-windows/ntoskrnl.exe
  + opt/wine/lib/wine/i386-windows/ntprint.dll
  + opt/wine/lib/wine/i386-windows/objsel.dll
  + opt/wine/lib/wine/i386-windows/odbc32.dll
  + opt/wine/lib/wine/i386-windows/odbcbcp.dll
  + opt/wine/lib/wine/i386-windows/odbccp32.dll
  + opt/wine/lib/wine/i386-windows/odbccu32.dll
  + opt/wine/lib/wine/i386-windows/ole32.dll
  + opt/wine/lib/wine/i386-windows/oleacc.dll
  + opt/wine/lib/wine/i386-windows/oleaut32.dll
  + opt/wine/lib/wine/i386-windows/olecli32.dll
  + opt/wine/lib/wine/i386-windows/oledb32.dll
  + opt/wine/lib/wine/i386-windows/oledlg.dll
  + opt/wine/lib/wine/i386-windows/olepro32.dll
  + opt/wine/lib/wine/i386-windows/olesvr32.dll
  + opt/wine/lib/wine/i386-windows/olethk32.dll
  + opt/wine/lib/wine/i386-windows/oleview.exe
  + opt/wine/lib/wine/i386-windows/opcservices.dll
  + opt/wine/lib/wine/i386-windows/opencl.dll
  + opt/wine/lib/wine/i386-windows/opengl32.dll
  + opt/wine/lib/wine/i386-windows/packager.dll
  + opt/wine/lib/wine/i386-windows/pdh.dll
  + opt/wine/lib/wine/i386-windows/photometadatahandler.dll
  + opt/wine/lib/wine/i386-windows/pidgen.dll
  + opt/wine/lib/wine/i386-windows/ping.exe
  + opt/wine/lib/wine/i386-windows/plugplay.exe
  + opt/wine/lib/wine/i386-windows/pnputil.exe
  + opt/wine/lib/wine/i386-windows/powershell.exe
  + opt/wine/lib/wine/i386-windows/powrprof.dll
  + opt/wine/lib/wine/i386-windows/presentationfontcache.exe
  + opt/wine/lib/wine/i386-windows/printui.dll
  + opt/wine/lib/wine/i386-windows/prntvpt.dll
  + opt/wine/lib/wine/i386-windows/progman.exe
  + opt/wine/lib/wine/i386-windows/propsys.dll
  + opt/wine/lib/wine/i386-windows/psapi.dll
  + opt/wine/lib/wine/i386-windows/pstorec.dll
  + opt/wine/lib/wine/i386-windows/pwrshplugin.dll
  + opt/wine/lib/wine/i386-windows/qasf.dll
  + opt/wine/lib/wine/i386-windows/qcap.dll
  + opt/wine/lib/wine/i386-windows/qdvd.dll
  + opt/wine/lib/wine/i386-windows/qedit.dll
  + opt/wine/lib/wine/i386-windows/qmgr.dll
  + opt/wine/lib/wine/i386-windows/qmgrprxy.dll
  + opt/wine/lib/wine/i386-windows/quartz.dll
  + opt/wine/lib/wine/i386-windows/query.dll
  + opt/wine/lib/wine/i386-windows/qwave.dll
  + opt/wine/lib/wine/i386-windows/rasapi32.dll
  + opt/wine/lib/wine/i386-windows/rasdlg.dll
  + opt/wine/lib/wine/i386-windows/reg.exe
  + opt/wine/lib/wine/i386-windows/regapi.dll
  + opt/wine/lib/wine/i386-windows/regasm.exe
  + opt/wine/lib/wine/i386-windows/regedit.exe
  + opt/wine/lib/wine/i386-windows/regini.exe
  + opt/wine/lib/wine/i386-windows/regsvcs.exe
  + opt/wine/lib/wine/i386-windows/regsvr32.exe
  + opt/wine/lib/wine/i386-windows/resutils.dll
  + opt/wine/lib/wine/i386-windows/riched20.dll
  + opt/wine/lib/wine/i386-windows/riched32.dll
  + opt/wine/lib/wine/i386-windows/robocopy.exe
  + opt/wine/lib/wine/i386-windows/rpcrt4.dll
  + opt/wine/lib/wine/i386-windows/rpcss.exe
  + opt/wine/lib/wine/i386-windows/rsabase.dll
  + opt/wine/lib/wine/i386-windows/rsaenh.dll
  + opt/wine/lib/wine/i386-windows/rstrtmgr.dll
  + opt/wine/lib/wine/i386-windows/rtutils.dll
  + opt/wine/lib/wine/i386-windows/rtworkq.dll
  + opt/wine/lib/wine/i386-windows/rundll32.exe
  + opt/wine/lib/wine/i386-windows/samlib.dll
  + opt/wine/lib/wine/i386-windows/sane.ds
  + opt/wine/lib/wine/i386-windows/sapi.dll
  + opt/wine/lib/wine/i386-windows/sas.dll
  + opt/wine/lib/wine/i386-windows/sc.exe
  + opt/wine/lib/wine/i386-windows/scarddlg.dll
  + opt/wine/lib/wine/i386-windows/scardsvr.dll
  + opt/wine/lib/wine/i386-windows/sccbase.dll
  + opt/wine/lib/wine/i386-windows/schannel.dll
  + opt/wine/lib/wine/i386-windows/schedsvc.dll
  + opt/wine/lib/wine/i386-windows/schtasks.exe
  + opt/wine/lib/wine/i386-windows/scrobj.dll
  + opt/wine/lib/wine/i386-windows/scrrun.dll
  + opt/wine/lib/wine/i386-windows/scsiport.sys
  + opt/wine/lib/wine/i386-windows/sdbinst.exe
  + opt/wine/lib/wine/i386-windows/secedit.exe
  + opt/wine/lib/wine/i386-windows/sechost.dll
  + opt/wine/lib/wine/i386-windows/secur32.dll
  + opt/wine/lib/wine/i386-windows/security.dll
  + opt/wine/lib/wine/i386-windows/sensapi.dll
  + opt/wine/lib/wine/i386-windows/serialui.dll
  + opt/wine/lib/wine/i386-windows/servicemodelreg.exe
  + opt/wine/lib/wine/i386-windows/services.exe
  + opt/wine/lib/wine/i386-windows/setupapi.dll
  + opt/wine/lib/wine/i386-windows/setx.exe
  + opt/wine/lib/wine/i386-windows/sfc.dll
  + opt/wine/lib/wine/i386-windows/sfc_os.dll
  + opt/wine/lib/wine/i386-windows/shcore.dll
  + opt/wine/lib/wine/i386-windows/shdoclc.dll
  + opt/wine/lib/wine/i386-windows/shdocvw.dll
  + opt/wine/lib/wine/i386-windows/shell32.dll
  + opt/wine/lib/wine/i386-windows/shfolder.dll
  + opt/wine/lib/wine/i386-windows/shlwapi.dll
  + opt/wine/lib/wine/i386-windows/shutdown.exe
  + opt/wine/lib/wine/i386-windows/slbcsp.dll
  + opt/wine/lib/wine/i386-windows/slc.dll
  + opt/wine/lib/wine/i386-windows/snmpapi.dll
  + opt/wine/lib/wine/i386-windows/softpub.dll
  + opt/wine/lib/wine/i386-windows/spoolss.dll
  + opt/wine/lib/wine/i386-windows/spoolsv.exe
  + opt/wine/lib/wine/i386-windows/sppc.dll
  + opt/wine/lib/wine/i386-windows/srclient.dll
  + opt/wine/lib/wine/i386-windows/srvcli.dll
  + opt/wine/lib/wine/i386-windows/srvsvc.dll
  + opt/wine/lib/wine/i386-windows/sspicli.dll
  + opt/wine/lib/wine/i386-windows/start.exe
  + opt/wine/lib/wine/i386-windows/stdole2.tlb
  + opt/wine/lib/wine/i386-windows/stdole32.tlb
  + opt/wine/lib/wine/i386-windows/sti.dll
  + opt/wine/lib/wine/i386-windows/strmdll.dll
  + opt/wine/lib/wine/i386-windows/subst.exe
  + opt/wine/lib/wine/i386-windows/svchost.exe
  + opt/wine/lib/wine/i386-windows/svrapi.dll
  + opt/wine/lib/wine/i386-windows/sxs.dll
  + opt/wine/lib/wine/i386-windows/systeminfo.exe
  + opt/wine/lib/wine/i386-windows/t2embed.dll
  + opt/wine/lib/wine/i386-windows/tapi32.dll
  + opt/wine/lib/wine/i386-windows/taskkill.exe
  + opt/wine/lib/wine/i386-windows/tasklist.exe
  + opt/wine/lib/wine/i386-windows/taskmgr.exe
  + opt/wine/lib/wine/i386-windows/taskschd.dll
  + opt/wine/lib/wine/i386-windows/tbs.dll
  + opt/wine/lib/wine/i386-windows/tdh.dll
  + opt/wine/lib/wine/i386-windows/tdi.sys
  + opt/wine/lib/wine/i386-windows/termsv.exe
  + opt/wine/lib/wine/i386-windows/threadpoolwinrt.dll
  + opt/wine/lib/wine/i386-windows/traffic.dll
  + opt/wine/lib/wine/i386-windows/twain_32.dll
  + opt/wine/lib/wine/i386-windows/twinapi.appcore.dll
  + opt/wine/lib/wine/i386-windows/tzres.dll
  + opt/wine/lib/wine/i386-windows/ucrtbase.dll
  + opt/wine/lib/wine/i386-windows/uianimation.dll
  + opt/wine/lib/wine/i386-windows/uiautomationcore.dll
  + opt/wine/lib/wine/i386-windows/uiribbon.dll
  + opt/wine/lib/wine/i386-windows/unicows.dll
  + opt/wine/lib/wine/i386-windows/uninstaller.exe
  + opt/wine/lib/wine/i386-windows/unlodctr.exe
  + opt/wine/lib/wine/i386-windows/updspapi.dll
  + opt/wine/lib/wine/i386-windows/url.dll
  + opt/wine/lib/wine/i386-windows/urlmon.dll
  + opt/wine/lib/wine/i386-windows/usbd.sys
  + opt/wine/lib/wine/i386-windows/user32.dll
  + opt/wine/lib/wine/i386-windows/userenv.dll
  + opt/wine/lib/wine/i386-windows/usp10.dll
  + opt/wine/lib/wine/i386-windows/utildll.dll
  + opt/wine/lib/wine/i386-windows/uxtheme.dll
  + opt/wine/lib/wine/i386-windows/vbscript.dll
  + opt/wine/lib/wine/i386-windows/vcomp.dll
  + opt/wine/lib/wine/i386-windows/vcomp100.dll
  + opt/wine/lib/wine/i386-windows/vcomp110.dll
  + opt/wine/lib/wine/i386-windows/vcomp120.dll
  + opt/wine/lib/wine/i386-windows/vcomp140.dll
  + opt/wine/lib/wine/i386-windows/vcomp90.dll
  + opt/wine/lib/wine/i386-windows/vcruntime140.dll
  + opt/wine/lib/wine/i386-windows/vdmdbg.dll
  + opt/wine/lib/wine/i386-windows/version.dll
  + opt/wine/lib/wine/i386-windows/vga.dll
  + opt/wine/lib/wine/i386-windows/view.exe
  + opt/wine/lib/wine/i386-windows/virtdisk.dll
  + opt/wine/lib/wine/i386-windows/vssapi.dll
  + opt/wine/lib/wine/i386-windows/vulkan-1.dll
  + opt/wine/lib/wine/i386-windows/wbemdisp.dll
  + opt/wine/lib/wine/i386-windows/wbemprox.dll
  + opt/wine/lib/wine/i386-windows/wdscore.dll
  + opt/wine/lib/wine/i386-windows/webservices.dll
  + opt/wine/lib/wine/i386-windows/websocket.dll
  + opt/wine/lib/wine/i386-windows/wer.dll
  + opt/wine/lib/wine/i386-windows/wevtapi.dll
  + opt/wine/lib/wine/i386-windows/wevtsvc.dll
  + opt/wine/lib/wine/i386-windows/wevtutil.exe
  + opt/wine/lib/wine/i386-windows/where.exe
  + opt/wine/lib/wine/i386-windows/whoami.exe
  + opt/wine/lib/wine/i386-windows/wiaservc.dll
  + opt/wine/lib/wine/i386-windows/wimgapi.dll
  + opt/wine/lib/wine/i386-windows/win32u.dll
  + opt/wine/lib/wine/i386-windows/windows.applicationmodel.dll
  + opt/wine/lib/wine/i386-windows/windows.devices.bluetooth.dll
  + opt/wine/lib/wine/i386-windows/windows.devices.enumeration.dll
  + opt/wine/lib/wine/i386-windows/windows.devices.usb.dll
  + opt/wine/lib/wine/i386-windows/windows.gaming.input.dll
  + opt/wine/lib/wine/i386-windows/windows.gaming.ui.gamebar.dll
  + opt/wine/lib/wine/i386-windows/windows.globalization.dll
  + opt/wine/lib/wine/i386-windows/windows.media.devices.dll
  + opt/wine/lib/wine/i386-windows/windows.media.dll
  + opt/wine/lib/wine/i386-windows/windows.media.mediacontrol.dll
  + opt/wine/lib/wine/i386-windows/windows.media.speech.dll
  + opt/wine/lib/wine/i386-windows/windows.networking.dll
  + opt/wine/lib/wine/i386-windows/windows.networking.hostname.dll
  + opt/wine/lib/wine/i386-windows/windows.perception.stub.dll
  + opt/wine/lib/wine/i386-windows/windows.security.credentials.ui.userconsentverifier.dll
  + opt/wine/lib/wine/i386-windows/windows.storage.applicationdata.dll
  + opt/wine/lib/wine/i386-windows/windows.system.profile.systemmanufacturers.dll
  + opt/wine/lib/wine/i386-windows/windows.ui.dll
  + opt/wine/lib/wine/i386-windows/windowscodecs.dll
  + opt/wine/lib/wine/i386-windows/windowscodecsext.dll
  + opt/wine/lib/wine/i386-windows/winealsa.drv
  + opt/wine/lib/wine/i386-windows/wineboot.exe
  + opt/wine/lib/wine/i386-windows/winebrowser.exe
  + opt/wine/lib/wine/i386-windows/winebus.sys
  + opt/wine/lib/wine/i386-windows/winecfg.exe
  + opt/wine/lib/wine/i386-windows/wineconsole.exe
  + opt/wine/lib/wine/i386-windows/wined3d.dll
  + opt/wine/lib/wine/i386-windows/winedbg.exe
  + opt/wine/lib/wine/i386-windows/winedevice.exe
  + opt/wine/lib/wine/i386-windows/winefile.exe
  + opt/wine/lib/wine/i386-windows/winegstreamer.dll
  + opt/wine/lib/wine/i386-windows/winehid.sys
  + opt/wine/lib/wine/i386-windows/winemapi.dll
  + opt/wine/lib/wine/i386-windows/winemenubuilder.exe
  + opt/wine/lib/wine/i386-windows/winemine.exe
  + opt/wine/lib/wine/i386-windows/winemsibuilder.exe
  + opt/wine/lib/wine/i386-windows/winepath.exe
  + opt/wine/lib/wine/i386-windows/wineps.drv
  + opt/wine/lib/wine/i386-windows/winepulse.drv
  + opt/wine/lib/wine/i386-windows/winevulkan.dll
  + opt/wine/lib/wine/i386-windows/winex11.drv
  + opt/wine/lib/wine/i386-windows/winexinput.sys
  + opt/wine/lib/wine/i386-windows/wing32.dll
  + opt/wine/lib/wine/i386-windows/winhlp32.exe
  + opt/wine/lib/wine/i386-windows/winhttp.dll
  + opt/wine/lib/wine/i386-windows/wininet.dll
  + opt/wine/lib/wine/i386-windows/winmgmt.exe
  + opt/wine/lib/wine/i386-windows/winmm.dll
  + opt/wine/lib/wine/i386-windows/winnls32.dll
  + opt/wine/lib/wine/i386-windows/winprint.dll
  + opt/wine/lib/wine/i386-windows/winspool.drv
  + opt/wine/lib/wine/i386-windows/winsta.dll
  + opt/wine/lib/wine/i386-windows/wintab32.dll
  + opt/wine/lib/wine/i386-windows/wintrust.dll
  + opt/wine/lib/wine/i386-windows/wintypes.dll
  + opt/wine/lib/wine/i386-windows/winusb.dll
  + opt/wine/lib/wine/i386-windows/winver.exe
  + opt/wine/lib/wine/i386-windows/wlanapi.dll
  + opt/wine/lib/wine/i386-windows/wlanui.dll
  + opt/wine/lib/wine/i386-windows/wldap32.dll
  + opt/wine/lib/wine/i386-windows/wldp.dll
  + opt/wine/lib/wine/i386-windows/wmasf.dll
  + opt/wine/lib/wine/i386-windows/wmi.dll
  + opt/wine/lib/wine/i386-windows/wmic.exe
  + opt/wine/lib/wine/i386-windows/wmiutils.dll
  + opt/wine/lib/wine/i386-windows/wmp.dll
  + opt/wine/lib/wine/i386-windows/wmphoto.dll
  + opt/wine/lib/wine/i386-windows/wmplayer.exe
  + opt/wine/lib/wine/i386-windows/wmvcore.dll
  + opt/wine/lib/wine/i386-windows/wnaspi32.dll
  + opt/wine/lib/wine/i386-windows/wofutil.dll
  + opt/wine/lib/wine/i386-windows/wordpad.exe
  + opt/wine/lib/wine/i386-windows/wpc.dll
  + opt/wine/lib/wine/i386-windows/write.exe
  + opt/wine/lib/wine/i386-windows/ws2_32.dll
  + opt/wine/lib/wine/i386-windows/wscript.exe
  + opt/wine/lib/wine/i386-windows/wsdapi.dll
  + opt/wine/lib/wine/i386-windows/wshom.ocx
  + opt/wine/lib/wine/i386-windows/wsnmp32.dll
  + opt/wine/lib/wine/i386-windows/wsock32.dll
  + opt/wine/lib/wine/i386-windows/wtsapi32.dll
  + opt/wine/lib/wine/i386-windows/wuapi.dll
  + opt/wine/lib/wine/i386-windows/wuaueng.dll
  + opt/wine/lib/wine/i386-windows/wuauserv.exe
  + opt/wine/lib/wine/i386-windows/wusa.exe
  + opt/wine/lib/wine/i386-windows/x3daudio1_0.dll
  + opt/wine/lib/wine/i386-windows/x3daudio1_1.dll
  + opt/wine/lib/wine/i386-windows/x3daudio1_2.dll
  + opt/wine/lib/wine/i386-windows/x3daudio1_3.dll
  + opt/wine/lib/wine/i386-windows/x3daudio1_4.dll
  + opt/wine/lib/wine/i386-windows/x3daudio1_5.dll
  + opt/wine/lib/wine/i386-windows/x3daudio1_6.dll
  + opt/wine/lib/wine/i386-windows/x3daudio1_7.dll
  + opt/wine/lib/wine/i386-windows/xactengine2_0.dll
  + opt/wine/lib/wine/i386-windows/xactengine2_4.dll
  + opt/wine/lib/wine/i386-windows/xactengine2_7.dll
  + opt/wine/lib/wine/i386-windows/xactengine2_9.dll
  + opt/wine/lib/wine/i386-windows/xactengine3_0.dll
  + opt/wine/lib/wine/i386-windows/xactengine3_1.dll
  + opt/wine/lib/wine/i386-windows/xactengine3_2.dll
  + opt/wine/lib/wine/i386-windows/xactengine3_3.dll
  + opt/wine/lib/wine/i386-windows/xactengine3_4.dll
  + opt/wine/lib/wine/i386-windows/xactengine3_5.dll
  + opt/wine/lib/wine/i386-windows/xactengine3_6.dll
  + opt/wine/lib/wine/i386-windows/xactengine3_7.dll
  + opt/wine/lib/wine/i386-windows/xapofx1_1.dll
  + opt/wine/lib/wine/i386-windows/xapofx1_2.dll
  + opt/wine/lib/wine/i386-windows/xapofx1_3.dll
  + opt/wine/lib/wine/i386-windows/xapofx1_4.dll
  + opt/wine/lib/wine/i386-windows/xapofx1_5.dll
  + opt/wine/lib/wine/i386-windows/xaudio2_0.dll
  + opt/wine/lib/wine/i386-windows/xaudio2_1.dll
  + opt/wine/lib/wine/i386-windows/xaudio2_2.dll
  + opt/wine/lib/wine/i386-windows/xaudio2_3.dll
  + opt/wine/lib/wine/i386-windows/xaudio2_4.dll
  + opt/wine/lib/wine/i386-windows/xaudio2_5.dll
  + opt/wine/lib/wine/i386-windows/xaudio2_6.dll
  + opt/wine/lib/wine/i386-windows/xaudio2_7.dll
  + opt/wine/lib/wine/i386-windows/xaudio2_8.dll
  + opt/wine/lib/wine/i386-windows/xaudio2_9.dll
  + opt/wine/lib/wine/i386-windows/xcopy.exe
  + opt/wine/lib/wine/i386-windows/xinput1_1.dll
  + opt/wine/lib/wine/i386-windows/xinput1_2.dll
  + opt/wine/lib/wine/i386-windows/xinput1_3.dll
  + opt/wine/lib/wine/i386-windows/xinput1_4.dll
  + opt/wine/lib/wine/i386-windows/xinput9_1_0.dll
  + opt/wine/lib/wine/i386-windows/xinputuap.dll
  + opt/wine/lib/wine/i386-windows/xmllite.dll
  + opt/wine/lib/wine/i386-windows/xolehlp.dll
  + opt/wine/lib/wine/i386-windows/xpsprint.dll
  + opt/wine/lib/wine/i386-windows/xpssvcs.dll
  + opt/wine/lib/wine/x86_64-unix/avicap32.so
    0000000000003dd8 D __wine_unix_call_funcs
    0000000000003dd0 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/bcrypt.so
    000000000000ad40 D __wine_unix_call_funcs
    000000000000aca0 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/capi2032.so
    0000000000004070 B __bss_start
    0000000000004070 D _edata
    0000000000004078 B _end
    0000000000003dc0 D __wine_unix_call_funcs
  + opt/wine/lib/wine/x86_64-unix/crypt32.so
    0000000000005d40 D __wine_unix_call_funcs
    0000000000005d00 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/ctapi32.so
    0000000000003dc0 D __wine_unix_call_funcs
    0000000000003d80 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/dnsapi.so
    0000000000003da0 D __wine_unix_call_funcs
    0000000000003d80 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/dwrite.so
    0000000000004d80 D __wine_unix_call_funcs
    0000000000004d20 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/kerberos.so
    0000000000007d60 D __wine_unix_call_funcs
    0000000000007d00 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/localspl.so
    0000000000003dc0 D __wine_unix_call_funcs
    0000000000003da0 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/mountmgr.so
    0000000000004d20 D __wine_unix_call_funcs
  + opt/wine/lib/wine/x86_64-unix/msv1_0.so
    0000000000003da0 D __wine_unix_call_funcs
    0000000000003d80 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/netapi32.so
  + opt/wine/lib/wine/x86_64-unix/nsiproxy.so
    000000000000dd40 D __wine_unix_call_funcs
  + opt/wine/lib/wine/x86_64-unix/ntdll.so
    0000000000042fe0 T alloc_fs_sel
    0000000000043018 T call_user_mode_callback
    00000000000543b0 T do_cpuid
    000000000002ffb0 T KeAddSystemServiceTable
    0000000000048b70 T KeUserModeCallback
    00000000000531a0 T NtAcceptConnectPort
    000000000003ca70 T NtAccessCheck
    000000000003cc80 T NtAccessCheckAndAuditAlarm
    0000000000053380 T NtAddAtom
    000000000003c4f0 T NtAdjustGroupsToken
    000000000003c540 T NtAdjustPrivilegesToken
    000000000005fab0 T NtAlertResumeThread
    000000000005fb10 T NtAlertThread
    0000000000053da0 T NtAlertThreadByThreadId
    000000000003d130 T NtAllocateLocallyUniqueId
    000000000003d1c0 T NtAllocateUuids
    000000000006bae0 T NtAllocateVirtualMemory
    000000000006c290 T NtAllocateVirtualMemoryEx
    000000000006eb80 T NtAreMappedFilesTheSame
    00000000000508d0 T NtAssignProcessToJobObject
    0000000000048c50 T NtCallbackReturn
    000000000002afd0 T NtCancelIoFile
    000000000002b080 T NtCancelIoFileEx
    000000000002b140 T NtCancelSynchronousIoFile
    0000000000051640 T NtCancelTimer
    000000000004fa10 T NtClearEvent
    0000000000041dc0 T NtClose
    0000000000054320 T NtCommitTransaction
    0000000000041d10 T NtCompareObjects
    0000000000041d70 T NtCompareTokens
    00000000000531f0 T NtCompleteConnectPort
    0000000000052fc0 T NtConnectPort
    0000000000042a60 T NtContinue
    0000000000050980 T NtCreateDebugObject
    0000000000050b70 T NtCreateDirectoryObject
    000000000004f430 T NtCreateEvent
    0000000000024670 T NtCreateFile
    00000000000525e0 T NtCreateIoCompletion
    00000000000500c0 T NtCreateJobObject
    0000000000038110 T NtCreateKey
    0000000000052310 T NtCreateKeyedEvent
    00000000000389c0 T NtCreateKeyTransacted
    000000000003c480 T NtCreateLowBoxToken
    0000000000024f80 T NtCreateMailslotFile
    000000000004fc30 T NtCreateMutant
    00000000000250e0 T NtCreateNamedPipeFile
    000000000006ef60 T NtCreatePagingFile
    0000000000052f70 T NtCreatePort
    0000000000052cd0 T NtCreateSection
    000000000004efb0 T NtCreateSemaphore
    0000000000050f50 T NtCreateSymbolicLinkObject
    000000000005efc0 T NtCreateThread
    000000000005f330 T NtCreateThreadEx
    0000000000051310 T NtCreateTimer
    000000000003b0f0 T NtCreateToken
    0000000000054220 T NtCreateTransaction
    00000000000333a0 T NtCreateUserProcess
    000000000005f280 T NtCurrentTeb
    0000000000037670 T NtDebugActiveProcess
    0000000000037740 T NtDebugContinue
    0000000000051f20 T NtDelayExecution
    0000000000053640 T NtDeleteAtom
    0000000000025540 T NtDeleteFile
    0000000000038ec0 T NtDeleteKey
    0000000000039cf0 T NtDeleteValueKey
    00000000000278a0 T NtDeviceIoControlFile
    000000000005ae10 T NtDisplayString
    0000000000012b00 T ntdll_get_build_dir
    0000000000012b10 T ntdll_get_data_dir
    0000000000060080 T ntdll_set_exception_jmp_buf
    0000000000010b90 T ntdll_umbstowcs
    0000000000011400 T ntdll_wcsicmp
    0000000000011490 T ntdll_wcsnicmp
    0000000000011070 T ntdll_wcstoumbs
    0000000000042c70 T NtDuplicateObject
    000000000003b790 T NtDuplicateToken
    0000000000039240 T NtEnumerateKey
    00000000000392d0 T NtEnumerateValueKey
    000000000003c6b0 T NtFilterToken
    0000000000053690 T NtFindAtom
    000000000002ad80 T NtFlushBuffersFile
    000000000006ef00 T NtFlushInstructionCache
    000000000003a230 T NtFlushKey
    000000000006ef10 T NtFlushProcessWriteBuffers
    000000000006e550 T NtFlushVirtualMemory
    000000000006c490 T NtFreeVirtualMemory
    000000000002a560 T NtFsControlFile
    0000000000046730 T NtGetContextThread
    0000000000061c30 T NtGetCurrentProcessorNumber
    0000000000061d30 T NtGetNextThread
    0000000000015a80 T NtGetNlsSectionPtr
    0000000000052250 T NtGetTickCount
    000000000006e6a0 T NtGetWriteWatch
    000000000003ca30 T NtImpersonateAnonymousToken
    0000000000015ef0 T NtInitializeNlsFiles
    000000000005aec0 T NtInitiatePowerAction
    0000000000050820 T NtIsProcessInJob
    0000000000053150 T NtListenPort
    000000000005ad30 T NtLoadDriver
    000000000003a640 T NtLoadKey
    000000000003a6b0 T NtLoadKey2
    000000000003a2c0 T NtLoadKeyEx
    000000000002b200 T NtLockFile
    000000000006d890 T NtLockVirtualMemory
    0000000000051280 T NtMakeTemporaryObject
    000000000006da30 T NtMapViewOfSection
    000000000006dcf0 T NtMapViewOfSectionEx
    000000000002b560 T NtNotifyChangeDirectoryFile
    000000000003a1f0 T NtNotifyChangeKey
    0000000000039fd0 T NtNotifyChangeMultipleKeys
    0000000000050c70 T NtOpenDirectoryObject
    000000000004f7c0 T NtOpenEvent
    0000000000024f60 T NtOpenFile
    0000000000052750 T NtOpenIoCompletion
    00000000000501c0 T NtOpenJobObject
    0000000000038e20 T NtOpenKey
    0000000000052410 T NtOpenKeyedEvent
    0000000000038a80 T NtOpenKeyEx
    0000000000038eb0 T NtOpenKeyTransacted
    0000000000038e30 T NtOpenKeyTransactedEx
    000000000004fd90 T NtOpenMutant
    0000000000037560 T NtOpenProcess
    000000000003b680 T NtOpenProcessToken
    000000000003b5b0 T NtOpenProcessTokenEx
    0000000000052e80 T NtOpenSection
    000000000004f100 T NtOpenSemaphore
    00000000000510c0 T NtOpenSymbolicLinkObject
    000000000005f960 T NtOpenThread
    000000000003b780 T NtOpenThreadToken
    000000000003b690 T NtOpenThreadTokenEx
    0000000000051440 T NtOpenTimer
    000000000005a4e0 T NtPowerInformation
    000000000003c990 T NtPrivilegeCheck
    000000000006caf0 T NtProtectVirtualMemory
    000000000004fa20 T NtPulseEvent
    0000000000025970 T NtQueryAttributesFile
    0000000000016020 T NtQueryDefaultLocale
    0000000000016060 T NtQueryDefaultUILanguage
    000000000001dec0 T NtQueryDirectoryFile
    0000000000050d60 T NtQueryDirectoryObject
    000000000002c360 T NtQueryEaFile
    000000000004fab0 T NtQueryEvent
    00000000000255f0 T NtQueryFullAttributesFile
    0000000000053950 T NtQueryInformationAtom
    00000000000284c0 T NtQueryInformationFile
    0000000000050350 T NtQueryInformationJobObject
    0000000000036130 T NtQueryInformationProcess
    0000000000060440 T NtQueryInformationThread
    000000000003b930 T NtQueryInformationToken
    0000000000016080 T NtQueryInstallUILanguage
    0000000000052bd0 T NtQueryIoCompletion
    0000000000039260 T NtQueryKey
    000000000003a970 T NtQueryLicenseValue
    0000000000039960 T NtQueryMultipleValueKey
    000000000004ff40 T NtQueryMutant
    000000000002c480 T NtQueryObject
    0000000000051be0 T NtQueryPerformanceCounter
    000000000006e3b0 T NtQuerySection
    000000000003cd50 T NtQuerySecurityObject
    000000000004f210 T NtQuerySemaphore
    00000000000511b0 T NtQuerySymbolicLinkObject
    000000000005a2e0 T NtQuerySystemEnvironmentValue
    000000000005a350 T NtQuerySystemEnvironmentValueEx
    0000000000057ea0 T NtQuerySystemInformation
    0000000000057830 T NtQuerySystemInformationEx
    0000000000051ca0 T NtQuerySystemTime
    0000000000051d90 T NtQueryTimer
    0000000000052120 T NtQueryTimerResolution
    0000000000039470 T NtQueryValueKey
    000000000006d090 T NtQueryVirtualMemory
    000000000002ba20 T NtQueryVolumeInformationFile
    000000000005fc30 T NtQueueApcThread
    000000000005f0f0 T NtRaiseException
    000000000005ae80 T NtRaiseHardError
    0000000000028f50 T NtReadFile
    0000000000026fc0 T NtReadFileScatter
    000000000006ea10 T NtReadVirtualMemory
    0000000000053230 T NtRegisterThreadTerminatePort
    0000000000052570 T NtReleaseKeyedEvent
    000000000004fea0 T NtReleaseMutant
    000000000004f380 T NtReleaseSemaphore
    0000000000052910 T NtRemoveIoCompletion
    0000000000052a30 T NtRemoveIoCompletionEx
    00000000000376e0 T NtRemoveProcessDebug
    0000000000038f50 T NtRenameKey
    000000000003a8d0 T NtReplaceKey
    0000000000053330 T NtReplyWaitReceivePort
    0000000000053270 T NtRequestWaitReplyPort
    000000000004f970 T NtResetEvent
    000000000006e8d0 T NtResetWriteWatch
    000000000003a890 T NtRestoreKey
    0000000000037620 T NtResumeProcess
    000000000005fa40 T NtResumeThread
    0000000000054360 T NtRollbackTransaction
    000000000003a7e0 T NtSaveKey
    00000000000530b0 T NtSecureConnectPort
    0000000000046290 T NtSetContextThread
    000000000000eb40 T NtSetDebugFilterState
    0000000000016040 T NtSetDefaultLocale
    0000000000016070 T NtSetDefaultUILanguage
    000000000002c430 T NtSetEaFile
    000000000004f8d0 T NtSetEvent
    0000000000050ab0 T NtSetInformationDebugObject
    0000000000025d20 T NtSetInformationFile
    0000000000050610 T NtSetInformationJobObject
    0000000000039280 T NtSetInformationKey
    000000000002cba0 T NtSetInformationObject
    00000000000371d0 T NtSetInformationProcess
    0000000000060f70 T NtSetInformationThread
    000000000003c2a0 T NtSetInformationToken
    000000000006ed10 T NtSetInformationVirtualMemory
    0000000000052210 T NtSetIntervalProfile
    0000000000052840 T NtSetIoCompletion
    0000000000048ca0 T NtSetLdtEntries
    000000000003cfa0 T NtSetSecurityObject
    000000000005a2a0 T NtSetSystemInformation
    0000000000052070 T NtSetSystemTime
    000000000005af10 T NtSetThreadExecutionState
    0000000000051530 T NtSetTimer
    0000000000052190 T NtSetTimerResolution
    00000000000399b0 T NtSetValueKey
    000000000002c310 T NtSetVolumeInformationFile
    000000000005a4a0 T NtShutdownSystem
    0000000000051b20 T NtSignalAndWaitForSingleObject
    00000000000375d0 T NtSuspendProcess
    000000000005f9d0 T NtSuspendThread
    000000000005a450 T NtSystemDebugControl
    00000000000502b0 T NtTerminateJobObject
    0000000000035ec0 T NtTerminateProcess
    000000000005fb50 T NtTerminateThread
    0000000000042ad0 T NtTestAlert
    000000000000eaf0 T NtTraceControl
    000000000005ada0 T NtUnloadDriver
    000000000003a6d0 T NtUnloadKey
    000000000002b430 T NtUnlockFile
    000000000006d960 T NtUnlockVirtualMemory
    000000000006dfa0 T NtUnmapViewOfSection
    000000000006dfb0 T NtUnmapViewOfSectionEx
    0000000000053f00 T NtWaitForAlertByThreadId
    00000000000517b0 T NtWaitForDebugEvent
    0000000000052500 T NtWaitForKeyedEvent
    00000000000516a0 T NtWaitForMultipleObjects
    0000000000051780 T NtWaitForSingleObject
    0000000000029a50 T NtWriteFile
    0000000000027400 T NtWriteFileGather
    000000000006eac0 T NtWriteVirtualMemory
    0000000000051bd0 T NtYieldExecution
    00000000000161f0 T RtlCustomCPToUnicodeN
    00000000000160d0 T RtlDowncaseUnicodeChar
    0000000000016b10 T RtlGetLastWin32Error
    0000000000016110 T RtlInitCodePageTable
    00000000000169e0 T RtlInitUnicodeString
    0000000000016a30 T RtlNtStatusToDosError
    0000000000016b30 T RtlSetLastWin32Error
    00000000000162f0 T RtlUnicodeToCustomCPN
    0000000000016760 T RtlUnicodeToUTF8N
    0000000000016090 T RtlUpcaseUnicodeChar
    00000000000163c0 T RtlUTF8ToUnicodeN
    0000000000043118 T signal_start_thread
    0000000000043104 T user_mode_abort_thread
    00000000000430a8 T user_mode_callback_return
    000000000000e4d0 T __wine_dbg_get_channel_flags
    000000000000e7a0 T __wine_dbg_header
    000000000000e660 T __wine_dbg_output
    000000000000e5b0 T __wine_dbg_strdup
    0000000000030bf0 T __wine_main
    0000000000022dd0 T wine_nt_to_unix_file_name
    00000000000406d0 T wine_server_call
    0000000000040e30 T wine_server_fd_to_handle
    0000000000040ed0 T wine_server_handle_to_fd
    0000000000043168 T __wine_syscall_dispatcher
    000000000008faa0 D __wine_syscall_dispatcher_prolog_end_ptr
    000000000004340f T __wine_syscall_dispatcher_return
    0000000000043424 T __wine_unix_call_dispatcher
    000000000008faa8 D __wine_unix_call_dispatcher_prolog_end_ptr
    0000000000033050 T __wine_unix_spawnvp
    0000000000023180 T wine_unix_to_nt_file_name
  + opt/wine/lib/wine/x86_64-unix/odbc32.so
    0000000000007a00 D __wine_unix_call_funcs
  + opt/wine/lib/wine/x86_64-unix/opencl.so
    0000000000007b20 D __wine_unix_call_funcs
  + opt/wine/lib/wine/x86_64-unix/opengl32.so
    000000000011dea0 D __wine_unix_call_funcs
    0000000000117f80 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/qcap.so
    0000000000008d60 D __wine_unix_call_funcs
    0000000000008d00 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/sane.so
    0000000000003d60 D __wine_unix_call_funcs
    0000000000003ce0 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/secur32.so
    0000000000009c20 D __wine_unix_call_funcs
    0000000000009b60 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/win32u.so
    0000000000035200 T AdjustWindowRectEx
    000000000002bc50 T CopyImage
    0000000000097f10 T DrawTextW
    00000000000a2500 T GetStockObject
    000000000002bcb0 T LoadImageW
    00000000000cc620 T NtGdiAbortDoc
    00000000000c9460 T NtGdiAbortPath
    0000000000097790 T NtGdiAddFontMemResourceEx
    0000000000097730 T NtGdiAddFontResourceW
    0000000000021ea0 T NtGdiAlphaBlend
    00000000000c3ec0 T NtGdiAngleArc
    00000000000c2a20 T NtGdiArcInternal
    00000000000c93a0 T NtGdiBeginPath
    0000000000021600 T NtGdiBitBlt
    00000000000c94c0 T NtGdiCloseFigure
    00000000000d0c40 T NtGdiCombineRgn
    00000000000ad240 T NtGdiComputeXformCoefficients
    0000000000022fd0 T NtGdiCreateBitmap
    00000000000a3050 T NtGdiCreateClientObj
    00000000000232c0 T NtGdiCreateCompatibleBitmap
    000000000002d5a0 T NtGdiCreateCompatibleDC
    0000000000024190 T NtGdiCreateDIBBrush
    000000000003d810 T NtGdiCreateDIBitmapInternal
    000000000003d930 T NtGdiCreateDIBSection
    00000000000d0610 T NtGdiCreateEllipticRgn
    00000000000c5350 T NtGdiCreateHalftonePalette
    0000000000024060 T NtGdiCreateHatchBrushInternal
    000000000007ec50 T NtGdiCreateMetafileDC
    00000000000c5160 T NtGdiCreatePaletteInternal
    0000000000024130 T NtGdiCreatePatternBrushInternal
    00000000000cbb80 T NtGdiCreatePen
    00000000000d0280 T NtGdiCreateRectRgn
    00000000000d0350 T NtGdiCreateRoundRectRgn
    0000000000024210 T NtGdiCreateSolidBrush
    000000000007e2a0 T NtGdiDdDDICheckVidPnExclusiveOwnership
    000000000007da40 T NtGdiDdDDICloseAdapter
    000000000003dd90 T NtGdiDdDDICreateDCFromMemory
    000000000007dd00 T NtGdiDdDDICreateDevice
    000000000003e090 T NtGdiDdDDIDestroyDCFromMemory
    000000000007e190 T NtGdiDdDDIDestroyDevice
    000000000007da00 T NtGdiDdDDIEscape
    000000000007dc70 T NtGdiDdDDIOpenAdapterFromDeviceName
    000000000007d9c0 T NtGdiDdDDIOpenAdapterFromHdc
    000000000007db90 T NtGdiDdDDIOpenAdapterFromLuid
    000000000007de70 T NtGdiDdDDIQueryAdapterInfo
    000000000007ded0 T NtGdiDdDDIQueryStatistics
    000000000007df10 T NtGdiDdDDIQueryVideoMemoryInfo
    000000000007e040 T NtGdiDdDDISetQueuedLimit
    000000000007e080 T NtGdiDdDDISetVidPnSourceOwner
    00000000000a30b0 T NtGdiDeleteClientObj
    00000000000a2d20 T NtGdiDeleteObjectApp
    00000000000c3760 T NtGdiDescribePixelFormat
    00000000000c5ee0 T NtGdiDoPalette
    00000000000c4730 T NtGdiDrawStream
    00000000000c3420 T NtGdiEllipse
    00000000000cc4e0 T NtGdiEndDoc
    00000000000cc5b0 T NtGdiEndPage
    00000000000c9400 T NtGdiEndPath
    000000000008ff40 T NtGdiEnumFonts
    00000000000d0950 T NtGdiEqualRgn
    0000000000029930 T NtGdiExcludeClipRect
    00000000000cbbf0 T NtGdiExtCreatePen
    00000000000d20a0 T NtGdiExtCreateRegion
    000000000007d940 T NtGdiExtEscape
    00000000000c3e30 T NtGdiExtFloodFill
    00000000000a30e0 T NtGdiExtGetObjectW
    0000000000029530 T NtGdiExtSelectClipRgn
    0000000000091af0 T NtGdiExtTextOutW
    00000000000c96a0 T NtGdiFillPath
    00000000000c37f0 T NtGdiFillRgn
    00000000000c9910 T NtGdiFlattenPath
    00000000000a3450 T NtGdiFlush
    0000000000097a30 T NtGdiFontIsLinked
    00000000000c3970 T NtGdiFrameRgn
    000000000002dc60 T NtGdiGetAndSetDCDword
    0000000000029f70 T NtGdiGetAppClipBox
    0000000000022df0 T NtGdiGetBitmapBits
    00000000000236d0 T NtGdiGetBitmapDimension
    000000000002ea00 T NtGdiGetBoundsRect
    0000000000093210 T NtGdiGetCharABCWidthsW
    0000000000097d90 T NtGdiGetCharWidthInfo
    0000000000093560 T NtGdiGetCharWidthW
    00000000000a3460 T NtGdiGetColorAdjustment
    000000000002ded0 T NtGdiGetDCDword
    00000000000a3250 T NtGdiGetDCObject
    000000000002e070 T NtGdiGetDCPoint
    000000000002d780 T NtGdiGetDeviceCaps
    000000000002e460 T NtGdiGetDeviceGammaRamp
    000000000003ceb0 T NtGdiGetDIBitsInternal
    00000000000948f0 T NtGdiGetFontData
    0000000000097b90 T NtGdiGetFontFileData
    0000000000097c70 T NtGdiGetFontFileInfo
    0000000000097990 T NtGdiGetFontUnicodeRanges
    0000000000094980 T NtGdiGetGlyphIndicesW
    0000000000093880 T NtGdiGetGlyphOutline
    0000000000094810 T NtGdiGetKerningPairs
    00000000000c5a30 T NtGdiGetNearestColor
    00000000000c5750 T NtGdiGetNearestPaletteIndex
    0000000000090730 T NtGdiGetOutlineTextMetricsInternalW
    00000000000c9520 T NtGdiGetPath
    00000000000c3680 T NtGdiGetPixel
    000000000002a170 T NtGdiGetRandomRgn
    0000000000097b60 T NtGdiGetRasterizerCaps
    0000000000097ae0 T NtGdiGetRealizationInfo
    00000000000d0630 T NtGdiGetRegionData
    00000000000d0070 T NtGdiGetRgnBox
    00000000000cc360 T NtGdiGetSpoolMessage
    00000000000c5730 T NtGdiGetSystemPaletteUse
    000000000008f860 T NtGdiGetTextCharsetInfo
    0000000000090180 T NtGdiGetTextExtentExW
    0000000000090110 T NtGdiGetTextFaceW
    00000000000901a0 T NtGdiGetTextMetricsW
    000000000002e220 T NtGdiGetTransform
    00000000000c4600 T NtGdiGradientFill
    000000000008f8b0 T NtGdiHfontCreate
    0000000000023d90 T NtGdiIcmBrushInfo
    00000000000cc3c0 T NtGdiInitSpool
    0000000000029b00 T NtGdiIntersectClipRect
    00000000000c3a00 T NtGdiInvertRgn
    00000000000c28d0 T NtGdiLineTo
    0000000000021630 T NtGdiMaskBlt
    00000000000ad640 T NtGdiModifyWorldTransform
    00000000000c2970 T NtGdiMoveTo
    0000000000029880 T NtGdiOffsetClipRgn
    00000000000cffc0 T NtGdiOffsetRgn
    000000000002d7e0 T NtGdiOpenDCW
    00000000000210b0 T NtGdiPatBlt
    00000000000c9610 T NtGdiPathToRegion
    00000000000223d0 T NtGdiPlgBlt
    00000000000c40b0 T NtGdiPolyDraw
    00000000000c3a70 T NtGdiPolyPolyDraw
    00000000000d0740 T NtGdiPtInRegion
    0000000000029c30 T NtGdiPtVisible
    00000000000c34b0 T NtGdiRectangle
    00000000000d0800 T NtGdiRectInRegion
    0000000000029dc0 T NtGdiRectVisible
    0000000000097750 T NtGdiRemoveFontMemResourceEx
    0000000000097920 T NtGdiRemoveFontResourceW
    000000000002db30 T NtGdiResetDC
    00000000000c55e0 T NtGdiResizePalette
    000000000002d090 T NtGdiRestoreDC
    00000000000c3540 T NtGdiRoundRect
    000000000002ce10 T NtGdiSaveDC
    00000000000ad290 T NtGdiScaleViewportExtEx
    00000000000ad3c0 T NtGdiScaleWindowExtEx
    00000000000234c0 T NtGdiSelectBitmap
    00000000000242e0 T NtGdiSelectBrush
    00000000000c9700 T NtGdiSelectClipPath
    000000000008fae0 T NtGdiSelectFont
    00000000000cbe70 T NtGdiSelectPen
    0000000000022fb0 T NtGdiSetBitmapBits
    0000000000023710 T NtGdiSetBitmapDimension
    000000000002ebd0 T NtGdiSetBoundsRect
    000000000002e150 T NtGdiSetBrushOrg
    00000000000a34a0 T NtGdiSetColorAdjustment
    000000000002e530 T NtGdiSetDeviceGammaRamp
    000000000003c920 T NtGdiSetDIBitsToDeviceInternal
    000000000002f140 T NtGdiSetLayout
    00000000000c5e90 T NtGdiSetMagicColors
    000000000002a3a0 T NtGdiSetMetaRgn
    00000000000c35e0 T NtGdiSetPixel
    00000000000c3700 T NtGdiSetPixelFormat
    00000000000d0140 T NtGdiSetRectRgn
    00000000000c56e0 T NtGdiSetSystemPaletteUse
    0000000000090090 T NtGdiSetTextJustification
    00000000000ad4f0 T NtGdiSetVirtualResolution
    00000000000cc400 T NtGdiStartDoc
    00000000000cc540 T NtGdiStartPage
    0000000000021260 T NtGdiStretchBlt
    000000000003c200 T NtGdiStretchDIBitsInternal
    00000000000c9990 T NtGdiStrokeAndFillPath
    00000000000c99f0 T NtGdiStrokePath
    00000000000c37b0 T NtGdiSwapBuffers
    00000000000acd10 T NtGdiTransformPoints
    0000000000021980 T NtGdiTransparentBlt
    00000000000a3350 T NtGdiUnrealizeObject
    00000000000c5e30 T NtGdiUpdateColors
    00000000000c9a50 T NtGdiWidenPath
    00000000000a8cd0 T NtUserActivateKeyboardLayout
    00000000000286e0 T NtUserAddClipboardFormatListener
    00000000000a5ae0 T NtUserAssociateInputContext
    00000000000a7620 T NtUserAttachThreadInput
    00000000000318d0 T NtUserBeginPaint
    00000000000a6120 T NtUserBuildHimcList
    00000000000edef0 T NtUserBuildHwndList
    00000000000f5850 T NtUserCallHwnd
    00000000000f4eb0 T NtUserCallHwndParam
    00000000000a4ae0 T NtUserCallMsgFilter
    00000000000a4660 T NtUserCallNextHookEx
    00000000000e6250 T NtUserCallNoParam
    00000000000e8800 T NtUserCallOneParam
    00000000000e8b30 T NtUserCallTwoParam
    00000000000283e0 T NtUserChangeClipboardChain
    00000000000e6fe0 T NtUserChangeDisplaySettings
    00000000000b39d0 T NtUserCheckMenuItem
    00000000000ed9a0 T NtUserChildWindowFromPointEx
    00000000000ac190 T NtUserClipCursor
    0000000000027810 T NtUserCloseClipboard
    00000000000f6280 T NtUserCloseDesktop
    00000000000f6030 T NtUserCloseWindowStation
    00000000000b2dd0 T NtUserCopyAcceleratorTable
    00000000000278f0 T NtUserCountClipboardFormats
    00000000000b2ec0 T NtUserCreateAcceleratorTable
    00000000000aaa10 T NtUserCreateCaret
    00000000000f6300 T NtUserCreateDesktopEx
    00000000000a57e0 T NtUserCreateInputContext
    00000000000f3bc0 T NtUserCreateWindowEx
    00000000000f5ea0 T NtUserCreateWindowStation
    00000000000f05d0 T NtUserDeferWindowPosAndBand
    00000000000b6590 T NtUserDeleteMenu
    00000000000b2fb0 T NtUserDestroyAcceleratorTable
    000000000002ac30 T NtUserDestroyCursor
    00000000000a5870 T NtUserDestroyInputContext
    00000000000b3750 T NtUserDestroyMenu
    00000000000f36d0 T NtUserDestroyWindow
    00000000000a5ec0 T NtUserDisableThreadIme
    00000000000c0e20 T NtUserDispatchMessage
    00000000000e8c80 T NtUserDisplayConfigGetDeviceInfo
    00000000000f5340 T NtUserDragDetect
    00000000000f54a0 T NtUserDragObject
    0000000000036410 T NtUserDrawCaptionTemp
    000000000002b550 T NtUserDrawIconEx
    00000000000b7650 T NtUserDrawMenuBarTemp
    0000000000028090 T NtUserEmptyClipboard
    00000000000b3a50 T NtUserEnableMenuItem
    00000000000ab420 T NtUserEnableMouseInPointer
    00000000000d4ba0 T NtUserEnableScrollBar
    00000000000f08a0 T NtUserEndDeferWindowPosEx
    00000000000b8500 T NtUserEndMenu
    00000000000319c0 T NtUserEndPaint
    00000000000dfc70 T NtUserEnumDisplayDevices
    00000000000e1c60 T NtUserEnumDisplayMonitors
    00000000000dfec0 T NtUserEnumDisplaySettings
    0000000000032620 T NtUserExcludeUpdateRgn
    000000000002b080 T NtUserFindExistingCursorIcon
    00000000000ee0d0 T NtUserFindWindowEx
    00000000000f30d0 T NtUserFlashWindowEx
    00000000000ea6c0 T NtUserGetAncestor
    00000000000a7b40 T NtUserGetAsyncKeyState
    0000000000025750 T NtUserGetAtomName
    00000000000aaf60 T NtUserGetCaretBlinkTime
    00000000000aafd0 T NtUserGetCaretPos
    0000000000025480 T NtUserGetClassInfoEx
    0000000000026e50 T NtUserGetClassName
    0000000000028b90 T NtUserGetClipboardData
    0000000000027ac0 T NtUserGetClipboardFormatName
    0000000000027fe0 T NtUserGetClipboardOwner
    0000000000028550 T NtUserGetClipboardSequenceNumber
    0000000000028330 T NtUserGetClipboardViewer
    000000000002ab80 T NtUserGetCursor
    000000000002b170 T NtUserGetCursorFrameInfo
    00000000000a7ab0 T NtUserGetCursorInfo
    0000000000031560 T NtUserGetDC
    0000000000030cb0 T NtUserGetDCEx
    00000000000df620 T NtUserGetDisplayConfigBufferSizes
    00000000000e3110 T NtUserGetDoubleClickTime
    00000000000e60b0 T NtUserGetDpiForMonitor
    00000000000a73d0 T NtUserGetForegroundWindow
    00000000000ba740 T NtUserGetGUIThreadInfo
    000000000002b2e0 T NtUserGetIconInfo
    000000000002b110 T NtUserGetIconSize
    00000000000edea0 T NtUserGetInternalWindowPos
    00000000000a7de0 T NtUserGetKeyboardLayout
    00000000000a8fd0 T NtUserGetKeyboardLayoutList
    00000000000a9470 T NtUserGetKeyboardLayoutName
    00000000000a7f20 T NtUserGetKeyboardState
    00000000000a83b0 T NtUserGetKeyNameText
    00000000000a7e70 T NtUserGetKeyState
    00000000000ec840 T NtUserGetLayeredWindowAttributes
    00000000000b81e0 T NtUserGetMenuBarInfo
    00000000000b5920 T NtUserGetMenuItemRect
    00000000000c0bf0 T NtUserGetMessage
    00000000000a9ee0 T NtUserGetMouseMovePointsEx
    00000000000f6630 T NtUserGetObjectInformation
    00000000000284a0 T NtUserGetOpenClipboardWindow
    00000000000abec0 T NtUserGetPointerInfoList
    0000000000027f50 T NtUserGetPriorityClipboardFormat
    00000000000e1a10 T NtUserGetProcessDpiAwarenessContext
    00000000000f60b0 T NtUserGetProcessWindowStation
    00000000000ebcb0 T NtUserGetProp
    00000000000a7cf0 T NtUserGetQueueStatus
    00000000000ce120 T NtUserGetRawInputBuffer
    00000000000ce230 T NtUserGetRawInputData
    00000000000cde80 T NtUserGetRawInputDeviceInfo
    00000000000cdcc0 T NtUserGetRawInputDeviceList
    00000000000ce9f0 T NtUserGetRegisteredRawInputDevices
    00000000000d4b20 T NtUserGetScrollBarInfo
    00000000000e0cd0 T NtUserGetSystemDpiForProcess
    00000000000b6ca0 T NtUserGetSystemMenu
    00000000000f64b0 T NtUserGetThreadDesktop
    000000000003a310 T NtUserGetTitleBarInfo
    0000000000027990 T NtUserGetUpdatedClipboardFormats
    00000000000324c0 T NtUserGetUpdateRect
    00000000000323f0 T NtUserGetUpdateRgn
    0000000000031590 T NtUserGetWindowDC
    00000000000edb30 T NtUserGetWindowPlacement
    00000000000ec6f0 T NtUserGetWindowRgnEx
    00000000000ab2d0 T NtUserHideCaret
    00000000000b8100 T NtUserHiliteMenuItem
    00000000000250c0 T NtUserInitializeClientPfnArrays
    00000000000f3350 T NtUserInternalGetWindowIcon
    00000000000edfe0 T NtUserInternalGetWindowText
    0000000000032730 T NtUserInvalidateRect
    00000000000326f0 T NtUserInvalidateRgn
    0000000000027e90 T NtUserIsClipboardFormatAvailable
    00000000000ab470 T NtUserIsMouseInPointerEnabled
    00000000000baad0 T NtUserKillTimer
    0000000000032760 T NtUserLockWindowUpdate
    00000000000e2200 T NtUserLogicalToPerMonitorDPIPhysicalPoint
    00000000000a8330 T NtUserMapVirtualKeyEx
    00000000000b6680 T NtUserMenuItemFromPoint
    00000000000babf0 T NtUserMessageCall
    00000000000ef060 T NtUserMoveWindow
    00000000000ba850 T NtUserMsgWaitForMultipleObjectsEx
    00000000000a6870 T NtUserNotifyIMEStatus
    00000000000a4d80 T NtUserNotifyWinEvent
    0000000000027660 T NtUserOpenClipboard
    00000000000f61a0 T NtUserOpenDesktop
    00000000000f6520 T NtUserOpenInputDesktop
    00000000000f5f80 T NtUserOpenWindowStation
    00000000000c0a50 T NtUserPeekMessage
    00000000000e0d30 T NtUserPerMonitorDPIPhysicalToLogicalPoint
    00000000000bb250 T NtUserPostMessage
    00000000000c0570 T NtUserPostThreadMessage
    0000000000033390 T NtUserPrintWindow
    00000000000df7d0 T NtUserQueryDisplayConfig
    00000000000a5a10 T NtUserQueryInputContext
    00000000000edb20 T NtUserRealChildWindowFromPoint
    0000000000031ab0 T NtUserRedrawWindow
    0000000000025800 T NtUserRegisterClassExWOW
    00000000000a9ce0 T NtUserRegisterHotKey
    00000000000ce5a0 T NtUserRegisterRawInputDevices
    0000000000031460 T NtUserReleaseDC
    0000000000028760 T NtUserRemoveClipboardFormatListener
    00000000000b5e90 T NtUserRemoveMenu
    00000000000ebe40 T NtUserRemoveProp
    00000000000c4770 T NtUserScrollDC
    00000000000327d0 T NtUserScrollWindowEx
    00000000000c5ab0 T NtUserSelectPalette
    00000000000a76e0 T NtUserSendInput
    00000000000abaf0 T NtUserSetActiveWindow
    00000000000aa970 T NtUserSetCapture
    0000000000027040 T NtUserSetClassLong
    0000000000027060 T NtUserSetClassLongPtr
    0000000000027070 T NtUserSetClassWord
    0000000000028870 T NtUserSetClipboardData
    0000000000028250 T NtUserSetClipboardViewer
    000000000002aa90 T NtUserSetCursor
    000000000002acc0 T NtUserSetCursorIconData
    00000000000a78e0 T NtUserSetCursorPos
    00000000000abbb0 T NtUserSetFocus
    00000000000f2f60 T NtUserSetInternalWindowPos
    00000000000a8030 T NtUserSetKeyboardState
    00000000000f1c20 T NtUserSetLayeredWindowAttributes
    00000000000b3990 T NtUserSetMenu
    00000000000b6610 T NtUserSetMenuContextHelpId
    00000000000b6720 T NtUserSetMenuDefaultItem
    00000000000f6a60 T NtUserSetObjectInformation
    00000000000f1f10 T NtUserSetParent
    00000000000e1450 T NtUserSetProcessDpiAwarenessContext
    00000000000f6120 T NtUserSetProcessWindowStation
    00000000000ebd70 T NtUserSetProp
    00000000000d4cc0 T NtUserSetScrollInfo
    00000000000f5560 T NtUserSetShellWindowEx
    00000000000e13a0 T NtUserSetSysColors
    00000000000b6dc0 T NtUserSetSystemMenu
    00000000000ba9e0 T NtUserSetSystemTimer
    00000000000f6980 T NtUserSetThreadDesktop
    00000000000ba8b0 T NtUserSetTimer
    00000000000f2b70 T NtUserSetWindowLong
    00000000000f2b90 T NtUserSetWindowLongPtr
    00000000000f2f20 T NtUserSetWindowPlacement
    00000000000ee620 T NtUserSetWindowPos
    00000000000eee30 T NtUserSetWindowRgn
    00000000000a39b0 T NtUserSetWindowsHookEx
    00000000000f2b30 T NtUserSetWindowWord
    00000000000a4b60 T NtUserSetWinEventHook
    00000000000ab1f0 T NtUserShowCaret
    000000000002a9e0 T NtUserShowCursor
    00000000000d4ae0 T NtUserShowScrollBar
    00000000000f1e30 T NtUserShowWindow
    00000000000f1da0 T NtUserShowWindowAsync
    00000000000e3150 T NtUserSystemParametersInfo
    00000000000e0fd0 T NtUserSystemParametersInfoForDpi
    00000000000b5a80 T NtUserThunkedMenuInfo
    00000000000b6000 T NtUserThunkedMenuItemInfo
    00000000000a8890 T NtUserToUnicodeEx
    00000000000aa550 T NtUserTrackMouseEvent
    00000000000b7ea0 T NtUserTrackPopupMenuEx
    00000000000b6e10 T NtUserTranslateAccelerator
    00000000000c10d0 T NtUserTranslateMessage
    00000000000a3c70 T NtUserUnhookWindowsHookEx
    00000000000a4d00 T NtUserUnhookWinEvent
    00000000000252d0 T NtUserUnregisterClass
    00000000000a9e10 T NtUserUnregisterHotKey
    00000000000a5920 T NtUserUpdateInputContext
    00000000000ed400 T NtUserUpdateLayeredWindow
    00000000000323c0 T NtUserValidateRect
    00000000000a80c0 T NtUserVkKeyScanEx
    00000000000bd0d0 T NtUserWaitForInputIdle
    00000000000ba880 T NtUserWaitMessage
    00000000000315a0 T NtUserWindowFromDC
    00000000000ed970 T NtUserWindowFromPoint
    00000000000e6140 T SetThreadDpiAwarenessContext
    00000000000ebc30 T win32u_get_window_pixel_format
    00000000000f1b70 T win32u_set_window_pixel_format
    00000000000946f0 T __wine_get_file_outline_text_metric
    000000000002f200 T __wine_get_icm_profile
    00000000000e9520 T __wine_get_vulkan_driver
    000000000002f290 T __wine_get_wgl_driver
    00000000000a76a0 T __wine_send_input
    000000000007c370 T __wine_set_user_driver
    0000000000141528 D __wine_unix_call_funcs
  + opt/wine/lib/wine/x86_64-unix/winealsa.so
    0000000000013ca0 D __wine_unix_call_funcs
    0000000000013b80 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/winebus.so
    0000000000006d40 D __wine_unix_call_funcs
  + opt/wine/lib/wine/x86_64-unix/winegstreamer.so
    0000000000017c20 D __wine_unix_call_funcs
    0000000000017b00 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/wineps.so
    000000000000baa0 D __wine_unix_call_funcs
    000000000000ba80 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/winepulse.so
    0000000000013ca0 D __wine_unix_call_funcs
    0000000000013b80 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/winevulkan.so
    00000000000b5ba0 D __wine_unix_call_funcs
    00000000000b4980 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/winex11.so
    000000000007f610 B __bss_start
    000000000007f610 D _edata
    0000000000084438 B _end
    0000000000077d40 D __wine_unix_call_funcs
    0000000000077d00 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/winspool.so
    0000000000003dc0 D __wine_unix_call_funcs
    0000000000003da0 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-unix/ws2_32.so
    0000000000005da0 D __wine_unix_call_funcs
    0000000000005d60 D __wine_unix_call_wow64_funcs
  + opt/wine/lib/wine/x86_64-windows/acledit.dll
  + opt/wine/lib/wine/x86_64-windows/aclui.dll
  + opt/wine/lib/wine/x86_64-windows/activeds.dll
  + opt/wine/lib/wine/x86_64-windows/activeds.tlb
  + opt/wine/lib/wine/x86_64-windows/actxprxy.dll
  + opt/wine/lib/wine/x86_64-windows/adsldp.dll
  + opt/wine/lib/wine/x86_64-windows/adsldpc.dll
  + opt/wine/lib/wine/x86_64-windows/advapi32.dll
  + opt/wine/lib/wine/x86_64-windows/advpack.dll
  + opt/wine/lib/wine/x86_64-windows/amsi.dll
  + opt/wine/lib/wine/x86_64-windows/amstream.dll
  + opt/wine/lib/wine/x86_64-windows/apisetschema.dll
  + opt/wine/lib/wine/x86_64-windows/apphelp.dll
  + opt/wine/lib/wine/x86_64-windows/appwiz.cpl
  + opt/wine/lib/wine/x86_64-windows/appxdeploymentclient.dll
  + opt/wine/lib/wine/x86_64-windows/arp.exe
  + opt/wine/lib/wine/x86_64-windows/aspnet_regiis.exe
  + opt/wine/lib/wine/x86_64-windows/atl.dll
  + opt/wine/lib/wine/x86_64-windows/atl100.dll
  + opt/wine/lib/wine/x86_64-windows/atl110.dll
  + opt/wine/lib/wine/x86_64-windows/atl80.dll
  + opt/wine/lib/wine/x86_64-windows/atl90.dll
  + opt/wine/lib/wine/x86_64-windows/atlthunk.dll
  + opt/wine/lib/wine/x86_64-windows/atmlib.dll
  + opt/wine/lib/wine/x86_64-windows/attrib.exe
  + opt/wine/lib/wine/x86_64-windows/authz.dll
  + opt/wine/lib/wine/x86_64-windows/avicap32.dll
  + opt/wine/lib/wine/x86_64-windows/avifil32.dll
  + opt/wine/lib/wine/x86_64-windows/avrt.dll
  + opt/wine/lib/wine/x86_64-windows/bcrypt.dll
  + opt/wine/lib/wine/x86_64-windows/bcryptprimitives.dll
  + opt/wine/lib/wine/x86_64-windows/bluetoothapis.dll
  + opt/wine/lib/wine/x86_64-windows/browseui.dll
  + opt/wine/lib/wine/x86_64-windows/bthprops.cpl
  + opt/wine/lib/wine/x86_64-windows/cabarc.exe
  + opt/wine/lib/wine/x86_64-windows/cabinet.dll
  + opt/wine/lib/wine/x86_64-windows/cacls.exe
  + opt/wine/lib/wine/x86_64-windows/capi2032.dll
  + opt/wine/lib/wine/x86_64-windows/cards.dll
  + opt/wine/lib/wine/x86_64-windows/cdosys.dll
  + opt/wine/lib/wine/x86_64-windows/certutil.exe
  + opt/wine/lib/wine/x86_64-windows/cfgmgr32.dll
  + opt/wine/lib/wine/x86_64-windows/chcp.com
  + opt/wine/lib/wine/x86_64-windows/clock.exe
  + opt/wine/lib/wine/x86_64-windows/clusapi.dll
  + opt/wine/lib/wine/x86_64-windows/cmd.exe
  + opt/wine/lib/wine/x86_64-windows/cng.sys
  + opt/wine/lib/wine/x86_64-windows/combase.dll
  + opt/wine/lib/wine/x86_64-windows/comcat.dll
  + opt/wine/lib/wine/x86_64-windows/comctl32.dll
  + opt/wine/lib/wine/x86_64-windows/comdlg32.dll
  + opt/wine/lib/wine/x86_64-windows/coml2.dll
  + opt/wine/lib/wine/x86_64-windows/compstui.dll
  + opt/wine/lib/wine/x86_64-windows/comsvcs.dll
  + opt/wine/lib/wine/x86_64-windows/concrt140.dll
  + opt/wine/lib/wine/x86_64-windows/conhost.exe
  + opt/wine/lib/wine/x86_64-windows/connect.dll
  + opt/wine/lib/wine/x86_64-windows/control.exe
  + opt/wine/lib/wine/x86_64-windows/credui.dll
  + opt/wine/lib/wine/x86_64-windows/crtdll.dll
  + opt/wine/lib/wine/x86_64-windows/crypt32.dll
  + opt/wine/lib/wine/x86_64-windows/cryptdlg.dll
  + opt/wine/lib/wine/x86_64-windows/cryptdll.dll
  + opt/wine/lib/wine/x86_64-windows/cryptext.dll
  + opt/wine/lib/wine/x86_64-windows/cryptnet.dll
  + opt/wine/lib/wine/x86_64-windows/cryptowinrt.dll
  + opt/wine/lib/wine/x86_64-windows/cryptsp.dll
  + opt/wine/lib/wine/x86_64-windows/cryptui.dll
  + opt/wine/lib/wine/x86_64-windows/cscript.exe
  + opt/wine/lib/wine/x86_64-windows/ctapi32.dll
  + opt/wine/lib/wine/x86_64-windows/ctl3d32.dll
  + opt/wine/lib/wine/x86_64-windows/d2d1.dll
  + opt/wine/lib/wine/x86_64-windows/d3d10.dll
  + opt/wine/lib/wine/x86_64-windows/d3d10_1.dll
  + opt/wine/lib/wine/x86_64-windows/d3d10core.dll
  + opt/wine/lib/wine/x86_64-windows/d3d11.dll
  + opt/wine/lib/wine/x86_64-windows/d3d12.dll
  + opt/wine/lib/wine/x86_64-windows/d3d12core.dll
  + opt/wine/lib/wine/x86_64-windows/d3d8.dll
  + opt/wine/lib/wine/x86_64-windows/d3d8thk.dll
  + opt/wine/lib/wine/x86_64-windows/d3d9.dll
  + opt/wine/lib/wine/x86_64-windows/d3dcompiler_33.dll
  + opt/wine/lib/wine/x86_64-windows/d3dcompiler_34.dll
  + opt/wine/lib/wine/x86_64-windows/d3dcompiler_35.dll
  + opt/wine/lib/wine/x86_64-windows/d3dcompiler_36.dll
  + opt/wine/lib/wine/x86_64-windows/d3dcompiler_37.dll
  + opt/wine/lib/wine/x86_64-windows/d3dcompiler_38.dll
  + opt/wine/lib/wine/x86_64-windows/d3dcompiler_39.dll
  + opt/wine/lib/wine/x86_64-windows/d3dcompiler_40.dll
  + opt/wine/lib/wine/x86_64-windows/d3dcompiler_41.dll
  + opt/wine/lib/wine/x86_64-windows/d3dcompiler_42.dll
  + opt/wine/lib/wine/x86_64-windows/d3dcompiler_43.dll
  + opt/wine/lib/wine/x86_64-windows/d3dcompiler_46.dll
  + opt/wine/lib/wine/x86_64-windows/d3dcompiler_47.dll
  + opt/wine/lib/wine/x86_64-windows/d3dim.dll
  + opt/wine/lib/wine/x86_64-windows/d3dim700.dll
  + opt/wine/lib/wine/x86_64-windows/d3drm.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx10_33.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx10_34.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx10_35.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx10_36.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx10_37.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx10_38.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx10_39.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx10_40.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx10_41.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx10_42.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx10_43.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx11_42.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx11_43.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_24.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_25.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_26.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_27.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_28.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_29.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_30.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_31.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_32.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_33.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_34.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_35.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_36.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_37.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_38.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_39.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_40.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_41.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_42.dll
  + opt/wine/lib/wine/x86_64-windows/d3dx9_43.dll
  + opt/wine/lib/wine/x86_64-windows/d3dxof.dll
  + opt/wine/lib/wine/x86_64-windows/davclnt.dll
  + opt/wine/lib/wine/x86_64-windows/dbgeng.dll
  + opt/wine/lib/wine/x86_64-windows/dbghelp.dll
  + opt/wine/lib/wine/x86_64-windows/dciman32.dll
  + opt/wine/lib/wine/x86_64-windows/dcomp.dll
  + opt/wine/lib/wine/x86_64-windows/ddraw.dll
  + opt/wine/lib/wine/x86_64-windows/ddrawex.dll
  + opt/wine/lib/wine/x86_64-windows/devenum.dll
  + opt/wine/lib/wine/x86_64-windows/dhcpcsvc.dll
  + opt/wine/lib/wine/x86_64-windows/dhcpcsvc6.dll
  + opt/wine/lib/wine/x86_64-windows/dhtmled.ocx
  + opt/wine/lib/wine/x86_64-windows/diasymreader.dll
  + opt/wine/lib/wine/x86_64-windows/difxapi.dll
  + opt/wine/lib/wine/x86_64-windows/dinput.dll
  + opt/wine/lib/wine/x86_64-windows/dinput8.dll
  + opt/wine/lib/wine/x86_64-windows/directmanipulation.dll
  + opt/wine/lib/wine/x86_64-windows/dism.exe
  + opt/wine/lib/wine/x86_64-windows/dispex.dll
  + opt/wine/lib/wine/x86_64-windows/dllhost.exe
  + opt/wine/lib/wine/x86_64-windows/dmband.dll
  + opt/wine/lib/wine/x86_64-windows/dmcompos.dll
  + opt/wine/lib/wine/x86_64-windows/dmime.dll
  + opt/wine/lib/wine/x86_64-windows/dmloader.dll
  + opt/wine/lib/wine/x86_64-windows/dmscript.dll
  + opt/wine/lib/wine/x86_64-windows/dmstyle.dll
  + opt/wine/lib/wine/x86_64-windows/dmsynth.dll
  + opt/wine/lib/wine/x86_64-windows/dmusic.dll
  + opt/wine/lib/wine/x86_64-windows/dmusic32.dll
  + opt/wine/lib/wine/x86_64-windows/dnsapi.dll
  + opt/wine/lib/wine/x86_64-windows/dplay.dll
  + opt/wine/lib/wine/x86_64-windows/dplaysvr.exe
  + opt/wine/lib/wine/x86_64-windows/dplayx.dll
  + opt/wine/lib/wine/x86_64-windows/dpnaddr.dll
  + opt/wine/lib/wine/x86_64-windows/dpnet.dll
  + opt/wine/lib/wine/x86_64-windows/dpnhpast.dll
  + opt/wine/lib/wine/x86_64-windows/dpnhupnp.dll
  + opt/wine/lib/wine/x86_64-windows/dpnlobby.dll
  + opt/wine/lib/wine/x86_64-windows/dpnsvr.exe
  + opt/wine/lib/wine/x86_64-windows/dpvoice.dll
  + opt/wine/lib/wine/x86_64-windows/dpvsetup.exe
  + opt/wine/lib/wine/x86_64-windows/dpwsockx.dll
  + opt/wine/lib/wine/x86_64-windows/drmclien.dll
  + opt/wine/lib/wine/x86_64-windows/dsdmo.dll
  + opt/wine/lib/wine/x86_64-windows/dsound.dll
  + opt/wine/lib/wine/x86_64-windows/dsquery.dll
  + opt/wine/lib/wine/x86_64-windows/dssenh.dll
  + opt/wine/lib/wine/x86_64-windows/dsuiext.dll
  + opt/wine/lib/wine/x86_64-windows/dswave.dll
  + opt/wine/lib/wine/x86_64-windows/dwmapi.dll
  + opt/wine/lib/wine/x86_64-windows/dwrite.dll
  + opt/wine/lib/wine/x86_64-windows/dx8vb.dll
  + opt/wine/lib/wine/x86_64-windows/dxcore.dll
  + opt/wine/lib/wine/x86_64-windows/dxdiag.exe
  + opt/wine/lib/wine/x86_64-windows/dxdiagn.dll
  + opt/wine/lib/wine/x86_64-windows/dxgi.dll
  + opt/wine/lib/wine/x86_64-windows/dxtrans.dll
  + opt/wine/lib/wine/x86_64-windows/dxva2.dll
  + opt/wine/lib/wine/x86_64-windows/eject.exe
  + opt/wine/lib/wine/x86_64-windows/esent.dll
  + opt/wine/lib/wine/x86_64-windows/evr.dll
  + opt/wine/lib/wine/x86_64-windows/expand.exe
  + opt/wine/lib/wine/x86_64-windows/explorer.exe
  + opt/wine/lib/wine/x86_64-windows/explorerframe.dll
  + opt/wine/lib/wine/x86_64-windows/extrac32.exe
  + opt/wine/lib/wine/x86_64-windows/faultrep.dll
  + opt/wine/lib/wine/x86_64-windows/fc.exe
  + opt/wine/lib/wine/x86_64-windows/feclient.dll
  + opt/wine/lib/wine/x86_64-windows/find.exe
  + opt/wine/lib/wine/x86_64-windows/findstr.exe
  + opt/wine/lib/wine/x86_64-windows/fltlib.dll
  + opt/wine/lib/wine/x86_64-windows/fltmgr.sys
  + opt/wine/lib/wine/x86_64-windows/fntcache.dll
  + opt/wine/lib/wine/x86_64-windows/fontsub.dll
  + opt/wine/lib/wine/x86_64-windows/fsutil.exe
  + opt/wine/lib/wine/x86_64-windows/fusion.dll
  + opt/wine/lib/wine/x86_64-windows/fwpuclnt.dll
  + opt/wine/lib/wine/x86_64-windows/gameux.dll
  + opt/wine/lib/wine/x86_64-windows/gamingtcui.dll
  + opt/wine/lib/wine/x86_64-windows/gdi32.dll
  + opt/wine/lib/wine/x86_64-windows/gdiplus.dll
  + opt/wine/lib/wine/x86_64-windows/geolocation.dll
  + opt/wine/lib/wine/x86_64-windows/glu32.dll
  + opt/wine/lib/wine/x86_64-windows/gpkcsp.dll
  + opt/wine/lib/wine/x86_64-windows/graphicscapture.dll
  + opt/wine/lib/wine/x86_64-windows/hal.dll
  + opt/wine/lib/wine/x86_64-windows/hh.exe
  + opt/wine/lib/wine/x86_64-windows/hhctrl.ocx
  + opt/wine/lib/wine/x86_64-windows/hid.dll
  + opt/wine/lib/wine/x86_64-windows/hidclass.sys
  + opt/wine/lib/wine/x86_64-windows/hidparse.sys
  + opt/wine/lib/wine/x86_64-windows/hlink.dll
  + opt/wine/lib/wine/x86_64-windows/hnetcfg.dll
  + opt/wine/lib/wine/x86_64-windows/hostname.exe
  + opt/wine/lib/wine/x86_64-windows/hrtfapo.dll
  + opt/wine/lib/wine/x86_64-windows/http.sys
  + opt/wine/lib/wine/x86_64-windows/httpapi.dll
  + opt/wine/lib/wine/x86_64-windows/hvsimanagementapi.dll
  + opt/wine/lib/wine/x86_64-windows/ia2comproxy.dll
  + opt/wine/lib/wine/x86_64-windows/icacls.exe
  + opt/wine/lib/wine/x86_64-windows/iccvid.dll
  + opt/wine/lib/wine/x86_64-windows/icinfo.exe
  + opt/wine/lib/wine/x86_64-windows/icmp.dll
  + opt/wine/lib/wine/x86_64-windows/ieframe.dll
  + opt/wine/lib/wine/x86_64-windows/ieproxy.dll
  + opt/wine/lib/wine/x86_64-windows/iexplore.exe
  + opt/wine/lib/wine/x86_64-windows/imaadp32.acm
  + opt/wine/lib/wine/x86_64-windows/imagehlp.dll
  + opt/wine/lib/wine/x86_64-windows/imm32.dll
  + opt/wine/lib/wine/x86_64-windows/inetcomm.dll
  + opt/wine/lib/wine/x86_64-windows/inetcpl.cpl
  + opt/wine/lib/wine/x86_64-windows/inetmib1.dll
  + opt/wine/lib/wine/x86_64-windows/infosoft.dll
  + opt/wine/lib/wine/x86_64-windows/initpki.dll
  + opt/wine/lib/wine/x86_64-windows/inkobj.dll
  + opt/wine/lib/wine/x86_64-windows/inseng.dll
  + opt/wine/lib/wine/x86_64-windows/ipconfig.exe
  + opt/wine/lib/wine/x86_64-windows/iphlpapi.dll
  + opt/wine/lib/wine/x86_64-windows/iprop.dll
  + opt/wine/lib/wine/x86_64-windows/ir50_32.dll
  + opt/wine/lib/wine/x86_64-windows/irprops.cpl
  + opt/wine/lib/wine/x86_64-windows/itircl.dll
  + opt/wine/lib/wine/x86_64-windows/itss.dll
  + opt/wine/lib/wine/x86_64-windows/joy.cpl
  + opt/wine/lib/wine/x86_64-windows/jscript.dll
  + opt/wine/lib/wine/x86_64-windows/jsproxy.dll
  + opt/wine/lib/wine/x86_64-windows/kerberos.dll
  + opt/wine/lib/wine/x86_64-windows/kernel32.dll
  + opt/wine/lib/wine/x86_64-windows/kernelbase.dll
  + opt/wine/lib/wine/x86_64-windows/klist.exe
  + opt/wine/lib/wine/x86_64-windows/ksecdd.sys
  + opt/wine/lib/wine/x86_64-windows/ksproxy.ax
  + opt/wine/lib/wine/x86_64-windows/ksuser.dll
  + opt/wine/lib/wine/x86_64-windows/ktmw32.dll
  + opt/wine/lib/wine/x86_64-windows/l3codeca.acm
  + opt/wine/lib/wine/x86_64-windows/light.msstyles
  + opt/wine/lib/wine/x86_64-windows/loadperf.dll
  + opt/wine/lib/wine/x86_64-windows/localspl.dll
  + opt/wine/lib/wine/x86_64-windows/localui.dll
  + opt/wine/lib/wine/x86_64-windows/lodctr.exe
  + opt/wine/lib/wine/x86_64-windows/lz32.dll
  + opt/wine/lib/wine/x86_64-windows/magnification.dll
  + opt/wine/lib/wine/x86_64-windows/mapi32.dll
  + opt/wine/lib/wine/x86_64-windows/mapistub.dll
  + opt/wine/lib/wine/x86_64-windows/mciavi32.dll
  + opt/wine/lib/wine/x86_64-windows/mcicda.dll
  + opt/wine/lib/wine/x86_64-windows/mciqtz32.dll
  + opt/wine/lib/wine/x86_64-windows/mciseq.dll
  + opt/wine/lib/wine/x86_64-windows/mciwave.dll
  + opt/wine/lib/wine/x86_64-windows/mf.dll
  + opt/wine/lib/wine/x86_64-windows/mf3216.dll
  + opt/wine/lib/wine/x86_64-windows/mferror.dll
  + opt/wine/lib/wine/x86_64-windows/mfmediaengine.dll
  + opt/wine/lib/wine/x86_64-windows/mfplat.dll
  + opt/wine/lib/wine/x86_64-windows/mfplay.dll
  + opt/wine/lib/wine/x86_64-windows/mfreadwrite.dll
  + opt/wine/lib/wine/x86_64-windows/mfsrcsnk.dll
  + opt/wine/lib/wine/x86_64-windows/mgmtapi.dll
  + opt/wine/lib/wine/x86_64-windows/midimap.dll
  + opt/wine/lib/wine/x86_64-windows/mlang.dll
  + opt/wine/lib/wine/x86_64-windows/mmcndmgr.dll
  + opt/wine/lib/wine/x86_64-windows/mmdevapi.dll
  + opt/wine/lib/wine/x86_64-windows/mofcomp.exe
  + opt/wine/lib/wine/x86_64-windows/mountmgr.sys
  + opt/wine/lib/wine/x86_64-windows/mp3dmod.dll
  + opt/wine/lib/wine/x86_64-windows/mpr.dll
  + opt/wine/lib/wine/x86_64-windows/mprapi.dll
  + opt/wine/lib/wine/x86_64-windows/msacm32.dll
  + opt/wine/lib/wine/x86_64-windows/msacm32.drv
  + opt/wine/lib/wine/x86_64-windows/msado15.dll
  + opt/wine/lib/wine/x86_64-windows/msadp32.acm
  + opt/wine/lib/wine/x86_64-windows/msasn1.dll
  + opt/wine/lib/wine/x86_64-windows/msauddecmft.dll
  + opt/wine/lib/wine/x86_64-windows/mscat32.dll
  + opt/wine/lib/wine/x86_64-windows/mscms.dll
  + opt/wine/lib/wine/x86_64-windows/mscoree.dll
  + opt/wine/lib/wine/x86_64-windows/mscorwks.dll
  + opt/wine/lib/wine/x86_64-windows/msctf.dll
  + opt/wine/lib/wine/x86_64-windows/msctfmonitor.dll
  + opt/wine/lib/wine/x86_64-windows/msctfp.dll
  + opt/wine/lib/wine/x86_64-windows/msdaps.dll
  + opt/wine/lib/wine/x86_64-windows/msdasql.dll
  + opt/wine/lib/wine/x86_64-windows/msdelta.dll
  + opt/wine/lib/wine/x86_64-windows/msdmo.dll
  + opt/wine/lib/wine/x86_64-windows/msdrm.dll
  + opt/wine/lib/wine/x86_64-windows/msftedit.dll
  + opt/wine/lib/wine/x86_64-windows/msg711.acm
  + opt/wine/lib/wine/x86_64-windows/msgsm32.acm
  + opt/wine/lib/wine/x86_64-windows/mshta.exe
  + opt/wine/lib/wine/x86_64-windows/mshtml.dll
  + opt/wine/lib/wine/x86_64-windows/mshtml.tlb
  + opt/wine/lib/wine/x86_64-windows/msi.dll
  + opt/wine/lib/wine/x86_64-windows/msidb.exe
  + opt/wine/lib/wine/x86_64-windows/msident.dll
  + opt/wine/lib/wine/x86_64-windows/msiexec.exe
  + opt/wine/lib/wine/x86_64-windows/msimg32.dll
  + opt/wine/lib/wine/x86_64-windows/msimsg.dll
  + opt/wine/lib/wine/x86_64-windows/msimtf.dll
  + opt/wine/lib/wine/x86_64-windows/msinfo32.exe
  + opt/wine/lib/wine/x86_64-windows/msisip.dll
  + opt/wine/lib/wine/x86_64-windows/msisys.ocx
  + opt/wine/lib/wine/x86_64-windows/msls31.dll
  + opt/wine/lib/wine/x86_64-windows/msmpeg2vdec.dll
  + opt/wine/lib/wine/x86_64-windows/msnet32.dll
  + opt/wine/lib/wine/x86_64-windows/mspatcha.dll
  + opt/wine/lib/wine/x86_64-windows/msports.dll
  + opt/wine/lib/wine/x86_64-windows/msrle32.dll
  + opt/wine/lib/wine/x86_64-windows/msscript.ocx
  + opt/wine/lib/wine/x86_64-windows/mssign32.dll
  + opt/wine/lib/wine/x86_64-windows/mssip32.dll
  + opt/wine/lib/wine/x86_64-windows/mstask.dll
  + opt/wine/lib/wine/x86_64-windows/msttsengine.dll
  + opt/wine/lib/wine/x86_64-windows/msv1_0.dll
  + opt/wine/lib/wine/x86_64-windows/msvcirt.dll
  + opt/wine/lib/wine/x86_64-windows/msvcm80.dll
  + opt/wine/lib/wine/x86_64-windows/msvcm90.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp100.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp110.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp120.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp120_app.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp140.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp140_1.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp140_2.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp140_atomic_wait.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp140_codecvt_ids.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp60.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp70.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp71.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp80.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp90.dll
  + opt/wine/lib/wine/x86_64-windows/msvcp_win.dll
  + opt/wine/lib/wine/x86_64-windows/msvcr100.dll
  + opt/wine/lib/wine/x86_64-windows/msvcr110.dll
  + opt/wine/lib/wine/x86_64-windows/msvcr120.dll
  + opt/wine/lib/wine/x86_64-windows/msvcr120_app.dll
  + opt/wine/lib/wine/x86_64-windows/msvcr70.dll
  + opt/wine/lib/wine/x86_64-windows/msvcr71.dll
  + opt/wine/lib/wine/x86_64-windows/msvcr80.dll
  + opt/wine/lib/wine/x86_64-windows/msvcr90.dll
  + opt/wine/lib/wine/x86_64-windows/msvcrt.dll
  + opt/wine/lib/wine/x86_64-windows/msvcrt20.dll
  + opt/wine/lib/wine/x86_64-windows/msvcrt40.dll
  + opt/wine/lib/wine/x86_64-windows/msvcrtd.dll
  + opt/wine/lib/wine/x86_64-windows/msvfw32.dll
  + opt/wine/lib/wine/x86_64-windows/msvidc32.dll
  + opt/wine/lib/wine/x86_64-windows/mswsock.dll
  + opt/wine/lib/wine/x86_64-windows/msxml.dll
  + opt/wine/lib/wine/x86_64-windows/msxml2.dll
  + opt/wine/lib/wine/x86_64-windows/msxml3.dll
  + opt/wine/lib/wine/x86_64-windows/msxml4.dll
  + opt/wine/lib/wine/x86_64-windows/msxml6.dll
  + opt/wine/lib/wine/x86_64-windows/mtxdm.dll
  + opt/wine/lib/wine/x86_64-windows/ncrypt.dll
  + opt/wine/lib/wine/x86_64-windows/nddeapi.dll
  + opt/wine/lib/wine/x86_64-windows/ndis.sys
  + opt/wine/lib/wine/x86_64-windows/net.exe
  + opt/wine/lib/wine/x86_64-windows/netapi32.dll
  + opt/wine/lib/wine/x86_64-windows/netcfgx.dll
  + opt/wine/lib/wine/x86_64-windows/netio.sys
  + opt/wine/lib/wine/x86_64-windows/netprofm.dll
  + opt/wine/lib/wine/x86_64-windows/netsh.exe
  + opt/wine/lib/wine/x86_64-windows/netstat.exe
  + opt/wine/lib/wine/x86_64-windows/netutils.dll
  + opt/wine/lib/wine/x86_64-windows/newdev.dll
  + opt/wine/lib/wine/x86_64-windows/ngen.exe
  + opt/wine/lib/wine/x86_64-windows/ninput.dll
  + opt/wine/lib/wine/x86_64-windows/normaliz.dll
  + opt/wine/lib/wine/x86_64-windows/notepad.exe
  + opt/wine/lib/wine/x86_64-windows/npmshtml.dll
  + opt/wine/lib/wine/x86_64-windows/npptools.dll
  + opt/wine/lib/wine/x86_64-windows/nsi.dll
  + opt/wine/lib/wine/x86_64-windows/nsiproxy.sys
  + opt/wine/lib/wine/x86_64-windows/ntdll.dll
  + opt/wine/lib/wine/x86_64-windows/ntdsapi.dll
  + opt/wine/lib/wine/x86_64-windows/ntoskrnl.exe
  + opt/wine/lib/wine/x86_64-windows/ntprint.dll
  + opt/wine/lib/wine/x86_64-windows/objsel.dll
  + opt/wine/lib/wine/x86_64-windows/odbc32.dll
  + opt/wine/lib/wine/x86_64-windows/odbcbcp.dll
  + opt/wine/lib/wine/x86_64-windows/odbccp32.dll
  + opt/wine/lib/wine/x86_64-windows/odbccu32.dll
  + opt/wine/lib/wine/x86_64-windows/ole32.dll
  + opt/wine/lib/wine/x86_64-windows/oleacc.dll
  + opt/wine/lib/wine/x86_64-windows/oleaut32.dll
  + opt/wine/lib/wine/x86_64-windows/olecli32.dll
  + opt/wine/lib/wine/x86_64-windows/oledb32.dll
  + opt/wine/lib/wine/x86_64-windows/oledlg.dll
  + opt/wine/lib/wine/x86_64-windows/olepro32.dll
  + opt/wine/lib/wine/x86_64-windows/olesvr32.dll
  + opt/wine/lib/wine/x86_64-windows/olethk32.dll
  + opt/wine/lib/wine/x86_64-windows/oleview.exe
  + opt/wine/lib/wine/x86_64-windows/opcservices.dll
  + opt/wine/lib/wine/x86_64-windows/opencl.dll
  + opt/wine/lib/wine/x86_64-windows/opengl32.dll
  + opt/wine/lib/wine/x86_64-windows/packager.dll
  + opt/wine/lib/wine/x86_64-windows/pdh.dll
  + opt/wine/lib/wine/x86_64-windows/photometadatahandler.dll
  + opt/wine/lib/wine/x86_64-windows/pidgen.dll
  + opt/wine/lib/wine/x86_64-windows/ping.exe
  + opt/wine/lib/wine/x86_64-windows/plugplay.exe
  + opt/wine/lib/wine/x86_64-windows/pnputil.exe
  + opt/wine/lib/wine/x86_64-windows/powershell.exe
  + opt/wine/lib/wine/x86_64-windows/powrprof.dll
  + opt/wine/lib/wine/x86_64-windows/presentationfontcache.exe
  + opt/wine/lib/wine/x86_64-windows/printui.dll
  + opt/wine/lib/wine/x86_64-windows/prntvpt.dll
  + opt/wine/lib/wine/x86_64-windows/progman.exe
  + opt/wine/lib/wine/x86_64-windows/propsys.dll
  + opt/wine/lib/wine/x86_64-windows/psapi.dll
  + opt/wine/lib/wine/x86_64-windows/pstorec.dll
  + opt/wine/lib/wine/x86_64-windows/pwrshplugin.dll
  + opt/wine/lib/wine/x86_64-windows/qasf.dll
  + opt/wine/lib/wine/x86_64-windows/qcap.dll
  + opt/wine/lib/wine/x86_64-windows/qdvd.dll
  + opt/wine/lib/wine/x86_64-windows/qedit.dll
  + opt/wine/lib/wine/x86_64-windows/qmgr.dll
  + opt/wine/lib/wine/x86_64-windows/qmgrprxy.dll
  + opt/wine/lib/wine/x86_64-windows/quartz.dll
  + opt/wine/lib/wine/x86_64-windows/query.dll
  + opt/wine/lib/wine/x86_64-windows/qwave.dll
  + opt/wine/lib/wine/x86_64-windows/rasapi32.dll
  + opt/wine/lib/wine/x86_64-windows/rasdlg.dll
  + opt/wine/lib/wine/x86_64-windows/reg.exe
  + opt/wine/lib/wine/x86_64-windows/regapi.dll
  + opt/wine/lib/wine/x86_64-windows/regasm.exe
  + opt/wine/lib/wine/x86_64-windows/regedit.exe
  + opt/wine/lib/wine/x86_64-windows/regini.exe
  + opt/wine/lib/wine/x86_64-windows/regsvcs.exe
  + opt/wine/lib/wine/x86_64-windows/regsvr32.exe
  + opt/wine/lib/wine/x86_64-windows/resutils.dll
  + opt/wine/lib/wine/x86_64-windows/riched20.dll
  + opt/wine/lib/wine/x86_64-windows/riched32.dll
  + opt/wine/lib/wine/x86_64-windows/robocopy.exe
  + opt/wine/lib/wine/x86_64-windows/rpcrt4.dll
  + opt/wine/lib/wine/x86_64-windows/rpcss.exe
  + opt/wine/lib/wine/x86_64-windows/rsabase.dll
  + opt/wine/lib/wine/x86_64-windows/rsaenh.dll
  + opt/wine/lib/wine/x86_64-windows/rstrtmgr.dll
  + opt/wine/lib/wine/x86_64-windows/rtutils.dll
  + opt/wine/lib/wine/x86_64-windows/rtworkq.dll
  + opt/wine/lib/wine/x86_64-windows/rundll32.exe
  + opt/wine/lib/wine/x86_64-windows/samlib.dll
  + opt/wine/lib/wine/x86_64-windows/sane.ds
  + opt/wine/lib/wine/x86_64-windows/sapi.dll
  + opt/wine/lib/wine/x86_64-windows/sas.dll
  + opt/wine/lib/wine/x86_64-windows/sc.exe
  + opt/wine/lib/wine/x86_64-windows/scarddlg.dll
  + opt/wine/lib/wine/x86_64-windows/scardsvr.dll
  + opt/wine/lib/wine/x86_64-windows/sccbase.dll
  + opt/wine/lib/wine/x86_64-windows/schannel.dll
  + opt/wine/lib/wine/x86_64-windows/schedsvc.dll
  + opt/wine/lib/wine/x86_64-windows/schtasks.exe
  + opt/wine/lib/wine/x86_64-windows/scrobj.dll
  + opt/wine/lib/wine/x86_64-windows/scrrun.dll
  + opt/wine/lib/wine/x86_64-windows/scsiport.sys
  + opt/wine/lib/wine/x86_64-windows/sdbinst.exe
  + opt/wine/lib/wine/x86_64-windows/secedit.exe
  + opt/wine/lib/wine/x86_64-windows/sechost.dll
  + opt/wine/lib/wine/x86_64-windows/secur32.dll
  + opt/wine/lib/wine/x86_64-windows/security.dll
  + opt/wine/lib/wine/x86_64-windows/sensapi.dll
  + opt/wine/lib/wine/x86_64-windows/serialui.dll
  + opt/wine/lib/wine/x86_64-windows/servicemodelreg.exe
  + opt/wine/lib/wine/x86_64-windows/services.exe
  + opt/wine/lib/wine/x86_64-windows/setupapi.dll
  + opt/wine/lib/wine/x86_64-windows/setx.exe
  + opt/wine/lib/wine/x86_64-windows/sfc.dll
  + opt/wine/lib/wine/x86_64-windows/sfc_os.dll
  + opt/wine/lib/wine/x86_64-windows/shcore.dll
  + opt/wine/lib/wine/x86_64-windows/shdoclc.dll
  + opt/wine/lib/wine/x86_64-windows/shdocvw.dll
  + opt/wine/lib/wine/x86_64-windows/shell32.dll
  + opt/wine/lib/wine/x86_64-windows/shfolder.dll
  + opt/wine/lib/wine/x86_64-windows/shlwapi.dll
  + opt/wine/lib/wine/x86_64-windows/shutdown.exe
  + opt/wine/lib/wine/x86_64-windows/slbcsp.dll
  + opt/wine/lib/wine/x86_64-windows/slc.dll
  + opt/wine/lib/wine/x86_64-windows/snmpapi.dll
  + opt/wine/lib/wine/x86_64-windows/softpub.dll
  + opt/wine/lib/wine/x86_64-windows/spoolss.dll
  + opt/wine/lib/wine/x86_64-windows/spoolsv.exe
  + opt/wine/lib/wine/x86_64-windows/sppc.dll
  + opt/wine/lib/wine/x86_64-windows/srclient.dll
  + opt/wine/lib/wine/x86_64-windows/srvcli.dll
  + opt/wine/lib/wine/x86_64-windows/srvsvc.dll
  + opt/wine/lib/wine/x86_64-windows/sspicli.dll
  + opt/wine/lib/wine/x86_64-windows/start.exe
  + opt/wine/lib/wine/x86_64-windows/stdole2.tlb
  + opt/wine/lib/wine/x86_64-windows/stdole32.tlb
  + opt/wine/lib/wine/x86_64-windows/sti.dll
  + opt/wine/lib/wine/x86_64-windows/strmdll.dll
  + opt/wine/lib/wine/x86_64-windows/subst.exe
  + opt/wine/lib/wine/x86_64-windows/svchost.exe
  + opt/wine/lib/wine/x86_64-windows/svrapi.dll
  + opt/wine/lib/wine/x86_64-windows/sxs.dll
  + opt/wine/lib/wine/x86_64-windows/systeminfo.exe
  + opt/wine/lib/wine/x86_64-windows/t2embed.dll
  + opt/wine/lib/wine/x86_64-windows/tapi32.dll
  + opt/wine/lib/wine/x86_64-windows/taskkill.exe
  + opt/wine/lib/wine/x86_64-windows/tasklist.exe
  + opt/wine/lib/wine/x86_64-windows/taskmgr.exe
  + opt/wine/lib/wine/x86_64-windows/taskschd.dll
  + opt/wine/lib/wine/x86_64-windows/tbs.dll
  + opt/wine/lib/wine/x86_64-windows/tdh.dll
  + opt/wine/lib/wine/x86_64-windows/tdi.sys
  + opt/wine/lib/wine/x86_64-windows/termsv.exe
  + opt/wine/lib/wine/x86_64-windows/threadpoolwinrt.dll
  + opt/wine/lib/wine/x86_64-windows/traffic.dll
  + opt/wine/lib/wine/x86_64-windows/twain_32.dll
  + opt/wine/lib/wine/x86_64-windows/twinapi.appcore.dll
  + opt/wine/lib/wine/x86_64-windows/tzres.dll
  + opt/wine/lib/wine/x86_64-windows/ucrtbase.dll
  + opt/wine/lib/wine/x86_64-windows/uianimation.dll
  + opt/wine/lib/wine/x86_64-windows/uiautomationcore.dll
  + opt/wine/lib/wine/x86_64-windows/uiribbon.dll
  + opt/wine/lib/wine/x86_64-windows/unicows.dll
  + opt/wine/lib/wine/x86_64-windows/uninstaller.exe
  + opt/wine/lib/wine/x86_64-windows/unlodctr.exe
  + opt/wine/lib/wine/x86_64-windows/updspapi.dll
  + opt/wine/lib/wine/x86_64-windows/url.dll
  + opt/wine/lib/wine/x86_64-windows/urlmon.dll
  + opt/wine/lib/wine/x86_64-windows/usbd.sys
  + opt/wine/lib/wine/x86_64-windows/user32.dll
  + opt/wine/lib/wine/x86_64-windows/userenv.dll
  + opt/wine/lib/wine/x86_64-windows/usp10.dll
  + opt/wine/lib/wine/x86_64-windows/utildll.dll
  + opt/wine/lib/wine/x86_64-windows/uxtheme.dll
  + opt/wine/lib/wine/x86_64-windows/vbscript.dll
  + opt/wine/lib/wine/x86_64-windows/vcomp.dll
  + opt/wine/lib/wine/x86_64-windows/vcomp100.dll
  + opt/wine/lib/wine/x86_64-windows/vcomp110.dll
  + opt/wine/lib/wine/x86_64-windows/vcomp120.dll
  + opt/wine/lib/wine/x86_64-windows/vcomp140.dll
  + opt/wine/lib/wine/x86_64-windows/vcomp90.dll
  + opt/wine/lib/wine/x86_64-windows/vcruntime140.dll
  + opt/wine/lib/wine/x86_64-windows/vcruntime140_1.dll
  + opt/wine/lib/wine/x86_64-windows/vdmdbg.dll
  + opt/wine/lib/wine/x86_64-windows/version.dll
  + opt/wine/lib/wine/x86_64-windows/vga.dll
  + opt/wine/lib/wine/x86_64-windows/view.exe
  + opt/wine/lib/wine/x86_64-windows/virtdisk.dll
  + opt/wine/lib/wine/x86_64-windows/vssapi.dll
  + opt/wine/lib/wine/x86_64-windows/vulkan-1.dll
  + opt/wine/lib/wine/x86_64-windows/wbemdisp.dll
  + opt/wine/lib/wine/x86_64-windows/wbemprox.dll
  + opt/wine/lib/wine/x86_64-windows/wdscore.dll
  + opt/wine/lib/wine/x86_64-windows/webservices.dll
  + opt/wine/lib/wine/x86_64-windows/websocket.dll
  + opt/wine/lib/wine/x86_64-windows/wer.dll
  + opt/wine/lib/wine/x86_64-windows/wevtapi.dll
  + opt/wine/lib/wine/x86_64-windows/wevtsvc.dll
  + opt/wine/lib/wine/x86_64-windows/wevtutil.exe
  + opt/wine/lib/wine/x86_64-windows/where.exe
  + opt/wine/lib/wine/x86_64-windows/whoami.exe
  + opt/wine/lib/wine/x86_64-windows/wiaservc.dll
  + opt/wine/lib/wine/x86_64-windows/wimgapi.dll
  + opt/wine/lib/wine/x86_64-windows/win32u.dll
  + opt/wine/lib/wine/x86_64-windows/windows.applicationmodel.dll
  + opt/wine/lib/wine/x86_64-windows/windows.devices.bluetooth.dll
  + opt/wine/lib/wine/x86_64-windows/windows.devices.enumeration.dll
  + opt/wine/lib/wine/x86_64-windows/windows.devices.usb.dll
  + opt/wine/lib/wine/x86_64-windows/windows.gaming.input.dll
  + opt/wine/lib/wine/x86_64-windows/windows.gaming.ui.gamebar.dll
  + opt/wine/lib/wine/x86_64-windows/windows.globalization.dll
  + opt/wine/lib/wine/x86_64-windows/windows.media.devices.dll
  + opt/wine/lib/wine/x86_64-windows/windows.media.dll
  + opt/wine/lib/wine/x86_64-windows/windows.media.mediacontrol.dll
  + opt/wine/lib/wine/x86_64-windows/windows.media.speech.dll
  + opt/wine/lib/wine/x86_64-windows/windows.networking.dll
  + opt/wine/lib/wine/x86_64-windows/windows.networking.hostname.dll
  + opt/wine/lib/wine/x86_64-windows/windows.perception.stub.dll
  + opt/wine/lib/wine/x86_64-windows/windows.security.credentials.ui.userconsentverifier.dll
  + opt/wine/lib/wine/x86_64-windows/windows.storage.applicationdata.dll
  + opt/wine/lib/wine/x86_64-windows/windows.system.profile.systemmanufacturers.dll
  + opt/wine/lib/wine/x86_64-windows/windows.ui.dll
  + opt/wine/lib/wine/x86_64-windows/windowscodecs.dll
  + opt/wine/lib/wine/x86_64-windows/windowscodecsext.dll
  + opt/wine/lib/wine/x86_64-windows/winealsa.drv
  + opt/wine/lib/wine/x86_64-windows/wineboot.exe
  + opt/wine/lib/wine/x86_64-windows/winebrowser.exe
  + opt/wine/lib/wine/x86_64-windows/winebus.sys
  + opt/wine/lib/wine/x86_64-windows/winecfg.exe
  + opt/wine/lib/wine/x86_64-windows/wineconsole.exe
  + opt/wine/lib/wine/x86_64-windows/wined3d.dll
  + opt/wine/lib/wine/x86_64-windows/winedbg.exe
  + opt/wine/lib/wine/x86_64-windows/winedevice.exe
  + opt/wine/lib/wine/x86_64-windows/winefile.exe
  + opt/wine/lib/wine/x86_64-windows/winegstreamer.dll
  + opt/wine/lib/wine/x86_64-windows/winehid.sys
  + opt/wine/lib/wine/x86_64-windows/winemapi.dll
  + opt/wine/lib/wine/x86_64-windows/winemenubuilder.exe
  + opt/wine/lib/wine/x86_64-windows/winemine.exe
  + opt/wine/lib/wine/x86_64-windows/winemsibuilder.exe
  + opt/wine/lib/wine/x86_64-windows/winepath.exe
  + opt/wine/lib/wine/x86_64-windows/wineps.drv
  + opt/wine/lib/wine/x86_64-windows/winepulse.drv
  + opt/wine/lib/wine/x86_64-windows/winevulkan.dll
  + opt/wine/lib/wine/x86_64-windows/winex11.drv
  + opt/wine/lib/wine/x86_64-windows/winexinput.sys
  + opt/wine/lib/wine/x86_64-windows/wing32.dll
  + opt/wine/lib/wine/x86_64-windows/winhlp32.exe
  + opt/wine/lib/wine/x86_64-windows/winhttp.dll
  + opt/wine/lib/wine/x86_64-windows/wininet.dll
  + opt/wine/lib/wine/x86_64-windows/winmgmt.exe
  + opt/wine/lib/wine/x86_64-windows/winmm.dll
  + opt/wine/lib/wine/x86_64-windows/winnls32.dll
  + opt/wine/lib/wine/x86_64-windows/winprint.dll
  + opt/wine/lib/wine/x86_64-windows/winspool.drv
  + opt/wine/lib/wine/x86_64-windows/winsta.dll
  + opt/wine/lib/wine/x86_64-windows/wintab32.dll
  + opt/wine/lib/wine/x86_64-windows/wintrust.dll
  + opt/wine/lib/wine/x86_64-windows/wintypes.dll
  + opt/wine/lib/wine/x86_64-windows/winusb.dll
  + opt/wine/lib/wine/x86_64-windows/winver.exe
  + opt/wine/lib/wine/x86_64-windows/wlanapi.dll
  + opt/wine/lib/wine/x86_64-windows/wlanui.dll
  + opt/wine/lib/wine/x86_64-windows/wldap32.dll
  + opt/wine/lib/wine/x86_64-windows/wldp.dll
  + opt/wine/lib/wine/x86_64-windows/wmasf.dll
  + opt/wine/lib/wine/x86_64-windows/wmi.dll
  + opt/wine/lib/wine/x86_64-windows/wmic.exe
  + opt/wine/lib/wine/x86_64-windows/wmiutils.dll
  + opt/wine/lib/wine/x86_64-windows/wmp.dll
  + opt/wine/lib/wine/x86_64-windows/wmphoto.dll
  + opt/wine/lib/wine/x86_64-windows/wmplayer.exe
  + opt/wine/lib/wine/x86_64-windows/wmvcore.dll
  + opt/wine/lib/wine/x86_64-windows/wnaspi32.dll
  + opt/wine/lib/wine/x86_64-windows/wofutil.dll
  + opt/wine/lib/wine/x86_64-windows/wordpad.exe
  + opt/wine/lib/wine/x86_64-windows/wow64.dll
  + opt/wine/lib/wine/x86_64-windows/wow64cpu.dll
  + opt/wine/lib/wine/x86_64-windows/wow64win.dll
  + opt/wine/lib/wine/x86_64-windows/wpc.dll
  + opt/wine/lib/wine/x86_64-windows/write.exe
  + opt/wine/lib/wine/x86_64-windows/ws2_32.dll
  + opt/wine/lib/wine/x86_64-windows/wscript.exe
  + opt/wine/lib/wine/x86_64-windows/wsdapi.dll
  + opt/wine/lib/wine/x86_64-windows/wshom.ocx
  + opt/wine/lib/wine/x86_64-windows/wsnmp32.dll
  + opt/wine/lib/wine/x86_64-windows/wsock32.dll
  + opt/wine/lib/wine/x86_64-windows/wtsapi32.dll
  + opt/wine/lib/wine/x86_64-windows/wuapi.dll
  + opt/wine/lib/wine/x86_64-windows/wuaueng.dll
  + opt/wine/lib/wine/x86_64-windows/wuauserv.exe
  + opt/wine/lib/wine/x86_64-windows/wusa.exe
  + opt/wine/lib/wine/x86_64-windows/x3daudio1_0.dll
  + opt/wine/lib/wine/x86_64-windows/x3daudio1_1.dll
  + opt/wine/lib/wine/x86_64-windows/x3daudio1_2.dll
  + opt/wine/lib/wine/x86_64-windows/x3daudio1_3.dll
  + opt/wine/lib/wine/x86_64-windows/x3daudio1_4.dll
  + opt/wine/lib/wine/x86_64-windows/x3daudio1_5.dll
  + opt/wine/lib/wine/x86_64-windows/x3daudio1_6.dll
  + opt/wine/lib/wine/x86_64-windows/x3daudio1_7.dll
  + opt/wine/lib/wine/x86_64-windows/xactengine2_0.dll
  + opt/wine/lib/wine/x86_64-windows/xactengine2_4.dll
  + opt/wine/lib/wine/x86_64-windows/xactengine2_7.dll
  + opt/wine/lib/wine/x86_64-windows/xactengine2_9.dll
  + opt/wine/lib/wine/x86_64-windows/xactengine3_0.dll
  + opt/wine/lib/wine/x86_64-windows/xactengine3_1.dll
  + opt/wine/lib/wine/x86_64-windows/xactengine3_2.dll
  + opt/wine/lib/wine/x86_64-windows/xactengine3_3.dll
  + opt/wine/lib/wine/x86_64-windows/xactengine3_4.dll
  + opt/wine/lib/wine/x86_64-windows/xactengine3_5.dll
  + opt/wine/lib/wine/x86_64-windows/xactengine3_6.dll
  + opt/wine/lib/wine/x86_64-windows/xactengine3_7.dll
  + opt/wine/lib/wine/x86_64-windows/xapofx1_1.dll
  + opt/wine/lib/wine/x86_64-windows/xapofx1_2.dll
  + opt/wine/lib/wine/x86_64-windows/xapofx1_3.dll
  + opt/wine/lib/wine/x86_64-windows/xapofx1_4.dll
  + opt/wine/lib/wine/x86_64-windows/xapofx1_5.dll
  + opt/wine/lib/wine/x86_64-windows/xaudio2_0.dll
  + opt/wine/lib/wine/x86_64-windows/xaudio2_1.dll
  + opt/wine/lib/wine/x86_64-windows/xaudio2_2.dll
  + opt/wine/lib/wine/x86_64-windows/xaudio2_3.dll
  + opt/wine/lib/wine/x86_64-windows/xaudio2_4.dll
  + opt/wine/lib/wine/x86_64-windows/xaudio2_5.dll
  + opt/wine/lib/wine/x86_64-windows/xaudio2_6.dll
  + opt/wine/lib/wine/x86_64-windows/xaudio2_7.dll
  + opt/wine/lib/wine/x86_64-windows/xaudio2_8.dll
  + opt/wine/lib/wine/x86_64-windows/xaudio2_9.dll
  + opt/wine/lib/wine/x86_64-windows/xcopy.exe
  + opt/wine/lib/wine/x86_64-windows/xinput1_1.dll
  + opt/wine/lib/wine/x86_64-windows/xinput1_2.dll
  + opt/wine/lib/wine/x86_64-windows/xinput1_3.dll
  + opt/wine/lib/wine/x86_64-windows/xinput1_4.dll
  + opt/wine/lib/wine/x86_64-windows/xinput9_1_0.dll
  + opt/wine/lib/wine/x86_64-windows/xinputuap.dll
  + opt/wine/lib/wine/x86_64-windows/xmllite.dll
  + opt/wine/lib/wine/x86_64-windows/xolehlp.dll
  + opt/wine/lib/wine/x86_64-windows/xpsprint.dll
  + opt/wine/lib/wine/x86_64-windows/xpssvcs.dll
  + opt/wine/share/wine/fonts/coue1255.fon
  + opt/wine/share/wine/fonts/coue1256.fon
  + opt/wine/share/wine/fonts/coue1257.fon
  + opt/wine/share/wine/fonts/coure.fon
  + opt/wine/share/wine/fonts/couree.fon
  + opt/wine/share/wine/fonts/coureg.fon
  + opt/wine/share/wine/fonts/courer.fon
  + opt/wine/share/wine/fonts/couret.fon
  + opt/wine/share/wine/fonts/cvgasys.fon
  + opt/wine/share/wine/fonts/hvgasys.fon
  + opt/wine/share/wine/fonts/jsmalle.fon
  + opt/wine/share/wine/fonts/jvgafix.fon
  + opt/wine/share/wine/fonts/jvgasys.fon
  + opt/wine/share/wine/fonts/marlett.ttf
  + opt/wine/share/wine/fonts/smae1255.fon
  + opt/wine/share/wine/fonts/smae1256.fon
  + opt/wine/share/wine/fonts/smae1257.fon
  + opt/wine/share/wine/fonts/smalle.fon
  + opt/wine/share/wine/fonts/smallee.fon
  + opt/wine/share/wine/fonts/smalleg.fon
  + opt/wine/share/wine/fonts/smaller.fon
  + opt/wine/share/wine/fonts/smallet.fon
  + opt/wine/share/wine/fonts/ssee1255.fon
  + opt/wine/share/wine/fonts/ssee1256.fon
  + opt/wine/share/wine/fonts/ssee1257.fon
  + opt/wine/share/wine/fonts/ssee874.fon
  + opt/wine/share/wine/fonts/ssef1255.fon
  + opt/wine/share/wine/fonts/ssef1256.fon
  + opt/wine/share/wine/fonts/ssef1257.fon
  + opt/wine/share/wine/fonts/ssef874.fon
  + opt/wine/share/wine/fonts/sserife.fon
  + opt/wine/share/wine/fonts/sserifee.fon
  + opt/wine/share/wine/fonts/sserifeg.fon
  + opt/wine/share/wine/fonts/sserifer.fon
  + opt/wine/share/wine/fonts/sserifet.fon
  + opt/wine/share/wine/fonts/sseriff.fon
  + opt/wine/share/wine/fonts/sseriffe.fon
  + opt/wine/share/wine/fonts/sseriffg.fon
  + opt/wine/share/wine/fonts/sseriffr.fon
  + opt/wine/share/wine/fonts/sserifft.fon
  + opt/wine/share/wine/fonts/svgasys.fon
  + opt/wine/share/wine/fonts/symbol.ttf
  + opt/wine/share/wine/fonts/tahoma.ttf
  + opt/wine/share/wine/fonts/tahomabd.ttf
  + opt/wine/share/wine/fonts/vgafix.fon
  + opt/wine/share/wine/fonts/vgas1255.fon
  + opt/wine/share/wine/fonts/vgas1256.fon
  + opt/wine/share/wine/fonts/vgas1257.fon
  + opt/wine/share/wine/fonts/vgas874.fon
  + opt/wine/share/wine/fonts/vgasys.fon
  + opt/wine/share/wine/fonts/vgasyse.fon
  + opt/wine/share/wine/fonts/vgasysg.fon
  + opt/wine/share/wine/fonts/vgasysr.fon
  + opt/wine/share/wine/fonts/vgasyst.fon
  + opt/wine/share/wine/fonts/webdings.ttf
  + opt/wine/share/wine/fonts/wingding.ttf
  + opt/wine/share/wine/nls/c_037.nls
  + opt/wine/share/wine/nls/c_10000.nls
  + opt/wine/share/wine/nls/c_10001.nls
  + opt/wine/share/wine/nls/c_10002.nls
  + opt/wine/share/wine/nls/c_10003.nls
  + opt/wine/share/wine/nls/c_10004.nls
  + opt/wine/share/wine/nls/c_10005.nls
  + opt/wine/share/wine/nls/c_10006.nls
  + opt/wine/share/wine/nls/c_10007.nls
  + opt/wine/share/wine/nls/c_10008.nls
  + opt/wine/share/wine/nls/c_10010.nls
  + opt/wine/share/wine/nls/c_10017.nls
  + opt/wine/share/wine/nls/c_10021.nls
  + opt/wine/share/wine/nls/c_10029.nls
  + opt/wine/share/wine/nls/c_10079.nls
  + opt/wine/share/wine/nls/c_10081.nls
  + opt/wine/share/wine/nls/c_10082.nls
  + opt/wine/share/wine/nls/c_1026.nls
  + opt/wine/share/wine/nls/c_1250.nls
  + opt/wine/share/wine/nls/c_1251.nls
  + opt/wine/share/wine/nls/c_1252.nls
  + opt/wine/share/wine/nls/c_1253.nls
  + opt/wine/share/wine/nls/c_1254.nls
  + opt/wine/share/wine/nls/c_1255.nls
  + opt/wine/share/wine/nls/c_1256.nls
  + opt/wine/share/wine/nls/c_1257.nls
  + opt/wine/share/wine/nls/c_1258.nls
  + opt/wine/share/wine/nls/c_1361.nls
  + opt/wine/share/wine/nls/c_20127.nls
  + opt/wine/share/wine/nls/c_20866.nls
  + opt/wine/share/wine/nls/c_20932.nls
  + opt/wine/share/wine/nls/c_20949.nls
  + opt/wine/share/wine/nls/c_21866.nls
  + opt/wine/share/wine/nls/c_28591.nls
  + opt/wine/share/wine/nls/c_28592.nls
  + opt/wine/share/wine/nls/c_28593.nls
  + opt/wine/share/wine/nls/c_28594.nls
  + opt/wine/share/wine/nls/c_28595.nls
  + opt/wine/share/wine/nls/c_28596.nls
  + opt/wine/share/wine/nls/c_28597.nls
  + opt/wine/share/wine/nls/c_28598.nls
  + opt/wine/share/wine/nls/c_28599.nls
  + opt/wine/share/wine/nls/c_28603.nls
  + opt/wine/share/wine/nls/c_28605.nls
  + opt/wine/share/wine/nls/c_437.nls
  + opt/wine/share/wine/nls/c_500.nls
  + opt/wine/share/wine/nls/c_708.nls
  + opt/wine/share/wine/nls/c_720.nls
  + opt/wine/share/wine/nls/c_737.nls
  + opt/wine/share/wine/nls/c_775.nls
  + opt/wine/share/wine/nls/c_850.nls
  + opt/wine/share/wine/nls/c_852.nls
  + opt/wine/share/wine/nls/c_855.nls
  + opt/wine/share/wine/nls/c_857.nls
  + opt/wine/share/wine/nls/c_860.nls
  + opt/wine/share/wine/nls/c_861.nls
  + opt/wine/share/wine/nls/c_862.nls
  + opt/wine/share/wine/nls/c_863.nls
  + opt/wine/share/wine/nls/c_864.nls
  + opt/wine/share/wine/nls/c_865.nls
  + opt/wine/share/wine/nls/c_866.nls
  + opt/wine/share/wine/nls/c_869.nls
  + opt/wine/share/wine/nls/c_874.nls
  + opt/wine/share/wine/nls/c_875.nls
  + opt/wine/share/wine/nls/c_932.nls
  + opt/wine/share/wine/nls/c_936.nls
  + opt/wine/share/wine/nls/c_949.nls
  + opt/wine/share/wine/nls/c_950.nls
  + opt/wine/share/wine/nls/l_intl.nls
  + opt/wine/share/wine/nls/locale.nls
  + opt/wine/share/wine/nls/normidna.nls
  + opt/wine/share/wine/nls/normnfc.nls
  + opt/wine/share/wine/nls/normnfd.nls
  + opt/wine/share/wine/nls/normnfkc.nls
  + opt/wine/share/wine/nls/normnfkd.nls
  + opt/wine/share/wine/nls/sortdefault.nls
  + opt/wine/share/wine/wine.inf
    ;; .INF script for the basic Wine configuration
    ;; Version: Wine 9.2
    ;;
    ;; This should be run through setupapi:
    ;;   rundll32 setupapi.dll,InstallHinfSection DefaultInstall 128 wine.inf
    ;;
    ;; Copyright (C) 2004 Chris Morgan
    ;; Copyright (C) 2004 Brian Vincent
    ;; Copyright (C) 2004 Alexandre Julliard
    ;;
    ;; This library is free software; you can redistribute it and/or
    ;; modify it under the terms of the GNU Lesser General Public
    ;; License as published by the Free Software Foundation; either
    ;; version 2.1 of the License, or (at your option) any later version.
    ;;
    ;; This library is distributed in the hope that it will be useful,
    ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
    ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    ;; Lesser General Public License for more details.
    ;;
    ;; You should have received a copy of the GNU Lesser General Public
     ... (truncated) ...
  + usr/bin/locale
  + usr/bin/localedef
  + usr/lib/audit/sotruss-lib.so
    0000000000001370 T la_aarch64_gnu_pltenter
    0000000000001490 T la_aarch64_gnu_pltexit
    0000000000001070 T la_objopen
    00000000000012e0 T la_symbind64
    0000000000000df0 T la_version
  + usr/lib/gconv/ANSI_X3.110.so
    0000000000000920 T gconv
    0000000000000890 T gconv_init
  + usr/lib/gconv/ARMSCII-8.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ASMO_449.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/BIG5.so
    0000000000000910 T gconv
    0000000000000880 T gconv_init
  + usr/lib/gconv/BIG5HKSCS.so
    0000000000000910 T gconv
    0000000000000880 T gconv_init
  + usr/lib/gconv/BRF.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP10007.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP1125.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP1250.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP1251.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP1252.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP1253.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP1254.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP1255.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP1256.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP1257.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP1258.so
    0000000000000940 T gconv
    00000000000008c0 T gconv_init
  + usr/lib/gconv/CP737.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP770.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP771.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP772.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP773.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP774.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP775.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CP932.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CSN_369103.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/CWI.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/DEC-MCS.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-AT-DE-A.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-AT-DE.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-CA-FR.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-DK-NO-A.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-DK-NO.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-ES-A.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-ES-S.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-ES.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-FI-SE-A.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-FI-SE.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-FR.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-IS-FRISS.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-IT.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-PT.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-UK.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EBCDIC-US.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ECMA-CYRILLIC.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/EUC-CN.so
    0000000000000c00 T gconv
    0000000000000b70 T gconv_init
  + usr/lib/gconv/EUC-JISX0213.so
    0000000000000af0 T gconv
    0000000000000a60 T gconv_init
  + usr/lib/gconv/EUC-JP-MS.so
    0000000000000a60 T gconv
    00000000000009e0 T gconv_init
  + usr/lib/gconv/EUC-JP.so
    0000000000000c50 T gconv
    0000000000000bc0 T gconv_init
  + usr/lib/gconv/EUC-KR.so
    0000000000000a90 T gconv
    0000000000000a00 T gconv_init
  + usr/lib/gconv/EUC-TW.so
    00000000000010f0 T gconv
    0000000000001060 T gconv_init
  + usr/lib/gconv/GB18030.so
    0000000000000960 T gconv
    00000000000008d0 T gconv_init
  + usr/lib/gconv/GBBIG5.so
    0000000000000890 T gconv
    0000000000000820 T gconv_init
  + usr/lib/gconv/GBGBK.so
    00000000000008e0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/GBK.so
    0000000000000910 T gconv
    0000000000000880 T gconv_init
  + usr/lib/gconv/GEORGIAN-ACADEMY.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/GEORGIAN-PS.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/GOST_19768-74.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/GREEK-CCITT.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/GREEK7-OLD.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/GREEK7.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/HP-GREEK8.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/HP-ROMAN8.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/HP-ROMAN9.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/HP-THAI8.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/HP-TURKISH8.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM037.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM038.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1004.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1008.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1008_420.so
    0000000000000880 T gconv
    0000000000000810 T gconv_init
  + usr/lib/gconv/IBM1025.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1026.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1046.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1047.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1097.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1112.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1122.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1123.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1124.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1129.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1130.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1132.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1133.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1137.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1140.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1141.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1142.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1143.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1144.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1145.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1146.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1147.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1148.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1149.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1153.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1154.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1155.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1156.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1157.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1158.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1160.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1161.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1162.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1163.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1164.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1166.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1167.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM12712.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM1364.so
    00000000000008d0 T gconv
    0000000000000850 T gconv_init
  + usr/lib/gconv/IBM1371.so
    00000000000008d0 T gconv
    0000000000000850 T gconv_init
  + usr/lib/gconv/IBM1388.so
    00000000000008d0 T gconv
    0000000000000850 T gconv_init
  + usr/lib/gconv/IBM1390.so
    00000000000008d0 T gconv
    0000000000000850 T gconv_init
  + usr/lib/gconv/IBM1399.so
    00000000000008d0 T gconv
    0000000000000850 T gconv_init
  + usr/lib/gconv/IBM16804.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM256.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM273.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM274.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM275.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM277.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM278.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM280.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM281.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM284.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM285.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM290.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM297.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM420.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM423.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM424.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM437.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM4517.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM4899.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM4909.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM4971.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM500.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM5347.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM803.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM850.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM851.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM852.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM855.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM856.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM857.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM858.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM860.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM861.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM862.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM863.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM864.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM865.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM866.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM866NAV.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM868.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM869.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM870.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM871.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM874.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM875.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM880.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM891.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM901.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM902.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM903.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM9030.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM904.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM905.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM9066.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM918.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM921.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM922.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM930.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM932.so
    0000000000000960 T gconv
    00000000000008d4 T gconv_init
  + usr/lib/gconv/IBM933.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM935.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM937.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM939.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IBM943.so
    0000000000000960 T gconv
    00000000000008d4 T gconv_init
  + usr/lib/gconv/IBM9448.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/IEC_P27-1.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/INIS-8.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/INIS-CYRILLIC.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/INIS.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISIRI-3342.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO-2022-CN-EXT.so
    00000000000014a0 T gconv
    0000000000001410 T gconv_init
  + usr/lib/gconv/ISO-2022-CN.so
    0000000000001170 T gconv
    00000000000010e0 T gconv_init
  + usr/lib/gconv/ISO-2022-JP-3.so
    0000000000000ca0 T gconv
    0000000000000c10 T gconv_init
  + usr/lib/gconv/ISO-2022-JP.so
    0000000000001230 T gconv
    0000000000001220 T gconv_end
    0000000000001100 T gconv_init
  + usr/lib/gconv/ISO-2022-KR.so
    0000000000000ad0 T gconv
    0000000000000a40 T gconv_init
  + usr/lib/gconv/ISO-IR-197.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO-IR-209.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO646.so
    0000000000000a70 T gconv
    0000000000000a60 T gconv_end
    0000000000000980 T gconv_init
  + usr/lib/gconv/ISO8859-1.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-10.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-11.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-13.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-14.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-15.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-16.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-2.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-3.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-4.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-5.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-6.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-7.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-8.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-9.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO8859-9E.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO_10367-BOX.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO_11548-1.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO_2033.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO_5427-EXT.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO_5427.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO_5428.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/ISO_6937-2.so
    0000000000000920 T gconv
    0000000000000894 T gconv_init
  + usr/lib/gconv/ISO_6937.so
    0000000000000920 T gconv
    0000000000000894 T gconv_init
  + usr/lib/gconv/JOHAB.so
    0000000000000a50 T gconv
    00000000000009c0 T gconv_init
  + usr/lib/gconv/KOI-8.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/KOI8-R.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/KOI8-RU.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/KOI8-T.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/KOI8-U.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/LATIN-GREEK-1.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/LATIN-GREEK.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/MAC-CENTRALEUROPE.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/MAC-IS.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/MAC-SAMI.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/MAC-UK.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/MACINTOSH.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/MIK.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/NATS-DANO.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/NATS-SEFI.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/PT154.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/RK1048.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/SAMI-WS2.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/SHIFT_JISX0213.so
    0000000000000ad0 T gconv
    0000000000000a44 T gconv_init
  + usr/lib/gconv/SJIS.so
    0000000000000940 T gconv
    00000000000008b4 T gconv_init
  + usr/lib/gconv/T.61.so
    0000000000000920 T gconv
    0000000000000894 T gconv_init
  + usr/lib/gconv/TCVN5712-1.so
    0000000000000940 T gconv
    00000000000008c0 T gconv_init
  + usr/lib/gconv/TIS-620.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/TSCII.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/UHC.so
    0000000000000a90 T gconv
    0000000000000a00 T gconv_init
  + usr/lib/gconv/UNICODE.so
    00000000000009d0 T gconv
    00000000000009c0 T gconv_end
    0000000000000930 T gconv_init
  + usr/lib/gconv/UTF-16.so
    0000000000000ae0 T gconv
    0000000000000ad0 T gconv_end
    0000000000000980 T gconv_init
  + usr/lib/gconv/UTF-32.so
    0000000000000ac0 T gconv
    0000000000000ab0 T gconv_end
    0000000000000980 T gconv_init
  + usr/lib/gconv/UTF-7.so
    0000000000000ce0 T gconv
    0000000000000cd4 T gconv_end
    0000000000000bf0 T gconv_init
  + usr/lib/gconv/VISCII.so
    00000000000008f0 T gconv
    0000000000000870 T gconv_init
  + usr/lib/gconv/gconv-modules
    # GNU libc iconv configuration.
    # Copyright (C) 1997-2024 Free Software Foundation, Inc.
    # This file is part of the GNU C Library.
    
    # The GNU C Library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    
    # The GNU C Library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    
    # You should have received a copy of the GNU Lesser General Public
    # License along with the GNU C Library; if not, see
    # <https://www.gnu.org/licenses/>.
    
    # All lines contain the following information:
    
    # If the lines start with `module'
     ... (truncated) ...
  + usr/lib/gconv/gconv-modules.d/gconv-modules-extra.conf
    # GNU libc iconv configuration.
    # Copyright (C) 1997-2024 Free Software Foundation, Inc.
    # This file is part of the GNU C Library.
    
    # The GNU C Library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    
    # The GNU C Library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    
    # You should have received a copy of the GNU Lesser General Public
    # License along with the GNU C Library; if not, see
    # <https://www.gnu.org/licenses/>.
    
    # All lines contain the following information:
    
    # If the lines start with `module'
     ... (truncated) ...
  + usr/lib/gconv/libCNS.so
    000000000002f540 R __cns11643_from_ucs4p0_tab
    000000000000fa58 R __cns11643_from_ucs4p2c_tab
    00000000000100b8 R __cns11643_from_ucs4p2_tab
    0000000000043838 R __cns11643l15_to_ucs4_tab
    000000000000b5c8 R __cns11643l1_from_ucs4_tab1
    000000000000b0a8 R __cns11643l1_from_ucs4_tab10
    000000000000b018 R __cns11643l1_from_ucs4_tab11
    0000000000000cd8 R __cns11643l1_from_ucs4_tab12
    0000000000000c60 R __cns11643l1_from_ucs4_tab13
    0000000000000ba0 R __cns11643l1_from_ucs4_tab14
    000000000000b5a0 R __cns11643l1_from_ucs4_tab2
    000000000000b528 R __cns11643l1_from_ucs4_tab3
    000000000000b4d0 R __cns11643l1_from_ucs4_tab4
    000000000000b4b8 R __cns11643l1_from_ucs4_tab5
    000000000000b410 R __cns11643l1_from_ucs4_tab6
    000000000000b3c8 R __cns11643l1_from_ucs4_tab7
    000000000000b388 R __cns11643l1_from_ucs4_tab8
    000000000000b100 R __cns11643l1_from_ucs4_tab9
    000000000000b670 R __cns11643l1_to_ucs4_tab
    000000000006d1b0 R __cns11643l2_to_ucs4_tab
    0000000000066ab8 R __cns11643l3_to_ucs4_tab
    000000000005f8b0 R __cns11643l4_to_ucs4_tab
    0000000000057240 R __cns11643l5_to_ucs4_tab
    0000000000050e70 R __cns11643l6_to_ucs4_tab
    000000000004a840 R __cns11643l7_to_ucs4_tab
  + usr/lib/gconv/libGB.so
    000000000000b360 R __gb2312_from_ucs4_tab1
    000000000000b2e8 R __gb2312_from_ucs4_tab2
    000000000000b240 R __gb2312_from_ucs4_tab3
    000000000000b1f0 R __gb2312_from_ucs4_tab4
    000000000000aea8 R __gb2312_from_ucs4_tab5
    000000000000ae30 R __gb2312_from_ucs4_tab6
    000000000000abd8 R __gb2312_from_ucs4_tab7
    0000000000000890 R __gb2312_from_ucs4_tab8
    00000000000007d0 R __gb2312_from_ucs4_tab9
    000000000000b420 R __gb2312_to_ucs
  + usr/lib/gconv/libISOIR165.so
    000000000000bff8 R __isoir165_from_idx
    0000000000004b58 R __isoir165_from_tab
    0000000000000650 R __isoir165_to_tab
  + usr/lib/gconv/libJIS.so
    0000000000008d98 R __jis0208_to_ucs
    00000000000007c0 R __jisx0201_to_ucs4
    0000000000008b60 R __jisx0208_from_ucs4_greek
    0000000000008ce8 R __jisx0208_from_ucs4_lat1
    0000000000007ac8 R __jisx0208_from_ucs_idx
    0000000000000bc0 R __jisx0208_from_ucs_tab
    000000000000ca98 R __jisx0212_from_ucs
    0000000000013390 R __jisx0212_from_ucs_idx
    0000000000014520 R __jisx0212_to_ucs
    00000000000174a8 R __jisx0212_to_ucs_idx
  + usr/lib/gconv/libJISX0213.so
    00000000000159d0 R __jisx0213_from_ucs_level1
    00000000000006d0 R __jisx0213_from_ucs_level2
    000000000001cb10 R __jisx0213_to_ucs_combining
    00000000000172f0 R __jisx0213_to_ucs_main
    0000000000016f08 R __jisx0213_to_ucs_pagestart
  + usr/lib/gconv/libKSC.so
    0000000000009180 R __ksc5601_hangul_to_ucs
    00000000000006c0 R __ksc5601_hanja_from_ucs
    0000000000005320 R __ksc5601_hanja_to_ucs
    0000000000007950 R __ksc5601_sym_from_ucs
    00000000000088c8 R __ksc5601_sym_to_ucs
  + usr/lib/getconf/POSIX_V6_LP64_OFF64
  + usr/lib/getconf/POSIX_V7_LP64_OFF64
  + usr/lib/getconf/XBS5_LP64_OFF64
  + usr/lib/gstreamer-1.0/libgstapetag.so
    0000000000002e04 T gst_plugin_apetag_get_desc
    0000000000002e14 T gst_plugin_apetag_register
  + usr/lib/gstreamer-1.0/libgstapp.so
    00000000000009a0 T gst_plugin_app_get_desc
    00000000000009b0 T gst_plugin_app_register
  + usr/lib/gstreamer-1.0/libgstasf.so
    0000000000013390 T gst_plugin_asf_get_desc
    00000000000133a0 T gst_plugin_asf_register
  + usr/lib/gstreamer-1.0/libgstaudioconvert.so
    0000000000004b84 T gst_plugin_audioconvert_get_desc
    0000000000004b90 T gst_plugin_audioconvert_register
  + usr/lib/gstreamer-1.0/libgstaudiofx.so
    0000000000004110 T gst_plugin_audiofx_get_desc
    0000000000004120 T gst_plugin_audiofx_register
  + usr/lib/gstreamer-1.0/libgstaudiomixer.so
    00000000000057e0 T gst_plugin_audiomixer_get_desc
    00000000000057f0 T gst_plugin_audiomixer_register
  + usr/lib/gstreamer-1.0/libgstaudioparsers.so
    0000000000017b50 T gst_plugin_audioparsers_get_desc
    0000000000017b60 T gst_plugin_audioparsers_register
  + usr/lib/gstreamer-1.0/libgstaudioresample.so
    00000000000055c0 T gst_plugin_audioresample_get_desc
    00000000000055d0 T gst_plugin_audioresample_register
  + usr/lib/gstreamer-1.0/libgstavi.so
    0000000000006b90 T gst_plugin_avi_get_desc
    0000000000006ba0 T gst_plugin_avi_register
  + usr/lib/gstreamer-1.0/libgstcompositor.so
    0000000000014eb4 T gst_plugin_compositor_get_desc
    0000000000014ec4 T gst_plugin_compositor_register
  + usr/lib/gstreamer-1.0/libgstcoreelements.so
    0000000000018cc0 T gst_plugin_coreelements_get_desc
    0000000000018cd0 T gst_plugin_coreelements_register
  + usr/lib/gstreamer-1.0/libgstdeinterlace.so
    000000000000dfc0 T gst_plugin_deinterlace_get_desc
    000000000000dfd0 T gst_plugin_deinterlace_register
  + usr/lib/gstreamer-1.0/libgstencoding.so
    00000000000107f0 T gst_plugin_encoding_get_desc
    0000000000010800 T gst_plugin_encoding_register
  + usr/lib/gstreamer-1.0/libgstid3demux.so
    0000000000001e70 T gst_plugin_id3demux_get_desc
    0000000000001e80 T gst_plugin_id3demux_register
  + usr/lib/gstreamer-1.0/libgstisomp4.so
    000000000000f9e0 T gst_plugin_isomp4_get_desc
    000000000000f9f0 T gst_plugin_isomp4_register
  + usr/lib/gstreamer-1.0/libgstlibav.so
    0000000000042c20 T gst_plugin_libav_get_desc
    0000000000042c30 T gst_plugin_libav_register
  + usr/lib/gstreamer-1.0/libgstmatroska.so
    000000000000edf0 T gst_plugin_matroska_get_desc
    000000000000ee00 T gst_plugin_matroska_register
  + usr/lib/gstreamer-1.0/libgstmpeg2dec.so
    00000000000056f4 T gst_plugin_mpeg2dec_get_desc
    0000000000005700 T gst_plugin_mpeg2dec_register
  + usr/lib/gstreamer-1.0/libgstmpegpsdemux.so
    0000000000003a34 T gst_plugin_mpegpsdemux_get_desc
    0000000000003a40 T gst_plugin_mpegpsdemux_register
  + usr/lib/gstreamer-1.0/libgstmpg123.so
    0000000000004b74 T gst_plugin_mpg123_get_desc
    0000000000004b80 T gst_plugin_mpg123_register
  + usr/lib/gstreamer-1.0/libgstogg.so
    00000000000092e0 T gst_plugin_ogg_get_desc
    00000000000092f0 T gst_plugin_ogg_register
  + usr/lib/gstreamer-1.0/libgstplayback.so
    0000000000047ec0 T gst_plugin_playback_get_desc
    0000000000047ed0 T gst_plugin_playback_register
  + usr/lib/gstreamer-1.0/libgstrawparse.so
    0000000000008b00 T gst_plugin_rawparse_get_desc
    0000000000008b10 T gst_plugin_rawparse_register
  + usr/lib/gstreamer-1.0/libgsttypefindfunctions.so
    0000000000010e14 T gst_plugin_typefindfunctions_get_desc
    0000000000010e20 T gst_plugin_typefindfunctions_register
  + usr/lib/gstreamer-1.0/libgstvideobox.so
    000000000000aa40 T gst_plugin_videobox_get_desc
    000000000000aa50 T gst_plugin_videobox_register
  + usr/lib/gstreamer-1.0/libgstvideoconvertscale.so
    0000000000007c90 T gst_plugin_videoconvertscale_get_desc
    0000000000007ca0 T gst_plugin_videoconvertscale_register
  + usr/lib/gstreamer-1.0/libgstvideocrop.so
    00000000000062b0 T gst_plugin_videocrop_get_desc
    00000000000062c0 T gst_plugin_videocrop_register
  + usr/lib/gstreamer-1.0/libgstvideofilter.so
    0000000000002c70 T gst_plugin_videofilter_get_desc
    0000000000002c80 T gst_plugin_videofilter_register
  + usr/lib/gstreamer-1.0/libgstvideomixer.so
    000000000000ec34 T gst_plugin_videomixer_get_desc
    000000000000ec44 T gst_plugin_videomixer_register
  + usr/lib/gstreamer-1.0/libgstvideoparsersbad.so
    0000000000008400 T gst_plugin_videoparsersbad_get_desc
    0000000000008410 T gst_plugin_videoparsersbad_register
  + usr/lib/gstreamer-1.0/libgstvideorate.so
    0000000000008b54 T gst_plugin_videorate_get_desc
    0000000000008b60 T gst_plugin_videorate_register
  + usr/lib/gstreamer-1.0/libgstvolume.so
    00000000000034e4 T gst_plugin_volume_get_desc
    00000000000034f0 T gst_plugin_volume_register
  + usr/lib/gstreamer-1.0/libgstwavparse.so
    000000000000bb80 T gst_plugin_wavparse_get_desc
    000000000000bb90 T gst_plugin_wavparse_register
  + usr/lib/ld-linux-aarch64.so.1
  + usr/lib/libBrokenLocale.so.1
  + usr/lib/libX11-xcb.so.1.0.0
  + usr/lib/libX11.so.6.4.0
  + usr/lib/libXau.so.6.0.0
  + usr/lib/libXcomposite.so.1.0.0
  + usr/lib/libXcursor.so.1.0.2
  + usr/lib/libXdmcp.so.6.0.0
  + usr/lib/libXext.so.6.4.0
  + usr/lib/libXfixes.so.3.1.0
  + usr/lib/libXi.so.6.1.0
  + usr/lib/libXrandr.so.2.2.0
  + usr/lib/libXrender.so.1.3.0
  + usr/lib/libXxf86vm.so.1.0.0
  + usr/lib/libanl.so.1
  + usr/lib/libasound.so.2.0.0
  + usr/lib/libatopology.so.2.0.0
  + usr/lib/libbrotlicommon.so.1.1.0
  + usr/lib/libbrotlidec.so.1.1.0
  + usr/lib/libbrotlienc.so.1.1.0
  + usr/lib/libbz2.so.1.0.8
  + usr/lib/libc.so
    /* GNU ld script
       Use the shared library, but some functions are only in
       the static library, so try that secondarily.  */
    OUTPUT_FORMAT(elf64-littleaarch64)
    GROUP ( /data/data/com.winlator/files/rootfs/lib/libc.so.6 /data/data/com.winlator/files/rootfs/lib/libc_nonshared.a  AS_NEEDED ( /data/data/com.winlator/files/rootfs/lib/ld-linux-aarch64.so.1 ) )
  + usr/lib/libc.so.6
  + usr/lib/libc_malloc_debug.so.0
  + usr/lib/libdl.so.2
  + usr/lib/libdrm.so.2.123.0
  + usr/lib/libexpat.so.1.6.8
  + usr/lib/libffi.so.7.1.0
  + usr/lib/libfontconfig.so.1.14.0
  + usr/lib/libfreetype.so.6.20.2
  + usr/lib/libgcc_s.so.1
  + usr/lib/libgio-2.0.so.0.7800.3
  + usr/lib/libglapi.so.0.0.0
  + usr/lib/libglib-2.0.so.0.7800.3
  + usr/lib/libgmodule-2.0.so.0.7800.3
  + usr/lib/libgnutls-openssl.so.27.0.2
  + usr/lib/libgnutls.so.30.39.0
  + usr/lib/libgnutlsxx.so.30.0.0
  + usr/lib/libgobject-2.0.so.0.7800.3
  + usr/lib/libgstadaptivedemux-1.0.so.0.2402.0
  + usr/lib/libgstallocators-1.0.so.0.2402.0
  + usr/lib/libgstanalytics-1.0.so.0.2402.0
  + usr/lib/libgstapp-1.0.so.0.2402.0
  + usr/lib/libgstaudio-1.0.so.0.2402.0
  + usr/lib/libgstbadaudio-1.0.so.0.2402.0
  + usr/lib/libgstbase-1.0.so.0.2402.0
  + usr/lib/libgstbasecamerabinsrc-1.0.so.0.2402.0
  + usr/lib/libgstcodecparsers-1.0.so.0.2402.0
  + usr/lib/libgstcodecs-1.0.so.0.2402.0
  + usr/lib/libgstcontroller-1.0.so.0.2402.0
  + usr/lib/libgstcuda-1.0.so.0.2402.0
  + usr/lib/libgstfft-1.0.so.0.2402.0
  + usr/lib/libgstinsertbin-1.0.so.0.2402.0
  + usr/lib/libgstisoff-1.0.so.0.2402.0
  + usr/lib/libgstmpegts-1.0.so.0.2402.0
  + usr/lib/libgstmse-1.0.so.0.2402.0
  + usr/lib/libgstnet-1.0.so.0.2402.0
  + usr/lib/libgstpbutils-1.0.so.0.2402.0
  + usr/lib/libgstphotography-1.0.so.0.2402.0
  + usr/lib/libgstplay-1.0.so.0.2402.0
  + usr/lib/libgstplayer-1.0.so.0.2402.0
  + usr/lib/libgstreamer-1.0.so.0.2402.0
  + usr/lib/libgstriff-1.0.so.0.2402.0
  + usr/lib/libgstrtp-1.0.so.0.2402.0
  + usr/lib/libgstrtsp-1.0.so.0.2402.0
  + usr/lib/libgstsctp-1.0.so.0.2402.0
  + usr/lib/libgstsdp-1.0.so.0.2402.0
  + usr/lib/libgsttag-1.0.so.0.2402.0
  + usr/lib/libgsttranscoder-1.0.so.0
  + usr/lib/libgsturidownloader-1.0.so.0.2402.0
  + usr/lib/libgstvideo-1.0.so.0.2402.0
  + usr/lib/libgstwebrtc-1.0.so.0.2402.0
  + usr/lib/libgthread-2.0.so.0.7800.3
  + usr/lib/libhogweed.so.6.9
  + usr/lib/libjpeg.so.8.3.2
  + usr/lib/libm.so
    /* GNU ld script
    */
    OUTPUT_FORMAT(elf64-littleaarch64)
    GROUP ( /data/data/com.winlator/files/rootfs/lib/libm.so.6  AS_NEEDED ( /data/data/com.winlator/files/rootfs/lib/libmvec.so.1 ) )
  + usr/lib/libm.so.6
  + usr/lib/libmemusage.so
    0000000000002130 T calloc
    0000000000002260 T free
    0000000000001de0 T malloc
    0000000000002330 T mmap
    00000000000024b0 T mmap64
    0000000000002630 T mremap
    0000000000002810 T munmap
    0000000000001f00 T realloc
  + usr/lib/libmpeg2.so.0.1.0
  + usr/lib/libmpeg2convert.so.0.0.0
  + usr/lib/libmpg123.so.0.48.2
  + usr/lib/libmvec.so.1
  + usr/lib/libnettle.so.8.9
  + usr/lib/libnsl.so.1
  + usr/lib/libnss_compat.so.2
  + usr/lib/libnss_db.so.2
  + usr/lib/libnss_dns.so.2
  + usr/lib/libnss_files.so.2
  + usr/lib/libnss_hesiod.so.2
  + usr/lib/libogg.so.0.8.5
  + usr/lib/libout123.so.0.5.1
  + usr/lib/libpcprofile.so
    00000000000009c0 T __cyg_profile_func_enter
    00000000000009c0 T __cyg_profile_func_exit
  + usr/lib/libpng16.so.16.44.0
  + usr/lib/libpthread.so.0
  + usr/lib/libpulse-mainloop-glib.so.0.0.6
  + usr/lib/libpulse-simple.so.0.1.1
  + usr/lib/libpulse.so.0.24.3
  + usr/lib/libresolv.so.2
  + usr/lib/librt.so.1
  + usr/lib/libsndfile.so.1.0.37
  + usr/lib/libstdc++.so.6.0.32
  + usr/lib/libsyn123.so.0.2.3
  + usr/lib/libthread_db.so.1
  + usr/lib/libutil.so.1
  + usr/lib/libvulkan.so.1.3.301
  + usr/lib/libxcb-dri3.so.0.1.0
  + usr/lib/libxcb-present.so.0.0.0
  + usr/lib/libxcb-randr.so.0.1.0
  + usr/lib/libxcb-render.so.0.0.0
  + usr/lib/libxcb-shm.so.0.0.0
  + usr/lib/libxcb-sync.so.1.0.0
  + usr/lib/libxcb.so.1.1.0
  + usr/lib/libz.so.1.3.1
  + usr/lib/libzstd.so.1.5.6
  + usr/lib/locale/en_US.utf8/LC_ADDRESS
  + usr/lib/locale/en_US.utf8/LC_COLLATE
  + usr/lib/locale/en_US.utf8/LC_CTYPE
  + usr/lib/locale/en_US.utf8/LC_IDENTIFICATION
  + usr/lib/locale/en_US.utf8/LC_MEASUREMENT
              UTF-8 
  + usr/lib/locale/en_US.utf8/LC_MESSAGES/SYS_LC_MESSAGES
           $   ,   0   3   ^[+1yY] ^[-0nN] yes no UTF-8 
  + usr/lib/locale/en_US.utf8/LC_MONETARY
  + usr/lib/locale/en_US.utf8/LC_NAME
        $   3   4   8   =   C   G   %d%t%g%t%m%t%f  Mr. Mrs. Miss. Ms. UTF-8 
  + usr/lib/locale/en_US.utf8/LC_NUMERIC
            "   $   (   ,   0   . ,    .   ,   UTF-8 
  + usr/lib/locale/en_US.utf8/LC_PAPER
  + usr/lib/locale/en_US.utf8/LC_TELEPHONE
           (   0   3   5   +%c (%a) %l (%a) %l 11 1 UTF-8 
  + usr/lib/locale/en_US.utf8/LC_TIME
  + usr/lib/mpg123/output_dummy.so
    0000000000020058 D mpg123_output_module_info
  + usr/lib/mpg123/output_oss.so
    0000000000020088 D mpg123_output_module_info
  + usr/lib/pulseaudio/libpulsecommon-17.0.so
    000000000002cc40 T pa_accept_cloexec
    0000000000028d40 T pa_append_to_config_home_dir
    0000000000028930 T pa_append_to_home_dir
    000000000001b7b0 T pa_ascii_filter
    000000000001b730 T pa_ascii_valid
    000000000002a150 T pa_atod
    0000000000029e70 T pa_atoi
    0000000000029fa0 T pa_atoi64
    0000000000029cc0 T pa_atol
    0000000000029960 T pa_atou
    0000000000029b20 T pa_atou64
    0000000000046390 T pa_aupdate_free
    0000000000046340 T pa_aupdate_new
    0000000000046410 T pa_aupdate_read_begin
    0000000000046480 T pa_aupdate_read_end
    0000000000046550 T pa_aupdate_write_begin
    0000000000046680 T pa_aupdate_write_end
    00000000000465d4 T pa_aupdate_write_swap
    0000000000023bb0 T pa_authkey_load
    0000000000024100 T pa_authkey_save
    0000000000039010 T pa_autospawn_lock_acquire
    00000000000395d0 T pa_autospawn_lock_done
    0000000000038c84 T pa_autospawn_lock_init
    00000000000394a4 T pa_autospawn_lock_release
    000000000004ece0 T pa_bitset_equals
    000000000004ecc0 T pa_bitset_get
    000000000004ec40 T pa_bitset_set
    000000000001d930 T pa_bytes_per_second
    000000000001df80 T pa_bytes_snprint
    000000000001da10 T pa_bytes_to_usec
    000000000004d690 T pa_bytes_to_usec_round_up
    000000000001d2f0 T pa_channel_map_can_balance
    000000000001d3f0 T pa_channel_map_can_fade
    000000000001d4e0 T pa_channel_map_can_lfe_balance
    000000000001c830 T pa_channel_map_compatible
    000000000001c114 T pa_channel_map_equal
    000000000001cfa0 T pa_channel_map_has_position
    000000000001b840 T pa_channel_map_init
    000000000001b9c0 T pa_channel_map_init_auto
    000000000001bd30 T pa_channel_map_init_extend
    000000000001b8b0 T pa_channel_map_init_mono
    000000000001b930 T pa_channel_map_init_stereo
    000000000001d0a0 T pa_channel_map_mask
    000000000001c4e0 T pa_channel_map_parse
    000000000001c2c4 T pa_channel_map_snprint
    000000000001d160 T pa_channel_map_superset
    000000000001c9a0 T pa_channel_map_to_name
    000000000001cc60 T pa_channel_map_to_pretty_name
    000000000001c050 T pa_channel_map_valid
    000000000001bf40 T pa_channel_position_from_string
    000000000001bef4 T pa_channel_position_to_pretty_string
    000000000001bed4 T pa_channel_position_to_string
    000000000001d6e0 T pa_channels_valid
    0000000000028420 T pa_check_in_group
    0000000000028020 T pa_check_signal_is_blocked
    00000000000150a0 T pa_client_conf_free
    0000000000015160 T pa_client_conf_load
    0000000000015450 T pa_client_conf_load_cookie
    0000000000015040 T pa_client_conf_new
    00000000000157f0 T pa_client_conf_set_cookie_file_from_application
    0000000000026d20 T pa_close
    000000000002ae00 T pa_close_all
    000000000002ac20 T pa_close_allv
    000000000002aa70 T pa_close_pipe
    0000000000047d20 T pa_cmsg_ancil_data_close_fds
    0000000000042eb0 T pa_common_command_register_memfd_shmid
    0000000000058820 T pa_cond_free
    00000000000587a0 T pa_cond_new
    00000000000588e0 T pa_cond_signal
    00000000000589e0 T pa_cond_wait
    00000000000243b4 T pa_config_parse
    0000000000024ef0 T pa_config_parse_bool
    0000000000024bf0 T pa_config_parse_int
    0000000000024fc0 T pa_config_parse_not_bool
    0000000000024df0 T pa_config_parse_size
    0000000000025090 T pa_config_parse_string
    0000000000024cf0 T pa_config_parse_unsigned
    000000000004da80 T pa_convert_size
    0000000000025170 T pa_cstrerror
    00000000000206c0 T pa_cvolume_avg
    0000000000021d80 T pa_cvolume_avg_mask
    00000000000211b0 T pa_cvolume_channels_equal_to
    0000000000021aa0 T pa_cvolume_compatible
    0000000000021c10 T pa_cvolume_compatible_with_channel_map
    00000000000239e0 T pa_cvolume_dec
    0000000000020510 T pa_cvolume_equal
    00000000000224c0 T pa_cvolume_get_balance
    0000000000022b94 T pa_cvolume_get_fade
    0000000000022f40 T pa_cvolume_get_lfe_balance
    00000000000234d4 T pa_cvolume_get_position
    00000000000239d0 T pa_cvolume_inc
    0000000000023884 T pa_cvolume_inc_clamp
    000000000001fad0 T pa_cvolume_init
    00000000000207c0 T pa_cvolume_max
    0000000000021ec4 T pa_cvolume_max_mask
    0000000000023680 T pa_cvolume_merge
    00000000000208b0 T pa_cvolume_min
    0000000000021ff0 T pa_cvolume_min_mask
    0000000000022120 T pa_cvolume_remap
    0000000000022860 T pa_cvolume_scale
    00000000000229e0 T pa_cvolume_scale_mask
    000000000001fb44 T pa_cvolume_set
    0000000000022664 T pa_cvolume_set_balance
    0000000000022d40 T pa_cvolume_set_fade
    00000000000230e4 T pa_cvolume_set_lfe_balance
    00000000000232e0 T pa_cvolume_set_position
    00000000000209a0 T pa_cvolume_snprint
    0000000000020e34 T pa_cvolume_snprint_verbose
    0000000000020450 T pa_cvolume_valid
    000000000004cfe0 T pa_deinterleave
    0000000000015930 T pa_detect_fork
    000000000002c140 T pa_disable_sigpipe
    000000000002df30 T pa_dynarray_append
    000000000002de80 T pa_dynarray_free
    000000000002e054 T pa_dynarray_get
    000000000002e3b0 T pa_dynarray_insert_by_index
    000000000002e0d0 T pa_dynarray_last
    000000000002de50 T pa_dynarray_new
    000000000002e1f0 T pa_dynarray_remove_by_data
    000000000002e144 T pa_dynarray_remove_by_index
    000000000002e350 T pa_dynarray_size
    000000000002e2d4 T pa_dynarray_steal_last
    00000000000159b0 T pa_encoding_from_string
    0000000000015990 T pa_encoding_to_string
    00000000000294f0 T pa_endswith
    000000000002bf70 T pa_escape
    000000000002f080 T pa_fdsem_after_poll
    000000000002ef60 T pa_fdsem_before_poll
    000000000002e930 T pa_fdsem_free
    000000000002eef0 T pa_fdsem_get
    000000000002e6e0 T pa_fdsem_new
    000000000002e850 T pa_fdsem_new_shm
    000000000002e764 T pa_fdsem_open_shm
    000000000002e9b4 T pa_fdsem_post
    000000000002ee60 T pa_fdsem_try
    000000000002ebd0 T pa_fdsem_wait
    0000000000028ed0 T pa_find_config_file
    000000000002f3f0 T pa_flist_free
    000000000002f3e0 T pa_flist_new
    000000000002f2a4 T pa_flist_new_with_name
    000000000002f620 T pa_flist_pop
    000000000002f4f0 T pa_flist_push
    000000000002ccf0 T pa_fopen_cloexec
    0000000000015a50 T pa_format_info_copy
    0000000000015af0 T pa_format_info_free
    0000000000016f34 T pa_format_info_free_string_array
    0000000000017a64 T pa_format_info_from_sample_spec
    00000000000252c0 T pa_format_info_from_sample_spec2
    0000000000015d70 T pa_format_info_from_string
    00000000000173a4 T pa_format_info_get_channel_map
    0000000000017240 T pa_format_info_get_channels
    00000000000163f4 T pa_format_info_get_prop_int
    0000000000016830 T pa_format_info_get_prop_int_array
    00000000000165b0 T pa_format_info_get_prop_int_range
    0000000000016ad0 T pa_format_info_get_prop_string
    0000000000016c90 T pa_format_info_get_prop_string_array
    0000000000016250 T pa_format_info_get_prop_type
    00000000000170f0 T pa_format_info_get_rate
    0000000000016f80 T pa_format_info_get_sample_format
    0000000000015e74 T pa_format_info_is_compatible
    0000000000015b94 T pa_format_info_is_pcm
    0000000000015a14 T pa_format_info_new
    0000000000017c00 T pa_format_info_set_channel_map
    0000000000017700 T pa_format_info_set_channels
    0000000000017630 T pa_format_info_set_prop_int
    0000000000017710 T pa_format_info_set_prop_int_array
    00000000000178b0 T pa_format_info_set_prop_int_range
    0000000000017970 T pa_format_info_set_prop_string
    0000000000017c80 T pa_format_info_set_prop_string_array
    00000000000176f0 T pa_format_info_set_rate
    0000000000017a30 T pa_format_info_set_sample_format
    0000000000015ba4 T pa_format_info_snprint
    00000000000174f0 T pa_format_info_to_sample_spec
    00000000000255b0 T pa_format_info_to_sample_spec2
    0000000000025404 T pa_format_info_to_sample_spec_fake
    0000000000015b70 T pa_format_info_valid
    000000000004ccd4 T pa_frame_align
    000000000004cd50 T pa_frame_aligned
    000000000001d860 T pa_frame_size
    000000000002bcc4 T pa_gcd
    000000000001eb40 T pa_get_binary_name
    0000000000028e60 T pa_get_binary_name_malloc
    0000000000028a50 T pa_get_config_home_dir
    000000000002a940 T pa_getcwd
    0000000000029760 T pa_get_data_dirs
    0000000000029654 T pa_get_data_home_dir
    000000000001ecf0 T pa_get_fqdn
    00000000000283c0 T pa_get_gid_of_group
    0000000000056e90 T pa_getgrgid_free
    0000000000056cf0 T pa_getgrgid_malloc
    0000000000057030 T pa_getgrnam_free
    0000000000056e94 T pa_getgrnam_malloc
    000000000001e930 T pa_get_home_dir
    00000000000288c4 T pa_get_home_dir_malloc
    000000000001e850 T pa_get_host_name
    000000000002bb10 T pa_get_host_name_malloc
    00000000000571b0 T pa_getpwnam_free
    0000000000057034 T pa_getpwnam_malloc
    0000000000057330 T pa_getpwuid_free
    00000000000571b4 T pa_getpwuid_malloc
    000000000002d1a0 T pa_get_runtime_dir
    0000000000028c90 T pa_get_state_dir
    000000000002c500 T pa_get_temp_dir
    000000000001f010 T pa_gettimeofday
    000000000001e6d0 T pa_get_user_name
    000000000002ba74 T pa_get_user_name_malloc
    0000000000030330 T pa_hashmap_first
    00000000000300c0 T pa_hashmap_free
    000000000002fdf4 T pa_hashmap_get
    00000000000304f0 T pa_hashmap_isempty
    0000000000030134 T pa_hashmap_iterate
    0000000000030230 T pa_hashmap_iterate_backwards
    0000000000030394 T pa_hashmap_last
    000000000002fba0 T pa_hashmap_new
    000000000002fb34 T pa_hashmap_new_full
    000000000002fbb0 T pa_hashmap_put
    000000000002feb0 T pa_hashmap_remove
    0000000000030020 T pa_hashmap_remove_all
    000000000002ff94 T pa_hashmap_remove_and_free
    0000000000030494 T pa_hashmap_size
    0000000000030400 T pa_hashmap_steal_first
    0000000000029090 T pa_hexstr
    0000000000030ed4 T pa_idxset_contains
    0000000000031e10 T pa_idxset_copy
    0000000000031dd0 T pa_idxset_equals
    00000000000316e0 T pa_idxset_first
    0000000000031220 T pa_idxset_free
    0000000000030e00 T pa_idxset_get_by_data
    0000000000030d60 T pa_idxset_get_by_index
    0000000000031bd4 T pa_idxset_isdisjoint
    0000000000031b70 T pa_idxset_isempty
    0000000000031cc4 T pa_idxset_issubset
    0000000000031dc0 T pa_idxset_issuperset
    00000000000313b0 T pa_idxset_iterate
    0000000000031760 T pa_idxset_last
    0000000000030a50 T pa_idxset_new
    00000000000317e0 T pa_idxset_next
    0000000000031974 T pa_idxset_previous
    0000000000030ab0 T pa_idxset_put
    0000000000031170 T pa_idxset_remove_all
    0000000000031080 T pa_idxset_remove_by_data
    0000000000030fb0 T pa_idxset_remove_by_index
    00000000000314b0 T pa_idxset_reverse_iterate
    0000000000031294 T pa_idxset_rrobin
    0000000000031b10 T pa_idxset_size
    00000000000315b0 T pa_idxset_steal_first
    0000000000031644 T pa_idxset_steal_last
    0000000000030a44 T pa_idxset_string_compare_func
    0000000000030a20 T pa_idxset_string_hash_func
    00000000000305d4 T pa_idxset_trivial_compare_func
    00000000000305d0 T pa_idxset_trivial_hash_func
    0000000000030560 T pa_init_i18n
    0000000000046710 T pa_init_proplist
    000000000002b760 T pa_in_system_mode
    000000000004cdd4 T pa_interleave
    0000000000032bb0 T pa_iochannel_creds_enable
    0000000000032a50 T pa_iochannel_creds_supported
    0000000000032560 T pa_iochannel_free
    0000000000033920 T pa_iochannel_get_mainloop_api
    0000000000033980 T pa_iochannel_get_recv_fd
    00000000000339e0 T pa_iochannel_get_send_fd
    0000000000032710 T pa_iochannel_is_hungup
    0000000000032620 T pa_iochannel_is_readable
    0000000000032690 T pa_iochannel_is_writable
    0000000000032440 T pa_iochannel_new
    0000000000032910 T pa_iochannel_read
    0000000000033200 T pa_iochannel_read_with_ancil_data
    00000000000336a0 T pa_iochannel_set_callback
    0000000000033700 T pa_iochannel_set_noclose
    0000000000033a40 T pa_iochannel_socket_is_local
    0000000000033770 T pa_iochannel_socket_peer_to_string
    0000000000033864 T pa_iochannel_socket_set_rcvbuf
    00000000000338c0 T pa_iochannel_socket_set_sndbuf
    0000000000032770 T pa_iochannel_write
    0000000000032cf4 T pa_iochannel_write_with_creds
    0000000000032f14 T pa_iochannel_write_with_fds
    0000000000033dc0 T pa_ioline_close
    0000000000034d10 T pa_ioline_defer_close
    0000000000034f60 T pa_ioline_detach_iochannel
    0000000000034ff0 T pa_ioline_is_drained
    0000000000033ae0 T pa_ioline_new
    0000000000034df0 T pa_ioline_printf
    0000000000034880 T pa_ioline_puts
    0000000000033cf4 T pa_ioline_ref
    0000000000034b90 T pa_ioline_set_callback
    0000000000034c50 T pa_ioline_set_drain_callback
    0000000000033be0 T pa_ioline_unref
    0000000000035580 T pa_ip_acl_check
    0000000000035060 T pa_ip_acl_free
    0000000000035164 T pa_ip_acl_new
    00000000000266b0 T pa_is_fd_nonblock
    0000000000043cd0 T pa_is_ip6_address
    0000000000043bf0 T pa_is_ip_address
    00000000000295f0 T pa_is_path_absolute
    0000000000027924 T pa_is_regex_valid
    0000000000037df0 T pa_json_encoder_add_element_bool
    0000000000038394 T pa_json_encoder_add_element_double
    00000000000380d0 T pa_json_encoder_add_element_int
    0000000000037b40 T pa_json_encoder_add_element_null
    0000000000038674 T pa_json_encoder_add_element_raw_json
    0000000000037874 T pa_json_encoder_add_element_string
    0000000000037f30 T pa_json_encoder_add_member_bool
    00000000000384d0 T pa_json_encoder_add_member_double
    0000000000038200 T pa_json_encoder_add_member_int
    0000000000037c64 T pa_json_encoder_add_member_null
    00000000000387a0 T pa_json_encoder_add_member_raw_json
    00000000000379a0 T pa_json_encoder_add_member_string
    00000000000374f0 T pa_json_encoder_begin_element_array
    00000000000371a0 T pa_json_encoder_begin_element_object
    0000000000037620 T pa_json_encoder_begin_member_array
    0000000000037290 T pa_json_encoder_begin_member_object
    00000000000377b0 T pa_json_encoder_end_array
    0000000000037424 T pa_json_encoder_end_object
    0000000000036f70 T pa_json_encoder_free
    0000000000036e70 T pa_json_encoder_is_empty
    0000000000036f30 T pa_json_encoder_new
    0000000000037110 T pa_json_encoder_to_string_free
    0000000000036be0 T pa_json_object_equal
    0000000000035b80 T pa_json_object_free
    0000000000036ae0 T pa_json_object_get_array_length
    0000000000036b60 T pa_json_object_get_array_member
    0000000000035d50 T pa_json_object_get_bool
    0000000000035cd0 T pa_json_object_get_double
    0000000000035c50 T pa_json_object_get_int
    00000000000369e0 T pa_json_object_get_object_member
    0000000000036a60 T pa_json_object_get_object_member_hashmap
    0000000000035dd0 T pa_json_object_get_string
    0000000000035b70 T pa_json_object_get_type
    0000000000036900 T pa_json_parse
    000000000001b714 T pa_locale_to_utf8
    00000000000284f0 T pa_lock_fd
    000000000002c7f0 T pa_lock_lockfile
    000000000003a9c4 T pa_log_level
    0000000000039b90 T pa_log_level_meta
    000000000003a994 T pa_log_levelv
    0000000000039f90 T pa_log_levelv_meta
    000000000003abb0 T pa_log_parse_target
    000000000003aa84 T pa_log_ratelimit
    0000000000039ef4 T pa_log_set_flags
    0000000000039930 T pa_log_set_ident
    0000000000039c40 T pa_log_set_level
    0000000000039b70 T pa_log_set_show_backtrace
    0000000000039b80 T pa_log_set_skip_backtrace
    0000000000039ca0 T pa_log_set_target
    000000000003ab30 T pa_log_target_free
    000000000003aae0 T pa_log_target_new
    000000000003ad30 T pa_log_target_to_string
    00000000000269e0 T pa_loop_read
    0000000000026b80 T pa_loop_write
    000000000002d040 T pa_machine_id
    0000000000018fd0 T pa_mainloop_api_once
    00000000000266a0 T pa_make_fd_block
    0000000000026764 T pa_make_fd_cloexec
    0000000000026690 T pa_make_fd_nonblock
    000000000002a9b4 T pa_make_path_absolute
    0000000000026d60 T pa_make_secure_dir
    0000000000027170 T pa_make_secure_parent_dir
    0000000000050620 T pa_make_socket_low_delay
    0000000000050710 T pa_make_tcp_socket_low_delay
    0000000000050880 T pa_make_udp_socket_low_delay
    00000000000277b0 T pa_match
    000000000002c3d0 T pa_maybe_prefix_path
    000000000003b854 T pa_mcalign_csize
    000000000003b964 T pa_mcalign_flush
    000000000003b060 T pa_mcalign_free
    000000000003afd0 T pa_mcalign_new
    000000000003b4d0 T pa_mcalign_pop
    000000000003b0f0 T pa_mcalign_push
    000000000003c770 T pa_memblock_acquire
    000000000003c840 T pa_memblock_acquire_chunk
    000000000003ca00 T pa_memblock_get_length
    000000000003db40 T pa_memblock_get_pool
    000000000003c390 T pa_memblock_is_ours
    000000000003c450 T pa_memblock_is_read_only
    000000000003c530 T pa_memblock_is_silence
    000000000003d5a0 T pa_memblock_new
    000000000003d700 T pa_memblock_new_fixed
    000000000003d360 T pa_memblock_new_pool
    000000000003d8f0 T pa_memblock_new_user
    00000000000421a0 T pa_memblockq_apply_attr
    00000000000412f4 T pa_memblockq_drop
    00000000000428f0 T pa_memblockq_flush_read
    0000000000042824 T pa_memblockq_flush_write
    0000000000042790 T pa_memblockq_free
    0000000000042280 T pa_memblockq_get_attr
    00000000000429e0 T pa_memblockq_get_base
    0000000000040c20 T pa_memblockq_get_length
    0000000000041a80 T pa_memblockq_get_maxlength
    00000000000416e0 T pa_memblockq_get_maxrewind
    0000000000041680 T pa_memblockq_get_minreq
    0000000000042984 T pa_memblockq_get_nblocks
    0000000000041ae0 T pa_memblockq_get_prebuf
    0000000000041740 T pa_memblockq_get_read_index
    0000000000041620 T pa_memblockq_get_tlength
    00000000000417a0 T pa_memblockq_get_write_index
    0000000000042650 T pa_memblockq_is_empty
    0000000000041254 T pa_memblockq_is_readable
    0000000000041f80 T pa_memblockq_new
    0000000000040d34 T pa_memblockq_peek
    0000000000040f70 T pa_memblockq_peek_fixed_size
    0000000000041b40 T pa_memblockq_pop_missing
    0000000000040c84 T pa_memblockq_prebuf_active
    00000000000419b0 T pa_memblockq_prebuf_disable
    0000000000041a10 T pa_memblockq_prebuf_force
    0000000000040444 T pa_memblockq_push
    0000000000041800 T pa_memblockq_push_align
    0000000000040b50 T pa_memblockq_rewind
    00000000000414c4 T pa_memblockq_seek
    0000000000041e90 T pa_memblockq_set_maxlength
    0000000000041f14 T pa_memblockq_set_maxrewind
    0000000000041ce0 T pa_memblockq_set_minreq
    0000000000041c04 T pa_memblockq_set_prebuf
    00000000000425a0 T pa_memblockq_set_silence
    0000000000041d70 T pa_memblockq_set_tlength
    00000000000426b4 T pa_memblockq_silence
    0000000000042364 T pa_memblockq_splice
    0000000000042514 T pa_memblockq_willneed
    000000000003cab4 T pa_memblock_ref
    000000000003c6b0 T pa_memblock_ref_is_one
    000000000003c8c0 T pa_memblock_release
    000000000003c5f0 T pa_memblock_set_is_silence
    000000000003ecf4 T pa_memblock_unref
    000000000003f4c0 T pa_memblock_unref_fixed
    000000000003cb80 T pa_memblock_will_need
    000000000004d7d0 T pa_memchunk_dump_to_file
    0000000000042e24 T pa_memchunk_isset
    0000000000042a40 T pa_memchunk_make_writable
    0000000000042cd0 T pa_memchunk_memcpy
    0000000000042ba0 T pa_memchunk_reset
    000000000004d984 T pa_memchunk_sine
    0000000000042c00 T pa_memchunk_will_need
    000000000003ea04 T pa_memexport_free
    000000000003e654 T pa_memexport_new
    000000000003e7a4 T pa_memexport_process_release
    000000000003f8d4 T pa_memexport_put
    000000000003e180 T pa_memimport_attach_memfd
    000000000003f5f4 T pa_memimport_free
    000000000003e2e4 T pa_memimport_get
    000000000003e040 T pa_memimport_new
    000000000003e5b0 T pa_memimport_process_revoke
    000000000003ccb0 T pa_mempool_block_size_max
    000000000003de94 T pa_mempool_get_memfd_fd
    000000000003d204 T pa_mempool_get_shm_id
    000000000003cc54 T pa_mempool_get_stat
    000000000003dc50 T pa_mempool_is_global
    000000000003d1a0 T pa_mempool_is_memfd_backed
    000000000003dcb0 T pa_mempool_is_per_client
    000000000003c334 T pa_mempool_is_remote_writable
    000000000003d070 T pa_mempool_is_shared
    000000000003cd10 T pa_mempool_new
    000000000003d290 T pa_mempool_ref
    000000000003d0d4 T pa_mempool_set_is_remote_writable
    000000000003dcd0 T pa_mempool_take_memfd_fd
    000000000003eb70 T pa_mempool_unref
    000000000003cf60 T pa_mempool_vacuum
    0000000000045d30 T pa_memtrap_add
    0000000000046230 T pa_memtrap_install
    0000000000045cc0 T pa_memtrap_is_good
    0000000000045ec0 T pa_memtrap_remove
    0000000000045fc0 T pa_memtrap_update
    000000000001ee70 T pa_msleep
    0000000000058494 T pa_mutex_free
    0000000000058550 T pa_mutex_lock
    0000000000058210 T pa_mutex_new
    0000000000058600 T pa_mutex_try_lock
    00000000000586c0 T pa_mutex_unlock
    000000000002bd94 T pa_ncpus
    000000000002d870 T pa_nullify_stdfds
    00000000000430b0 T pa_once_begin
    0000000000043154 T pa_once_end
    000000000002c760 T pa_open_cloexec
    000000000002cd94 T pa_open_config_file
    0000000000028180 T pa_own_uid_in_group
    0000000000043604 T pa_packet_data
    0000000000043330 T pa_packet_new
    0000000000043424 T pa_packet_new_data
    0000000000043504 T pa_packet_new_dynamic
    0000000000043710 T pa_packet_ref
    00000000000437e0 T pa_packet_unref
    000000000002daa0 T pa_page_size
    0000000000026880 T pa_parent_dir
    0000000000043910 T pa_parse_address
    00000000000279b0 T pa_parse_boolean
    0000000000029250 T pa_parsehex
    000000000001e190 T pa_parse_sample_format
    000000000002a370 T pa_parse_volume
    000000000001eb00 T pa_path_get_filename
    0000000000044c70 T pa_pdispatch_creds
    00000000000442c0 T pa_pdispatch_is_pending
    0000000000043f70 T pa_pdispatch_new
    00000000000446a0 T pa_pdispatch_ref
    0000000000044070 T pa_pdispatch_register_reply
    0000000000044a00 T pa_pdispatch_run
    0000000000044380 T pa_pdispatch_set_drain_callback
    0000000000044d34 T pa_pdispatch_take_ancil_data
    0000000000044590 T pa_pdispatch_unref
    00000000000444a0 T pa_pdispatch_unregister_reply
    0000000000045a50 T pa_pid_file_check_running
    0000000000045400 T pa_pid_file_create
    00000000000458d4 T pa_pid_file_kill
    00000000000456f0 T pa_pid_file_remove
    000000000002c470 T pa_pipe_buf
    000000000002cad0 T pa_pipe_cloexec
    000000000001ad70 T pa_proplist_clear
    000000000001ac80 T pa_proplist_contains
    000000000001afc0 T pa_proplist_copy
    000000000001b120 T pa_proplist_equal
    00000000000197c0 T pa_proplist_free
    000000000001a750 T pa_proplist_from_string
    000000000001a050 T pa_proplist_get
    0000000000019f40 T pa_proplist_gets
    0000000000046c00 T pa_proplist_get_stream_group
    000000000001b0b0 T pa_proplist_isempty
    000000000001a3f0 T pa_proplist_iterate
    0000000000019590 T pa_proplist_key_valid
    00000000000197a0 T pa_proplist_new
    0000000000019d44 T pa_proplist_set
    0000000000019af0 T pa_proplist_setf
    00000000000199e0 T pa_proplist_setp
    0000000000019820 T pa_proplist_sets
    000000000001b050 T pa_proplist_size
    000000000001a704 T pa_proplist_to_string
    000000000001a410 T pa_proplist_to_string_sep
    000000000001a1e0 T pa_proplist_unset
    000000000001a2c4 T pa_proplist_unset_many
    000000000001add0 T pa_proplist_update
    0000000000048180 T pa_pstream_attach_memfd_shmid
    0000000000049d70 T pa_pstream_enable_memfd
    0000000000049c70 T pa_pstream_enable_shm
    0000000000049f60 T pa_pstream_get_memfd
    0000000000049ea4 T pa_pstream_get_shm
    0000000000049110 T pa_pstream_is_pending
    0000000000047fc0 T pa_pstream_new
    0000000000049ba0 T pa_pstream_ref
    0000000000047244 T pa_pstream_register_memfd_mempool
    00000000000470f4 T pa_pstream_send_error
    0000000000048590 T pa_pstream_send_memblock
    0000000000048334 T pa_pstream_send_packet
    0000000000048844 T pa_pstream_send_release
    0000000000048a74 T pa_pstream_send_revoke
    00000000000471a4 T pa_pstream_send_simple_ack
    0000000000046f30 T pa_pstream_send_tagstruct_with_creds
    0000000000046fd0 T pa_pstream_send_tagstruct_with_fds
    0000000000048c90 T pa_pstream_set_die_callback
    0000000000048d50 T pa_pstream_set_drain_callback
    0000000000048ed0 T pa_pstream_set_receive_memblock_callback
    0000000000048e10 T pa_pstream_set_receive_packet_callback
    0000000000048f90 T pa_pstream_set_release_callback
    0000000000049050 T pa_pstream_set_revoke_callback
    000000000004a014 T pa_pstream_set_srbchannel
    000000000004a190 T pa_pstream_unlink
    000000000004a284 T pa_pstream_unref
    000000000004ac90 T pa_queue_free
    000000000004ae10 T pa_queue_isempty
    000000000004a9a0 T pa_queue_new
    000000000004ab60 T pa_queue_pop
    000000000004a9c0 T pa_queue_push
    00000000000275e0 T pa_raise_priority
    000000000004b080 T pa_random
    000000000004afc0 T pa_random_seed
    000000000003ae00 T pa_ratelimit_test
    00000000000268d0 T pa_read
    000000000002d9b4 T pa_read_line_from_file
    000000000002ab90 T pa_readlink
    000000000002c090 T pa_realpath
    000000000002bcf0 T pa_reduce
    000000000002bdb4 T pa_replace
    000000000002c494 T pa_reset_personality
    0000000000027730 T pa_reset_priority
    000000000002b334 T pa_reset_sigs
    000000000002b230 T pa_reset_sigsv
    0000000000025c90 T pa_rtclock_age
    0000000000025f60 T pa_rtclock_from_wallclock
    0000000000025b40 T pa_rtclock_get
    0000000000025d40 T pa_rtclock_hrtimer
    0000000000025e20 T pa_rtclock_hrtimer_enable
    000000000001f5d0 T pa_rtclock_now
    000000000002c4f0 T pa_run_from_build_tree
    000000000002da90 T pa_running_in_vm
    0000000000043220 T pa_run_once
    000000000002d850 T pa_runtime_path
    000000000004d590 T pa_sample_clamp
    000000000001e5c0 T pa_sample_format_is_be
    000000000001e510 T pa_sample_format_is_le
    000000000001dda0 T pa_sample_format_to_string
    000000000001d630 T pa_sample_format_valid
    000000000001d6c0 T pa_sample_rate_valid
    000000000001d794 T pa_sample_size
    000000000001d640 T pa_sample_size_of_format
    000000000001dc00 T pa_sample_spec_equal
    000000000001d5d0 T pa_sample_spec_init
    000000000001dde0 T pa_sample_spec_snprint
    000000000001d700 T pa_sample_spec_valid
    0000000000059654 T pa_semaphore_free
    00000000000595d0 T pa_semaphore_new
    0000000000059710 T pa_semaphore_post
    00000000000597c0 T pa_semaphore_wait
    000000000002bbd0 T pa_session_id
    000000000002b4f4 T pa_set_env
    000000000002b600 T pa_set_env_and_record
    000000000004e470 T pa_shm_attach
    000000000004e480 T pa_shm_cleanup
    000000000004e6b4 T pa_shm_create_rw
    000000000004df00 T pa_shm_free
    000000000004e230 T pa_shm_punch
    0000000000027d84 T pa_sig2str
    000000000004d260 T pa_silence_cache_done
    000000000004d1f0 T pa_silence_cache_init
    000000000004cac0 T pa_silence_memblock
    000000000004cbb0 T pa_silence_memchunk
    000000000004d310 T pa_silence_memchunk_get
    000000000004c960 T pa_silence_memory
    0000000000055f20 T pa_smoother_2_free
    0000000000056290 T pa_smoother_2_get
    00000000000563e4 T pa_smoother_2_get_delay
    00000000000566b4 T pa_smoother_2_new
    0000000000056940 T pa_smoother_2_pause
    0000000000055f74 T pa_smoother_2_put
    00000000000565f4 T pa_smoother_2_reset
    00000000000569f0 T pa_smoother_2_resume
    0000000000056764 T pa_smoother_2_set_rate
    0000000000056830 T pa_smoother_2_set_sample_spec
    0000000000056510 T pa_smoother_2_translate
    0000000000056590 T pa_smoother_2_usb_hack_enable
    0000000000055ab0 T pa_smoother_fix_now
    00000000000554e0 T pa_smoother_free
    00000000000558d4 T pa_smoother_get
    0000000000055d54 T pa_smoother_new
    0000000000055a40 T pa_smoother_pause
    0000000000055540 T pa_smoother_put
    0000000000055cb0 T pa_smoother_reset
    0000000000055b20 T pa_smoother_resume
    00000000000559e0 T pa_smoother_set_time_offset
    0000000000055bb4 T pa_smoother_translate
    00000000000580a0 T pa_sndfile_dump_formats
    0000000000057ee0 T pa_sndfile_format_from_string
    0000000000057a90 T pa_sndfile_init_proplist
    00000000000576d0 T pa_sndfile_read_channel_map
    0000000000057c90 T pa_sndfile_readf_function
    0000000000057340 T pa_sndfile_read_sample_spec
    00000000000578f0 T pa_sndfile_write_channel_map
    0000000000057db4 T pa_sndfile_writef_function
    00000000000574f0 T pa_sndfile_write_sample_spec
    000000000002a6d0 T pa_snprintf
    0000000000050b80 T pa_socket_address_is_local
    00000000000502b0 T pa_socket_client_is_local
    000000000004f450 T pa_socket_client_new_ipv4
    000000000004fe84 T pa_socket_client_new_ipv6
    000000000004f130 T pa_socket_client_new_sockaddr
    000000000004ffe0 T pa_socket_client_new_string
    000000000004f560 T pa_socket_client_new_unix
    000000000004f684 T pa_socket_client_ref
    000000000004fdd0 T pa_socket_client_set_callback
    000000000004efe4 T pa_socket_client_unref
    000000000002ca44 T pa_socket_cloexec
    0000000000050c50 T pa_socket_is_local
    0000000000050370 T pa_socket_peer_to_string
    0000000000050984 T pa_socket_set_rcvbuf
    0000000000050a80 T pa_socket_set_sndbuf
    0000000000027b84 T pa_split
    0000000000027bf0 T pa_split_in_place
    0000000000027c70 T pa_split_spaces
    0000000000027cf4 T pa_split_spaces_in_place
    000000000002c2a0 T pa_split_spaces_strv
    00000000000271e0 T pa_sprintf_malloc
    000000000004c420 T pa_srbchannel_export
    000000000004c510 T pa_srbchannel_free
    000000000004c5d0 T pa_srbchannel_new
    000000000004c750 T pa_srbchannel_new_from_template
    000000000004c330 T pa_srbchannel_read
    000000000004c464 T pa_srbchannel_set_callback
    000000000004c254 T pa_srbchannel_write
    00000000000293f0 T pa_startswith
    000000000002d860 T pa_state_path
    0000000000058a90 T pa_static_mutex_get
    00000000000598a0 T pa_static_semaphore_get
    0000000000050e54 T pa_strbuf_free
    0000000000051560 T pa_strbuf_isempty
    0000000000050e34 T pa_strbuf_new
    0000000000051370 T pa_strbuf_printf
    0000000000051300 T pa_strbuf_putc
    0000000000051230 T pa_strbuf_puts
    0000000000051100 T pa_strbuf_putsn
    0000000000050ee4 T pa_strbuf_to_string
    0000000000051080 T pa_strbuf_to_string_free
    00000000000158d0 T pa_strerror
    000000000002b7a0 T pa_str_in_list
    000000000002b880 T pa_str_in_list_spaces
    00000000000286c4 T pa_strip
    0000000000028640 T pa_strip_nl
    00000000000274a0 T pa_strlcpy
    0000000000051ab0 T pa_strlist_data
    0000000000051840 T pa_strlist_free
    0000000000051a54 T pa_strlist_next
    0000000000051940 T pa_strlist_parse
    0000000000051880 T pa_strlist_pop
    00000000000515d0 T pa_strlist_prepend
    00000000000516e0 T pa_strlist_remove
    0000000000051a30 T pa_strlist_reverse
    0000000000051680 T pa_strlist_to_string
    000000000002b940 T pa_str_strip_suffix
    00000000000216d0 T pa_sw_cvolume_divide
    00000000000218f0 T pa_sw_cvolume_divide_scalar
    0000000000021300 T pa_sw_cvolume_multiply
    0000000000021520 T pa_sw_cvolume_multiply_scalar
    0000000000020be0 T pa_sw_cvolume_snprint_dB
    000000000001fd50 T pa_sw_volume_divide
    000000000001feb4 T pa_sw_volume_from_dB
    000000000001fe74 T pa_sw_volume_from_linear
    000000000001fc50 T pa_sw_volume_multiply
    0000000000020154 T pa_sw_volume_snprint_dB
    000000000001ff90 T pa_sw_volume_to_dB
    000000000001ff00 T pa_sw_volume_to_linear
    0000000000053af0 T pa_tagstruct_data
    0000000000053a80 T pa_tagstruct_eof
    0000000000051fa0 T pa_tagstruct_free
    0000000000054d80 T pa_tagstruct_get
    0000000000053930 T pa_tagstruct_get_arbitrary
    0000000000053ba0 T pa_tagstruct_get_boolean
    00000000000541d0 T pa_tagstruct_get_channel_map
    0000000000054320 T pa_tagstruct_get_cvolume
    0000000000054710 T pa_tagstruct_get_format_info
    0000000000054550 T pa_tagstruct_get_proplist
    0000000000053514 T pa_tagstruct_gets
    0000000000054080 T pa_tagstruct_gets64
    0000000000053814 T pa_tagstruct_get_sample_spec
    0000000000053ca0 T pa_tagstruct_get_timeval
    0000000000053640 T pa_tagstruct_getu32
    0000000000053f30 T pa_tagstruct_getu64
    0000000000053720 T pa_tagstruct_getu8
    0000000000053de0 T pa_tagstruct_get_usec
    0000000000054470 T pa_tagstruct_get_volume
    0000000000051e54 T pa_tagstruct_new
    0000000000051ec0 T pa_tagstruct_new_fixed
    0000000000054850 T pa_tagstruct_put
    00000000000525b0 T pa_tagstruct_put_arbitrary
    00000000000527a4 T pa_tagstruct_put_boolean
    0000000000052e20 T pa_tagstruct_put_channel_map
    0000000000053014 T pa_tagstruct_put_cvolume
    0000000000053440 T pa_tagstruct_put_format_info
    0000000000053280 T pa_tagstruct_put_proplist
    0000000000052060 T pa_tagstruct_puts
    0000000000052ca0 T pa_tagstruct_puts64
    00000000000524d0 T pa_tagstruct_put_sample_spec
    0000000000052910 T pa_tagstruct_put_timeval
    00000000000521f4 T pa_tagstruct_putu32
    0000000000052b20 T pa_tagstruct_putu64
    0000000000052360 T pa_tagstruct_putu8
    00000000000529a0 T pa_tagstruct_put_usec
    0000000000053114 T pa_tagstruct_put_volume
    0000000000058f30 T pa_thread_free
    0000000000058dd0 T pa_thread_free_nojoin
    0000000000058fb0 T pa_thread_get_data
    0000000000059100 T pa_thread_get_name
    0000000000058d10 T pa_thread_is_running
    0000000000058e50 T pa_thread_join
    000000000001ef10 T pa_thread_make_realtime
    0000000000058c20 T pa_thread_new
    0000000000059460 T pa_thread_self
    0000000000059010 T pa_thread_set_data
    0000000000059070 T pa_thread_set_name
    00000000000591c4 T pa_thread_yield
    0000000000026070 T pa_timespec_load
    00000000000260b0 T pa_timespec_store
    000000000001f360 T pa_timeval_add
    000000000001f2b0 T pa_timeval_age
    000000000001f0d0 T pa_timeval_cmp
    000000000001f1b0 T pa_timeval_diff
    000000000001f5b0 T pa_timeval_load
    0000000000026160 T pa_timeval_rtstore
    000000000001f514 T pa_timeval_store
    000000000001f444 T pa_timeval_sub
    00000000000592b0 T pa_tls_free
    0000000000059370 T pa_tls_get
    0000000000059230 T pa_tls_new
    00000000000593d0 T pa_tls_set
    0000000000056c30 T pa_tokenizer_free
    0000000000056c90 T pa_tokenizer_get
    0000000000056a70 T pa_tokenizer_new
    000000000002a850 T pa_truncate_utf8
    00000000000282f0 T pa_uid_in_group
    000000000002bc00 T pa_uname_string
    000000000002b070 T pa_unblock_sigs
    000000000002afc0 T pa_unblock_sigsv
    000000000002c044 T pa_unescape
    0000000000028760 T pa_unlock_lockfile
    000000000002b5a0 T pa_unset_env
    000000000002b6d0 T pa_unset_env_recorded
    000000000001db00 T pa_usec_to_bytes
    000000000004d730 T pa_usec_to_bytes_round_up
    000000000001b680 T pa_utf8_filter
    000000000001b700 T pa_utf8_to_locale
    000000000001b624 T pa_utf8_valid
    0000000000020020 T pa_volume_snprint
    00000000000202b0 T pa_volume_snprint_verbose
    000000000002a584 T pa_vsnprintf
    0000000000027364 T pa_vsprintf_malloc
    000000000002db04 T pa_will_need
    0000000000026930 T pa_write
    00000000000194d4 T pa_xfree
    000000000002c260 T pa_xfreev
    0000000000019190 T pa_xmalloc
    0000000000019250 T pa_xmalloc0
    00000000000193d0 T pa_xmemdup
    0000000000019314 T pa_xrealloc
    0000000000019420 T pa_xstrdup
    0000000000019450 T pa_xstrndup
    000000000002f6d0 T st_13linear2alaw
    000000000002f7a4 T st_14linear2ulaw
    000000000002f744 T st_alaw2linear16
    000000000002f820 T st_ulaw2linear16
  + usr/lib/pulseaudio/libpulsedsp.so
    0000000000006c10 T access
    0000000000005b60 T close
    0000000000007304 T fclose
    00000000000070a0 T fopen
    0000000000007220 T fopen64
    0000000000004374 T ioctl
    00000000000069c0 T open
    0000000000006b60 T __open_2
    0000000000006a40 T open64
    0000000000006ff0 T __open64_2
    0000000000006e50 T stat
    0000000000006d00 T stat64
  + usr/lib/x86_64-linux-gnu/libgcc_s.so.1
  + usr/share/X11/XErrorDB
    !
    ! Copyright 1993, 1995, 1998  The Open Group
    
    ! Permission to use, copy, modify, distribute, and sell this software and its
    ! documentation for any purpose is hereby granted without fee, provided that
    ! the above copyright notice appear in all copies and that both that
    ! copyright notice and this permission notice appear in supporting
    ! documentation.
    !
    ! The above copyright notice and this permission notice shall be
    ! included in all copies or substantial portions of the Software.
    !
    ! THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    ! EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    ! MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    ! IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
    ! OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
    ! ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    ! OTHER DEALINGS IN THE SOFTWARE.
    !
    ! Except as contained in this notice, the name of The Open Group shall
     ... (truncated) ...
  + usr/share/X11/Xcms.txt
    /*
     * (c) Copyright 1990 1991 Tektronix Inc.
     * 	All Rights Reserved
     *
     * Permission to use, copy, modify, and distribute this software and its
     * documentation for any purpose and without fee is hereby granted,
     * provided that the above copyright notice appear in all copies and that
     * both that copyright notice and this permission notice appear in
     * supporting documentation, and that the name of Tektronix not be used
     * in advertising or publicity pertaining to distribution of the software
     * without specific, written prior permission.
     *
     * Tektronix disclaims all warranties with regard to this software, including
     * all implied warranties of merchantability and fitness, in no event shall
     * Tektronix be liable for any special, indirect or consequential damages or
     * any damages whatsoever resulting from loss of use, data or profits,
     * whether in an action of contract, negligence or other tortious action,
     * arising out of or in connection with the use or performance of this
     * software.
     *
     *
     ... (truncated) ...
  + usr/share/X11/locale/compose.dir
    #
    #	This file contains compose table file names.
    #	The first word is the compose table file name
    #	and the second word is the full locale name.
    #
    #
    iso8859-1/Compose		C
    iso8859-1/Compose		af_ZA.ISO8859-1
    iso8859-6/Compose		ar_AA.ISO8859-6
    iso8859-6/Compose		ar_AE.ISO8859-6
    iso8859-6/Compose		ar_BH.ISO8859-6
    iso8859-6/Compose		ar_DZ.ISO8859-6
    iso8859-6/Compose		ar_EG.ISO8859-6
    iso8859-6/Compose		ar_IQ.ISO8859-6
    iso8859-6/Compose		ar_JO.ISO8859-6
    iso8859-6/Compose		ar_KW.ISO8859-6
    iso8859-6/Compose		ar_LB.ISO8859-6
    iso8859-6/Compose		ar_LY.ISO8859-6
    iso8859-6/Compose		ar_MA.ISO8859-6
    iso8859-6/Compose		ar_OM.ISO8859-6
    iso8859-6/Compose		ar_QA.ISO8859-6
     ... (truncated) ...
  + usr/share/X11/locale/en_US.UTF-8/Compose
    # UTF-8 (Unicode) Compose sequences
    #
    # Spacing versions of accents (mostly)
    <dead_tilde> <space>			: "~"	asciitilde # TILDE
    <dead_tilde> <dead_tilde>		: "~"	asciitilde # TILDE
    <Multi_key> <minus> <space>		: "~"	asciitilde # TILDE
    <Multi_key> <space> <minus>		: "~"	asciitilde # TILDE
    <dead_acute> <space>			: "'"	apostrophe # APOSTROPHE
    <dead_acute> <dead_acute>		: "´"	acute # ACUTE ACCENT
    <Multi_key> <apostrophe> <apostrophe>	: "´"	acute # ACUTE ACCENT
    <dead_grave> <space>			: "`"	grave # GRAVE ACCENT
    <dead_grave> <dead_grave>		: "`"	grave # GRAVE ACCENT
    <dead_circumflex> <space>		: "^"	asciicircum # CIRCUMFLEX ACCENT
    <dead_circumflex> <dead_circumflex>	: "^"	asciicircum # CIRCUMFLEX ACCENT
    <Multi_key> <greater> <space>		: "^"	asciicircum # CIRCUMFLEX ACCENT
    <Multi_key> <space> <greater>		: "^"	asciicircum # CIRCUMFLEX ACCENT
    <dead_abovering> <space>		: "°"	degree # DEGREE SIGN
    <dead_abovering> <dead_abovering>	: "°"	degree # DEGREE SIGN
    <Multi_key> <o> <o>			: "°"	degree # DEGREE SIGN
    <Multi_key> <asterisk> <0>		: "°"	degree # DEGREE SIGN
    <Multi_key> <0> <asterisk>		: "°"	degree # DEGREE SIGN
     ... (truncated) ...
  + usr/share/X11/locale/en_US.UTF-8/XI18N_OBJS
    # CATEGORY(XLC|XIM|OM)	SHARED_LIBRARY_NAME	FUNCTION_NAME
    #
    #	XI18N objects table for euro locales
    #
    XLC	common/xlcUTF8Load	_XlcUtf8Loader	        # XLC_open
    XOM	common/xomGeneric	_XomGenericOpenOM	# XOM_open
    XIM	common/ximcp	_XimOpenIM _XimRegisterIMInstantiateCallback  _XimUnRegisterIMInstantiateCallback # XIM_open	XIM_register XIM_unregister
  + usr/share/X11/locale/en_US.UTF-8/XLC_LOCALE
    #  XLocale Database Sample for en_US.UTF-8
    #
    #
    # 	XLC_FONTSET category
    #
    XLC_FONTSET
    on_demand_loading	True
    object_name		generic
    # 	fs0 class (7 bit ASCII)
    fs0	{
    	charset	{
    		name	ISO8859-1:GL
    	}
    	font	{
    		primary		ISO8859-1:GL
    		vertical_rotate	all
    	}
    }
    #	fs1 class (ISO8859 families)
    fs1	{
    	charset	{
     ... (truncated) ...
  + usr/share/X11/locale/locale.alias
  + usr/share/X11/locale/locale.dir
    #
    #	This file contains locale database file names
    #	The first word is the locale database file name and
    #	the second word is the full locale name.
    #
    #
    C/XLC_LOCALE				C
    iso8859-1/XLC_LOCALE			af_ZA.ISO8859-1
    iso8859-6/XLC_LOCALE			ar_AA.ISO8859-6
    iso8859-6/XLC_LOCALE			ar_AE.ISO8859-6
    iso8859-6/XLC_LOCALE			ar_BH.ISO8859-6
    iso8859-6/XLC_LOCALE			ar_DZ.ISO8859-6
    iso8859-6/XLC_LOCALE			ar_EG.ISO8859-6
    iso8859-6/XLC_LOCALE			ar_IQ.ISO8859-6
    iso8859-6/XLC_LOCALE			ar_JO.ISO8859-6
    iso8859-6/XLC_LOCALE			ar_KW.ISO8859-6
    iso8859-6/XLC_LOCALE			ar_LB.ISO8859-6
    iso8859-6/XLC_LOCALE			ar_LY.ISO8859-6
    iso8859-6/XLC_LOCALE			ar_MA.ISO8859-6
    iso8859-6/XLC_LOCALE			ar_OM.ISO8859-6
    iso8859-6/XLC_LOCALE			ar_QA.ISO8859-6
     ... (truncated) ...
  + usr/share/alsa/alsa.conf
    @hooks [
    	{
    		func load
    		files [
    			"/data/data/com.winlator/files/rootfs/etc/alsa/conf.d/android_aserver.conf"
    		]
    		errors false
    	}
    ]
  + usr/share/alsa/cards/AACI.conf
    #
    # ALSA library configuration for ARM AACI Primecell PL-041
    #
    
    <confdir:pcm/front.conf>
    
    AACI.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    <confdir:pcm/surround40.conf>
    
    AACI.pcm.surround40.0 "cards.AACI.pcm.front.0"
    
    <confdir:pcm/surround51.conf>
    
     ... (truncated) ...
  + usr/share/alsa/cards/ATIIXP-MODEM.conf
    #
    # Configuration for the ATI IXP 150/200/250 modem controllers
    #
    
    <confdir:pcm/modem.conf>
    
    ATIIXP-MODEM.pcm.modem.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type route
    	slave.pcm {
    		type hw
    		card $CARD
    	}
    	slave.channels 2
    	slave.format S16_LE
    	ttable.0.1 1
    	ttable.1.0 0
    	hint.show off
     ... (truncated) ...
  + usr/share/alsa/cards/ATIIXP-SPDMA.conf
    #
    # Configuration for the ATI IXP 150/200/250 chips
    #
    
    <confdir:pcm/front.conf>
    
    ATIIXP-SPDMA.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with dmix/dsnoop
    ATIIXP.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
     ... (truncated) ...
  + usr/share/alsa/cards/ATIIXP.conf
    #
    # Configuration for the ATI IXP 150/200/250 chips
    #
    
    <confdir:pcm/front.conf>
    
    ATIIXP.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with dmix/dsnoop
    ATIIXP.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
     ... (truncated) ...
  + usr/share/alsa/cards/AU8810.conf
    #
    # Configuration for the AU8810 chip
    #
    
    <confdir:pcm/front.conf>
    
    AU8810.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    <confdir:pcm/iec958.conf>
    
    AU8810.pcm.iec958.0 {
    	@args [ CARD AES0 AES1 AES2 AES3 ]
    	@args.CARD {
    		type string
     ... (truncated) ...
  + usr/share/alsa/cards/AU8820.conf
    #
    # Configuration for the AU8820 chip
    #
    
    <confdir:pcm/front.conf>
    
    AU8820.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
  + usr/share/alsa/cards/AU8830.conf
    #
    # Configuration for the AU8830 chip
    #
    
    <confdir:pcm/front.conf>
    
    AU8830.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    <confdir:pcm/surround40.conf>
    
    AU8830.pcm.surround40.0 "cards.AU8830.pcm.front.0"
    
    <confdir:pcm/iec958.conf>
    
     ... (truncated) ...
  + usr/share/alsa/cards/Audigy.conf
    #
    # Configuration for the Audigy chip
    #
    
    <confdir:pcm/front.conf>
    
    Audigy.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hooks
    	slave.pcm {
    		type hw
    		card $CARD
    		chmap [ "UNKNOWN" "FL,FR" ]
    	}
    	hooks.0 {
    		type ctl_elems
    		hook_args [
    			{
     ... (truncated) ...
  + usr/share/alsa/cards/Audigy2.conf
    #
    # Configuration for the Audigy2 chip
    #
    
    <confdir:pcm/front.conf>
    
    Audigy2.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hooks
    	slave.pcm {
    		type hw
    		card $CARD
    		chmap [ "UNKNOWN" "FL,FR" ]
    	}
    	hooks.0 {
    		type ctl_elems
    		hook_args [
    			{
     ... (truncated) ...
  + usr/share/alsa/cards/Aureon51.conf
    #
    # Configuration for the Aureon51 (Envy24HT) chip
    #
    
    # default with dmix & dsnoop
    Aureon51.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type asym
    	playback.pcm {
    		type plug
    		slave.pcm {
    			@func concat
    			strings [ "dmix:" $CARD ",FORMAT=S32_LE" ]
    		}
    	}
    	capture.pcm {
    		type plug
    		slave.pcm {
     ... (truncated) ...
  + usr/share/alsa/cards/Aureon71.conf
    #
    # Configuration for the Aureon71 (Envy24HT) chip
    #
    
    # default with dmix & dsnoop
    Aureon71.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type asym
    	playback.pcm {
    		type plug
    		slave.pcm {
    			@func concat
    			strings [ "dmix:" $CARD ",FORMAT=S32_LE" ]
    		}
    	}
    	capture.pcm {
    		type plug
    		slave.pcm {
     ... (truncated) ...
  + usr/share/alsa/cards/CA0106.conf
    #
    # Configuration for the CA0106 chip
    #
    
    # default with dmix & dsnoop
    CA0106.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type asym
    	playback.pcm {
    		type plug
    		slave.pcm {
    			@func concat
    			strings [ "dmix:" $CARD ]
    		}
    	}
    	capture.pcm {
    		type plug
    		slave.pcm {
     ... (truncated) ...
  + usr/share/alsa/cards/CMI8338-SWIEC.conf
    #
    # Configuration for the CMI8338/8738 chip (w/o multi-channel support)
    # using software IEC958 subframe conversion
    #
    
    <confdir:pcm/front.conf>
    
    CMI8338-SWIEC.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with dmix/dsnoop
    CMI8338-SWIEC.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
     ... (truncated) ...
  + usr/share/alsa/cards/CMI8338.conf
    #
    # Configuration for the CMI8338/8738 chip (w/o multi-channel support)
    #
    
    <confdir:pcm/front.conf>
    
    CMI8338.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with dmix/dsnoop
    CMI8338.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
     ... (truncated) ...
  + usr/share/alsa/cards/CMI8738-MC6.conf
    #
    # Configuration for the CMI8738 chip with 4/6 multi-channel support
    #
    
    <confdir:pcm/front.conf>
    
    CMI8738-MC6.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with dmix/dsnoop
    CMI8738-MC6.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
     ... (truncated) ...
  + usr/share/alsa/cards/CMI8738-MC8.conf
    #
    # Configuration for the CMI8768 chip with 8 multi-channel support
    #
    
    <confdir:pcm/front.conf>
    
    CMI8738-MC8.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type softvol
    	slave.pcm {
    		type hw
    		card $CARD
    	}
    	control {
    		name "PCM Playback Volume"
    		card $CARD
    	}
    }
     ... (truncated) ...
  + usr/share/alsa/cards/CMI8788.conf
    #
    # Configuration for the CMI8788 chip
    #
    
    <confdir:pcm/front.conf>
    
    CMI8788.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with dmix & dsnoop
    CMI8788.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
     ... (truncated) ...
  + usr/share/alsa/cards/CS46xx.conf
    #
    # Configuration for the CS46xx chip
    #
    
    <confdir:pcm/front.conf>
    
    CS46xx.pcm.front.0 {
    	@args [ CARD  ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with plughw
    # CS46xx supports multi-playback
    CS46xx.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
     ... (truncated) ...
  + usr/share/alsa/cards/EMU10K1.conf
    #
    # Configuration for the EMU10K1 chip
    #
    
    <confdir:pcm/front.conf>
    
    EMU10K1.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type asym
    	playback.pcm {
    		type hooks
    		slave.pcm {
    			type hw
    			card $CARD
    			chmap [ "UNKNOWN" "FL,FR" ]
    		}
    		hooks.0 {
    			type ctl_elems
     ... (truncated) ...
  + usr/share/alsa/cards/EMU10K1X.conf
    #
    # Configuration for the EMU10K1X chip
    #
    
    # default with dmix & dsnoop
    EMU10K1X.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type asym
    	playback.pcm {
    		type plug
    		slave.pcm {
    			@func concat
    			strings [ "dmix:" $CARD ]
    		}
    	}
    	capture.pcm {
    		type plug
    		slave.pcm {
     ... (truncated) ...
  + usr/share/alsa/cards/ENS1370.conf
    #
    # Configuration for the ENS1370 chip
    #
    
    <confdir:pcm/front.conf>
    
    ENS1370.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    	device 1
    }
    
    # default with dmix/dsnoop
    ENS1370.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
     ... (truncated) ...
  + usr/share/alsa/cards/ENS1371.conf
    #
    # Configuration for the ENS1370 chip
    #
    
    <confdir:pcm/front.conf>
    
    ENS1371.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with dmix/dsnoop
    ENS1371.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
     ... (truncated) ...
  + usr/share/alsa/cards/ES1968.conf
    # configuration for ESS Maestro2
    
    <confdir:pcm/front.conf>
    
    ES1968.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
  + usr/share/alsa/cards/Echo_Echo3G.conf
    #
    # Configuration for the Echo3G driver
    #
    
    <confdir:pcm/front.conf>
    Echo_Echo3G.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    	device 0
    	subdevice 0
    }
    
    <confdir:pcm/rear.conf>
    Echo_Echo3G.pcm.rear.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
     ... (truncated) ...
  + usr/share/alsa/cards/FM801.conf
    #
    # Configuration for the FM801 chip
    #
    
    <confdir:pcm/front.conf>
    
    FM801.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with dmix/dsnoop
    FM801.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
     ... (truncated) ...
  + usr/share/alsa/cards/FWSpeakers.conf
    #
    # Configuration for the LaCie Firewire speakers
    #
    
    FWSpeakers.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type plug
    	slave.pcm {
    		@func concat
    		strings [ "dmix:" $CARD ",FORMAT=S32" ]
    	}
    }
    
    <confdir:pcm/front.conf>
    
    FWSpeakers.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
     ... (truncated) ...
  + usr/share/alsa/cards/FireWave.conf
    #
    # Configuration for the Griffin FireWave Surround
    #
    
    FireWave.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type plug
    	slave.pcm {
    		@func concat
    		strings [ "dmix:" $CARD ",FORMAT=S32" ]
    	}
    }
    
    <confdir:pcm/front.conf>
    
    FireWave.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
     ... (truncated) ...
  + usr/share/alsa/cards/GUS.conf
    #
    # Configuration for the GUS soundcards
    #
    
    <confdir:pcm/front.conf>
    
    GUS.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type route
    	ttable.0.0 1
    	ttable.1.1 1
    	slave.pcm {
    		type hw
    		card $CARD
    	}
    }
  + usr/share/alsa/cards/HDA-Intel.conf
    #
    # Configuration for the Intel HD audio (ICH6/ICH7)
    #
    
    <confdir:pcm/front.conf>
    
    HDA-Intel.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type asym
    	playback.pcm {
    		type softvol
    		slave.pcm {
    			type hw
    			card $CARD
    			subdevice 0
    		}
    		control {
    			name "PCM Playback Volume"
     ... (truncated) ...
  + usr/share/alsa/cards/HdmiLpeAudio.conf
    #
    # Configuration for the Intel HDMI/DP LPE audio
    #
    
    HdmiLpeAudio.pcm.hdmi.0 {
    	@args [ CARD AES0 AES1 AES2 AES3 ]
    	@args.CARD {
    		type string
    	}
    	@args.AES0 {
    		type integer
    	}
    	@args.AES1 {
    		type integer
    	}
    	@args.AES2 {
    		type integer
    	}
    	@args.AES3 {
    		type integer
    	}
     ... (truncated) ...
  + usr/share/alsa/cards/ICE1712.conf
    #
    # Configuration for the ICE1712 (Envy24) chip
    #
    
    # default with dmix & dsnoop
    ICE1712.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type asym
    	playback.pcm {
    		type plug
    		slave.pcm {
    			@func concat
    			strings [ "dmix:" $CARD ",FORMAT=S32_LE" ]
    		}
    	}
    	capture.pcm {
    		type plug
    		slave.pcm {
     ... (truncated) ...
  + usr/share/alsa/cards/ICE1724.conf
    #
    # Configuration for the ICE1724 (Envy24HT) chip
    #
    
    # default with dmix & dsnoop
    ICE1724.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type asym
    	playback.pcm {
    		type plug
    		slave.pcm {
    			@func concat
    			strings [ "dmix:" $CARD ",FORMAT=S32_LE" ]
    		}
    	}
    	capture.pcm {
    		type plug
    		slave.pcm {
     ... (truncated) ...
  + usr/share/alsa/cards/ICH-MODEM.conf
    #
    # Configuration for the Intel/AMD modem controllers
    #
    
    <confdir:pcm/modem.conf>
    
    ICH-MODEM.pcm.modem.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    	hint.show off
    }
  + usr/share/alsa/cards/ICH.conf
    #
    # Configuration for the Intel ICH/ICH2/ICH3 chips
    #
    
    <confdir:pcm/front.conf>
    
    ICH.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type softvol
    	slave.pcm {
    		type hw
    		card $CARD
    	}
    	control {
    		name "PCM Playback Volume"
    		card $CARD
    	}
    }
     ... (truncated) ...
  + usr/share/alsa/cards/ICH4.conf
    #
    # Configuration for the Intel ICH4/ICH5/ICH6 chips
    #
    
    <confdir:pcm/front.conf>
    
    ICH4.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type softvol
    	slave.pcm {
    		type hw
    		card $CARD
    	}
    	control {
    		name "PCM Playback Volume"
    		card $CARD
    	}
    }
     ... (truncated) ...
  + usr/share/alsa/cards/Loopback.conf
    #
    # Configuration for the virtual loopback driver (snd-aloop)
    #
    
    <confdir:pcm/front.conf>
    
    Loopback.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type softvol
    	slave.pcm {
    		type hw
    		card $CARD
    	}
    	control {
    		name "PCM Playback Volume"
    		card $CARD
    	}
    }
     ... (truncated) ...
  + usr/share/alsa/cards/Maestro3.conf
    # configuration for ESS Maestro3
    
    <confdir:pcm/front.conf>
    
    Maestro3.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with dmix/dsnoop
    Maestro3.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type asym
    	playback.pcm {
     ... (truncated) ...
  + usr/share/alsa/cards/NFORCE.conf
    #
    # Configuration for the nVIDIA nForce/2/3
    #
    
    <confdir:pcm/front.conf>
    
    NFORCE.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type softvol
    	slave.pcm {
    		type hw
    		card $CARD
    	}
    	control {
    		name "PCM Playback Volume"
    		card $CARD
    	}
    }
     ... (truncated) ...
  + usr/share/alsa/cards/PC-Speaker.conf
    #
    # Configuration for PC-Speaker driver
    #
    
    <confdir:pcm/front.conf>
    
    PC-Speaker.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type softvol
    	slave.pcm {
    		type hw
    		card $CARD
    	}
    	control {
    		name "Master Playback Volume"
    		card $CARD
    	}
    	min_dB -10.0
     ... (truncated) ...
  + usr/share/alsa/cards/PMac.conf
    #
    # Configuration for PMac
    #
    
    <confdir:pcm/front.conf>
    
    PMac.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with dmix/dsnoop
    PMac.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
     ... (truncated) ...
  + usr/share/alsa/cards/PMacToonie.conf
    #
    # Configuration for PMac Toonie
    #
    
    <confdir:pcm/front.conf>
    
    PMacToonie.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type softvol
    	slave.pcm {
    		type hw
    		card $CARD
    	}
    	control {
    		name "PCM Playback Volume"
    		card $CARD
    	}
    }
     ... (truncated) ...
  + usr/share/alsa/cards/PS3.conf
    #
    # Configuration for PS3
    #
    
    <confdir:pcm/front.conf>
    
    PS3.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type softvol
    	slave.pcm {
    		type hw
    		card $CARD
    		device 0
    	}
    	control {
    		name "PCM Playback Volume"
    		card $CARD
    	}
     ... (truncated) ...
  + usr/share/alsa/cards/RME9636.conf
    #
    # Configuration for the RME9636
    #
    
    <confdir:pcm/front.conf>
    
    RME9636.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # FIXME: This configuration is not valid for double-speed rates.
    
    <confdir:pcm/iec958.conf>
    
    RME9636.pcm.iec958.0 {
    	@args [ CARD AES0 AES1 AES2 AES3 ]
     ... (truncated) ...
  + usr/share/alsa/cards/RME9652.conf
    #
    # Configuration for the RME9652
    #
    
    <confdir:pcm/front.conf>
    
    RME9652.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # FIXME: This configuration is not valid for double-speed rates.
    
    <confdir:pcm/iec958.conf>
    
    RME9652.pcm.iec958.0 {
    	@args [ CARD AES0 AES1 AES2 AES3 ]
     ... (truncated) ...
  + usr/share/alsa/cards/SB-XFi.conf
    #
    # Configuration for the SB X-Fi driver
    #
    
    <confdir:pcm/front.conf>
    
    SB-XFi.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    	device 0
    }
    
    <confdir:pcm/rear.conf>
    
    SB-XFi.pcm.rear.0 {
    	@args [ CARD ]
    	@args.CARD {
     ... (truncated) ...
  + usr/share/alsa/cards/SI7018.conf
    #
    # Configuration for the SI7018 chip
    #
    # This configuration does not reflect hardware.
    #
    
    <confdir:pcm/front.conf>
    
    SI7018.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    	chmap [ "UNKNOWN" "FL,FR" ]
    }
    
    <confdir:pcm/rear.conf>
    
    SI7018.pcm.rear.0 {
     ... (truncated) ...
  + usr/share/alsa/cards/TRID4DWAVENX.conf
    #
    # Configuration for the Trident 4D-Wave NX chip
    #
    
    <confdir:pcm/front.conf>
    
    TRID4DWAVENX.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    	chmap [ "UNKNOWN" "FL,FR" ]
    }
    
    <confdir:pcm/rear.conf>
    
    TRID4DWAVENX.pcm.rear.0 {
    	@args [ CARD ]
    	@args.CARD {
     ... (truncated) ...
  + usr/share/alsa/cards/USB-Audio.conf
    #
    #  USB-Audio.conf - configuration for USB Audio devices
    #
    #
    #  DO NO EDIT; this is an internal ALSA file.
    #  If you want to add your own definitions, put them into /etc/asound.conf or
    #  ~/.asoundrc, with "cards." before the "USB-Audio", e.g.:
    #
    #  cards.USB-Audio.pcm.use_dmix."NoiseBlaster 3000" no
    #
    #  If your device requires such a definition to work correctly, please report it
    #  to <alsa-devel@alsa-project.org>.
    
    
    # If a device has sample formats not supported by dmix, dmix can be disabled
    # here.
    USB-Audio.pcm.use_dmix {
    	"AudioPhile" no    # uses big-endian 24-bit samples
    	"Audiophile USB (tm)" no
    }
    
     ... (truncated) ...
  + usr/share/alsa/cards/VIA686A.conf
    #
    # Configuration for the VIA686A chip
    #
    # SPDIF support is not complete - it might not work, especially with AC3
    # passthru mode...
    #
    
    <confdir:pcm/front.conf>
    
    VIA686A.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with dmix/dsnoop
    VIA686A.pcm.default {
    	@args [ CARD ]
     ... (truncated) ...
  + usr/share/alsa/cards/VIA8233.conf
    #
    # Configuration for the VIA8233/VIA8233C/VIA8235 chip with 4/6 multi-channel support
    #
    
    <confdir:pcm/front.conf>
    
    VIA8233.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with softvol/dsnoop
    # VIA8233 supports multi-playback
    VIA8233.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
     ... (truncated) ...
  + usr/share/alsa/cards/VIA8233A.conf
    #
    # Configuration for the VIA8233A chip with 4/6 multi-channel support
    #
    
    <confdir:pcm/front.conf>
    
    VIA8233A.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with dmix/dsnoop
    VIA8233A.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
     ... (truncated) ...
  + usr/share/alsa/cards/VIA8237.conf
    #
    # Configuration for the VIA8237 chip with 4/6 multi-channel support
    #
    
    <confdir:pcm/front.conf>
    
    VIA8237.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    # default with softvol/dsnoop
    # VIA8237 supports multi-playback
    VIA8237.pcm.default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
     ... (truncated) ...
  + usr/share/alsa/cards/VX222.conf
    #
    # Configuration for Digigram VX222
    #
    
    <confdir:pcm/front.conf>
    
    VX222.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    <confdir:pcm/iec958.conf>
    
    VX222.pcm.iec958.0 {
    	@args [ CARD AES0 AES1 AES2 AES3 ]
    	@args.CARD {
    		type string
     ... (truncated) ...
  + usr/share/alsa/cards/VXPocket.conf
    #
    # Configuration for Digigram VXpocket
    #
    
    <confdir:pcm/front.conf>
    
    VXPocket.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    <confdir:pcm/iec958.conf>
    
    VXPocket.pcm.iec958.0 {
    	@args [ CARD AES0 AES1 AES2 AES3 ]
    	@args.CARD {
    		type string
     ... (truncated) ...
  + usr/share/alsa/cards/VXPocket440.conf
    #
    # Configuration for Digigram VXpocket440
    #
    
    <confdir:pcm/front.conf>
    
    VXPocket440.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    <confdir:pcm/rear.conf>
    
    VXPocket440.pcm.rear.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
     ... (truncated) ...
  + usr/share/alsa/cards/YMF744.conf
    #
    # Configuration for the YMF744 chip
    #
    
    <confdir:pcm/front.conf>
    
    YMF744.pcm.front.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    	}
    	type hw
    	card $CARD
    }
    
    <confdir:pcm/rear.conf>
    
    YMF744.pcm.rear.0 {
    	@args [ CARD ]
    	@args.CARD {
    		type string
     ... (truncated) ...
  + usr/share/alsa/cards/aliases.conf
    #
    #  Define aliases for various drivers
    #
    
    YMF724 cards.YMF744
    YMF724F cards.YMF744
    YMF740 cards.YMF744
    YMF740C cards.YMF744
    YMF754 cards.YMF744
    CMIPCI cards.CMI8338
    CMI8738 cards.CMI8338
    CMI8738-SWIEC cards.CMI8338-SWIEC
    CMI8738-MC4 cards.CMI8738-MC6
    'E-mu APS' cards.EMU10K1
    'GUS MAX' cards.GUS
    'GUS ACE' cards.GUS
    'GUS Extreme' cards.GUS
    'AMD InterWave' cards.GUS
    'Dynasonic 3-D' cards.GUS
    'InterWave STB' cards.GUS
    au8810 cards.AU8810
     ... (truncated) ...
  + usr/share/alsa/cards/pistachio-card.conf
    #
    # Configuration for the pistachio chip.
    #
    # The data sheet of the chip and technical reference manual can be
    found at
    https://docs.creatordev.io/ci40/guides/hardwaredocs/cXT200_datasheet2.p
    df # and
    https://docs.creatordev.io/ci40/guides/hardwaredocs/MIPS_Creator_cXT200_Technical_Reference_Manual_1.0.112.pdf.
    #
    # The list of hardware devices is as per below:
    #
    #  root@OpenWrt:/# arecord -l
    # **** List of CAPTURE Hardware Devices **** card 0: pistachiocard [pistachio-card], device 1: pistachio-spdif-in snd-soc-dummy-dai-1 []
    #   Subdevices: 1/1
    #   Subdevice #0: subdevice #0
    # card 0: pistachiocard [pistachio-card], device 4: pistachio-i2s-in-0 snd-soc-dummy-dai-4 []
    #   Subdevices: 1/1
    #   Subdevice #0: subdevice #0
    #
    # root@OpenWrt:/# aplay -l
    # **** List of PLAYBACK Hardware Devices **** card 0: pistachiocard [pistachio-card], device 0: pistachio-spdif-out snd-soc-dummy-dai-0 []
     ... (truncated) ...
  + usr/share/alsa/cards/vc4-hdmi.conf
    #
    # Configuration for the VC4-HDMI sound card using software IEC958
    # subframe conversion
    #
    
    vc4-hdmi.pcm.hdmi.0 {
    	@args [ CARD AES0 AES1 AES2 AES3 ]
    	@args.CARD {
    		type string
    	}
    	@args.AES0 {
    		type integer
    	}
    	@args.AES1 {
    		type integer
    	}
    	@args.AES2 {
    		type integer
    	}
    	@args.AES3 {
    		type integer
     ... (truncated) ...
  + usr/share/alsa/ctl/default.conf
    #
    # Default control device
    #
    
    ctl.!default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_PCM_CARD
    				ALSA_CARD
    			]
    			default {
    				@func refer
    				name defaults.ctl.card
    			}
    		}
    	}
    	type empty
     ... (truncated) ...
  + usr/share/alsa/pcm/center_lfe.conf
    #
    #  Hardware output from center & lfe speakers
    #
    
    pcm.!center_lfe {
    	@args [ CARD DEV ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_CENTER_LFE_CARD
    				ALSA_PCM_CARD
    				ALSA_CARD
    			]
    			default {
    				@func refer
    				name defaults.pcm.center_lfe.card
    			}
    		}
    	}
     ... (truncated) ...
  + usr/share/alsa/pcm/default.conf
    #
    # Default output
    #
    
    pcm.!default {
    	@args [ CARD ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_PCM_CARD
    				ALSA_CARD
    			]
    			default {
    				@func refer
    				name defaults.pcm.card
    			}
    		}
    	}
    	type empty
     ... (truncated) ...
  + usr/share/alsa/pcm/dmix.conf
    #
    # dmix output
    #
    
    pcm.!dmix {
    	@args [ CARD DEV SUBDEV FORMAT RATE CHANNELS ]
    	@args.CARD {
    		type string
    		default {
    			@func refer
    			name defaults.pcm.dmix.card
    		}
    	}
    	@args.DEV {
    		type integer
    		default {
    			@func refer
    			name defaults.pcm.dmix.device
    		}
    	}
    	@args.SUBDEV {
     ... (truncated) ...
  + usr/share/alsa/pcm/dpl.conf
    pcm.!dpl {
    	@args [ SLAVE ]
    	@args.SLAVE {
    		type string
    	}
    	type route
    	slave.pcm $SLAVE
    	slave.channels 2
    	# input: FL/FR/SL/SR/C/LFE
    	# S=SL+SR, LFE not used
    	ttable.0.0 1
    	ttable.1.1 1
    	ttable.2.0 0.707
    	ttable.2.1 -0.707
    	ttable.3.0 0.707
    	ttable.3.1 -0.707
    	ttable.4.0 0.707
    	ttable.4.1 0.707
    	ttable.5.0 0
    	ttable.5.1 0
    }
     ... (truncated) ...
  + usr/share/alsa/pcm/dsnoop.conf
    #
    # dsnoop
    #
    
    pcm.!dsnoop {
    	@args [ CARD DEV SUBDEV FORMAT RATE ]
    	@args.CARD {
    		type string
    		default {
    			@func refer
    			name defaults.pcm.dsnoop.card
    		}
    	}
    	@args.DEV {
    		type integer
    		default {
    			@func refer
    			name defaults.pcm.dsnoop.device
    		}
    	}
    	@args.SUBDEV {
     ... (truncated) ...
  + usr/share/alsa/pcm/front.conf
    #
    # Hardware output from front speakers
    #
    
    pcm.!front {
    	@args [ CARD DEV ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_FRONT_CARD
    				ALSA_PCM_CARD
    				ALSA_CARD
    			]
    			default {
    				@func refer
    				name defaults.pcm.front.card
    			}
    		}
    	}
     ... (truncated) ...
  + usr/share/alsa/pcm/hdmi.conf
    #
    #  Hardware output from HDMI
    #
    
    pcm.!hdmi {
    	@args [ CARD DEV AES0 AES1 AES2 AES3 ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_IEC958_CARD
    				ALSA_PCM_CARD
    				ALSA_CARD
    			]
    			default {
    				@func refer
    				name defaults.pcm.iec958.card
    			}
    		}
    	}
     ... (truncated) ...
  + usr/share/alsa/pcm/iec958.conf
    #
    #  Hardware output from iec958
    #
    
    pcm.!iec958 {
    	@args [ CARD DEV AES0 AES1 AES2 AES3 ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_IEC958_CARD
    				ALSA_PCM_CARD
    				ALSA_CARD
    			]
    			default {
    				@func refer
    				name defaults.pcm.iec958.card
    			}
    		}
    	}
     ... (truncated) ...
  + usr/share/alsa/pcm/modem.conf
    #
    # "raw" modem - phoneline
    #
    
    pcm.!phoneline {
    	@args [ CARD DEV ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_MODEM_CARD
    				ALSA_PCM_CARD
    				ALSA_CARD
    			]
    			default {
    				@func refer
    				name defaults.pcm.modem.card
    			}
    		}
    	}
     ... (truncated) ...
  + usr/share/alsa/pcm/rear.conf
    #
    # Hardware output from rear speakers
    #
    
    pcm.!rear {
    	@args [ CARD DEV ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_REAR_CARD
    				ALSA_PCM_CARD
    				ALSA_CARD
    			]
    			default {
    				@func refer
    				name defaults.pcm.rear.card
    			}
    		}
    	}
     ... (truncated) ...
  + usr/share/alsa/pcm/side.conf
    #
    # Hardware output from side speakers
    #
    
    pcm.!side {
    	@args [ CARD DEV ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_SIDE_CARD
    				ALSA_PCM_CARD
    				ALSA_CARD
    			]
    			default {
    				@func refer
    				name defaults.pcm.side.card
    			}
    		}
    	}
     ... (truncated) ...
  + usr/share/alsa/pcm/surround21.conf
    #
    #  Hardware output from 2.1 speakers.
    #  Samples must be positioned:
    #    chn0 - front left
    #    chn1 - front right
    #    chn2 - LFE
    #
    
    pcm.!surround21 {
    	@args [ CARD DEV ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_SURROUND21_CARD
    				ALSA_PCM_CARD
    				ALSA_CARD
    			]
    			default {
    				@func refer
     ... (truncated) ...
  + usr/share/alsa/pcm/surround40.conf
    #
    #  Hardware output from 4.0 speakers.
    #  Samples must be positioned:
    #    chn0 - front left
    #    chn1 - front right
    #    chn2 - rear left
    #    chn3 - rear right
    #
    
    pcm.!surround40 {
    	@args [ CARD DEV ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_SURROUND40_CARD
    				ALSA_PCM_CARD
    				ALSA_CARD
    			]
    			default {
     ... (truncated) ...
  + usr/share/alsa/pcm/surround41.conf
    #
    #  Hardware output from 4.1 speakers.
    #  Samples must be positioned:
    #    chn0 - front left
    #    chn1 - front right
    #    chn2 - rear left
    #    chn3 - rear right
    #    chn4 - LFE
    #
    
    pcm.!surround41 {
    	@args [ CARD DEV ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_SURROUND41_CARD
    				ALSA_PCM_CARD
    				ALSA_CARD
    			]
     ... (truncated) ...
  + usr/share/alsa/pcm/surround50.conf
    #
    #  Hardware output from 5.0 speakers.
    #  Samples must be positioned:
    #    chn0 - front left
    #    chn1 - front right
    #    chn2 - rear left
    #    chn3 - rear right
    #    chn4 - center
    #
    
    pcm.!surround50 {
    	@args [ CARD DEV ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_SURROUND50_CARD
    				ALSA_PCM_CARD
    				ALSA_CARD
    			]
     ... (truncated) ...
  + usr/share/alsa/pcm/surround51.conf
    #
    #  Hardware output from 5.1 speakers
    #  Samples must be positioned:
    #    chn0 - front left
    #    chn1 - front right
    #    chn2 - rear left
    #    chn3 - rear right
    #    chn4 - center
    #    chn5 - lfe
    #
    
    pcm.!surround51 {
    	@args [ CARD DEV ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_SURROUND51_CARD
    				ALSA_PCM_CARD
    				ALSA_CARD
     ... (truncated) ...
  + usr/share/alsa/pcm/surround71.conf
    #
    #  Hardware output from 7.1 speakers
    #  Samples must be positioned:
    #    chn0 - front left
    #    chn1 - front right
    #    chn2 - rear left
    #    chn3 - rear right
    #    chn4 - center
    #    chn5 - lfe
    #    chn6 - side left
    #    chn7 - side right
    #
    
    pcm.!surround71 {
    	@args [ CARD DEV ]
    	@args.CARD {
    		type string
    		default {
    			@func getenv
    			vars [
    				ALSA_SURROUND71_CARD
     ... (truncated) ...
  + usr/share/fontconfig/conf.avail/05-reset-dirs-sample.conf
  + usr/share/fontconfig/conf.avail/09-autohint-if-no-hinting.conf
  + usr/share/fontconfig/conf.avail/10-autohint.conf
  + usr/share/fontconfig/conf.avail/10-hinting-full.conf
  + usr/share/fontconfig/conf.avail/10-hinting-medium.conf
  + usr/share/fontconfig/conf.avail/10-hinting-none.conf
  + usr/share/fontconfig/conf.avail/10-hinting-slight.conf
  + usr/share/fontconfig/conf.avail/10-no-antialias.conf
  + usr/share/fontconfig/conf.avail/10-scale-bitmap-fonts.conf
  + usr/share/fontconfig/conf.avail/10-sub-pixel-bgr.conf
  + usr/share/fontconfig/conf.avail/10-sub-pixel-none.conf
  + usr/share/fontconfig/conf.avail/10-sub-pixel-rgb.conf
  + usr/share/fontconfig/conf.avail/10-sub-pixel-vbgr.conf
  + usr/share/fontconfig/conf.avail/10-sub-pixel-vrgb.conf
  + usr/share/fontconfig/conf.avail/10-unhinted.conf
  + usr/share/fontconfig/conf.avail/10-yes-antialias.conf
  + usr/share/fontconfig/conf.avail/11-lcdfilter-default.conf
  + usr/share/fontconfig/conf.avail/11-lcdfilter-legacy.conf
  + usr/share/fontconfig/conf.avail/11-lcdfilter-light.conf
  + usr/share/fontconfig/conf.avail/11-lcdfilter-none.conf
  + usr/share/fontconfig/conf.avail/20-unhint-small-vera.conf
  + usr/share/fontconfig/conf.avail/25-unhint-nonlatin.conf
  + usr/share/fontconfig/conf.avail/30-metric-aliases.conf
  + usr/share/fontconfig/conf.avail/35-lang-normalize.conf
  + usr/share/fontconfig/conf.avail/40-nonlatin.conf
  + usr/share/fontconfig/conf.avail/45-generic.conf
  + usr/share/fontconfig/conf.avail/45-latin.conf
  + usr/share/fontconfig/conf.avail/48-spacing.conf
  + usr/share/fontconfig/conf.avail/49-sansserif.conf
  + usr/share/fontconfig/conf.avail/50-user.conf
  + usr/share/fontconfig/conf.avail/51-local.conf
  + usr/share/fontconfig/conf.avail/60-generic.conf
  + usr/share/fontconfig/conf.avail/60-latin.conf
  + usr/share/fontconfig/conf.avail/65-fonts-persian.conf
  + usr/share/fontconfig/conf.avail/65-khmer.conf
  + usr/share/fontconfig/conf.avail/65-nonlatin.conf
  + usr/share/fontconfig/conf.avail/69-unifont.conf
  + usr/share/fontconfig/conf.avail/70-no-bitmaps.conf
  + usr/share/fontconfig/conf.avail/70-yes-bitmaps.conf
  + usr/share/fontconfig/conf.avail/80-delicious.conf
  + usr/share/fontconfig/conf.avail/90-synthetic.conf
  + usr/share/gettext/its/fontconfig.its
  + usr/share/gettext/its/fontconfig.loc
  + usr/share/gettext/its/gschema.its
    <?xml version="1.0"?>
    <!--
    See the gettext documentation for the file format:
    http://www.gnu.org/software/gettext/manual/html_node/Preparing-ITS-Rules.html
    -->
    <its:rules xmlns:its="http://www.w3.org/2005/11/its"
               xmlns:gt="https://www.gnu.org/s/gettext/ns/its/extensions/1.0"
               version="2.0">
      <its:translateRule selector="/schemalist" translate="no"/>
    
      <its:translateRule selector="//summary | //description" translate="yes"/>
    
      <its:translateRule selector="//default[@l10n]" translate="yes"/>
    
      <!-- The 'context' attribute should be extracted as msgctxt.  -->
      <gt:contextRule selector="//default[@context]" contextPointer="@context"/>
      <gt:escapeRule selector="//default/@context" escape="no"/>
    
      <!-- Remove whitespaces around the default value.  -->
      <gt:preserveSpaceRule selector="//default" space="trim"/>
    
     ... (truncated) ...
  + usr/share/gettext/its/gschema.loc
    <?xml version="1.0"?>
    <!--
    See the gettext documentation for the file format:
    http://www.gnu.org/software/gettext/manual/html_node/Preparing-ITS-Rules.html
    -->
    <locatingRules>
      <locatingRule name="GSettings" pattern="*.gschema.xml">
        <documentRule localName="schemalist" target="gschema.its"/>
      </locatingRule>
    </locatingRules>
  + usr/share/i18n/charmaps/ANSI_X3.110-1983.gz
  + usr/share/i18n/charmaps/ANSI_X3.4-1968.gz
  + usr/share/i18n/charmaps/ARMSCII-8.gz
  + usr/share/i18n/charmaps/ASMO_449.gz
  + usr/share/i18n/charmaps/BIG5-HKSCS.gz
  + usr/share/i18n/charmaps/BIG5.gz
  + usr/share/i18n/charmaps/BRF.gz
  + usr/share/i18n/charmaps/BS_4730.gz
  + usr/share/i18n/charmaps/BS_VIEWDATA.gz
  + usr/share/i18n/charmaps/CP10007.gz
  + usr/share/i18n/charmaps/CP1125.gz
  + usr/share/i18n/charmaps/CP1250.gz
  + usr/share/i18n/charmaps/CP1251.gz
  + usr/share/i18n/charmaps/CP1252.gz
  + usr/share/i18n/charmaps/CP1253.gz
  + usr/share/i18n/charmaps/CP1254.gz
  + usr/share/i18n/charmaps/CP1255.gz
  + usr/share/i18n/charmaps/CP1256.gz
  + usr/share/i18n/charmaps/CP1257.gz
  + usr/share/i18n/charmaps/CP1258.gz
  + usr/share/i18n/charmaps/CP737.gz
  + usr/share/i18n/charmaps/CP770.gz
  + usr/share/i18n/charmaps/CP771.gz
  + usr/share/i18n/charmaps/CP772.gz
  + usr/share/i18n/charmaps/CP773.gz
  + usr/share/i18n/charmaps/CP774.gz
  + usr/share/i18n/charmaps/CP775.gz
  + usr/share/i18n/charmaps/CP949.gz
  + usr/share/i18n/charmaps/CSA_Z243.4-1985-1.gz
  + usr/share/i18n/charmaps/CSA_Z243.4-1985-2.gz
  + usr/share/i18n/charmaps/CSA_Z243.4-1985-GR.gz
  + usr/share/i18n/charmaps/CSN_369103.gz
  + usr/share/i18n/charmaps/CWI.gz
  + usr/share/i18n/charmaps/DEC-MCS.gz
  + usr/share/i18n/charmaps/DIN_66003.gz
  + usr/share/i18n/charmaps/DS_2089.gz
  + usr/share/i18n/charmaps/EBCDIC-AT-DE-A.gz
  + usr/share/i18n/charmaps/EBCDIC-AT-DE.gz
  + usr/share/i18n/charmaps/EBCDIC-CA-FR.gz
  + usr/share/i18n/charmaps/EBCDIC-DK-NO-A.gz
  + usr/share/i18n/charmaps/EBCDIC-DK-NO.gz
  + usr/share/i18n/charmaps/EBCDIC-ES-A.gz
  + usr/share/i18n/charmaps/EBCDIC-ES-S.gz
  + usr/share/i18n/charmaps/EBCDIC-ES.gz
  + usr/share/i18n/charmaps/EBCDIC-FI-SE-A.gz
  + usr/share/i18n/charmaps/EBCDIC-FI-SE.gz
  + usr/share/i18n/charmaps/EBCDIC-FR.gz
  + usr/share/i18n/charmaps/EBCDIC-IS-FRISS.gz
  + usr/share/i18n/charmaps/EBCDIC-IT.gz
  + usr/share/i18n/charmaps/EBCDIC-PT.gz
  + usr/share/i18n/charmaps/EBCDIC-UK.gz
  + usr/share/i18n/charmaps/EBCDIC-US.gz
  + usr/share/i18n/charmaps/ECMA-CYRILLIC.gz
  + usr/share/i18n/charmaps/ES.gz
  + usr/share/i18n/charmaps/ES2.gz
  + usr/share/i18n/charmaps/EUC-JISX0213.gz
  + usr/share/i18n/charmaps/EUC-JP-MS.gz
  + usr/share/i18n/charmaps/EUC-JP.gz
  + usr/share/i18n/charmaps/EUC-KR.gz
  + usr/share/i18n/charmaps/EUC-TW.gz
  + usr/share/i18n/charmaps/GB18030.gz
  + usr/share/i18n/charmaps/GB2312.gz
  + usr/share/i18n/charmaps/GBK.gz
  + usr/share/i18n/charmaps/GB_1988-80.gz
  + usr/share/i18n/charmaps/GEORGIAN-ACADEMY.gz
  + usr/share/i18n/charmaps/GEORGIAN-PS.gz
  + usr/share/i18n/charmaps/GOST_19768-74.gz
  + usr/share/i18n/charmaps/GREEK-CCITT.gz
  + usr/share/i18n/charmaps/GREEK7-OLD.gz
  + usr/share/i18n/charmaps/GREEK7.gz
  + usr/share/i18n/charmaps/HP-GREEK8.gz
  + usr/share/i18n/charmaps/HP-ROMAN8.gz
  + usr/share/i18n/charmaps/HP-ROMAN9.gz
  + usr/share/i18n/charmaps/HP-THAI8.gz
  + usr/share/i18n/charmaps/HP-TURKISH8.gz
  + usr/share/i18n/charmaps/IBM037.gz
  + usr/share/i18n/charmaps/IBM038.gz
  + usr/share/i18n/charmaps/IBM1004.gz
  + usr/share/i18n/charmaps/IBM1026.gz
  + usr/share/i18n/charmaps/IBM1047.gz
  + usr/share/i18n/charmaps/IBM1124.gz
  + usr/share/i18n/charmaps/IBM1129.gz
  + usr/share/i18n/charmaps/IBM1132.gz
  + usr/share/i18n/charmaps/IBM1133.gz
  + usr/share/i18n/charmaps/IBM1160.gz
  + usr/share/i18n/charmaps/IBM1161.gz
  + usr/share/i18n/charmaps/IBM1162.gz
  + usr/share/i18n/charmaps/IBM1163.gz
  + usr/share/i18n/charmaps/IBM1164.gz
  + usr/share/i18n/charmaps/IBM256.gz
  + usr/share/i18n/charmaps/IBM273.gz
  + usr/share/i18n/charmaps/IBM274.gz
  + usr/share/i18n/charmaps/IBM275.gz
  + usr/share/i18n/charmaps/IBM277.gz
  + usr/share/i18n/charmaps/IBM278.gz
  + usr/share/i18n/charmaps/IBM280.gz
  + usr/share/i18n/charmaps/IBM281.gz
  + usr/share/i18n/charmaps/IBM284.gz
  + usr/share/i18n/charmaps/IBM285.gz
  + usr/share/i18n/charmaps/IBM290.gz
  + usr/share/i18n/charmaps/IBM297.gz
  + usr/share/i18n/charmaps/IBM420.gz
  + usr/share/i18n/charmaps/IBM423.gz
  + usr/share/i18n/charmaps/IBM424.gz
  + usr/share/i18n/charmaps/IBM437.gz
  + usr/share/i18n/charmaps/IBM500.gz
  + usr/share/i18n/charmaps/IBM850.gz
  + usr/share/i18n/charmaps/IBM851.gz
  + usr/share/i18n/charmaps/IBM852.gz
  + usr/share/i18n/charmaps/IBM855.gz
  + usr/share/i18n/charmaps/IBM856.gz
  + usr/share/i18n/charmaps/IBM857.gz
  + usr/share/i18n/charmaps/IBM858.gz
  + usr/share/i18n/charmaps/IBM860.gz
  + usr/share/i18n/charmaps/IBM861.gz
  + usr/share/i18n/charmaps/IBM862.gz
  + usr/share/i18n/charmaps/IBM863.gz
  + usr/share/i18n/charmaps/IBM864.gz
  + usr/share/i18n/charmaps/IBM865.gz
  + usr/share/i18n/charmaps/IBM866.gz
  + usr/share/i18n/charmaps/IBM866NAV.gz
  + usr/share/i18n/charmaps/IBM868.gz
  + usr/share/i18n/charmaps/IBM869.gz
  + usr/share/i18n/charmaps/IBM870.gz
  + usr/share/i18n/charmaps/IBM871.gz
  + usr/share/i18n/charmaps/IBM874.gz
  + usr/share/i18n/charmaps/IBM875.gz
  + usr/share/i18n/charmaps/IBM880.gz
  + usr/share/i18n/charmaps/IBM891.gz
  + usr/share/i18n/charmaps/IBM903.gz
  + usr/share/i18n/charmaps/IBM904.gz
  + usr/share/i18n/charmaps/IBM905.gz
  + usr/share/i18n/charmaps/IBM918.gz
  + usr/share/i18n/charmaps/IBM922.gz
  + usr/share/i18n/charmaps/IEC_P27-1.gz
  + usr/share/i18n/charmaps/INIS-8.gz
  + usr/share/i18n/charmaps/INIS-CYRILLIC.gz
  + usr/share/i18n/charmaps/INIS.gz
  + usr/share/i18n/charmaps/INVARIANT.gz
  + usr/share/i18n/charmaps/ISIRI-3342.gz
  + usr/share/i18n/charmaps/ISO-8859-1.gz
  + usr/share/i18n/charmaps/ISO-8859-10.gz
  + usr/share/i18n/charmaps/ISO-8859-11.gz
  + usr/share/i18n/charmaps/ISO-8859-13.gz
  + usr/share/i18n/charmaps/ISO-8859-14.gz
  + usr/share/i18n/charmaps/ISO-8859-15.gz
  + usr/share/i18n/charmaps/ISO-8859-16.gz
  + usr/share/i18n/charmaps/ISO-8859-2.gz
  + usr/share/i18n/charmaps/ISO-8859-3.gz
  + usr/share/i18n/charmaps/ISO-8859-4.gz
  + usr/share/i18n/charmaps/ISO-8859-5.gz
  + usr/share/i18n/charmaps/ISO-8859-6.gz
  + usr/share/i18n/charmaps/ISO-8859-7.gz
  + usr/share/i18n/charmaps/ISO-8859-8.gz
  + usr/share/i18n/charmaps/ISO-8859-9.gz
  + usr/share/i18n/charmaps/ISO-8859-9E.gz
  + usr/share/i18n/charmaps/ISO-IR-197.gz
  + usr/share/i18n/charmaps/ISO-IR-209.gz
  + usr/share/i18n/charmaps/ISO-IR-90.gz
  + usr/share/i18n/charmaps/ISO_10367-BOX.gz
  + usr/share/i18n/charmaps/ISO_10646.gz
  + usr/share/i18n/charmaps/ISO_11548-1.gz
  + usr/share/i18n/charmaps/ISO_2033-1983.gz
  + usr/share/i18n/charmaps/ISO_5427-EXT.gz
  + usr/share/i18n/charmaps/ISO_5427.gz
  + usr/share/i18n/charmaps/ISO_5428.gz
  + usr/share/i18n/charmaps/ISO_646.BASIC.gz
  + usr/share/i18n/charmaps/ISO_646.IRV.gz
  + usr/share/i18n/charmaps/ISO_6937-2-25.gz
  + usr/share/i18n/charmaps/ISO_6937-2-ADD.gz
  + usr/share/i18n/charmaps/ISO_6937.gz
  + usr/share/i18n/charmaps/ISO_8859-1,GL.gz
  + usr/share/i18n/charmaps/ISO_8859-SUPP.gz
  + usr/share/i18n/charmaps/IT.gz
  + usr/share/i18n/charmaps/JIS_C6220-1969-JP.gz
  + usr/share/i18n/charmaps/JIS_C6220-1969-RO.gz
  + usr/share/i18n/charmaps/JIS_C6229-1984-A.gz
  + usr/share/i18n/charmaps/JIS_C6229-1984-B-ADD.gz
  + usr/share/i18n/charmaps/JIS_C6229-1984-B.gz
  + usr/share/i18n/charmaps/JIS_C6229-1984-HAND-ADD.gz
  + usr/share/i18n/charmaps/JIS_C6229-1984-HAND.gz
  + usr/share/i18n/charmaps/JIS_C6229-1984-KANA.gz
  + usr/share/i18n/charmaps/JIS_X0201.gz
  + usr/share/i18n/charmaps/JOHAB.gz
  + usr/share/i18n/charmaps/JUS_I.B1.002.gz
  + usr/share/i18n/charmaps/JUS_I.B1.003-MAC.gz
  + usr/share/i18n/charmaps/JUS_I.B1.003-SERB.gz
  + usr/share/i18n/charmaps/KOI-8.gz
  + usr/share/i18n/charmaps/KOI8-R.gz
  + usr/share/i18n/charmaps/KOI8-RU.gz
  + usr/share/i18n/charmaps/KOI8-T.gz
  + usr/share/i18n/charmaps/KOI8-U.gz
  + usr/share/i18n/charmaps/KSC5636.gz
  + usr/share/i18n/charmaps/LATIN-GREEK-1.gz
  + usr/share/i18n/charmaps/LATIN-GREEK.gz
  + usr/share/i18n/charmaps/MAC-CENTRALEUROPE.gz
  + usr/share/i18n/charmaps/MAC-CYRILLIC.gz
  + usr/share/i18n/charmaps/MAC-IS.gz
  + usr/share/i18n/charmaps/MAC-SAMI.gz
  + usr/share/i18n/charmaps/MAC-UK.gz
  + usr/share/i18n/charmaps/MACINTOSH.gz
  + usr/share/i18n/charmaps/MIK.gz
  + usr/share/i18n/charmaps/MSZ_7795.3.gz
  + usr/share/i18n/charmaps/NATS-DANO-ADD.gz
  + usr/share/i18n/charmaps/NATS-DANO.gz
  + usr/share/i18n/charmaps/NATS-SEFI-ADD.gz
  + usr/share/i18n/charmaps/NATS-SEFI.gz
  + usr/share/i18n/charmaps/NC_NC00-10.gz
  + usr/share/i18n/charmaps/NEXTSTEP.gz
  + usr/share/i18n/charmaps/NF_Z_62-010.gz
  + usr/share/i18n/charmaps/NF_Z_62-010_1973.gz
  + usr/share/i18n/charmaps/NS_4551-1.gz
  + usr/share/i18n/charmaps/NS_4551-2.gz
  + usr/share/i18n/charmaps/PT.gz
  + usr/share/i18n/charmaps/PT154.gz
  + usr/share/i18n/charmaps/PT2.gz
  + usr/share/i18n/charmaps/RK1048.gz
  + usr/share/i18n/charmaps/SAMI-WS2.gz
  + usr/share/i18n/charmaps/SAMI.gz
  + usr/share/i18n/charmaps/SEN_850200_B.gz
  + usr/share/i18n/charmaps/SEN_850200_C.gz
  + usr/share/i18n/charmaps/SHIFT_JIS.gz
  + usr/share/i18n/charmaps/SHIFT_JISX0213.gz
  + usr/share/i18n/charmaps/T.101-G2.gz
  + usr/share/i18n/charmaps/T.61-7BIT.gz
  + usr/share/i18n/charmaps/T.61-8BIT.gz
  + usr/share/i18n/charmaps/TCVN5712-1.gz
  + usr/share/i18n/charmaps/TIS-620.gz
  + usr/share/i18n/charmaps/TSCII.gz
  + usr/share/i18n/charmaps/UTF-8.gz
  + usr/share/i18n/charmaps/VIDEOTEX-SUPPL.gz
  + usr/share/i18n/charmaps/VISCII.gz
  + usr/share/i18n/charmaps/WINDOWS-31J.gz
  + usr/share/i18n/locales/C
  + usr/share/i18n/locales/POSIX
  + usr/share/i18n/locales/aa_DJ
  + usr/share/i18n/locales/aa_ER
  + usr/share/i18n/locales/aa_ET
  + usr/share/i18n/locales/ab_GE
  + usr/share/i18n/locales/af_ZA
  + usr/share/i18n/locales/agr_PE
  + usr/share/i18n/locales/ak_GH
  + usr/share/i18n/locales/am_ET
  + usr/share/i18n/locales/an_ES
  + usr/share/i18n/locales/anp_IN
  + usr/share/i18n/locales/ar_AE
  + usr/share/i18n/locales/ar_BH
  + usr/share/i18n/locales/ar_DZ
  + usr/share/i18n/locales/ar_EG
  + usr/share/i18n/locales/ar_IN
  + usr/share/i18n/locales/ar_IQ
  + usr/share/i18n/locales/ar_JO
  + usr/share/i18n/locales/ar_KW
  + usr/share/i18n/locales/ar_LB
  + usr/share/i18n/locales/ar_LY
  + usr/share/i18n/locales/ar_MA
  + usr/share/i18n/locales/ar_OM
  + usr/share/i18n/locales/ar_QA
  + usr/share/i18n/locales/ar_SA
  + usr/share/i18n/locales/ar_SD
  + usr/share/i18n/locales/ar_SS
  + usr/share/i18n/locales/ar_SY
  + usr/share/i18n/locales/ar_TN
  + usr/share/i18n/locales/ar_YE
  + usr/share/i18n/locales/as_IN
  + usr/share/i18n/locales/ast_ES
  + usr/share/i18n/locales/ayc_PE
  + usr/share/i18n/locales/az_AZ
  + usr/share/i18n/locales/az_IR
  + usr/share/i18n/locales/be_BY
  + usr/share/i18n/locales/be_BY@latin
  + usr/share/i18n/locales/bem_ZM
  + usr/share/i18n/locales/ber_DZ
  + usr/share/i18n/locales/ber_MA
  + usr/share/i18n/locales/bg_BG
  + usr/share/i18n/locales/bhb_IN
  + usr/share/i18n/locales/bho_IN
  + usr/share/i18n/locales/bho_NP
  + usr/share/i18n/locales/bi_VU
  + usr/share/i18n/locales/bn_BD
  + usr/share/i18n/locales/bn_IN
  + usr/share/i18n/locales/bo_CN
  + usr/share/i18n/locales/bo_IN
  + usr/share/i18n/locales/br_FR
  + usr/share/i18n/locales/br_FR@euro
  + usr/share/i18n/locales/brx_IN
  + usr/share/i18n/locales/bs_BA
  + usr/share/i18n/locales/byn_ER
  + usr/share/i18n/locales/ca_AD
  + usr/share/i18n/locales/ca_ES
  + usr/share/i18n/locales/ca_ES@euro
  + usr/share/i18n/locales/ca_ES@valencia
  + usr/share/i18n/locales/ca_FR
  + usr/share/i18n/locales/ca_IT
  + usr/share/i18n/locales/ce_RU
  + usr/share/i18n/locales/chr_US
  + usr/share/i18n/locales/ckb_IQ
  + usr/share/i18n/locales/cmn_TW
  + usr/share/i18n/locales/cns11643_stroke
  + usr/share/i18n/locales/crh_RU
  + usr/share/i18n/locales/crh_UA
  + usr/share/i18n/locales/cs_CZ
  + usr/share/i18n/locales/csb_PL
  + usr/share/i18n/locales/cv_RU
  + usr/share/i18n/locales/cy_GB
  + usr/share/i18n/locales/da_DK
  + usr/share/i18n/locales/de_AT
  + usr/share/i18n/locales/de_AT@euro
  + usr/share/i18n/locales/de_BE
  + usr/share/i18n/locales/de_BE@euro
  + usr/share/i18n/locales/de_CH
  + usr/share/i18n/locales/de_DE
  + usr/share/i18n/locales/de_DE@euro
  + usr/share/i18n/locales/de_IT
  + usr/share/i18n/locales/de_LI
  + usr/share/i18n/locales/de_LU
  + usr/share/i18n/locales/de_LU@euro
  + usr/share/i18n/locales/doi_IN
  + usr/share/i18n/locales/dsb_DE
  + usr/share/i18n/locales/dv_MV
  + usr/share/i18n/locales/dz_BT
  + usr/share/i18n/locales/el_CY
  + usr/share/i18n/locales/el_GR
  + usr/share/i18n/locales/el_GR@euro
  + usr/share/i18n/locales/en_AG
  + usr/share/i18n/locales/en_AU
  + usr/share/i18n/locales/en_BW
  + usr/share/i18n/locales/en_CA
  + usr/share/i18n/locales/en_DK
  + usr/share/i18n/locales/en_GB
  + usr/share/i18n/locales/en_HK
  + usr/share/i18n/locales/en_IE
  + usr/share/i18n/locales/en_IE@euro
  + usr/share/i18n/locales/en_IL
  + usr/share/i18n/locales/en_IN
  + usr/share/i18n/locales/en_NG
  + usr/share/i18n/locales/en_NZ
  + usr/share/i18n/locales/en_PH
  + usr/share/i18n/locales/en_SC
  + usr/share/i18n/locales/en_SG
  + usr/share/i18n/locales/en_US
  + usr/share/i18n/locales/en_ZA
  + usr/share/i18n/locales/en_ZM
  + usr/share/i18n/locales/en_ZW
  + usr/share/i18n/locales/eo
  + usr/share/i18n/locales/es_AR
  + usr/share/i18n/locales/es_BO
  + usr/share/i18n/locales/es_CL
  + usr/share/i18n/locales/es_CO
  + usr/share/i18n/locales/es_CR
  + usr/share/i18n/locales/es_CU
  + usr/share/i18n/locales/es_DO
  + usr/share/i18n/locales/es_EC
  + usr/share/i18n/locales/es_ES
  + usr/share/i18n/locales/es_ES@euro
  + usr/share/i18n/locales/es_GT
  + usr/share/i18n/locales/es_HN
  + usr/share/i18n/locales/es_MX
  + usr/share/i18n/locales/es_NI
  + usr/share/i18n/locales/es_PA
  + usr/share/i18n/locales/es_PE
  + usr/share/i18n/locales/es_PR
  + usr/share/i18n/locales/es_PY
  + usr/share/i18n/locales/es_SV
  + usr/share/i18n/locales/es_US
  + usr/share/i18n/locales/es_UY
  + usr/share/i18n/locales/es_VE
  + usr/share/i18n/locales/et_EE
  + usr/share/i18n/locales/eu_ES
  + usr/share/i18n/locales/eu_ES@euro
  + usr/share/i18n/locales/fa_IR
  + usr/share/i18n/locales/ff_SN
  + usr/share/i18n/locales/fi_FI
  + usr/share/i18n/locales/fi_FI@euro
  + usr/share/i18n/locales/fil_PH
  + usr/share/i18n/locales/fo_FO
  + usr/share/i18n/locales/fr_BE
  + usr/share/i18n/locales/fr_BE@euro
  + usr/share/i18n/locales/fr_CA
  + usr/share/i18n/locales/fr_CH
  + usr/share/i18n/locales/fr_FR
  + usr/share/i18n/locales/fr_FR@euro
  + usr/share/i18n/locales/fr_LU
  + usr/share/i18n/locales/fr_LU@euro
  + usr/share/i18n/locales/fur_IT
  + usr/share/i18n/locales/fy_DE
  + usr/share/i18n/locales/fy_NL
  + usr/share/i18n/locales/ga_IE
  + usr/share/i18n/locales/ga_IE@euro
  + usr/share/i18n/locales/gbm_IN
  + usr/share/i18n/locales/gd_GB
  + usr/share/i18n/locales/gez_ER
  + usr/share/i18n/locales/gez_ER@abegede
  + usr/share/i18n/locales/gez_ET
  + usr/share/i18n/locales/gez_ET@abegede
  + usr/share/i18n/locales/gl_ES
  + usr/share/i18n/locales/gl_ES@euro
  + usr/share/i18n/locales/gu_IN
  + usr/share/i18n/locales/gv_GB
  + usr/share/i18n/locales/ha_NG
  + usr/share/i18n/locales/hak_TW
  + usr/share/i18n/locales/he_IL
  + usr/share/i18n/locales/hi_IN
  + usr/share/i18n/locales/hif_FJ
  + usr/share/i18n/locales/hne_IN
  + usr/share/i18n/locales/hr_HR
  + usr/share/i18n/locales/hsb_DE
  + usr/share/i18n/locales/ht_HT
  + usr/share/i18n/locales/hu_HU
  + usr/share/i18n/locales/hy_AM
  + usr/share/i18n/locales/i18n
  + usr/share/i18n/locales/i18n_ctype
  + usr/share/i18n/locales/ia_FR
  + usr/share/i18n/locales/id_ID
  + usr/share/i18n/locales/ig_NG
  + usr/share/i18n/locales/ik_CA
  + usr/share/i18n/locales/is_IS
  + usr/share/i18n/locales/iso14651_t1
  + usr/share/i18n/locales/iso14651_t1_common
  + usr/share/i18n/locales/iso14651_t1_pinyin
  + usr/share/i18n/locales/it_CH
  + usr/share/i18n/locales/it_IT
  + usr/share/i18n/locales/it_IT@euro
  + usr/share/i18n/locales/iu_CA
  + usr/share/i18n/locales/ja_JP
  + usr/share/i18n/locales/ka_GE
  + usr/share/i18n/locales/kab_DZ
  + usr/share/i18n/locales/kk_KZ
  + usr/share/i18n/locales/kl_GL
  + usr/share/i18n/locales/km_KH
  + usr/share/i18n/locales/kn_IN
  + usr/share/i18n/locales/ko_KR
  + usr/share/i18n/locales/kok_IN
  + usr/share/i18n/locales/ks_IN
  + usr/share/i18n/locales/ks_IN@devanagari
  + usr/share/i18n/locales/ku_TR
  + usr/share/i18n/locales/kv_RU
  + usr/share/i18n/locales/kw_GB
  + usr/share/i18n/locales/ky_KG
  + usr/share/i18n/locales/lb_LU
  + usr/share/i18n/locales/lg_UG
  + usr/share/i18n/locales/li_BE
  + usr/share/i18n/locales/li_NL
  + usr/share/i18n/locales/lij_IT
  + usr/share/i18n/locales/ln_CD
  + usr/share/i18n/locales/lo_LA
  + usr/share/i18n/locales/lt_LT
  + usr/share/i18n/locales/lv_LV
  + usr/share/i18n/locales/lzh_TW
  + usr/share/i18n/locales/mag_IN
  + usr/share/i18n/locales/mai_IN
  + usr/share/i18n/locales/mai_NP
  + usr/share/i18n/locales/mfe_MU
  + usr/share/i18n/locales/mg_MG
  + usr/share/i18n/locales/mhr_RU
  + usr/share/i18n/locales/mi_NZ
  + usr/share/i18n/locales/miq_NI
  + usr/share/i18n/locales/mjw_IN
  + usr/share/i18n/locales/mk_MK
  + usr/share/i18n/locales/ml_IN
  + usr/share/i18n/locales/mn_MN
  + usr/share/i18n/locales/mni_IN
  + usr/share/i18n/locales/mnw_MM
  + usr/share/i18n/locales/mr_IN
  + usr/share/i18n/locales/ms_MY
  + usr/share/i18n/locales/mt_MT
  + usr/share/i18n/locales/my_MM
  + usr/share/i18n/locales/nan_TW
  + usr/share/i18n/locales/nan_TW@latin
  + usr/share/i18n/locales/nb_NO
  + usr/share/i18n/locales/nds_DE
  + usr/share/i18n/locales/nds_NL
  + usr/share/i18n/locales/ne_NP
  + usr/share/i18n/locales/nhn_MX
  + usr/share/i18n/locales/niu_NU
  + usr/share/i18n/locales/niu_NZ
  + usr/share/i18n/locales/nl_AW
  + usr/share/i18n/locales/nl_BE
  + usr/share/i18n/locales/nl_BE@euro
  + usr/share/i18n/locales/nl_NL
  + usr/share/i18n/locales/nl_NL@euro
  + usr/share/i18n/locales/nn_NO
  + usr/share/i18n/locales/nr_ZA
  + usr/share/i18n/locales/nso_ZA
  + usr/share/i18n/locales/oc_FR
  + usr/share/i18n/locales/om_ET
  + usr/share/i18n/locales/om_KE
  + usr/share/i18n/locales/or_IN
  + usr/share/i18n/locales/os_RU
  + usr/share/i18n/locales/pa_IN
  + usr/share/i18n/locales/pa_PK
  + usr/share/i18n/locales/pap_AW
  + usr/share/i18n/locales/pap_CW
  + usr/share/i18n/locales/pl_PL
  + usr/share/i18n/locales/ps_AF
  + usr/share/i18n/locales/pt_BR
  + usr/share/i18n/locales/pt_PT
  + usr/share/i18n/locales/pt_PT@euro
  + usr/share/i18n/locales/quz_PE
  + usr/share/i18n/locales/raj_IN
  + usr/share/i18n/locales/rif_MA
  + usr/share/i18n/locales/ro_RO
  + usr/share/i18n/locales/ru_RU
  + usr/share/i18n/locales/ru_UA
  + usr/share/i18n/locales/rw_RW
  + usr/share/i18n/locales/sa_IN
  + usr/share/i18n/locales/sah_RU
  + usr/share/i18n/locales/sat_IN
  + usr/share/i18n/locales/sc_IT
  + usr/share/i18n/locales/sd_IN
  + usr/share/i18n/locales/sd_IN@devanagari
  + usr/share/i18n/locales/se_NO
  + usr/share/i18n/locales/sgs_LT
  + usr/share/i18n/locales/shn_MM
  + usr/share/i18n/locales/shs_CA
  + usr/share/i18n/locales/si_LK
  + usr/share/i18n/locales/sid_ET
  + usr/share/i18n/locales/sk_SK
  + usr/share/i18n/locales/sl_SI
  + usr/share/i18n/locales/sm_WS
  + usr/share/i18n/locales/so_DJ
  + usr/share/i18n/locales/so_ET
  + usr/share/i18n/locales/so_KE
  + usr/share/i18n/locales/so_SO
  + usr/share/i18n/locales/sq_AL
  + usr/share/i18n/locales/sq_MK
  + usr/share/i18n/locales/sr_ME
  + usr/share/i18n/locales/sr_RS
  + usr/share/i18n/locales/sr_RS@latin
  + usr/share/i18n/locales/ss_ZA
  + usr/share/i18n/locales/ssy_ER
  + usr/share/i18n/locales/st_ZA
  + usr/share/i18n/locales/su_ID
  + usr/share/i18n/locales/sv_FI
  + usr/share/i18n/locales/sv_FI@euro
  + usr/share/i18n/locales/sv_SE
  + usr/share/i18n/locales/sw_KE
  + usr/share/i18n/locales/sw_TZ
  + usr/share/i18n/locales/syr
  + usr/share/i18n/locales/szl_PL
  + usr/share/i18n/locales/ta_IN
  + usr/share/i18n/locales/ta_LK
  + usr/share/i18n/locales/tcy_IN
  + usr/share/i18n/locales/te_IN
  + usr/share/i18n/locales/tg_TJ
  + usr/share/i18n/locales/th_TH
  + usr/share/i18n/locales/the_NP
  + usr/share/i18n/locales/ti_ER
  + usr/share/i18n/locales/ti_ET
  + usr/share/i18n/locales/tig_ER
  + usr/share/i18n/locales/tk_TM
  + usr/share/i18n/locales/tl_PH
  + usr/share/i18n/locales/tn_ZA
  + usr/share/i18n/locales/to_TO
  + usr/share/i18n/locales/tok
  + usr/share/i18n/locales/tpi_PG
  + usr/share/i18n/locales/tr_CY
  + usr/share/i18n/locales/tr_TR
  + usr/share/i18n/locales/translit_circle
  + usr/share/i18n/locales/translit_cjk_compat
  + usr/share/i18n/locales/translit_cjk_variants
  + usr/share/i18n/locales/translit_combining
  + usr/share/i18n/locales/translit_compat
  + usr/share/i18n/locales/translit_emojis
  + usr/share/i18n/locales/translit_font
  + usr/share/i18n/locales/translit_fraction
  + usr/share/i18n/locales/translit_hangul
  + usr/share/i18n/locales/translit_narrow
  + usr/share/i18n/locales/translit_neutral
  + usr/share/i18n/locales/translit_small
  + usr/share/i18n/locales/translit_wide
  + usr/share/i18n/locales/ts_ZA
  + usr/share/i18n/locales/tt_RU
  + usr/share/i18n/locales/tt_RU@iqtelif
  + usr/share/i18n/locales/ug_CN
  + usr/share/i18n/locales/uk_UA
  + usr/share/i18n/locales/unm_US
  + usr/share/i18n/locales/ur_IN
  + usr/share/i18n/locales/ur_PK
  + usr/share/i18n/locales/uz_UZ
  + usr/share/i18n/locales/uz_UZ@cyrillic
  + usr/share/i18n/locales/ve_ZA
  + usr/share/i18n/locales/vi_VN
  + usr/share/i18n/locales/wa_BE
  + usr/share/i18n/locales/wa_BE@euro
  + usr/share/i18n/locales/wae_CH
  + usr/share/i18n/locales/wal_ET
  + usr/share/i18n/locales/wo_SN
  + usr/share/i18n/locales/xh_ZA
  + usr/share/i18n/locales/yi_US
  + usr/share/i18n/locales/yo_NG
  + usr/share/i18n/locales/yue_HK
  + usr/share/i18n/locales/yuw_PG
  + usr/share/i18n/locales/zgh_MA
  + usr/share/i18n/locales/zh_CN
  + usr/share/i18n/locales/zh_HK
  + usr/share/i18n/locales/zh_SG
  + usr/share/i18n/locales/zh_TW
  + usr/share/i18n/locales/zu_ZA
  + usr/share/locale/cs/LC_MESSAGES/gnutls.mo
  + usr/share/locale/de/LC_MESSAGES/gnutls.mo
  + usr/share/locale/eo/LC_MESSAGES/gnutls.mo
  + usr/share/locale/es/LC_MESSAGES/gnutls.mo
  + usr/share/locale/fi/LC_MESSAGES/gnutls.mo
  + usr/share/locale/fr/LC_MESSAGES/gnutls.mo
  + usr/share/locale/it/LC_MESSAGES/gnutls.mo
  + usr/share/locale/ka/LC_MESSAGES/gnutls.mo
  + usr/share/locale/locale.alias
    # Locale name alias data base.
    # Copyright (C) 1996-2024 Free Software Foundation, Inc.
    #
    # This program is free software; you can redistribute it and/or modify
    # it under the terms of the GNU General Public License as published by
    # the Free Software Foundation; either version 2, or (at your option)
    # any later version.
    #
    # This program is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.
    #
    # You should have received a copy of the GNU General Public License
    # along with this program; if not, see <https://www.gnu.org/licenses/>.
    
    # The format of this file is the same as for the corresponding file of
    # the X Window System, which normally can be found in
    #	/usr/lib/X11/locale/locale.alias
    # A single line contains two fields: an alias and a substitution value.
    # All entries are case independent.
     ... (truncated) ...
  + usr/share/locale/ms/LC_MESSAGES/gnutls.mo
  + usr/share/locale/nl/LC_MESSAGES/gnutls.mo
  + usr/share/locale/pl/LC_MESSAGES/gnutls.mo
  + usr/share/locale/pt_BR/LC_MESSAGES/gnutls.mo
  + usr/share/locale/ro/LC_MESSAGES/gnutls.mo
  + usr/share/locale/sr/LC_MESSAGES/gnutls.mo
  + usr/share/locale/sv/LC_MESSAGES/gnutls.mo
  + usr/share/locale/uk/LC_MESSAGES/gnutls.mo
  + usr/share/locale/vi/LC_MESSAGES/gnutls.mo
  + usr/share/locale/zh_CN/LC_MESSAGES/gnutls.mo
  + usr/share/xml/fontconfig/fonts.dtd
  + var/db/Makefile
    # Makefile to (re-)generate db versions of system database files.
    # Copyright (C) 1996-2024 Free Software Foundation, Inc.
    # This file is part of the GNU C Library.
    #
    
    # The GNU C Library is free software; you can redistribute it and/or
    # modify it under the terms of the GNU Lesser General Public
    # License as published by the Free Software Foundation; either
    # version 2.1 of the License, or (at your option) any later version.
    
    # The GNU C Library is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    # Lesser General Public License for more details.
    
    # You should have received a copy of the GNU Lesser General Public
    # License along with the GNU C Library; if not, see
    # <https://www.gnu.org/licenses/>.
    
    DATABASES = $(wildcard /data/data/com.winlator/files/rootfs/etc/passwd /data/data/com.winlator/files/rootfs/etc/group /data/data/com.winlator/files/rootfs/etc/ethers /data/data/com.winlator/files/rootfs/etc/protocols \
    		       /data/data/com.winlator/files/rootfs/etc/rpc /data/data/com.winlator/files/rootfs/etc/services /data/data/com.winlator/files/rootfs/etc/shadow /data/data/com.winlator/files/rootfs/etc/gshadow \
     ... (truncated) ...
  Processing file: app/src/main/assets/rootfs_patches.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/rootfs_patches.tzst
  Staging directories: rootfs_patches.tzst_2082433375
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/rootfs_patches.tzst -C rootfs_patches.tzst_2082433375
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/rootfs_patches.tzst
  + home/xuser/.wine/drive_c/windows/Fonts/andalemo.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/arial.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/arialbd.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/arialbi.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/ariali.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/ariblk.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/comic.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/comicbd.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/cour.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/courbd.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/courbi.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/couri.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/georgia.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/georgiab.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/georgiai.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/georgiaz.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/impact.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/times.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/timesbd.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/timesbi.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/timesi.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/trebuc.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/trebucbd.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/trebucbi.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/trebucit.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/verdana.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/verdanab.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/verdanai.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/verdanaz.ttf
  + home/xuser/.wine/drive_c/windows/Fonts/webdings.ttf
  + home/xuser/.wine/drive_c/windows/wfm.exe
  + home/xuser/.wine/drive_c/windows/winhandler.exe
  + opt/apps/7-Zip/7z.dll
  + opt/apps/7-Zip/7zFM.exe
  + opt/apps/7-Zip/7zG.exe
  + opt/apps/GPUInfo.exe
  + opt/apps/TestD3D.exe
  + usr/lib/alsa-lib/libasound_module_pcm_android_aserver.so
    0000000000001f90 T _snd_pcm_android_aserver_open
    0000000000020211 B __snd_pcm_android_aserver_open_dlsym_pcm_001
  + usr/share/icons/dmz/cursors/cross
  + usr/share/icons/dmz/cursors/fleur
  + usr/share/icons/dmz/cursors/h_double_arrow
  + usr/share/icons/dmz/cursors/hand2
  + usr/share/icons/dmz/cursors/icon
  + usr/share/icons/dmz/cursors/left_ptr
  + usr/share/icons/dmz/cursors/left_ptr_watch
  + usr/share/icons/dmz/cursors/not-allowed
  + usr/share/icons/dmz/cursors/question_arrow
  + usr/share/icons/dmz/cursors/top_left_corner
  + usr/share/icons/dmz/cursors/top_right_corner
  + usr/share/icons/dmz/cursors/v_double_arrow
  + usr/share/icons/dmz/cursors/watch
  + usr/share/icons/dmz/cursors/xterm
  Processing file: app/src/main/assets/wincomponents/direct3d.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/direct3d.tzst
  Staging directories: direct3d.tzst_1028960770
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/direct3d.tzst -C direct3d.tzst_1028960770
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/direct3d.tzst
  + system32/d3dcompiler_33.dll
  + system32/d3dcompiler_34.dll
  + system32/d3dcompiler_35.dll
  + system32/d3dcompiler_36.dll
  + system32/d3dcompiler_37.dll
  + system32/d3dcompiler_38.dll
  + system32/d3dcompiler_39.dll
  + system32/d3dcompiler_40.dll
  + system32/d3dcompiler_41.dll
  + system32/d3dcompiler_42.dll
  + system32/d3dcompiler_43.dll
  + system32/d3dcompiler_46.dll
  + system32/d3dcompiler_47.dll
  + system32/d3dcsx_42.dll
  + system32/d3dcsx_43.dll
  + system32/d3dx10.dll
  + system32/d3dx10_33.dll
  + system32/d3dx10_34.dll
  + system32/d3dx10_35.dll
  + system32/d3dx10_36.dll
  + system32/d3dx10_37.dll
  + system32/d3dx10_38.dll
  + system32/d3dx10_39.dll
  + system32/d3dx10_40.dll
  + system32/d3dx10_41.dll
  + system32/d3dx10_42.dll
  + system32/d3dx10_43.dll
  + system32/d3dx11_42.dll
  + system32/d3dx11_43.dll
  + system32/d3dx9_24.dll
  + system32/d3dx9_25.dll
  + system32/d3dx9_26.dll
  + system32/d3dx9_27.dll
  + system32/d3dx9_28.dll
  + system32/d3dx9_29.dll
  + system32/d3dx9_30.dll
  + system32/d3dx9_31.dll
  + system32/d3dx9_32.dll
  + system32/d3dx9_33.dll
  + system32/d3dx9_34.dll
  + system32/d3dx9_35.dll
  + system32/d3dx9_36.dll
  + system32/d3dx9_37.dll
  + system32/d3dx9_38.dll
  + system32/d3dx9_39.dll
  + system32/d3dx9_40.dll
  + system32/d3dx9_41.dll
  + system32/d3dx9_42.dll
  + system32/d3dx9_43.dll
  + syswow64/d3dcompiler_33.dll
  + syswow64/d3dcompiler_34.dll
  + syswow64/d3dcompiler_35.dll
  + syswow64/d3dcompiler_36.dll
  + syswow64/d3dcompiler_37.dll
  + syswow64/d3dcompiler_38.dll
  + syswow64/d3dcompiler_39.dll
  + syswow64/d3dcompiler_40.dll
  + syswow64/d3dcompiler_41.dll
  + syswow64/d3dcompiler_42.dll
  + syswow64/d3dcompiler_43.dll
  + syswow64/d3dcompiler_46.dll
  + syswow64/d3dcompiler_47.dll
  + syswow64/d3dcsx_42.dll
  + syswow64/d3dcsx_43.dll
  + syswow64/d3dx10.dll
  + syswow64/d3dx10_33.dll
  + syswow64/d3dx10_34.dll
  + syswow64/d3dx10_35.dll
  + syswow64/d3dx10_36.dll
  + syswow64/d3dx10_37.dll
  + syswow64/d3dx10_38.dll
  + syswow64/d3dx10_39.dll
  + syswow64/d3dx10_40.dll
  + syswow64/d3dx10_41.dll
  + syswow64/d3dx10_42.dll
  + syswow64/d3dx10_43.dll
  + syswow64/d3dx11_42.dll
  + syswow64/d3dx11_43.dll
  + syswow64/d3dx9_24.dll
  + syswow64/d3dx9_25.dll
  + syswow64/d3dx9_26.dll
  + syswow64/d3dx9_27.dll
  + syswow64/d3dx9_28.dll
  + syswow64/d3dx9_29.dll
  + syswow64/d3dx9_30.dll
  + syswow64/d3dx9_31.dll
  + syswow64/d3dx9_32.dll
  + syswow64/d3dx9_33.dll
  + syswow64/d3dx9_34.dll
  + syswow64/d3dx9_35.dll
  + syswow64/d3dx9_36.dll
  + syswow64/d3dx9_37.dll
  + syswow64/d3dx9_38.dll
  + syswow64/d3dx9_39.dll
  + syswow64/d3dx9_40.dll
  + syswow64/d3dx9_41.dll
  + syswow64/d3dx9_42.dll
  + syswow64/d3dx9_43.dll
  Processing file: app/src/main/assets/wincomponents/directmusic.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/directmusic.tzst
  Staging directories: directmusic.tzst_2424937657
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/directmusic.tzst -C directmusic.tzst_2424937657
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/directmusic.tzst
  + syswow64/dmband.dll
  + syswow64/dmcompos.dll
  + syswow64/dmime.dll
  + syswow64/dmloader.dll
  + syswow64/dmscript.dll
  + syswow64/dmstyle.dll
  + syswow64/dmsynth.dll
  + syswow64/dmusic.dll
  + syswow64/dmusic32.dll
  + syswow64/dswave.dll
  Processing file: app/src/main/assets/wincomponents/directplay.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/directplay.tzst
  Staging directories: directplay.tzst_755659696
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/directplay.tzst -C directplay.tzst_755659696
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/directplay.tzst
  + syswow64/dplaysvr.exe
  + syswow64/dplayx.dll
  + syswow64/dpmodemx.dll
  + syswow64/dpnet.dll
  + syswow64/dpnhpast.dll
  + syswow64/dpnhupnp.dll
  + syswow64/dpnsvr.exe
  + syswow64/dpwsockx.dll
  Processing file: app/src/main/assets/wincomponents/directshow.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/directshow.tzst
  Staging directories: directshow.tzst_2185623468
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/directshow.tzst -C directshow.tzst_2185623468
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/directshow.tzst
  + system32/amstream.dll
  + system32/qasf.dll
  + system32/qcap.dll
  + system32/qdvd.dll
  + system32/qedit.dll
  + system32/quartz.dll
  + syswow64/amstream.dll
  + syswow64/qasf.dll
  + syswow64/qcap.dll
  + syswow64/qdvd.dll
  + syswow64/qedit.dll
  + syswow64/quartz.dll
  Processing file: app/src/main/assets/wincomponents/directsound.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/directsound.tzst
  Staging directories: directsound.tzst_2935247533
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/directsound.tzst -C directsound.tzst_2935247533
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/directsound.tzst
  + system32/dsound.dll
  + syswow64/dsound.dll
  Processing file: app/src/main/assets/wincomponents/vcrun2005.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/vcrun2005.tzst
  Staging directories: vcrun2005.tzst_1266352530
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/vcrun2005.tzst -C vcrun2005.tzst_1266352530
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/vcrun2005.tzst
  + winsxs/amd64_microsoft.vc80.atl_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef/atl80.dll
  + winsxs/amd64_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef/msvcm80.dll
  + winsxs/amd64_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef/msvcp80.dll
  + winsxs/amd64_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef/msvcr80.dll
  + winsxs/amd64_microsoft.vc80.openmp_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef/vcomp.dll
  + winsxs/manifests/amd64_microsoft.vc80.atl_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <!-- Copyright © 1981-2001 Microsoft Corporation -->
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
        <noInheritable/>
        <assemblyIdentity type="win32" name="Microsoft.VC80.ATL" version="8.0.50727.6195" processorArchitecture="amd64" publicKeyToken="1fc8b3b9a1e18e3b"/>
        <file name="ATL80.dll" hash="c7e340d6abcbb023cbfd848a292f6583f4227105" hashalg="SHA1"/>
    </assembly>
  + winsxs/manifests/amd64_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef.manifest
    ﻿<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
        <noInheritable></noInheritable>
        <assemblyIdentity type="win32" name="Microsoft.VC80.CRT" version="8.0.50727.6195" processorArchitecture="amd64" publicKeyToken="1fc8b3b9a1e18e3b"></assemblyIdentity>
        <file name="msvcr80.dll" hash="9a7a82425c1537ecc4cad8de50725f7f8bac633d" hashalg="SHA1"><asmv2:hash xmlns:asmv2="urn:schemas-microsoft-com:asm.v2" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#"><dsig:Transforms><dsig:Transform Algorithm="urn:schemas-microsoft-com:HashTransforms.Identity"></dsig:Transform></dsig:Transforms><dsig:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"></dsig:DigestMethod><dsig:DigestValue>EvdbkudDuDM8UK+sGyo4dc+qIi0=</dsig:DigestValue></asmv2:hash></file>
        <file name="msvcp80.dll" hash="b72d761d7fec9ff01bca0200c8f699f871c4cb49" hashalg="SHA1"><asmv2:hash xmlns:asmv2="urn:schemas-microsoft-com:asm.v2" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#"><dsig:Transforms><dsig:Transform Algorithm="urn:schemas-microsoft-com:HashTransforms.Identity"></dsig:Transform></dsig:Transforms><dsig:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"></dsig:DigestMethod><dsig:DigestValue>M4I8mrEjPeXGXYr3b/e6RZkDrRA=</dsig:DigestValue></asmv2:hash></file>
        <file name="msvcm80.dll" hash="c81b0812912b05dee23aa617d9f391fcfc4a4fb2" hashalg="SHA1"><asmv2:hash xmlns:asmv2="urn:schemas-microsoft-com:asm.v2" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#"><dsig:Transforms><dsig:Transform Algorithm="urn:schemas-microsoft-com:HashTransforms.Identity"></dsig:Transform></dsig:Transforms><dsig:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"></dsig:DigestMethod><dsig:DigestValue>SRlXYUlfZ1gIomCSl12J5Z4N6o4=</dsig:DigestValue></asmv2:hash></file>
    </assembly>
  + winsxs/manifests/amd64_microsoft.vc80.openmp_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <!-- Copyright © 1981-2001 Microsoft Corporation -->
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
        <noInheritable/>
        <assemblyIdentity type="win32" name="Microsoft.VC80.OpenMP" version="8.0.50727.6195" processorArchitecture="amd64" publicKeyToken="1fc8b3b9a1e18e3b"/>
        <file name="vcomp.dll" hash="6e9b6c79df65fd69fb76fbb30a9ba9c8eb5acfa6" hashalg="SHA1"/>
    </assembly>
  + winsxs/manifests/x86_microsoft.vc80.atl_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <!-- Copyright © 1981-2001 Microsoft Corporation -->
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
        <noInheritable/>
        <assemblyIdentity type="win32" name="Microsoft.VC80.ATL" version="8.0.50727.6195" processorArchitecture="x86" publicKeyToken="1fc8b3b9a1e18e3b"/>
        <file name="ATL80.dll" hash="b5037a793da006b9cbf7497aad5886358a578095" hashalg="SHA1"/>
    </assembly>
  + winsxs/manifests/x86_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef.manifest
    ﻿<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
        <noInheritable></noInheritable>
        <assemblyIdentity type="win32" name="Microsoft.VC80.CRT" version="8.0.50727.6195" processorArchitecture="x86" publicKeyToken="1fc8b3b9a1e18e3b"></assemblyIdentity>
        <file name="msvcr80.dll" hash="4be3fcf046c4941d7b439da6eb642431b5ff497a" hashalg="SHA1"><asmv2:hash xmlns:asmv2="urn:schemas-microsoft-com:asm.v2" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#"><dsig:Transforms><dsig:Transform Algorithm="urn:schemas-microsoft-com:HashTransforms.Identity"></dsig:Transform></dsig:Transforms><dsig:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"></dsig:DigestMethod><dsig:DigestValue>Q4Uf5GRMCh6zH+gPQnd38fABXvo=</dsig:DigestValue></asmv2:hash></file>
        <file name="msvcp80.dll" hash="f96d6d587819a28ad84cd32783968c7f75169a49" hashalg="SHA1"><asmv2:hash xmlns:asmv2="urn:schemas-microsoft-com:asm.v2" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#"><dsig:Transforms><dsig:Transform Algorithm="urn:schemas-microsoft-com:HashTransforms.Identity"></dsig:Transform></dsig:Transforms><dsig:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"></dsig:DigestMethod><dsig:DigestValue>lzYUrJYi1eqc3Wj+vOMljRlkCLY=</dsig:DigestValue></asmv2:hash></file>
        <file name="msvcm80.dll" hash="b8f788f913a88543f10e1b400e9ae3896676c903" hashalg="SHA1"><asmv2:hash xmlns:asmv2="urn:schemas-microsoft-com:asm.v2" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#"><dsig:Transforms><dsig:Transform Algorithm="urn:schemas-microsoft-com:HashTransforms.Identity"></dsig:Transform></dsig:Transforms><dsig:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"></dsig:DigestMethod><dsig:DigestValue>BMaQ6zIuI2qb7Sk3oEQwxv2jsT0=</dsig:DigestValue></asmv2:hash></file>
    </assembly>
  + winsxs/manifests/x86_microsoft.vc80.openmp_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef.manifest
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <!-- Copyright © 1981-2001 Microsoft Corporation -->
    <assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">
        <noInheritable/>
        <assemblyIdentity type="win32" name="Microsoft.VC80.OpenMP" version="8.0.50727.6195" processorArchitecture="x86" publicKeyToken="1fc8b3b9a1e18e3b"/>
        <file name="vcomp.dll" hash="278ed8d9109deaf37b7430b928f9b0aa956b3d4d" hashalg="SHA1"/>
    </assembly>
  + winsxs/x86_microsoft.vc80.atl_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef/atl80.dll
  + winsxs/x86_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef/msvcm80.dll
  + winsxs/x86_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef/msvcp80.dll
  + winsxs/x86_microsoft.vc80.crt_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef/msvcr80.dll
  + winsxs/x86_microsoft.vc80.openmp_1fc8b3b9a1e18e3b_8.0.50727.6195_none_deadbeef/vcomp.dll
  Processing file: app/src/main/assets/wincomponents/vcrun2010.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/vcrun2010.tzst
  Staging directories: vcrun2010.tzst_739386669
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/vcrun2010.tzst -C vcrun2010.tzst_739386669
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/vcrun2010.tzst
  + system32/atl100.dll
  + system32/msvcp100.dll
  + system32/msvcr100.dll
  + system32/vcomp100.dll
  + syswow64/atl100.dll
  + syswow64/msvcp100.dll
  + syswow64/msvcr100.dll
  + syswow64/vcomp100.dll
  Processing file: app/src/main/assets/wincomponents/wmdecoder.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/wmdecoder.tzst
  Staging directories: wmdecoder.tzst_2522102930
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/wmdecoder.tzst -C wmdecoder.tzst_2522102930
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/wmdecoder.tzst
  + syswow64/wmadmod.dll
  + syswow64/wmasf.dll
  + syswow64/wmvcore.dll
  + syswow64/wmvdecod.dll
  Processing file: app/src/main/assets/wincomponents/xaudio.tzst
# Processing files: Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/xaudio.tzst
  Staging directories: xaudio.tzst_1524516210
  $ tar -xf Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/xaudio.tzst -C xaudio.tzst_1524516210
  + __path__.txt
    Winlator_10.0.apk_1338655795/app/src/main/assets/wincomponents/xaudio.tzst
  + system32/x3daudio1_0.dll
  + system32/x3daudio1_1.dll
  + system32/x3daudio1_2.dll
  + system32/x3daudio1_3.dll
  + system32/x3daudio1_4.dll
  + system32/x3daudio1_5.dll
  + system32/x3daudio1_6.dll
  + system32/x3daudio1_7.dll
  + system32/xactengine2_0.dll
  + system32/xactengine2_1.dll
  + system32/xactengine2_10.dll
  + system32/xactengine2_2.dll
  + system32/xactengine2_3.dll
  + system32/xactengine2_4.dll
  + system32/xactengine2_5.dll
  + system32/xactengine2_6.dll
  + system32/xactengine2_7.dll
  + system32/xactengine2_8.dll
  + system32/xactengine2_9.dll
  + system32/xactengine3_0.dll
  + system32/xactengine3_1.dll
  + system32/xactengine3_2.dll
  + system32/xactengine3_3.dll
  + system32/xactengine3_4.dll
  + system32/xactengine3_5.dll
  + system32/xactengine3_6.dll
  + system32/xactengine3_7.dll
  + system32/xapofx1_0.dll
  + system32/xapofx1_1.dll
  + system32/xapofx1_2.dll
  + system32/xapofx1_3.dll
  + system32/xapofx1_4.dll
  + system32/xapofx1_5.dll
  + system32/xaudio2_0.dll
  + system32/xaudio2_1.dll
  + system32/xaudio2_2.dll
  + system32/xaudio2_3.dll
  + system32/xaudio2_4.dll
  + system32/xaudio2_5.dll
  + system32/xaudio2_6.dll
  + system32/xaudio2_7.dll
  + syswow64/x3daudio1_0.dll
  + syswow64/x3daudio1_1.dll
  + syswow64/x3daudio1_2.dll
  + syswow64/x3daudio1_3.dll
  + syswow64/x3daudio1_4.dll
  + syswow64/x3daudio1_5.dll
  + syswow64/x3daudio1_6.dll
  + syswow64/x3daudio1_7.dll
  + syswow64/xactengine2_0.dll
  + syswow64/xactengine2_1.dll
  + syswow64/xactengine2_10.dll
  + syswow64/xactengine2_2.dll
  + syswow64/xactengine2_3.dll
  + syswow64/xactengine2_4.dll
  + syswow64/xactengine2_5.dll
  + syswow64/xactengine2_6.dll
  + syswow64/xactengine2_7.dll
  + syswow64/xactengine2_8.dll
  + syswow64/xactengine2_9.dll
  + syswow64/xactengine3_0.dll
  + syswow64/xactengine3_1.dll
  + syswow64/xactengine3_2.dll
  + syswow64/xactengine3_3.dll
  + syswow64/xactengine3_4.dll
  + syswow64/xactengine3_5.dll
  + syswow64/xactengine3_6.dll
  + syswow64/xactengine3_7.dll
  + syswow64/xapofx1_0.dll
  + syswow64/xapofx1_1.dll
  + syswow64/xapofx1_2.dll
  + syswow64/xapofx1_3.dll
  + syswow64/xapofx1_4.dll
  + syswow64/xapofx1_5.dll
  + syswow64/xaudio2_0.dll
  + syswow64/xaudio2_1.dll
  + syswow64/xaudio2_2.dll
  + syswow64/xaudio2_3.dll
  + syswow64/xaudio2_4.dll
  + syswow64/xaudio2_5.dll
  + syswow64/xaudio2_6.dll
  + syswow64/xaudio2_7.dll
